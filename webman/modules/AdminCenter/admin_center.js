/* All rights reserved. */

Ext.namespace("SYNO.SDS.AdminCenter");
Ext.apply(SYNO.SDS.AdminCenter, {
    USER_PAGING_SIZE: 50,
    GROUP_PAGING_SIZE: 25
});
SYNO.SDS.AdminCenter.Module = Ext.extend(Object, {
    constructor: Ext.emptyFn,
    activate: Ext.emptyFn,
    deactivate: function() {
        return true
    },
    focus: Ext.emptyFn,
    confirmCallback: function(a) {},
    getPanel: function() {
        return null
    },
    getAbsoluteURL: function(a) {
        return String.format("{0}/{1}", this.jsConfig.jsBaseURL, a)
    },
    getHelpParam: Ext.emptyFn
});
Ext.define("SYNO.SDS.AdminCenter.SearchField", {
    extend: "SYNO.SDS.Utils.SearchField",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = {
            width: 212,
            itemId: "search",
            listEmptyText: _T("search", "no_search_result"),
            tpl: this.getSearchResultTpl(),
            listAlign: ["tl-bl?", [-1, 1]],
            type: "app",
            listeners: {
                scope: this,
                select: this.onSearchResultSelect.createDelegate(this)
            },
            onStoreLoad: function(c) {
                this.tpl.appSection = 0;
                this.tpl.helpSection = 0;

                function d(f) {
                    var e = f.get("owner"),
                        h = f.get("id"),
                        g = f.get("type");
                    if (this.isFromCMS() && g === "help") {
                        return false
                    }
                    if (!this.findAppWindow().isCMSJoined && h === "SYNO.SDS.AdminCenter.Application?fn=SYNO.SDS.AdminCenter.CMS.Main") {
                        return false
                    }
                    return (e === "SYNO.SDS.AdminCenter.Application")
                }
                c.filterBy(d.createDelegate(this))
            }
        };
        Ext.apply(b, a);
        return b
    },
    clearLastQuery: function() {
        this.setValue("");
        this.lastQuery = ""
    },
    getSearchResultTpl: function() {
        return new Ext.XTemplate('<tpl for=".">', "<tpl if=\"type === 'app'\">", '<div class="x-combo-list-item" ext:qtip="{desc}">', '<img border="0" align="left" width="16px" height:"16px" src="{[this.getModuleIcon(values.id)]}" />', '<span class="topic">{title}</span>', "</div>", "</tpl>", "<tpl if=\"type === 'help'\">", '<tpl if="!(this.helpSection++)"><div class="section">{[_T("helpbrowser", "apptitle")]}</div></tpl>', '<div class="x-combo-list-item">', '<img border="0" align="left" width="16px" height="16px" src="{[SYNO.SDS.Utils.GetAppIcon("SYNO.SDS.HelpBrowser.Application", "TreeIcon")]}"></img>', '<span class="topic">{title}</span>', "</div>", "</tpl>", "</tpl>", {
            appSection: 0,
            helpSection: 0,
            getModuleIcon: this.getModuleIcon.createDelegate(this)
        })
    },
    getModuleIcon: function(c) {
        var b = "images/ControlPanel_16.png",
            a;
        if (true === SYNO.SDS.UIFeatures.IconSizeManager.getRetinaAndSynohdpackStatus()) {
            b = "images/ControlPanel_32.png"
        }
        a = this.findAppWindow().jsConfig.jsBaseURL + "/" + String.format(b, "16") + "?v=" + _S("fullversion");
        return a
    },
    onSearchResultSelect: function(d, a, b) {
        var c = {
            className: null,
            params: {}
        };
        switch (a.get("type")) {
            case "app":
                c = SYNO.SDS.Utils.ParseSearchID(a.get("id"));
                if (c.params && c.params.fn) {
                    this.findAppWindow().startModule(c.params.fn)
                }
                break;
            case "help":
                if (this.isFromCMS()) {
                    break
                }
                c.className = "SYNO.SDS.HelpBrowser.Application";
                c.params.topic = a.get("id");
                SYNO.SDS.AppLaunch(c.className, c.params);
                break;
            default:
                break
        }
    },
    isFromCMS: function() {
        return this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application"
    }
});
Ext.define("SYNO.SDS.AdminCenter.HomeScreenPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)]);
        this.addEvents("storeloaded", "screenviewchanged");
        this.relayEvents(this.getHomeScreenView(), ["storeloaded", "screenviewchanged"]);
        this.relayEvents(this.getBasicHomeScreenView(), ["storeloaded", "screenviewchanged"])
    },
    fillConfig: function(b) {
        var a = SYNO.SDS.UserSettings.getProperty("SYNO.SDS.AdminCenter.Application", "activeScreen") || SYNO.SDS.AdminCenter.Mode.ADVANCED_VIEW_ID;
        var c = {
            cls: "home-screen-panel",
            padding: "0 12px",
            layout: "fit",
            tbar: this.getTBar(a),
            items: {
                xtype: "container",
                layout: "card",
                itemId: "view-container",
                activeItem: a,
                items: [this.getBasicHomeScreenView(SYNO.SDS.AdminCenter.Mode.BASIC_VIEW_ID === a), this.getHomeScreenView(SYNO.SDS.AdminCenter.Mode.ADVANCED_VIEW_ID === a)],
                listeners: {
                    afterrender: {
                        fn: this.customSetActiveItem,
                        scope: this
                    },
                    resize: {
                        fn: this.onResizePanel,
                        scope: this,
                        buffer: 50
                    }
                }
            },
            listeners: {
                activate: {
                    fn: this.activateHandler,
                    scope: this
                },
                storeloaded: {
                    fn: b.owner.onHomeScreenReady,
                    scope: b.owner
                },
                screenviewchanged: {
                    fn: this.onHomeScreenViewChanged,
                    scope: this
                }
            }
        };
        Ext.apply(c, b);
        return c
    },
    onResizePanel: function(b, c, a) {
        this.getActiveView().setHeight.defer(200, this.getActiveView(), [a])
    },
    getTBar: function(c) {
        this.simpleModeLink = new Ext.Container({
            cls: "simple-mode-link",
            xtype: "container",
            items: [{
                xtype: "container",
                cls: "text",
                html: _T("controlpanel", "simple_mode")
            }, {
                xtype: "container",
                cls: "icon"
            }],
            listeners: {
                afterrender: {
                    fn: function(g) {
                        g.el.on("click", this.switchToSimpleMode, this)
                    },
                    scope: this
                }
            }
        });
        var b = {
                cls: "screen-mode-link",
                xtype: "box",
                listeners: {
                    afterrender: {
                        fn: function(g) {
                            g.el.on("click", this.switchToView.createDelegate(this, [g.mode, true]))
                        },
                        scope: this
                    }
                }
            },
            f = '<span class="link-font">{0}</span>',
            a = '<div class="icon"></div>',
            e = SYNO.SDS.AdminCenter.Mode.BASIC_VIEW_ID,
            d = SYNO.SDS.AdminCenter.Mode.ADVANCED_VIEW_ID;
        this[e + "ModeLink"] = new Ext.Container(Ext.apply(b, {
            mode: e,
            html: String.format(f, _T("controlpanel", "switch_basic_mode")) + a,
            hidden: (e === c)
        }));
        this[d + "ModeLink"] = new Ext.Container(Ext.apply(b, {
            mode: d,
            html: String.format(f, _T("controlpanel", "switch_advanced_mode")) + a,
            hidden: (d === c)
        }));
        return {
            xtype: "syno_toolbar",
            cls: "home-screen-tbar",
            items: [new SYNO.SDS.AdminCenter.SearchField({
                itemId: "search-field"
            }), "->", this.simpleModeLink, this.basicModeLink, this.advancedModeLink]
        }
    },
    customSetActiveItem: function() {
        this.getComponent("view-container").layout.setActiveItem = function(f, c) {
            var b = this.activeItem,
                d = this.container,
                g, a, e;
            f = d.getComponent(f);
            e = f.doLayout && (this.layoutOnCardChange || !f.rendered);
            g = d.activeCls || "active-view";
            a = d.activeTime || 200;
            if (c) {
                if (f && b !== f) {
                    if (b) {
                        b.removeClass(g);
                        b.hide.defer(a, b);
                        b.fireEvent("deactivate")
                    }
                }
                delete f.deferLayout;
                f.show.defer(a, f);
                f.addClass.defer(a + 50, f, [g]);
                this.activeItem = f;
                this.layout.defer(a, this);
                if (e) {
                    f.doLayout.defer(a, f)
                }
                f.fireEvent.defer(a, f, ["activate", f])
            } else {
                if (f && b !== f) {
                    if (b) {
                        b.removeClass(g);
                        b.hide();
                        if (b.hidden !== true) {
                            return false
                        }
                        b.fireEvent("deactivate")
                    }
                }
                delete f.deferLayout;
                f.show();
                this.activeItem = f;
                this.layout();
                f.addClass(g);
                if (e) {
                    f.doLayout()
                }
                f.fireEvent("activate", f)
            }
        }
    },
    switchToView: function(c, a) {
        var b = this.getActiveView().itemId;
        if (b === c) {
            return
        }
        this[c + "ModeLink"].hide();
        this[b + "ModeLink"].show();
        this.getViewContainer().layout.setActiveItem(c, a)
    },
    switchToSimpleMode: function() {
        this.owner.switchToSimpleMode()
    },
    getBasicHomeScreenView: function(a) {
        if (!this.basicScreenView) {
            this.basicScreenView = new SYNO.SDS.AdminCenter.BasicHomeScreenView({
                itemId: SYNO.SDS.AdminCenter.Mode.BASIC_VIEW_ID,
                cls: (a) ? "basic-homescreen-view active-view" : "basic-homescreen-view"
            })
        }
        return this.basicScreenView
    },
    getHomeScreenView: function(a) {
        if (this.homeScreenView) {
            return this.homeScreenView
        }
        this.homeScreenView = new SYNO.SDS.AdminCenter.HomeScreenView({
            itemId: SYNO.SDS.AdminCenter.Mode.ADVANCED_VIEW_ID,
            cls: (a) ? "advanced-homescreen-view active-view" : "advanced-homescreen-view"
        });
        return this.homeScreenView
    },
    onHomeScreenViewChanged: function() {
        var a = this.getTopToolbar().getComponent("search-field");
        a.clearLastQuery()
    },
    activateHandler: function() {
        this.getHomeScreenView().refreshBadge()
    },
    setModuleVisible: function(c, e, d) {
        var a = String.format("div[fn={0}]", c),
            b = this.getViewContainer();
        if (d) {
            b.getComponent(d).getEl().select(a).setVisibilityMode(Ext.Element.DISPLAY).setVisible(e)
        } else {
            this.getHomeScreenView().getEl().select(a).setVisibilityMode(Ext.Element.DISPLAY).setVisible(e);
            this.getBasicHomeScreenView().getEl().select(a).setVisibilityMode(Ext.Element.DISPLAY).setVisible(e)
        }
    },
    getViewContainer: function() {
        return this.getComponent("view-container")
    },
    getActiveView: function() {
        return this.getViewContainer().layout.activeItem
    },
    loadModuleData: function() {
        this.getHomeScreenView().loadModuleData();
        this.getBasicHomeScreenView().loadModuleData()
    }
});
Ext.define("SYNO.SDS.AdminCenter._HomeScreenView", {
    extend: "SYNO.ux.FleXcroll.DataView",
    shortcutIconSize: 64,
    moduleStoreUrl: "modules/modules.json",
    constructor: function(a) {
        this.badges = {};
        this.callParent([this.fillConfig(a)]);
        this.mon(SYNO.SDS.StatusNotifier, "badgenumget", this.badgeNumGetHandler, this)
    },
    fillConfig: function(a) {
        var b = {
            header: false,
            store: this.getModuleStore(),
            tpl: this.getMyTemplate(),
            cls: "home-screen-view",
            itemSelector: "div.item-wrap",
            listeners: {
                scope: this,
                click: this.itemClickHandler,
                afterrender: function(c) {
                    this.initDataViewMouseEvents(c)
                },
                activate: this.activateHandler,
                render: this.onDataViewRender
            }
        };
        Ext.apply(b, a);
        return b
    },
    getModuleStore: function() {
        if (this.moduleStore) {
            return this.moduleStore
        }
        this.moduleStore = new Ext.data.JsonStore({
            url: this.getAbsoluteURL(this.moduleStoreUrl),
            root: "listItems",
            fields: ["text", "formatedTitle", "items"],
            idProperty: "text",
            listeners: {
                scope: this,
                load: this.storeLoadHandler
            }
        });
        return this.moduleStore
    },
    loadModuleData: function() {
        if (!this.storeloaded) {
            this.getModuleStore().load()
        }
    },
    storeLoadHandler: function() {
        this.storeloaded = true;
        this.fireEvent("storeloaded", this.itemId);
        this.refreshBadge()
    },
    badgeNumGetHandler: function() {
        this.refreshBadge()
    },
    itemClickHandler: function(h, c, g, a) {
        var b, f, d, e;
        if (h.cancelClick || !g || !g.attributes) {
            a.preventDefault();
            return
        }
        b = g.attributes;
        if (b.fn && b.cate) {
            d = b.fn.value;
            f = b.cate.value;
            e = this.findItemByEl(h.getModuleStore(), g);
            if (d) {
                this.gotoModule(d)
            }
        }
        a.preventDefault()
    },
    activateHandler: function() {
        this.fireEvent("screenviewchanged");
        SYNO.SDS.UserSettings.setProperty("SYNO.SDS.AdminCenter.Application", "activeScreen", this.itemId)
    },
    gotoModule: function(b) {
        var a = this.findAppWindow(),
            c = a.getActivePage();
        a.switchToPageList();
        if (c && c.itemId === b) {
            a.launchPage(b)
        } else {
            a.setSkipDeactivateCheck();
            a.selectPage(b)
        }
    },
    onDataViewRender: function(a) {
        var b = this;
        a.dragZone = new Ext.dd.DragZone(a.getEl(), {
            ddGroup: "SDSShortCut",
            validateTarget: function(f, d, g) {
                var c = d.getTarget("li.launch-icon");
                if (SYNO.SDS.Desktop.el.id === d.getTarget().id || (c && Ext.fly(c).findParentNode(".sds-desktop-shortcut"))) {
                    return true
                }
                this.getProxy().setStatus(this.dropNotAllowed);
                return false
            },
            endDrag: function(c) {
                var d = this.getProxy();
                d.getEl().removeClass("sds-launch-icon-dragging-proxy")
            },
            onStartDrag: function(c, g) {
                var f = Ext.get(this.dragData.sourceEl).getBox();
                var e = SYNO.SDS.Desktop.getEl().getBox();
                var d = this.getProxy();
                d.getEl().addClass("sds-launch-icon-dragging-proxy");
                d.getEl().disableShadow();
                this.minX = e.x;
                this.minY = e.y;
                this.maxX = e.right - f.width;
                this.maxY = e.bottom - f.height;
                this.constrainX = true;
                this.constrainY = true
            },
            getDragData: function(e) {
                var f = e.getTarget(a.itemSelector, 10);
                var h, g, c = b.shortcutIconSize;
                if (f) {
                    h = f.cloneNode(true);
                    h.id = Ext.id();
                    g = b.findItemByEl(b.getModuleStore(), f);
                    if (!g || !g.iconCls) {
                        return
                    }
                    a.dragData = {
                        _fromControlPanel: true,
                        sourceEl: f,
                        repairXY: Ext.fly(f).getXY(),
                        ddel: h,
                        SDSShortCut: {
                            className: "SYNO.SDS.AdminCenter.Application",
                            title: g.text,
                            formatedTitle: g.formatedTitle,
                            icon: SYNO.SDS.ThemeProvider.getPath(String.format("images/shortcut_icons/{0}_{1}.png", g.iconCls.replace("icon-", "").replace(/-/g, "_"), c)),
                            param: {
                                fn: g.fn
                            },
                            removable: true
                        }
                    };
                    return a.dragData
                }
            },
            getRepairXY: function() {
                return this.dragData.repairXY
            }
        })
    },
    refreshBadge: function() {
        var a = this.IsAllowRelay();
        if (a) {
            return
        }
        if (!Ext.getClassByName("SYNO.SDS.PollingTask.BadgeInfo")) {
            return
        }
        SYNO.SDS.PollingTask.BadgeInfo.eachFnOfApp("SYNO.SDS.AdminCenter.Application", this.checkBadgeHandler, this)
    },
    checkBadgeHandler: function(d, e, f) {
        var c, b, a;
        c = this.getItemElByFn(d);
        if (c) {
            a = this.badges[d];
            b = this.findAppWindow().getBadgeNumByFn(d);
            if (Ext.isDefined(a)) {
                a.setNum(b);
                a.updateBadgePos()
            } else {
                if (b > 0) {
                    a = this.createBadge(c);
                    a.setNum(b);
                    this.badges[d] = a
                }
            }
        }
    },
    createBadge: function(b) {
        var a = new SYNO.SDS.Utils.Notify.Badge({
            renderTo: b,
            alignOffset: [2, 0],
            badgeWidth: 26,
            badgeHeight: 18,
            badgeClassName: "badge"
        });
        return a
    },
    getItemElByFn: function(b) {
        var a = String.format("div.item-wrap[fn={0}] .icon-image", b);
        if (this.el) {
            return this.el.child(a)
        }
        return null
    },
    initDataViewMouseEvents: function(a) {
        this.mon(a.getTemplateTarget(), "mousedown", this.onDataViewMouseDown, this, {
            dataView: a
        })
    },
    onDataViewMouseDown: function(a, c, b) {
        var d = b.dataView;
        d.cancelClick = false;
        this.mouseDownXY = a.getXY();
        this.mon(d.getTemplateTarget(), "mousemove", this.onDataViewMouseMove, this, {
            dataView: d
        })
    },
    onDataViewMouseMove: function(h, b, a) {
        var g = a.dataView;
        if (!this.mouseDownXY) {
            return
        }
        var f = Ext.dd.DragDropMgr.clickPixelThresh,
            i = h.getXY(),
            c = this.mouseDownXY,
            e = Math.abs(c[0] - i[0]),
            d = Math.abs(c[1] - i[1]);
        if (e <= f && d <= f) {
            return
        }
        delete this.mouseDownXY;
        g.cancelClick = true;
        this.mun(g.getTemplateTarget(), "mousemove", this.onDataViewMouseMove, this)
    },
    getMyTemplate: function() {
        var a = new Ext.XTemplate('<tpl for=".">', '<div class="category">', '<div class="category-header">', "{[SYNO.SDS.Utils.GetLocalizedString(values.text)]}", "</div>", '<tpl for="items">', '<div class="item-wrap" fn="{fn}" cate="{parent.text}" {[this.printDisplayString(values.fn, values.hidden)]}>', '<div class="icon-image syno-app-admin-center-icon-image" style="background-image: url(' + this.getIconRootPath("") + "{[this.getIconPath(values.iconCls)]}?v=" + _S("fullversion") + ');"></div>', '<div class="text">{[SYNO.SDS.Utils.GetLocalizedString(values.formatedTitle)]}</div>', "</div>", "</tpl>", "</div>", "</tpl>", '<div style="clear: both;"></div>', {
            printDisplayString: function(b, c) {
                if (c === true) {
                    return 'style="display: none;"'
                }
                if ((Ext.isDefined(SYNO.SDS.AppPrivilege[b]) && false === SYNO.SDS.AppPrivilege[b]) || false === SYNO.SDS.ServiceStatus[b]) {
                    return 'style="display: none;"'
                }
                return ""
            },
            getIconPath: function(b) {
                if (!b) {
                    return "images/tmp/construction.png"
                }
                return SYNO.SDS.ThemeProvider.getPath(String.format("images/home_icons/{0}.png", b.replace("icon-", "").replace(/-/g, "_")))
            }
        });
        return a
    },
    findItemByEl: function(a, e) {
        if (!e || !e.attributes) {
            return null
        }
        var b = e.attributes;
        if (!b.cate || !b.fn) {
            return null
        }
        var g = b.cate.value;
        var d = b.fn.value;
        var c = this.getModuleStore().getById(g);
        var f = null;
        Ext.each(c.json.items, function(j, h, i) {
            if (j.fn === d) {
                f = j;
                return false
            }
        }, this);
        return f
    },
    getAbsoluteURL: function(a) {
        return String.format("{0}/{1}", this.jsConfig.jsBaseURL, a)
    },
    getIconRootPath: function() {
        return SYNO.SDS.UIFeatures.IconSizeManager.getIconPath(this.jsConfig.jsBaseURL + "/", "AdminCenter")
    }
});
Ext.define("SYNO.SDS.AdminCenter._ClassicalHomeScreenView", {
    extend: "SYNO.SDS.AdminCenter._HomeScreenView",
    shortcutIconSize: 48
});
Ext.define("SYNO.SDS.AdminCenter.BasicHomeScreenView", {
    extend: "SYNO.SDS.AdminCenter._HomeScreenView",
    moduleStoreUrl: "modules/basic.modules.json"
});
SYNO.SDS.Injector.configure({
    getHomeScreenClass: {
        fn: function() {
            var a = SYNO.SDS.UserSettings.getProperty("Desktop", "desktopStyle");
            if (a === "classical") {
                return "SYNO.SDS.AdminCenter._ClassicalHomeScreenView"
            } else {
                return "SYNO.SDS.AdminCenter._HomeScreenView"
            }
        }
    }
});
SYNO.SDS.AdminCenter.HomeScreenView = Ext.getClassByName(SYNO.SDS.Injector.resolve("getHomeScreenClass")) || SYNO.SDS.AdminCenter._HomeScreenView;
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.DashboardBlock", {
    extend: "Ext.Container",
    title: "",
    iconCls: "",
    cls: "dashboard-block",
    constructor: function(a) {
        Ext.apply(this, a);
        var b = {
            xtype: "container",
            cls: this.cls,
            overCls: "mouse-on",
            width: a.width,
            height: a.height,
            style: a.style,
            items: [this.getHeader(), this.getBody()]
        };
        SYNO.SDS.AdminCenter.SimpleMode.DashboardBlock.superclass.constructor.call(this, Ext.apply(b, a))
    },
    getHeader: function() {
        if (this.header) {
            return this.header
        }
        this.header = new Ext.Container({
            layout: "hbox",
            cls: "block-header " + this.iconCls,
            items: [{
                xtype: "container",
                cls: "block-title",
                flex: 1,
                html: this.title
            }, {
                xtype: "container",
                cls: "block-launcher",
                width: 24,
                listeners: {
                    afterrender: {
                        fn: function(a) {
                            this.launcher = a;
                            a.el.on("click", this.onLaunchApp, this)
                        },
                        scope: this
                    }
                }
            }]
        });
        return this.header
    },
    getBody: function() {
        if (!this.body) {
            this.body = new Ext.Container({})
        }
        return this.body
    },
    onLaunchApp: function() {}
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.MiniDashboardBlock", {
    extend: "SYNO.SDS.AdminCenter.SimpleMode.DashboardBlock",
    cls: "mini-dashboard-block",
    constructor: function(a) {
        Ext.apply(this, a);
        var b = {
            xtype: "container",
            cls: "mini-dashboard-block " + this.cls,
            width: this.width,
            height: this.height,
            style: this.style,
            items: [this.getHeader(), this.getBody()]
        };
        SYNO.SDS.AdminCenter.SimpleMode.MiniDashboardBlock.superclass.constructor.call(this, b)
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.SysHealthBlock", {
    extend: "SYNO.SDS.AdminCenter.SimpleMode.MiniDashboardBlock",
    iconCls: "icon-sys-health",
    STATUS_TYPE_OK: 0,
    STATUS_TYPE_DANGER: 1,
    title: _T("status", "system_health"),
    relatedApp: SYNO.SDS.SystemInfoApp.SystemHealthDefaultApp,
    constructor: function(a) {
        SYNO.SDS.AdminCenter.SimpleMode.SysHealthBlock.superclass.constructor.call(this, a);
        this.statusParser = new SYNO.SDS.SystemInfoApp.SystemHealthStatusParser()
    },
    getBody: function() {
        if (!this.body) {
            this.initFields();
            this.body = new Ext.Container({
                cls: "sys-health-block",
                items: [this.statusFiled, this.descField]
            })
        }
        return this.body
    },
    initFields: function() {
        this.statusFiled = new SYNO.ux.DisplayField({
            cls: "status-text",
            value: _T("common", "loading")
        });
        this.descField = new SYNO.ux.DisplayField({
            cls: "status-desc",
            value: ""
        })
    },
    setStatus: function(a, d) {
        var b, c;
        if (a === "warning") {
            b = "orange"
        } else {
            if (a === "emergency") {
                b = "red"
            } else {
                b = "green"
            }
        }
        c = String.format('<span class="{0}">{1}</span>', b, d);
        this.statusFiled.setValue(c)
    },
    setHeaderIcon: function(a) {
        var b = "";
        if (a === "warning") {
            b = "warning"
        } else {
            if (a === "emergency") {
                b = "emergency"
            }
        }
        this.header.el.removeClass(["warning", "emergency"]);
        this.header.el.addClass(b)
    },
    setDesc: function(a) {
        a = a.replace("<br/>", "");
        this.descField.setValue(a);
        this.descField.el.dom.setAttribute("ext:qtip", a)
    },
    setRelatedApp: function(a) {
        if (a.appInstance === "SYNO.SDS.AdminCenter.Application") {
            this.launcher.hide()
        } else {
            this.launcher.show()
        }
        this.relatedApp = a
    },
    onActivate: function() {
        this.requestStatus()
    },
    onLaunchApp: function() {
        SYNO.SDS.AppLaunch(this.relatedApp.appInstance, this.relatedApp.launchParam)
    },
    requestStatus: function() {
        this.apiReq = this.addAjaxTask({
            url: "modules/SystemInfoApp/SystemInfo.cgi",
            method: "GET",
            params: {
                query: "systemHealth"
            },
            autoJsonDecode: true,
            callback: function(a, d, c) {
                if (!d || this.isDestroyed) {
                    return
                }
                var b = this.statusParser.parseResp(c);
                this.setStatus(b.status, b.title);
                this.setHeaderIcon(b.status);
                this.setDesc(b.str);
                this.setRelatedApp(b.appSetting)
            },
            scope: this
        });
        this.apiReq.start()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Update");
Ext.define("SYNO.SDS.AdminCenter.Update.UploadDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.uploadInfo = null;
        this.owner = a.owner;
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("update", "update_dsm_manually"),
            resizable: false,
            closable: true,
            width: 600,
            height: 350,
            useStatusBar: true,
            padding: "0px 20px 0px 20px",
            items: this.getItems(),
            layout: {
                type: "vbox",
                align: "stretch"
            },
            buttons: [{
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.onSubmit
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: function() {
                    this.close()
                }
            }]
        }, a);
        this.callParent([b])
    },
    isHybridHA: function() {
        if (this._S("ha_running") && this._S("is_hybrid_ha")) {
            return true
        } else {
            return false
        }
    },
    getItems: function() {
        var a = [];
        a.push(this.createMainUploadForm());
        if (this.isHybridHA()) {
            a.push(this.createPassiveUploadForm())
        }
        a.push({
            xtype: "box",
            flex: 1
        });
        a.push({
            xtype: "syno_displayfield",
            value: _T("update", "update_notice")
        });
        return a
    },
    createMainUploadForm: function() {
        return new SYNO.SDS.Utils.FormPanel({
            itemId: "upload_main",
            fileUpload: true,
            trackResetOnLoad: true,
            frame: false,
            border: false,
            webapi: {
                api: "SYNO.Core.Upgrade.Patch",
                method: "upload",
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                value: _T("update", "update_notice_manual")
            }, {
                xtype: "textfield",
                name: "target",
                value: "active",
                hidden: true
            }, {
                xtype: "syno_filebutton",
                fieldLabel: (this.isHybridHA()) ? _T("update", "patch_for_active") : _T("itunes", "itunes_path"),
                name: "file"
            }],
            onApiSuccess: Ext.createDelegate(this.onMainUploadSuccess, this),
            onApiFailure: Ext.createDelegate(this.onUploadFailed, this)
        })
    },
    createPassiveUploadForm: function() {
        return new SYNO.SDS.Utils.FormPanel({
            itemId: "upload_passive",
            fileUpload: true,
            trackResetOnLoad: true,
            frame: false,
            border: false,
            webapi: {
                api: "SYNO.Core.Upgrade.Patch",
                method: "upload",
                version: 1
            },
            items: [{
                xtype: "textfield",
                name: "target",
                value: "passive",
                hidden: true
            }, {
                xtype: "syno_filebutton",
                fieldLabel: _T("update", "patch_for_passive"),
                name: "file"
            }],
            onApiSuccess: Ext.createDelegate(this.onPassiveUploadSuccess, this),
            onApiFailure: Ext.createDelegate(this.onUploadFailed, this)
        })
    },
    onSubmit: function() {
        var e = this,
            a = this.get("upload_main"),
            c = this.get("upload_passive"),
            f = e.module.appWin,
            b = _T("update", "update_confirm_manual_upgrade");
        var d = function(g) {
            if ("yes" === g) {
                this.setStatusBusy({
                    text: _T("update", "update_uploading")
                });
                a.upload()
            }
        };
        if (!e.validFileName(a.getForm().findField("file"))) {
            return
        }
        if (Ext.isDefined(c) && !e.validFileName(c.getForm().findField("file"))) {
            return
        }
        e.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.Network.Interface",
                    method: "list",
                    version: 1
                }, {
                    api: "SYNO.Core.Network",
                    version: 1,
                    method: "get"
                }]
            },
            scope: e,
            callback: function(i, h, g) {
                if (e.updateTab.NeedToShowDNSWarning(i, h, g)) {
                    b += ('<br><br><span class="note-font">' + _T("common", "note") + "</span> : " + _T("update", "dns_ip_to_self"))
                }
                f.getMsgBox().confirm(_T("tree", "leaf_update"), b, d, e)
            }
        })
    },
    validFileName: function(c) {
        if (!c) {
            return false
        }
        if (!c.isDirty()) {
            this.getMsgBox().alert(_T("tree", "leaf_update"), _T("error", "error_nochoosefile"));
            return false
        } else {
            var b = c.getValue();
            var a = b.substr(b.length - 4, 4);
            if (a != ".pat") {
                this.getMsgBox().alert(_T("tree", "leaf_update"), _T("update", "error_filename"));
                return false
            }
        }
        return true
    },
    onMainUploadSuccess: function(e, d, c) {
        var b = this,
            a = this.get("upload_passive");
        if (b.isHybridHA()) {
            a.upload();
            return
        }
        b.clearStatusBusy();
        b.readyForUpgrade(d)
    },
    onPassiveUploadSuccess: function(d, c, b) {
        var a = this;
        a.clearStatusBusy();
        a.readyForUpgrade(c)
    },
    onUploadFailed: function(d, c, b) {
        var a = this;
        a.clearStatusBusy();
        a.getMsgBox().alert(_T("tree", "leaf_update"), SYNO.API.getErrorString(c.code), function() {
            a.close()
        })
    },
    readyForUpgrade: function(b) {
        var a = this;
        a.uploadInfo = b;
        a.close()
    },
    getPathInfo: function() {
        return this.uploadInfo
    },
    isPatchReady: function() {
        if (!Ext.isEmpty(this.uploadInfo)) {
            return true
        }
        return false
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Update");
Ext.define("SYNO.SDS.AdminCenter.Update.SettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.panel = new SYNO.SDS.AdminCenter.Update.SettingDialog.FormPanel(Ext.apply(b, {
            window_: this
        }));
        var d = b.module.appWin.getKnownAPI("SYNO.Core.Upgrade.Setting");
        var a = ((d.maxVersion >= 2 && !b.module.appWin._S("is_hybrid_ha")) ? 412 : 328);
        var c = Ext.apply({
            dsmStyle: "v5",
            title: _T("update", "update_adv_setting"),
            resizable: false,
            closable: true,
            height: a,
            autoWidth: true,
            useStatusBar: false,
            items: this.panel
        }, b);
        this.callParent([c])
    },
    onOpen: function() {
        this.panel.loadForm();
        this.callParent()
    },
    isDataChange: function() {
        if (true === this.panel.DataChange) {
            return true
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Update.SettingDialog.FormPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.apiInfo = {};
        var a = new Ext.data.ArrayStore({
                fields: ["display", "value"],
                data: [
                    [_T("update", "autoupdate_type_all"), "all"],
                    [_T("update", "autoupdate_type_hotfix"), "hotfix"],
                    [_T("update", "autoupdate_type_download"), "download"]
                ]
            }),
            d = this.module.appWin.getKnownAPI("SYNO.Core.Upgrade.Setting");
        this.apiInfo = (Ext.isDefined(d) && !this.findAppWindow()._S("is_hybrid_ha")) ? d : {
            maxVersion: 1,
            minVersion: 1
        };
        var c = Ext.apply({
            width: 650,
            height: (this.apiInfo.maxVersion >= 2 ? 376 : 292),
            border: false,
            webapi: {
                api: "SYNO.Core.Upgrade.Setting",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: this.apiInfo.maxVersion
            },
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "ok"),
                scope: this,
                handler: this.applyHandler
            }, {
                xtype: "syno_button",
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.cancelHandler
            }],
            items: [{
                xtype: "syno_radio",
                name: "upgrade_type",
                itemId: "update_all",
                inputValue: "all",
                boxLabel: _T("update", "upgrade_all"),
                listeners: {
                    check: this.updateOptionStore,
                    scope: this
                }
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("update", "update_all_desc")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: '<span class="green-status">' + _T("common", "note") + ": </span>" + _T("update", "upgrade_all_desc_note")
            }, {
                xtype: "syno_radio",
                name: "upgrade_type",
                itemId: "update_hotfix",
                inputValue: "hotfix",
                boxLabel: _T("update", "update_security"),
                listeners: {
                    check: this.updateOptionStore,
                    scope: this
                }
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("update", "update_security_desc")
            }]
        }, b);
        if (this.apiInfo.maxVersion < 2) {
            c.items.push({
                xtype: "syno_checkbox",
                name: "auto_download",
                hidden: this._S("diskless"),
                boxLabel: _T("update", "autoupdate")
            })
        } else {
            c.items.push({
                xtype: "syno_checkbox",
                name: "autoupdate_enable",
                hidden: this._S("diskless"),
                boxLabel: _T("update", "autoupdate_enable")
            }, {
                xtype: "syno_combobox",
                name: "autoupdate_type",
                itemId: "update_option",
                indent: 1,
                hideLabel: true,
                width: 526,
                valueField: "value",
                displayField: "display",
                store: a,
                listeners: {
                    select: this.updateScheduleLabel,
                    scope: this
                }
            }, {
                xtype: "syno_compositefield",
                name: "autoupdate_settings",
                labelWidth: 170,
                indent: 1,
                itemId: "schedule_settings",
                fieldLabel: _T("update", "autoupdate_time_desc"),
                items: [{
                    xtype: "syno_schedulefield",
                    name: "week_day",
                    allowBlank: false,
                    editable: false,
                    width: 205
                }, {
                    xtype: "box",
                    width: 20
                }, {
                    xtype: "syno_combobox",
                    name: "hour",
                    width: 60,
                    displayField: "display",
                    valueField: "value",
                    store: SYNO.SDS.Utils.createTimeItemStore("hour")
                }, {
                    xtype: "syno_displayfield",
                    value: ":",
                    width: 6
                }, {
                    xtype: "syno_combobox",
                    name: "minute",
                    width: 60,
                    displayField: "display",
                    valueField: "value",
                    store: SYNO.SDS.Utils.createTimeItemStore("min")
                }]
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: '<span class="green-status">' + _T("common", "note") + ": </span>" + _T("update", "autoupdate_schedule_desc")
            })
        }
        this.callParent([c]);
        if (this.apiInfo.maxVersion >= 2) {
            this.on("afterlayout", function(e, f) {
                this.checkEnableAutoupdate = new SYNO.ux.Utils.EnableCheckGroup(e.getForm(), "autoupdate_enable", ["autoupdate_type", "autoupdate_settings"])
            })
        }
        this.window_ = b.window_
    },
    cancelHandler: function() {
        this.window_.close()
    },
    applyHandler: function() {
        if (false === this.getForm().isDirty()) {
            this.window_.close();
            return
        }
        this.callParent(arguments);
        this.DataChange = true
    },
    applyForm: function() {
        var e = "set",
            b = this.getForm();
        if (false === this.onBeforeAction(b, "")) {
            return false
        }
        var a = b.getValues(false, "set");
        var d = this.constructApplyParams(a);
        if (this.apiInfo.maxVersion >= 2) {
            var c = {
                week_day: d[0].params.week_day,
                hour: d[0].params.hour,
                minute: d[0].params.minute
            };
            d[0].params.schedule = c;
            delete d[0].params.week_day;
            delete d[0].params.hour;
            delete d[0].params.minute
        }
        d = d.concat(this.getApiArray("get"));
        d = this.processParams(e, d);
        this.sendAjaxRequest(e, d)
    },
    updateOptionStore: function(b, a) {
        var c = this.getComponent("update_option"),
            d = [];
        if (this.apiInfo.maxVersion < 2) {
            return
        }
        if (!a) {
            return
        }
        if ("update_hotfix" === b.getItemId()) {
            d = [
                [_T("update", "autoupdate_type_hotfix"), "hotfix"],
                [_T("update", "autoupdate_type_download"), "download"]
            ];
            if ("all" === c.getValue()) {
                c.setValue("hotfix")
            }
        } else {
            d = [
                [_T("update", "autoupdate_type_all"), "all"],
                [_T("update", "autoupdate_type_hotfix"), "hotfix"],
                [_T("update", "autoupdate_type_download"), "download"]
            ]
        }
        c.store.loadData(d)
    },
    updateScheduleLabel: function(c, a, b) {
        var d = this.getComponent("schedule_settings").label.dom.id;
        if (this.apiInfo.maxVersion < 2) {
            return
        }
        if (!d) {
            return
        }
        if (!a.data.value) {
            return
        }
        if ("download" === a.data.value) {
            Ext.fly(d).update((_T("service", "service_dl_start_desc") + ":"));
            return
        }
        Ext.fly(d).update((_T("update", "autoupdate_time_desc") + ":"))
    },
    processReturnData: function(e, b, a) {
        var c = b.result[0].data,
            d;
        if ("set" === e) {
            this.window_.close()
        } else {
            if (this.apiInfo.maxVersion >= 2) {
                if (Ext.isDefined(c) && Ext.isDefined(c.schedule) && Ext.isDefined(c.schedule.week_day) && Ext.isDefined(c.schedule.hour) && Ext.isDefined(c.schedule.minute)) {
                    c.week_day = c.schedule.week_day;
                    c.hour = c.schedule.hour;
                    c.minute = c.schedule.minute
                }
                d = this.getComponent("schedule_settings").label.dom.id;
                if (d && c.autoupdate_type) {
                    if ("download" === c.autoupdate_type) {
                        Ext.fly(d).update((_T("service", "service_dl_start_desc") + ":"))
                    } else {
                        Ext.fly(d).update((_T("update", "autoupdate_time_desc") + ":"))
                    }
                }
            }
            this.callParent(arguments)
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Update_Reset");
SYNO.SDS.AdminCenter.Update_Reset._init_DesktopProgress = function() {
    Ext.define("SYNO.SDS.AdminCenter.Update_Reset.ProgressCircle", {
        extend: "SYNO.SDS.Utils.canvas.circlegradient",
        constructor: function(a) {
            var b = this;
            a = a || {};
            Ext.applyIf(a, {
                radius: 160,
                gradientWidth: 24,
                height: 320,
                width: 320,
                fallbackColor: "#FFFFFF",
                stopColor: "rgba(255, 255, 255, 0.75)",
                middleColor: "rgba(255, 255, 255, 0.75)",
                startColor: "rgba(255, 255, 255, 0.75)",
                fillColor: "rgba(255, 255, 255, 0.15)",
                fontColor: "#FFFFFF",
                canvasConfig: {
                    height: 320,
                    width: 320
                }
            });
            b.callParent(arguments)
        },
        updateLabel: function(c) {
            var b = this,
                a = '<span class="progress-chart-label-big">{0}</span>{1}';
            c = Ext.isNumber(c) ? Math.min(c, 1) : 1;
            b.label.addClass("progress-chart-label");
            b.label.setStyle({
                color: b.fontColor
            });
            b.label.update(String.format(a, Math.ceil(c * 100), "%"));
            b.label[(c === 1) ? "addClass" : "removeClass"]("syno-ux-circle-canvas-gradient-label-maxValue")
        }
    });
    Ext.define("SYNO.SDS.AdminCenter.Update_Reset.CountDownCircle", {
        extend: "SYNO.SDS.Utils.canvas.circlegradient",
        constructor: function(a) {
            var b = this;
            a = a || {};
            Ext.applyIf(a, {
                radius: 160,
                gradientWidth: 24,
                height: 320,
                width: 320,
                fallbackColor: "#FFFFFF",
                startColor: "rgba(255, 255, 255, 0)",
                middleColor: "rgba(255, 255, 255, 0.38)",
                stopColor: "rgba(255, 255, 255, 0.75)",
                fillColor: "rgba(255, 255, 255, 0)",
                fontColor: "#FFFFFF",
                rotateAngle: 0,
                startTime: new Date().getTime(),
                durationTime: 600 * 1000,
                canvasConfig: {
                    height: 320,
                    width: 320
                }
            });
            b.callParent(arguments)
        },
        updateLabel: function() {
            var c = this,
                a = new Date().getTime(),
                b = 0,
                d = 0;
            d = Math.max(Math.floor((c.durationTime + c.startTime - a) / 1000), 0);
            b = Math.floor(d / 60);
            if (b < 10) {
                b = "0" + b
            }
            d = d % 60;
            if (d < 10) {
                d = "0" + d
            }
            c.label.addClass("progress-chart-label");
            c.label.setStyle({
                color: c.fontColor
            });
            c.label.update('<span class="progress-chart-label-countdown">' + b + ":" + d + "</span>")
        },
        draw: function() {
            var a = this;
            a.callParent([0.9]);
            a.rotateAngle += 1;
            a.rotateAngle %= 360;
            (function() {
                a.draw()
            }).defer(30)
        }
    })
};
Ext.define("SYNO.SDS.AdminCenter.Update_Reset.DesktopProgress", {
    extend: "Ext.Container",
    constructor: function(a) {
        var c = this;
        c.titleId = Ext.id();
        c.charId = Ext.id();
        c.statusId = Ext.id();
        c.msg = "";
        if (!Ext.isEmpty(SYNO.SDS.AdminCenter.Update_Reset._init_DesktopProgress)) {
            SYNO.SDS.AdminCenter.Update_Reset._init_DesktopProgress();
            delete SYNO.SDS.AdminCenter.Update_Reset._init_DesktopProgress
        }
        c.exposeMask = Ext.getBody().createChild({
            tag: "div",
            id: "sds-update_Reset-DesktopProgress",
            cls: "syno-update-reset desktop-mask"
        });
        var b = {
            renderTo: "sds-update_Reset-DesktopProgress",
            cls: "syno-update-reset progress",
            html: '<div class="progress-title" id = ' + c.titleId + '></div><div class="progress-chart" id=' + c.charId + '></div><div class="progress-status" id=' + c.statusId + "></div>",
            items: []
        };
        SYNO.SDS.AdminCenter.Update_Reset.DesktopProgress.superclass.constructor.call(c, b)
    },
    init: function() {
        if (true === this.HasInit) {
            return
        }
        SYNO.SDS.DeskTopManager.hideAll();
        this.show();
        this.exposeMask.setStyle({
            "z-index": 1000
        });
        this.HasInit = true
    },
    startCountDown: function(e, d, a) {
        var c = this;
        this.init();
        if (Ext.isDefined(c.progressCircle)) {
            delete c.progressCircle;
            Ext.fly(c.charId).update("");
            c.stopDeferUpdate()
        }
        var b = new SYNO.SDS.AdminCenter.Update_Reset.CountDownCircle({
            renderTo: this.charId,
            durationTime: a * 1000
        });
        Ext.fly(c.titleId).update(e);
        Ext.fly(c.statusId).update(d);
        b.draw()
    },
    setProgress: function(d, c, b) {
        var a = this;
        a.init();
        if (!Ext.isDefined(a.progressCircle)) {
            a.progressCircle = new SYNO.SDS.AdminCenter.Update_Reset.ProgressCircle({
                renderTo: a.charId
            })
        }
        Ext.fly(a.titleId).update(d);
        a.msg = c;
        a.startDeferUpdate();
        a.progressCircle.draw(Math.min(b / 100, 1))
    },
    updateMsg: function(b) {
        var a = this;
        a.init();
        a.msg = b;
        Ext.fly(a.statusId).update(b)
    },
    hide: function() {
        this.HasInit = false;
        this.callParent(arguments);
        SYNO.SDS.DeskTopManager.showDesktop(false, true)
    },
    startDeferUpdate: function() {
        var a = this;
        if (Ext.isDefined(a.deferUpdateStarted)) {
            return
        }
        a.deferUpdateStarted = true;
        a.DeferUpdateMsg(0)
    },
    stopDeferUpdate: function() {
        delete this.deferUpdateStarted
    },
    DeferUpdateMsg: function(a) {
        var b = this,
            c = b.msg;
        if (!Ext.isDefined(b.deferUpdateStarted)) {
            return
        }
        if (!Ext.isEmpty(c)) {
            c += '<span style="width: 30px; display: inline-block; text-align: left; padding-left: 3px">';
            c += new Array(a + 2).join(".");
            c += "</span>";
            Ext.fly(b.statusId).update(c);
            a = (a + 1) % 3
        } else {
            a = 0
        }(function() {
            b.DeferUpdateMsg(a)
        }).defer(1000)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Update");
SYNO.SDS.AdminCenter.Update.SECONDS_REBOOT = 600;
Ext.define("SYNO.SDS.AdminCenter.Update.UpdateTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    overallPollingInterval: 5,
    constructor: function(a) {
        this.overAllStatus = null;
        this.lastDSMInfo = null;
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.setStatusBar(this.highlightText(_T("update", "check_new_dsm"), "green"))
    },
    fillConfig: function(d) {
        var c = "https://www.synology.com/support/download/" + this._D("upnpmodelname");
        var a = String.format("<a href='{0}' target='blank'>{1}</a>", c, _T("update", "update_website"));
        var g = _T("update", "update_desc1") + String.format(_T("update", "update_desc2"), a);
        this._downloadBtnID = Ext.id();
        this._downloadMsgID = Ext.id();
        var f = d.module.appWin.getKnownAPI("SYNO.Core.System");
        var b = f.maxVersion >= 2 ? "firmware" : "overview";
        var e = {
            title: _T("tree", "leaf_update"),
            itemId: "UpdateTab",
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.System",
                methods: {
                    get: "info"
                },
                params: {
                    get: {
                        type: b
                    }
                },
                version: f.maxVersion
            },
            items: [{
                xtype: "syno_displayfield",
                value: g
            }, {
                xtype: "syno_displayfield",
                cls: SYNO.SDS.Utils.SelectableCLS,
                fieldLabel: _T("common", "ds_model"),
                name: "model"
            }, {
                xtype: "syno_displayfield",
                cls: SYNO.SDS.Utils.SelectableCLS,
                fieldLabel: _T("update", "update_version"),
                name: "firmware_ver"
            }, {
                xtype: "syno_displayfield",
                cls: SYNO.SDS.Utils.SelectableCLS,
                fieldLabel: _T("update", "update_date"),
                name: "firmware_date"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("tcpip", "wimax_status"),
                itemId: "statusBar",
                value: this.highlightText(_T("update", "check_new_dsm"), "green")
            }, {
                xtype: "syno_compositefield",
                width: 575,
                items: [{
                    xtype: "syno_button",
                    text: _T("update", "update_btn_download"),
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    id: this._downloadBtnID,
                    scope: this
                }, {
                    xtype: "syno_displayfield",
                    id: this._downloadMsgID,
                    value: ""
                }]
            }, {
                xtype: "box",
                height: "16px"
            }, {
                xtype: "panel",
                layout: "column",
                border: false,
                itemId: "buttons",
                items: [{
                    xtype: "syno_button",
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    disabled: this._S("demo_mode"),
                    text: _T("update", "update_dsm_manually"),
                    scope: this,
                    itemId: "upload_btn",
                    handler: this.openUploadDialog
                }, {
                    xtype: "box",
                    height: "10px",
                    width: "10px"
                }, {
                    xtype: "syno_button",
                    disabled: this._S("is_hybrid_ha"),
                    text: _T("update", "update_adv_setting"),
                    scope: this,
                    handler: this.preOpenSettingDialog
                }]
            }]
        };
        Ext.apply(e, d);
        return e
    },
    initEvents: function() {
        var a = this;
        a.callParent(arguments);
        a.mon(a.ownerCt, "activate", a.startOverallStatusPolling, a);
        a.mon(a, "activate", a.startOverallStatusPolling, a);
        a.mon(a.ownerCt, "deactivate", a.stopOverallStatusPolling, a);
        a.mon(a, "deactivate", a.stopOverallStatusPolling, a)
    },
    checkGlusterUpgradable: function(d, b, a) {
        var e = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.CMS.Info", "get");
        if (!e) {
            return
        }
        if ("no" === _D("gfssupportmanupdate", "no") && true === e.joined && e.additional && 0 < e.additional.gluster_role) {
            var c = _TT("SYNO.SDS.GlusterfsMgmt.Instance", "cms", "upgrade_dsm_cms_only");
            this.getForm().getEl().parent().mask(c, "syno-ux-mask-info")
        }
    },
    processParams: function(b, a) {
        a = this.callParent(arguments);
        a = a.concat([{
            api: "SYNO.Core.CMS.Info",
            method: "get",
            version: 1,
            params: {
                additional: ["gluster_role"]
            }
        }]);
        return a
    },
    processReturnData: function(c, b, a) {
        this.callParent(arguments);
        this.CheckLastDSMInfo(false);
        this.checkGlusterUpgradable(c, b)
    },
    highlightText: function(b, a) {
        if (a === "green" || a === "red" || a === "blue") {
            return String.format('<font class="{0}-status">{1}</font>', a, b)
        }
        return String.format('<font color="{0}">{1}</font>', a, b)
    },
    openUploadDialog: function() {
        var b = this,
            a = new SYNO.SDS.AdminCenter.Update.UploadDialog({
                owner: b.module.appWin,
                module: b.module,
                updateTab: b
            });
        b.mon(a, "close", function(c) {
            if (c.isPatchReady()) {
                b.performUpgrade("patch", c.getPathInfo())
            }
        }, b, {
            single: true
        });
        a.open()
    },
    preOpenSettingDialog: function() {
        var a = this.module.appWin.getMsgBox();
        this.sendWebAPI({
            api: "SYNO.Core.Upgrade.AutoUpgrade",
            method: "status",
            version: 1,
            scope: this,
            callback: function(e, b, d, c) {
                if (e && b && b.autoupdate_status && "preparing" === b.autoupdate_status) {
                    a.confirm(_T("update", "autoupdate_title"), _T("update", "autoupdate_cancel_confirm_text"), this.cancelAutoUpdate, this);
                    return
                }
                this.openSettingDialog();
                return
            }
        })
    },
    cancelAutoUpdate: function(b) {
        if ("yes" !== b) {
            this.openSettingDialog();
            return
        }
        var a = this.module.appWin.getMsgBox(),
            c = _T("update", "autoupdate_cancel_failed");
        this.sendWebAPI({
            api: "SYNO.Core.Upgrade.AutoUpgrade",
            method: "cancel",
            version: 1,
            scope: this,
            callback: function(g, d, f, e) {
                if (!g) {
                    if (d && d.code) {
                        c = SYNO.API.getErrorString(d.code)
                    }
                } else {
                    c = _T("update", "autoupdate_cancel_success")
                }
                a.alert(_T("update", "autoupdate_title"), c, this.openSettingDialog, this);
                return
            }
        })
    },
    openSettingDialog: function() {
        var a = new SYNO.SDS.AdminCenter.Update.SettingDialog({
            owner: this.module.appWin,
            module: this.module
        });
        this.mon(a, "close", function(b) {
            if (b.isDataChange()) {
                this.cleanOverallStatus();
                this.CheckLastDSMInfo(true)
            }
        }, this, {
            single: true
        });
        a.open()
    },
    CheckLastDSMInfo: function(a) {
        var b = this;
        if (!Ext.isEmpty(b.lastDSMInfo) && !a) {
            return
        }
        b.lastDSMInfo = null;
        b.setStatusBar(b.highlightText(_T("update", "check_new_dsm"), "green"));
        b.dsmInfoReq = b.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.Upgrade.Server",
                    method: "check",
                    version: 1
                }, {
                    api: "SYNO.Core.Upgrade.Server.Download",
                    version: 1,
                    method: "progress"
                }, {
                    api: "SYNO.Core.Upgrade.Setting",
                    version: 1,
                    method: "get"
                }]
            },
            scope: b,
            callback: function(e, d, c) {
                if (this.isDestroyed) {
                    return
                }
                if (!e || d.has_fail) {
                    b.lastDSMInfo = {
                        check_success: false
                    };
                    b.updateFailStatus();
                    return
                }
                b.lastDSMInfo = d.result[0].data;
                b.lastDSMInfo.check_success = true;
                b.lastDSMInfo.upgrade_type = d.result[2].data.upgrade_type;
                b.lastDownloadStatus = d.result[1].data.status
            }
        })
    },
    getStatusBar: function() {
        return this.get("statusBar")
    },
    getDownloadBtn: function() {
        return Ext.getCmp(this._downloadBtnID)
    },
    getDownloadMsgField: function() {
        return Ext.getCmp(this._downloadMsgID)
    },
    setStatusBar: function(c, a) {
        var b = this.getStatusBar();
        b.setValue(c);
        this.updateDownloadMsg(a);
        this.updateDownloadBtn(a);
        this.doLayout()
    },
    updateDownloadMsg: function(a) {
        var b = this.getDownloadMsgField();
        if (a && a.desc) {
            b.setValue(a.desc)
        } else {
            b.setValue("")
        }
    },
    updateDownloadBtn: function(a) {
        var b = this.getDownloadBtn();
        if (!Ext.isDefined(a)) {
            b.hide();
            return
        }
        b.show();
        if (this._S("demo_mode")) {
            b.disable()
        } else {
            b.enable()
        }
        b.setText(a.text);
        if (!Ext.isEmpty(b.click_callback)) {
            this.mun(b, "click", b.click_callback, this)
        }
        b.click_callback = a.callback;
        this.mon(b, "click", a.callback, this)
    },
    IsStrInArray: function(b, c) {
        if (!b || !c || !c.length) {
            return false
        }
        for (var a = 0; a < c.length; a++) {
            if (b === c[a]) {
                return true
            }
        }
        return false
    },
    NeedToShowDNSWarning: function(h, b, g) {
        var e = this;
        var j = false;
        var c = 0;
        var a = [];
        var f = [];
        var d = 0;
        if (this.isDestroyed) {
            return j
        }
        if (!h || b.has_fail) {
            return j
        }
        if (!b.result || (2 > b.result.length)) {
            SYNO.Debug("[Error] data.result is empty");
            return j
        }
        if (!b.result[0].data) {
            SYNO.Debug("[Error] SYNO.Core.Network.Interface.list reponse empty data");
            return j
        }
        if (!b.result[1].data) {
            SYNO.Debug("[Error] SYNO.Core.Network.get reponse empty data");
            return j
        }
        if (!b.result[1].data.dns_manual) {
            return j
        }
        if (b.result[1].data.dns_primary) {
            a.push(b.result[1].data.dns_primary)
        }
        if (b.result[1].data.dns_secondary) {
            a.push(b.result[1].data.dns_secondary)
        }
        for (c = 0; c < b.result[0].data.length; c++) {
            if (!b.result[0].data[c].ip || ("connected" !== b.result[0].data[c].status)) {
                continue
            }
            f.push(b.result[0].data[c].ip)
        }
        d = 0;
        Ext.each(a, function(i) {
            if (true === e.IsStrInArray(i, f)) {
                d++
            }
        }, e);
        if (a.length == d) {
            j = true;
            SYNO.Debug("dns ip point to self only")
        }
        return j
    },
    startOverallStatusPolling: function() {
        var a = this;
        if (Ext.isEmpty(a.overallstatus_pollId)) {
            a.overallstatus_pollId = this.pollReg({
                webapi: {
                    api: "SYNO.Core.Upgrade",
                    version: 1,
                    method: "status"
                },
                interval: this.overallPollingInterval,
                immediate: true,
                status_callback: function(c, b) {
                    if (!c) {
                        a.updateFailStatus();
                        return
                    }
                    a.overAllStatus = b;
                    a.updateOverallStatus()
                }
            })
        }
    },
    stopOverallStatusPolling: function() {
        var a = this;
        if (Ext.isEmpty(a.overallstatus_pollId)) {
            return
        }
        a.pollUnreg(a.overallstatus_pollId);
        a.overallstatus_pollId = null
    },
    cleanOverallStatus: function() {
        this.overAllStatus = null
    },
    updateOverallStatus: function() {
        var c = this,
            b = null,
            a = c.overAllStatus,
            d = c.get("buttons").get("upload_btn");
        if (Ext.isEmpty(a)) {
            return
        }
        if (a.allow_upgrade && !this._S("demo_mode")) {
            d.enable()
        } else {
            d.disable()
        }
        if (!Ext.isEmpty(c.lastDSMInfo)) {
            if (Ext.isDefined(c.lastDSMInfo.version)) {
                b = c.lastDSMInfo.version
            } else {
                b = ""
            }
        }
        switch (a.status) {
            case "none":
                c.updateOverAllNone();
                break;
            case "downloading":
                if (null !== b) {
                    c.startDownloadPolling(b)
                }
                break;
            case "ready_upgrade":
                if (null !== b) {
                    c.updateOverAllReadyUpgrade(b)
                }
                break;
            case "upgrading":
                c.setStatusBar(c.highlightText(_T("update", "dsm_busy_updating"), "red"));
                break;
            case "system_busy":
                c.updateOverAllSystemBusy(a);
                break;
            default:
                break
        }
    },
    updateOverAllNone: function() {
        var b = this,
            c = b.lastDSMInfo;
        if (Ext.isEmpty(c)) {
            return
        }
        if (false === c.check_success) {
            b.updateFailStatus();
            return
        }
        if (Ext.isEmpty(b.lastDownloadStatus)) {
            return
        }
        if (false === c.available) {
            if ("hotfix" === c.upgrade_type) {
                b.setStatusBar(b.highlightText(_T("update", "no_small_fix"), "green"))
            } else {
                b.setStatusBar(b.highlightText(_T("update", "update_dsm_no_new_dsm"), "green"))
            }
            return
        }
        if (this._S("is_hybrid_ha")) {
            b.setStatusBar(b.getDownloadStatusText("update_dsm_download", c.version))
        } else {
            if (b.lastDownloadStatus == "failed") {
                b.setStatusBar(b.getDownloadStatusText("update_dsm_download", c.version), {
                    text: _T("update", "update_btn_retry"),
                    callback: function a(d) {
                        b.startDownload(d, c.version)
                    },
                    desc: _T("update", "update_dsm_download_err")
                })
            } else {
                b.setStatusBar(b.getDownloadStatusText("update_dsm_download", c.version), {
                    text: _T("update", "update_btn_download"),
                    callback: function a(d) {
                        b.startDownload(d, c.version)
                    }
                })
            }
        }
    },
    updateOverAllReadyUpgrade: function(a) {
        var b = this;
        b.StopDownloadPolling();
        b.setStatusBar(b.getDownloadStatusText("update_dsm_upgrade", a), {
            text: _T("update", "update_btn_upgrade"),
            callback: function() {
                b.startServerUpdate(b.overAllStatus.patch_info)
            }
        })
    },
    updateOverAllSystemBusy: function(a) {
        var d;
        var b = this;
        var c = a.reason;
        if (c === "volume is building.") {
            b.setStatusBar(b.highlightText(_T("volume", "volume_busy_waiting"), "red"))
        } else {
            if (c === "no enough volume space.") {
                if (this._D("supportraid", "no") === "yes") {
                    d = String.format(_T("update", "update_error_no_root"), a.require_volume_size)
                } else {
                    d = String.format(_T("update", "update_error_no_vol"), a.require_volume_size)
                }
                b.setStatusBar(b.highlightText(d, "red"))
            } else {
                if (c === "package is busy.") {
                    b.setStatusBar(b.highlightText(_T("pkgmgr", "error_occupied"), "red"))
                } else {
                    if (c === "disk is secure erasing.") {
                        b.setStatusBar(b.highlightText(_T("uicommon", "err_disk_secure_erasing"), "red"))
                    } else {
                        b.setStatusBar(b.highlightText(_T("error", "error_system_busy"), "red"))
                    }
                }
            }
        }
        return
    },
    startDownload: function(b, a) {
        var c = this,
            d = c.get("buttons").get("upload_btn");
        b.disable();
        d.disable();
        c.sendWebAPI({
            api: "SYNO.Core.Upgrade.Server.Download",
            method: "start",
            version: 1,
            params: {},
            callback: function(h, g, f, e) {
                if (!h) {
                    c.lastDownloadStatus = "failed";
                    return
                }
                c.startDownloadPolling(a)
            }
        })
    },
    startDownloadPolling: function(a) {
        var b = this;
        if (Ext.isEmpty(b.download_pollId)) {
            b.download_pollId = this.pollReg({
                webapi: {
                    api: "SYNO.Core.Upgrade.Server.Download",
                    version: 1,
                    method: "progress"
                },
                interval: 5,
                immediate: true,
                status_callback: function(d, c) {
                    b.updateDownloadProgress(d, c, a)
                }
            })
        }
    },
    StopDownloadPolling: function() {
        var a = this;
        if (Ext.isEmpty(a.download_pollId)) {
            return
        }
        a.pollUnreg(a.download_pollId);
        a.download_pollId = null
    },
    getDownloadStatusText: function(f, a) {
        var g, b = "green",
            d = this.getForm();
        g = String.format(_T("update", f), a);
        var c = {
            model: d.findField("model").getValue(),
            platform: _SYNOINFODEF.unique,
            version: d.findField("firmware_ver").getValue(),
            available: a,
            language: SYNO.SDS.Session.lang
        };
        var e = function(i) {
            var h = _SYNOINFODEF.rss_server.replace("genRSS", "whatsnew");
            var j = {
                href: h + "?" + Ext.urlEncode(i),
                target: "blank",
                text: _T("update", "update_dsm_whats_new")
            };
            return String.format("<a{0}{1}>{2}</a>", (Ext.isDefined(j.href)) ? ' href="' + j.href + '"' : "", (Ext.isDefined(j.target)) ? ' target="_' + j.target + '"' : "", j.text)
        };
        return String.format("{0} ({1})", this.highlightText(g, b), e(c))
    },
    updateFailStatus: function() {
        this.setStatusBar(this.highlightText(_T("update", "check_new_dsm_err"), "red"))
    },
    updateDownloadProgress: function(d, c, a) {
        var b = this;
        if (!d) {
            b.updateFailedStatus(a);
            return
        }
        b.lastDownloadStatus = c.status;
        switch (c.status) {
            case "none":
                b.StopDownloadPolling();
                break;
            case "downloading":
                b.updateDownloadingStatus(a, c.percent);
                break;
            case "finished":
                b.StopDownloadPolling();
                break;
            case "stopped":
                b.StopDownloadPolling();
                break;
            case "failed":
                b.updateFailedStatus(a);
                break;
            default:
                break
        }
    },
    updateDownloadingStatus: function(a, c) {
        var b = this,
            d = String.format("{0} ({1}%)", _T("update", "update_dsm_downloading"), c);
        b.setStatusBar(b.getDownloadStatusText("update_dsm_download", a), {
            text: _T("common", "cancel"),
            callback: function(e) {
                b.StopDownloadPolling();
                e.disable();
                b.sendWebAPI({
                    api: "SYNO.Core.Upgrade.Server.Download",
                    method: "cancel",
                    version: 1,
                    params: {},
                    callback: function(i, h, g, f) {
                        if (!i) {
                            e.enable();
                            return
                        }
                        b.StopDownloadPolling()
                    }
                })
            },
            desc: this.highlightText(d, "#78828c")
        })
    },
    updateFailedStatus: function(a) {
        var b = this;
        b.StopDownloadPolling();
        b.updateOverallStatus()
    },
    startServerUpdate: function(b) {
        var e = this,
            f = e.module.appWin,
            c = _T("update", "update_confirm_upgrade"),
            a = [];
        var d = function(g) {
            if ("yes" === g) {
                e.performUpgrade("server", b)
            } else {
                e.cancelUpgrade("server")
            }
        };
        if (b.reboot) {
            c = _T("update", "update_confirm_upgrade")
        } else {
            if (b.restart_all) {
                c = _T("update", "update_confirm_upgrade_restart_all")
            } else {
                if (b.restart_some) {
                    if (b.restart_servs) {
                        Ext.each(b.restart_servs, function(g) {
                            a.push(_T(g.section, g.key))
                        })
                    }
                    c = String.format("{0} <br/>{1}", _T("update", "update_confirm_upgrade_restart_some"), a.concat(b.restart_pkgs).join(", "))
                } else {
                    c = _T("update", "update_confirm_upgrade_none")
                }
            }
        }
        e.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.Network.Interface",
                    method: "list",
                    version: 1
                }, {
                    api: "SYNO.Core.Network",
                    version: 1,
                    method: "get"
                }]
            },
            scope: e,
            callback: function(i, h, g) {
                if (e.NeedToShowDNSWarning(i, h, g)) {
                    c += ('<br><br><span class="note-font">' + _T("common", "note") + "</span> : " + _T("update", "dns_ip_to_self"))
                }
                f.getMsgBox().confirm(_T("tree", "leaf_update"), c, d, e)
            }
        })
    },
    cancelUpgrade: function(a) {
        if ("patch" === a) {
            this.sendWebAPI({
                api: "SYNO.Core.Upgrade.Patch",
                method: "clean",
                version: 1
            });
            this.Reload()
        }
    },
    performUpgrade: function(b, a) {
        var c = this,
            d = c.module.appWin;
        c.updateUpgradeActioningMsg("preparing", 0, a);
        c.sendWebAPI({
            api: "SYNO.Core.Upgrade",
            method: "start",
            version: 1,
            params: {
                type: b
            },
            scope: c,
            callback: function(h, g, f, e) {
                if (h !== true) {
                    c.cancelUpgrade(b);
                    if (c.IsCMSMode()) {
                        c.getDeskMsgBox().hide()
                    } else {
                        c.hideDestopProgress()
                    }
                    d.getMsgBox().alert(_T("tree", "leaf_update"), SYNO.API.getErrorString(g.code));
                    return
                }
                c.stopOverallStatusPolling();
                if (!c.IsCMSMode()) {
                    SYNO.SDS.StatusNotifier.fireEvent("halt")
                }
                c.startUpdateProgressPolling(a)
            }
        })
    },
    getDeskMsgBox: function() {
        var a = this;
        if (a.IsCMSMode()) {
            return a.module.appWin.getMsgBox()
        }
        if (!a.DeskmsgBox || a.DeskmsgBox.isDestroyed) {
            a.DeskmsgBox = new SYNO.SDS.MessageBoxV5({
                modal: true,
                draggable: false,
                renderTo: document.body
            })
        }
        return a.DeskmsgBox.getWrapper()
    },
    startUpdateProgressPolling: function(a) {
        var b = this;
        if (Ext.isEmpty(b.updateprogress_pollId)) {
            b.updateprogress_pollId = this.pollReg({
                webapi: {
                    api: "SYNO.Core.Upgrade",
                    version: 1,
                    method: "progress"
                },
                interval: 3,
                preventHalt: true,
                immediate: true,
                status_callback: function(d, c) {
                    b.updateUpgradeProgress(d, c, a)
                },
                scope: b
            })
        }
    },
    stopUpdateProgressPolling: function() {
        var a = this;
        if (Ext.isEmpty(a.updateprogress_pollId)) {
            return
        }
        a.pollUnreg(a.updateprogress_pollId);
        a.updateprogress_pollId = null
    },
    updateUpgradeProgress: function(d, c, a) {
        var b = this;
        if (!d) {
            return
        }
        if (b.IsCMSMode()) {
            b._CMSWindow = true
        }
        switch (c.step) {
            case "failed":
                b.updateUpgradeFailed(c);
                break;
            case "preparing":
            case "waiting_remote_upgrading":
            case "analying_system":
            case "updating_programs":
            case "updating_configurations":
            case "start_service":
                b.updateUpgradeActioningMsg(c.step, c.percent, a);
                break;
            case "reboot":
                b.updateUpgradeReboot();
                break;
            case "finish":
                b.updateUpgradeFinish();
                break;
            default:
                break
        }
        delete b._CMSWindow
    },
    updateUpgradeFailed: function(c) {
        var a = this,
            b;
        b = String.format(_T("update", "error_update_unknown"), c.errno);
        if (!Ext.isEmpty(_T("update", c.err_desc))) {
            b = String.format(_T("update", c.err_desc), c.errno)
        }
        if (!Ext.isEmpty(c.err_msg)) {
            b = String.format("{0}<br>(Notes: {1})", b, c.err_msg)
        }
        if (a.IsCMSMode()) {
            a.getDeskMsgBox().alert(_T("tree", "leaf_update"), b)
        } else {
            a.getDeskMsgBox().alert(_T("tree", "leaf_update"), b, function(d) {
                window.location.href = "/"
            })
        }
        a.stopUpdateProgressPolling();
        a.startOverallStatusPolling()
    },
    updateUpgradeActioningMsg: function(b, j, m) {
        var l = this,
            a = l.getDeskMsgBox(),
            o = "",
            e = "",
            g = 0,
            p = 0,
            k = 0,
            f = 0,
            n = 0,
            i = 0,
            h = 0,
            d = 0,
            c = 0;
        switch (b) {
            case "preparing":
                k = j;
                e = _T("update", "update_progress_prepared");
                break;
            case "waiting_remote_upgrading":
                k = 100;
                f = j;
                e = _T("update", "upgrade_remote");
                break;
            case "analying_system":
                k = 100;
                f = 100;
                n = j;
                e = this._S("ha_running") ? _T("update", "upgrade_local_alz") : _T("update", "upgrade_alz");
                break;
            case "updating_programs":
                k = 100;
                f = 100;
                n = 100;
                i = j;
                e = this._S("ha_running") ? _T("update", "upgrade_local_prg") : _T("update", "upgrade_prg");
                break;
            case "updating_configurations":
                k = 100;
                f = 100;
                n = 100;
                i = 100;
                h = j;
                e = this._S("ha_running") ? _T("update", "upgrade_local_cfg") : _T("update", "upgrade_cfg");
                break;
            case "start_service":
                k = 100;
                f = 100;
                n = 100;
                i = 100;
                h = 100;
                d = j;
                e = _T("update", "upgrade_service");
                break;
            default:
                break
        }
        if (m.type !== "smallupdate") {
            o += String.format("<p>{0}: {1}% ", _T("update", "update_progress_prepared"), k);
            p += k;
            g += 1
        }
        if (this._S("ha_running")) {
            o += String.format("<p>{0}: {1}% ", _T("update", "upgrade_remote"), f);
            p += f;
            g += 1
        }
        o += String.format("<p>{0}: {1}% ", this._S("ha_running") ? _T("update", "upgrade_local_alz") : _T("update", "upgrade_alz"), n);
        p += n;
        g += 1;
        o += String.format("<p>{0}: {1}% ", this._S("ha_running") ? _T("update", "upgrade_local_prg") : _T("update", "upgrade_prg"), i);
        p += i;
        g += 1;
        if (m.upgradetype !== "smallupdate") {
            o += String.format("<p>{0}: {1}% ", this._S("ha_running") ? _T("update", "upgrade_local_cfg") : _T("update", "upgrade_cfg"), h);
            p += h;
            g += 1
        }
        if (m.restart_some === true || m.restart_all === true) {
            o += String.format("<p>{0}: {1}% ", _T("update", "upgrade_service"), d);
            p += d;
            g += 1
        }
        c = p / g;
        if (l.IsCMSMode()) {
            if (Ext.isEmpty(l._CMSWindow)) {
                a.show({
                    progress: true,
                    closable: false,
                    maxWidth: 300,
                    title: _T("tree", "leaf_update"),
                    msg: o
                })
            }
            a.updateProgress(c / 100, c.floor() + "%", o)
        } else {
            l.getDestopProgress().setProgress(_T("update", "updating_progress_title"), e, c.floor())
        }
    },
    updateUpgradeReboot: function() {
        var b = this;
        b.stopUpdateProgressPolling();
        b.sendWebAPI({
            api: "SYNO.Core.System",
            method: "reboot",
            version: 1,
            params: {
                force: true
            }
        });
        if (b.IsCMSMode()) {
            b.updateUpgradeFinish();
            return
        }
        b.getDestopProgress().startCountDown(_T("update", "waiting_reboot"), "", SYNO.SDS.AdminCenter.Update.SECONDS_REBOOT);
        var a = 0;
        this.addAjaxTask({
            preventHalt: true,
            interval: 5000,
            autoJsonDecode: true,
            url: "pingpong.cgi",
            startTime: new Date().getTime(),
            timeLimit: SYNO.SDS.AdminCenter.Update.SECONDS_REBOOT * 1000,
            scope: this,
            success: function(d, e) {
                var c = new Date().getTime();
                if (a < 2) {
                    a = 0;
                    return
                }
                if ((c - e.startTime) > e.timeLimit) {
                    window.location.href = "/"
                }
                if (d && d.boot_done) {
                    window.location.href = "/"
                }
            },
            failure: function(e, d) {
                var c = new Date().getTime();
                if (!d.timeoutNotified && (c - d.startTime) > d.timeLimit) {
                    this.getDeskMsgBox().show({
                        closable: false,
                        maxWidth: 300,
                        title: this._D("product"),
                        msg: _JSLIBSTR("uicommon", "system_reboot_timeout")
                    });
                    d.timeoutNotified = true
                }
                a++
            }
        }).start()
    },
    updateUpgradeFinish: function() {
        var a = this;
        a.stopUpdateProgressPolling();
        if (a.IsCMSMode()) {
            a.getDeskMsgBox().alert(_T("tree", "update_dsm_manually"), _T("update", "upgrade_success"), function(b) {
                a.Reload()
            })
        } else {
            a.getDestopProgress().setProgress(_T("update", "updating_progress_title"), _T("update", "upgrade_success"), 100);
            a.getDestopProgress().stopDeferUpdate();
            a.getDestopProgress().updateMsg(_T("update", "upgrade_success"));
            a.getDeskMsgBox().alert(_T("tree", "update_dsm_manually"), _T("update", "update_confirm_refresh"), function(b) {
                window.location.href = "/"
            })
        }
    },
    IsCMSMode: function() {
        var b = this.module.appWin.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application",
            a = this.module.appWin.findAppWindow().getOpenConfig("cms_self") === true;
        if (b && !a) {
            return true
        }
        return false
    },
    Reload: function() {
        var a = this;
        a.overAllStatus = null;
        a.lastDSMInfo = null;
        a.module.activate();
        a.startOverallStatusPolling()
    },
    getDestopProgress: function() {
        if (!Ext.isDefined(this.desk_progress)) {
            this.desk_progress = new SYNO.SDS.AdminCenter.Update_Reset.DesktopProgress()
        }
        return this.desk_progress
    },
    hideDestopProgress: function() {
        if (!Ext.isDefined(this.desk_progress)) {
            return
        }
        return this.desk_progress.hide()
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.VersionBlock", {
    extend: "SYNO.SDS.AdminCenter.SimpleMode.MiniDashboardBlock",
    iconCls: "icon-version",
    constructor: function(a) {
        this.title = this.getVersionStr();
        SYNO.SDS.AdminCenter.SimpleMode.VersionBlock.superclass.constructor.call(this, a);
        this.on("afterrender", function() {
            this.launcher.hide()
        })
    },
    getBody: function() {
        if (!this.body) {
            this.statusId = Ext.id();
            this.btnId = Ext.id();
            this.body = new Ext.Container({
                cls: "version-block",
                items: [{
                    xtype: "syno_displayfield",
                    cls: "version-status",
                    id: this.statusId,
                    value: "",
                    listeners: {
                        afterrender: {
                            fn: this.addUpdatePanel,
                            scope: this
                        }
                    }
                }, {
                    xtype: "syno_button",
                    cls: "update-btn",
                    id: this.btnId,
                    text: "update"
                }]
            })
        }
        return this.body
    },
    addUpdatePanel: function() {
        this.updatePanel = new SYNO.SDS.AdminCenter.SimpleMode.VersionPanel({
            module: this.owner,
            statusId: this.statusId,
            btnId: this.btnId
        });
        this.add([this.updatePanel]);
        this.updatePanel.hide();
        this.doLayout()
    },
    onActivate: function() {
        if (this.updatePanel) {
            this.updatePanel.loadForm();
            this.updatePanel.startOverallStatusPolling()
        }
    },
    onDeactivate: function() {
        if (this.updatePanel) {
            this.updatePanel.stopOverallStatusPolling();
            Ext.Ajax.abort(this.updatePanel.dsmInfoReq)
        }
    },
    getVersionStr: function() {
        var c = _T("relayservice", "name_dsm_portal");
        var a = _S("majorversion") + "." + _S("minorversion");
        var d = _S("version");
        var b = c + a + "-" + d;
        return b
    },
    onLaunchApp: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", {
            fn: "SYNO.SDS.AdminCenter.Update_Reset.Main"
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.VersionPanel", {
    extend: "SYNO.SDS.AdminCenter.Update.UpdateTab",
    overallPollingInterval: 10,
    constructor: function(a) {
        this.statusId = a.statusId;
        this.btnId = a.btnId;
        SYNO.SDS.AdminCenter.SimpleMode.VersionPanel.superclass.constructor.call(this, a)
    },
    IsCMSMode: function() {
        return false
    },
    initEvents: Ext.emptyFn,
    setStatusBusy: Ext.emptyFn,
    getDownloadStatusText: function(b, a) {
        var c = _T("update", b).replace("[_VERSION_]", a);
        return this.highlightText(c, "green")
    },
    highlightText: function(b, a) {
        if (a === "green" || a === "red" || a === "blue") {
            return String.format('<div class="{0}-status">{1}</div>', a, b)
        }
        return String.format('<div style="color: {0}">{1}</div>', a, b)
    },
    getStatusBar: function() {
        return Ext.getCmp(this.statusId)
    },
    getDownloadBtn: function() {
        return Ext.getCmp(this.btnId)
    },
    updateDownloadMsg: function(a) {
        var b = this.getStatusBar();
        if (a && a.desc) {
            b.setValue(a.desc)
        }
    },
    processReturnData: function(c, b, a) {
        if (this.isDestroyed) {
            return
        }
        this.callParent()
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.QuickConnBlock", {
    extend: "SYNO.SDS.AdminCenter.SimpleMode.MiniDashboardBlock",
    iconCls: "icon-quick-connect",
    title: _T("relayservice", "title_svrid"),
    constructor: function(a) {
        Ext.apply(a, {
            cls: "last-block"
        });
        SYNO.SDS.AdminCenter.SimpleMode.QuickConnBlock.superclass.constructor.call(this, a)
    },
    getBody: function() {
        if (!this.body) {
            this.body = new Ext.Container({
                cls: "quick-connect-block",
                items: [{
                    xtype: "syno_displayfield",
                    cls: "quick-connect-id",
                    value: "--"
                }]
            })
        }
        return this.body
    },
    onDeactivate: function() {
        Ext.Ajax.abort(this.apiReq)
    },
    getQkConnectId: function() {
        this.apiReq = this.sendWebAPI({
            api: "SYNO.Core.QuickConnect",
            method: "get",
            version: 1,
            callback: function(c, a, b) {
                if (this.isDestroyed) {
                    return
                }
                this.idField = this.el.child(".quick-connect-id");
                if (c && a.enabled) {
                    if (a.server_alias) {
                        this.idField.update(a.server_alias)
                    } else {
                        if (a.server_id) {
                            this.idField.update(a.server_id)
                        }
                    }
                } else {
                    this.idField.update("--")
                }
            },
            scope: this
        })
    },
    onLaunchApp: function() {
        this.owner.owner.setActiveTab("quick_connect")
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.StorageBlock", {
    extend: "SYNO.SDS.AdminCenter.SimpleMode.DashboardBlock",
    iconCls: "icon-storage",
    title: _T("status", "sysinfo_storage_tab"),
    constructor: function(a) {
        Ext.apply(this, a);
        SYNO.SDS.AdminCenter.SimpleMode.StorageBlock.superclass.constructor.call(this, a);
        this.storagePanel.on("afterrender", this.storagePanel.onActivate, this.storagePanel)
    },
    getBody: function() {
        if (this.body) {
            return this.body
        }
        this.storagePanel = new SYNO.SDS.AdminCenter.SimpleMode.StoragePanel({
            width: 354,
            height: 112,
            cmWidth: 320,
            NUM_REC_PER_PAGE: 1
        });
        this.diskPanel = new SYNO.SDS.AdminCenter.SimpleMode.DiskPanel();
        this.body = new Ext.Container({
            width: this.width,
            height: this.height,
            cls: "storage-block",
            items: [this.storagePanel, this.diskPanel]
        });
        return this.body
    },
    onLaunchApp: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance", {
            fn: "SYNO.SDS.StorageManager.Volume.Main"
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.StoragePanel", {
    extend: "SYNO.SDS.SystemInfoApp.StorageUsageWidget",
    constructor: function(a) {
        SYNO.SDS.AdminCenter.SimpleMode.StoragePanel.superclass.constructor.call(this, a)
    },
    mask: Ext.emptyFn,
    unmask: Ext.emptyFn,
    drawPieChart: function(h, b, j) {
        var f = this,
            c = 0,
            e = null,
            a = null,
            g = null,
            d = null;
        for (c = 0; c < b.length; c++) {
            d = b[c].get("storageVolInfo");
            a = Ext.get("widget-storage-" + f.getEl().id + d.volume);
            if (!a) {
                continue
            }
            e = new SYNO.SDS.Utils.canvas.ColorCircleGradient({
                width: 96,
                height: 96,
                radius: 48,
                gradientWidth: 16,
                canvasConfig: {
                    height: 96,
                    width: 96
                },
                renderTo: a.getAttribute("id"),
                cls: ""
            });
            g = parseInt(d.total, 10);
            e.draw(Math.min(parseInt(d.used, 10) / g, 1))
        }
    },
    getChartDisplayText: function(e) {
        var b = this.getEl().id + e.volume;
        var g = String.format("{0} ({1})", e.volstr, e.volStatus);
        var d = this.formatSize(e.diskUsed);
        var a = this.formatSize(e.diskAvailable);
        var c = this.formatSize(e.diskTotal);
        var f = String.format('<div><div class = "syno-sysinfo-storage-usage-chart-pie" id="widget-storage-{0}"> </div><div class = "syno-sysinfo-storage-usage-chart-text"><div class = "syno-sysinfo-storage-usage-chart-title" ext:qtip="{1}">{2}</div><div class = "syno-sysinfo-storage-usage-chart-info" ext:qtip="{3}: {4}">{3}: {4}</div><div class = "syno-sysinfo-storage-usage-chart-info" ext:qtip="{5}: {6}">{5}: {6}</div><div class = "syno-sysinfo-storage-usage-chart-info" ext:qtip="{7}: {8}">{7}: {8}</div></div></div>', this.encode(b), this.encode(g), g, _T("volume", "volume_usedsize"), this.encode(d), _T("volume", "volume_freesize"), this.encode(a), _T("volume", "volume_totalsize"), this.encode(c));
        return f
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.DiskPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function() {
        this.grid = new SYNO.ux.GridPanel({
            width: 320,
            height: 100,
            cls: "disk-grid",
            loadMask: true,
            border: false,
            disableSelection: true,
            hideHeaders: true,
            trackMouseOver: false,
            cm: this.getColumnModel(),
            store: this.createStore(),
            listeners: {
                afterrender: {
                    fn: function() {
                        this.store.load()
                    },
                    scope: this
                }
            }
        });
        var a = {
            cls: "disk-panel",
            items: [{
                xtype: "syno_fieldset",
                title: _T("smart", "smart_toolbar_disk_info"),
                items: [this.grid]
            }]
        };
        SYNO.SDS.AdminCenter.SimpleMode.DiskPanel.superclass.constructor.call(this, a)
    },
    getColumnModel: function() {
        var a = new Ext.grid.ColumnModel({
            defaultSortable: false,
            columns: [{
                id: "disk_name",
                dataIndex: "name",
                width: 100
            }, {
                id: "size",
                dataIndex: "size_total",
                width: 120,
                renderer: {
                    fn: this.sizeRenderer,
                    scope: this
                }
            }, {
                id: "status",
                dataIndex: "status",
                width: 100,
                renderer: {
                    fn: SYNO.SDS.StorageUtils.DiskStatusRender,
                    scope: this
                }
            }]
        });
        return a
    },
    sizeRenderer: function(c, a, b) {
        return Ext.util.Format.fileSize(c)
    },
    createStore: function() {
        this.store = new Ext.data.Store({
            autoDestroy: true,
            autoLoad: false,
            proxy: new SYNO.API.Proxy({
                api: "SYNO.Core.Storage.Disk",
                method: "list",
                version: 1
            }),
            reader: new Ext.data.JsonReader({
                root: "disks"
            }, [{
                name: "name"
            }, {
                name: "size_total"
            }, {
                name: "status"
            }]),
            paramNames: {
                start: "offset",
                limit: "limit"
            },
            baseParams: {
                offset: 0,
                limit: -1
            }
        });
        return this.store
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.CurrConnectBlock", {
    extend: "SYNO.SDS.AdminCenter.SimpleMode.DashboardBlock",
    iconCls: "icon-current-connect",
    title: _T("connections", "connections_title"),
    constructor: function(a) {
        SYNO.SDS.AdminCenter.SimpleMode.CurrConnectBlock.superclass.constructor.call(this, a)
    },
    getBody: function() {
        if (!this.body) {
            this.initBody()
        }
        return this.body
    },
    initBody: function() {
        this.summary = new Ext.Container({
            cls: "connect-count",
            autoEl: {
                tag: "div",
                cn: [{
                    tag: "div",
                    cls: "number",
                    html: "0"
                }, {
                    tag: "div",
                    cls: "text",
                    html: "Users"
                }]
            },
            listeners: {
                afterrender: {
                    fn: function(a) {
                        a.mon(this.gridPanel, "update", this.updateCount, this)
                    },
                    scope: this
                }
            }
        });
        this.gridPanel = new SYNO.SDS.AdminCenter.SimpleMode.CurrConnectPanel({
            width: 325,
            height: 112
        });
        this.body = new Ext.Container({
            width: this.width,
            height: this.height,
            cls: "curr-connect-block",
            items: [this.summary, this.gridPanel]
        })
    },
    onLaunchApp: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.ResourceMonitor.Instance", {
            fn: "SYNO.SDS.ResourceMonitor.Factory.CurConnPanel"
        })
    },
    updateCount: function(a) {
        this.summary.el.child(".number").update(a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.CurrConnectPanel", {
    extend: "SYNO.SDS.SystemInfoApp.ConnectionLogWidget",
    TotalRecords: 99,
    constructor: function(a) {
        SYNO.SDS.AdminCenter.SimpleMode.CurrConnectPanel.superclass.constructor.call(this, a)
    },
    getColumnModel: function() {
        if (this.cmSystemLog) {
            return this.cmSystemLog
        }
        var a = new Ext.grid.ColumnModel({
            columns: [{
                id: "who",
                dataIndex: "who",
                width: 150,
                renderer: this.usernameRenderer.createDelegate(this)
            }, {
                id: "type",
                dataIndex: "type",
                width: 100,
                renderer: {
                    fn: this.baseRenderer,
                    scope: this
                }
            }, {
                id: "kick",
                dataIndex: "can_be_kicked",
                width: 33,
                renderer: this.kickRenderer.createDelegate(this)
            }]
        });
        this.cmSystemLog = a;
        return a
    },
    onBeforeUpdate: function(a) {
        this.systemTime = a.systime;
        a.total = a.total > this.TotalRecords ? "99+" : a.total;
        this.fireEvent("update", a.total);
        a.items.sort(function(c, b) {
            return new Date(b.time).getTime() - new Date(c.time).getTime()
        })
    },
    kickRenderer: function(c) {
        var b = _T("connections", "kick_connection");
        if (false === c) {
            return ""
        }
        if (_S("demo_mode")) {
            b = _T("common", "error_demo")
        }
        var a = String.format('<div class = "syno-sysinfo-disconn-button" ext:qtip = "{0}"></div>', b);
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.ResourceBlock", {
    extend: "SYNO.SDS.AdminCenter.SimpleMode.DashboardBlock",
    iconCls: "icon-resource",
    title: _T("tree", "leaf_rsrcmonitor"),
    constructor: function(a) {
        SYNO.SDS.AdminCenter.SimpleMode.ResourceBlock.superclass.constructor.call(this, a);
        this.on("afterrender", this.body.onActivate, this.body)
    },
    getBody: function() {
        if (this.body) {
            return this.body
        }
        this.body = new SYNO.SDS.AdminCenter.SimpleMode.ResourcePanel({
            width: this.width,
            height: 150,
            cls: "resource-block resource-monitor-widget"
        });
        return this.body
    },
    onLaunchApp: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.ResourceMonitor.Instance", {
            fn: "SYNO.SDS.ResourceMonitor.Performance.Main"
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.ResourcePanel", {
    extend: "SYNO.SDS.ResourceMonitor.Widget",
    layout: "",
    constructor: function(a) {
        SYNO.SDS.AdminCenter.SimpleMode.ResourcePanel.superclass.constructor.call(this, a)
    },
    initCpuChart: function() {
        return new SYNO.SDS.ResourceMonitor.PercentageComponent(Ext.apply(this.getDefChartCfg(), {
            itemId: "cpuUsage",
            title: "CPU",
            type: "vertical",
            width: 40,
            height: 150
        }))
    },
    initMemChart: function() {
        return new SYNO.SDS.ResourceMonitor.PercentageComponent(Ext.apply(this.getDefChartCfg(), {
            itemId: "memoryUsage",
            title: "RAM",
            type: "vertical",
            width: 40,
            height: 150
        }))
    },
    initNetworkIOCmp: function() {
        return new SYNO.SDS.ResourceMonitor.NetworkInOutComponent({
            widget: this,
            selBtnWidth: 75,
            width: 240,
            height: 20
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.Dashboard", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.initBlocks(a);
        var b = {
            cls: "dashboard-tab",
            items: [{
                xtype: "container",
                cls: "dashboard-wrapper",
                width: 830,
                height: 570,
                items: [this.topRow, this.storageBlock, this.resourceBlock, this.connectBlock]
            }],
            listeners: {
                scope: this,
                activate: this.startPollingTask,
                deactivate: this.stopPollingTask
            }
        };
        Ext.apply(b, a);
        SYNO.SDS.AdminCenter.SimpleMode.Dashboard.superclass.constructor.call(this, b)
    },
    initBlocks: function(a) {
        this.sysHealthBlock = new SYNO.SDS.AdminCenter.SimpleMode.SysHealthBlock({
            height: 94,
            flex: 1
        });
        this.versionBlock = new SYNO.SDS.AdminCenter.SimpleMode.VersionBlock({
            owner: this,
            height: 94,
            flex: 1
        });
        this.quickConnBlock = new SYNO.SDS.AdminCenter.SimpleMode.QuickConnBlock({
            owner: this,
            height: 94,
            flex: 1
        });
        this.storageBlock = new SYNO.SDS.AdminCenter.SimpleMode.StorageBlock({
            width: 360,
            height: 344,
            style: "margin: 8px 8px 0 0;"
        });
        this.resourceBlock = new SYNO.SDS.AdminCenter.SimpleMode.ResourceBlock({
            width: 452,
            height: 168
        });
        this.connectBlock = new SYNO.SDS.AdminCenter.SimpleMode.CurrConnectBlock({
            width: 452,
            height: 168
        });
        this.topRow = new Ext.Container({
            xtype: "container",
            cls: "dashboard-block top-row",
            layout: "hbox",
            height: 110,
            width: 820,
            items: [this.sysHealthBlock, this.versionBlock, this.quickConnBlock]
        })
    },
    startPollingTask: function() {
        this.storageBlock.storagePanel.onActivate();
        this.resourceBlock.body.onActivate();
        this.connectBlock.gridPanel.onActivate();
        this.sysHealthBlock.onActivate();
        this.versionBlock.onActivate();
        this.quickConnBlock.getQkConnectId()
    },
    stopPollingTask: function() {
        this.storageBlock.storagePanel.onDeactivate();
        this.resourceBlock.body.onDeactivate();
        this.connectBlock.gridPanel.onDeactivate();
        this.versionBlock.onDeactivate();
        this.quickConnBlock.onDeactivate()
    },
    getHelpParam: function() {
        return "AdminCenter/simple_overview.html"
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.UserShareGrid", {
    extend: "SYNO.ux.GridPanel",
    WEBAPI_PARAM_SHARE_TYPE: ["dec", "local", "usb", "sata"],
    WEBAPI_PARAM_ADDITIONAL: ["hidden", "encryption", "is_aclmode"],
    constructor: function(a) {
        this.callParent([this.fillConfig(a)]);
        this.mon(this, "afterrender", this.defineShareGridBehaviors, this)
    },
    fillConfig: function(a) {
        var g = a.newuser;
        var d = (g) ? "admin" : a.username;
        var e = (g) ? "local_group" : a.authType + "_user";
        var f = ["is_aclmode", "is_readonly", "is_writable", "is_deny", "name", "preview", "inherit", "is_custom", "share_path", "is_unite_permission"];
        var c = new SYNO.API.JsonStore({
            autoDestroy: true,
            appWindow: a.appWin,
            api: "SYNO.Core.Share.Permission",
            method: (g) ? "list_by_group" : "list_by_user",
            version: 1,
            baseParams: {
                name: (g) ? "users" : d,
                user_group_type: e,
                share_type: this.WEBAPI_PARAM_SHARE_TYPE,
                additional: this.WEBAPI_PARAM_ADDITIONAL
            },
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onStoreException
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            },
            root: "shares",
            idProperty: "name",
            totalProperty: "total",
            fields: f
        });
        var k = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_readonly"),
            dataIndex: "is_readonly",
            width: 120,
            align: "center",
            ownerGrid: this,
            isIgnore: function(m, l) {
                return (this.ownerGrid.isAdminGroupMember === true && l.get("is_aclmode"))
            },
            renderer: function(n, m, l) {
                if (this.ownerGrid.isAdminGroupMember === true && l.get("is_aclmode")) {
                    return '<div class="syno-ux-grid-enable-column-disabled">&nbsp;</div>'
                } else {
                    return SYNO.ux.EnableColumn.prototype.renderer(n, m, l)
                }
            }
        });
        var h = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_writable"),
            dataIndex: "is_writable",
            width: 120,
            align: "center"
        });
        var j = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_none"),
            dataIndex: "is_deny",
            width: 120,
            align: "center"
        });
        var i = new Ext.grid.ColumnModel([{
            id: "name",
            header: _T("share", "share_name"),
            dataIndex: "name",
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultNameColumnWidth
        }, {
            header: _T("share", "share_preview"),
            id: "preview",
            dataIndex: "preview",
            align: "center",
            useHtmlEncodeRender: false,
            width: 110
        }, k, h, j]);
        var b = {
            title: _T("share", "share_rights"),
            cm: i,
            ds: c,
            cls: "without-dirty-red-grid",
            plugins: [k, h, j],
            autoExpandColumn: "name",
            enableColLock: false,
            enableHdMenu: false,
            enableColumnMove: false,
            colRo: k,
            colRw: h,
            colNa: j,
            clicksToEdit: 1,
            loadMask: true,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            bbar: [_T("share", "share_privileges_priority")]
        };
        return Ext.apply(b, a)
    },
    defineShareGridBehaviors: function() {
        this.colRo.checkSelectAll(this.getStore());
        this.colRw.checkSelectAll(this.getStore());
        this.colNa.checkSelectAll(this.getStore());
        this.mon(this, "cellclick", this.onGridCellClick, this);
        this.mon(this, "headerclick", function(d, c, b) {
            var a = d.getColumnModel();
            var e = a.getColumnId(c);
            this.onGridHeaderClick.call(this, a.getColumnById(e))
        }, this)
    },
    setAdminGroupMember: function(a) {
        this.isAdminGroupMember = a;
        if (this.isAdminGroupMember) {
            var b = this.getStore();
            b.suspendEvents(false);
            b.each(function(c) {
                if (c.get("is_aclmode")) {
                    this.restorePermission(c, "is_readonly")
                }
            }, this);
            this.checkPreviewAll();
            b.resumeEvents()
        }
        this.getView().refresh()
    },
    restorePermission: function(b, a) {
        var c = b.getChanges();
        if (c.hasOwnProperty(a)) {
            b.set(a, !c[a])
        }
    },
    getFinalPermission: function(a) {
        if (a.data.inherit === "na") {
            return "na"
        } else {
            if (a.data.inherit === "cu") {
                if (a.data.is_deny) {
                    return "na"
                } else {
                    return "cu"
                }
            } else {
                if (a.data.inherit === "rw") {
                    if (a.data.is_deny) {
                        return "na"
                    } else {
                        if (a.data.is_custom) {
                            return "cu"
                        } else {
                            return "rw"
                        }
                    }
                } else {
                    if (a.data.is_deny) {
                        return "na"
                    } else {
                        if (a.data.is_custom) {
                            return "cu"
                        } else {
                            if (a.data.is_writable) {
                                return "rw"
                            } else {
                                if (a.data.inherit === "-" && !a.data.is_readonly) {
                                    return "na"
                                } else {
                                    return (this.isAdminGroupMember === true && a.data.is_aclmode) ? "rw" : "ro"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    checkPreviewAll: function() {
        this.getStore().each(function(a) {
            this.checkPreview(a)
        }, this)
    },
    checkPreview: function(a) {
        a.set("preview", SYNO.SDS.AdminCenter.Share.Utils.colorizePermission(this.getFinalPermission(a)))
    },
    onLoad: function(b, a, c) {
        b.suspendEvents(false);
        if (this.newuser) {
            Ext.each(a, function(d) {
                d.set("inherit", SYNO.SDS.AdminCenter.Share.Utils.convertBoolPermissions(d));
                d.set("is_custom", false);
                d.set("is_deny", false);
                d.set("is_writable", false);
                d.set("is_readonly", false)
            }, this)
        }
        this.checkPreviewAll();
        b.commitChanges();
        b.resumeEvents();
        this.getView().refresh()
    },
    onStoreException: function() {
        this.appWin.getMsgBox().alert("error", _T("user", "failed_load_user"))
    },
    updateUserName: function(a) {
        this.username = a
    },
    getWebAPI: function() {
        var a = [];
        Ext.each(this.getStore().getModifiedRecords(), function(b) {
            a.push({
                name: b.data.name,
                is_readonly: b.data.is_readonly,
                is_writable: b.data.is_writable,
                is_deny: b.data.is_deny
            })
        });
        return (a.length === 0) ? [] : [{
            api: "SYNO.Core.Share.Permission",
            method: "set_by_user_group",
            version: 1,
            params: {
                name: this.username,
                user_group_type: this.authType + "_user",
                permissions: a
            }
        }]
    },
    onGridHeaderClick: function(a) {
        if (a.box_el) {
            if (a.box_el.hasClass("syno-ux-cb-checked")) {
                if (a.dataIndex !== "is_readonly") {
                    this.colRo.box_el.removeClass("syno-ux-cb-checked");
                    this.colRo.onSelectAll()
                }
                if (a.dataIndex !== "is_writable") {
                    this.colRw.box_el.removeClass("syno-ux-cb-checked");
                    this.colRw.onSelectAll()
                }
                if (a.dataIndex !== "is_deny") {
                    this.colNa.box_el.removeClass("syno-ux-cb-checked");
                    this.colNa.onSelectAll()
                }
            }
        }
        this.checkPreviewAll();
        this.getStore().resumeEvents();
        this.getView().refresh()
    },
    onGridCellClick: function(c, i, d, h) {
        var a = c.getStore().getAt(i);
        var g = c.getColumnModel().getDataIndex(d);
        var f = function(e) {
            return (e === "is_readonly" || e === "is_writable" || e === "is_deny")
        };
        var b = function(j, e) {
            if ("is_readonly" !== j) {
                e.set("is_readonly", false);
                c.colRo.checkSelectAll(c.getStore())
            }
            if ("is_writable" !== j) {
                e.set("is_writable", false);
                c.colRw.checkSelectAll(c.getStore())
            }
            if ("is_deny" !== j) {
                e.set("is_deny", false);
                c.colNa.checkSelectAll(c.getStore())
            }
        };
        if (f(g)) {
            if (a.get(g) === true) {
                b(g, a)
            }
        }
        this.checkPreview(a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.UserList", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 2048,
    authType: "local",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            store: this.createStore(a),
            colModel: this.initColumnModel(),
            header: false,
            hideHeaders: true,
            cls: "simple-mode-panel-list-panel",
            pageSize: this.pageSize,
            view: new SYNO.ux.FleXcroll.grid.BufferView({
                cacheSize: 100,
                forceFit: true
            }),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true,
                listeners: {
                    selectionchange: {
                        fn: function(d) {
                            var c = d.getSelections();
                            if (this.newRec && this.newRec !== c[0]) {
                                this.getStore().remove(this.newRec);
                                this.newRec = null
                            }
                            this.fireEvent("gridselectionchange", c, (c[0] === this.newRec))
                        },
                        buffer: 50,
                        scope: this
                    },
                    beforerowselect: {
                        fn: function(c, d, e, f) {
                            if (f.get("name").toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
                                return false
                            }
                            return true
                        },
                        scope: this
                    }
                }
            })
        }, a);
        return b
    },
    initColumnModel: function() {
        var a = new Ext.grid.ColumnModel({
            columns: [{
                id: "data",
                renderer: function(g, c, b) {
                    var i = Ext.util.Format.htmlEncode(g),
                        e = _T("user", "user_unnamed"),
                        h = (g.toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) ? " disable-font" : " normal-font",
                        f = '<div> <div class="simple-mode-list-img">{0}</div><div class="simple-mode-list-text"><p class="simple-mode-list-title' + h + '">' + i + '</p><p class="simple-mode-list-fake-title disable-font title-not-display">' + e + "</p></div></div>",
                        d = (this.gridWrapCls) ? '<div class="' + this.gridWrapCls + '"></div>' : "";
                    c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(i) + '"';
                    return String.format(f, d)
                },
                scope: this
            }],
            scope: this
        });
        return a
    },
    createStore: function(a) {
        return new SYNO.API.JsonStore({
            api: "SYNO.Core.User",
            method: "list",
            version: 1,
            appWindow: a.appWin,
            baseParams: {
                type: this.authType,
                offset: 0,
                limit: this.pageSize,
                additional: ["type", "description", "expired"]
            },
            root: "users",
            totalProperty: "total",
            id: "name",
            fields: ["name", "description", "type", "expired"],
            remoteSort: true,
            defaultSortable: false,
            scope: this,
            listeners: {
                scope: this,
                buffer: 50,
                load: function(b, d, c) {
                    this.appWin.clearStatusBusy();
                    this.fireEvent("userlistloaded", d, c.name)
                }
            }
        })
    },
    onActive: function(a) {
        this.appWin.setStatusBusy();
        this.getStore().reload(a)
    },
    insertNewRow: function() {
        if (this.newRec) {
            return
        }
        this.newRec = new Ext.data.Record({
            name: "",
            type: "local"
        }, "create_new_user");
        this.getStore().add(this.newRec);
        var c = this.getEl().child(".x-grid3-row-last"),
            a = c.child(".simple-mode-list-title"),
            b = c.child(".simple-mode-list-fake-title");
        a.addClass("title-not-display");
        b.removeClass("title-not-display");
        this.selModel.selectLastRow();
        this.fleXcrollTo(c)
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.UserFormPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    userList: [],
    pageSize: 50,
    newuser: true,
    authType: "local",
    specialAccounts: ["guest", "admin"],
    constructor: function(a) {
        this.callParent([this.fillConfig(a)]);
        this.mon(this.form.findField("name"), "valid", this.validUserName, this);
        this.mon(this.form.findField("name"), "keyup", this.fieldSetByUser, this)
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            useDefaultBtn: true,
            cls: "simple-mode-user-formpanel",
            encryption: ["password"],
            trackResetOnLoad: true,
            items: this.createObjs(a),
            compound: {
                stopwhenerror: true,
                params: []
            },
            padding: "0 0 0 0",
            listeners: {
                scope: this,
                resize: this.adjustGridHeight
            }
        }, a);
        return b
    },
    fieldSetByUser: function() {
        var a = this.form.findField("name");
        a.isSetAuto = false
    },
    updateFormPanel: function(a) {
        this.changeUser = true;
        var b = this.form.findField("name");
        b.isSetAuto = true;
        this.newuser = a.newuser;
        this.username = a.username;
        this.authType = a.authType;
        this.userdesc = a.description;
        this.disable_account = a.disable_account;
        this.reloadGroup(a)
    },
    getApplyBtn: function() {
        return this.getFooterToolbar().items.items[2]
    },
    validUserName: function() {
        if (this.newuser !== true) {
            return
        }
        var a = this.form.findField("name");
        var b = a.getValue();
        if (a.isSetAuto === true) {
            return
        }
        if (!a.isDirty() && b !== "") {
            return
        }
        if (b.toUpperCase() === "MAILER-DAEMON" || b.toUpperCase() === "POSTMASTER" || b.toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
            this.fireEvent("fieldinvalid");
            a.markInvalid(_T("common", "reservedname"));
            return
        }
        this.sendWebAPI({
            api: "SYNO.Core.User",
            method: "get",
            version: 1,
            params: {
                action: "get",
                name: b
            },
            callback: function(e, d, c) {
                if (e) {
                    this.fireEvent("fieldinvalid");
                    a.markInvalid(_T("user", "error_nameused"));
                    return
                }
            },
            scope: this
        })
    },
    isFormDirty: function() {
        if (!this.form.isDirty() && this.shareGrid.store.getModifiedRecords().length === 0) {
            return false
        }
        return true
    },
    reloadGroup: function(a) {
        var b = this.groupBox.getStore().baseParams;
        b.substr = "";
        if (this.newuser === true) {
            b.user = null
        } else {
            b.user = this.username
        }
        this.groupBox.store.reload({
            params: this.groupBox.store.baseParams
        })
    },
    adjustGridHeight: function() {
        if (!this.shareGrid) {
            return
        }
        var a = 0,
            b = this.form.getEl().query(".x-form-item"),
            c;
        for (c = 0; c < b.length; c++) {
            var d = b[c],
                e = d.getHeight() + parseInt(d.getStyle("marginTop"), 10) + parseInt(d.getStyle("marginBottom"), 10);
            a += e
        }
        a += parseInt(this.shareGrid.getEl().getStyle("marginTop"), 10);
        this.shareGrid.setHeight(this.form.getEl().getHeight() - a)
    },
    removeShareGrid: function() {
        if (!this.shareGrid) {
            return
        }
        this.remove(this.shareGrid, true);
        this.shareGrid = null
    },
    initShareGrid: function() {
        this.removeShareGrid();
        this.shareGrid = new SYNO.SDS.AdminCenter.SimpleMode.UserShareGrid({
            module: this,
            owner: this,
            appWin: this.appWin,
            itemId: "sharegrid",
            title: _T("user", "user_share_permission"),
            header: true,
            height: 260,
            username: this.username,
            authType: this.authType,
            newuser: this.newuser,
            isAdminGroupMember: this.isAdminGroupMember
        });
        this.shareGrid.getStore().load();
        this.add(this.shareGrid);
        this.doLayout();
        this.adjustGridHeight()
    },
    createObjs: function(a) {
        var b = this;
        b.groupBox = new SYNO.ux.SuperBoxSelect({
            fieldLabel: _T("helptoc", "group"),
            displayField: "name",
            valueField: "name",
            name: "group",
            triggerAction: "all",
            grow: true,
            width: 396,
            queryParam: "substr",
            minChars: 1,
            typeAhead: true,
            allowBlank: false,
            allowQueryAll: true,
            multiSelectMode: true,
            listeners: {
                scope: this,
                valuechanged: {
                    scope: this,
                    buffer: 500,
                    fn: this.onGroupChange
                },
                afterrender: {
                    scope: this,
                    fn: function() {
                        this.groupBox.outerWrapEl.addClass("simplemode-group-superboxselect")
                    }
                },
                clear: {
                    scope: this,
                    fn: this.onGroupClear
                }
            },
            store: new SYNO.API.JsonStore({
                appWindow: a.appWin,
                autoDestroy: true,
                api: "SYNO.Core.Group",
                method: "list",
                version: 1,
                baseParams: {
                    offset: 0,
                    limit: this.pageSize,
                    name_only: false,
                    type: "local"
                },
                fields: ["name", "is_member"],
                root: "groups",
                id: "name",
                remoteSort: false,
                listeners: {
                    scope: this,
                    load: this.onGroupLoad
                }
            })
        });
        var c = [{
            xtype: "syno_textfield",
            fieldLabel: _T("common", "name") + ' <font class="red-status">' + _T("common", "star") + "</font>",
            name: "name",
            allowBlank: false,
            enableKeyEvents: true,
            blankText: _T("user", "error_noname"),
            vtype: "username",
            maxLength: 64,
            startValidate: false,
            validationEvent: "keyup",
            validateOnBlur: true,
            validationDelay: 250
        }, {
            xtype: "syno_textfield",
            name: "description",
            value: "",
            hidden: true
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("common", "password"),
            name: "password",
            textType: "password",
            maxLength: 127,
            startValidate: false
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("user", "user_repswd"),
            name: "password_confirm",
            textType: "password_confirm",
            confirmFor: "password",
            validator: function(e) {
                var d = this.ownerCt.form.findField(this.confirmFor),
                    f = d.getValue();
                if ((e !== f) && ((f !== "12345678") || (e !== "87654321"))) {
                    return _T("pppoe", "error_password")
                }
                return true
            }
        }, this.groupBox, {
            xtype: "syno_checkbox",
            boxLabel: _T("user", "user_account_disable"),
            name: "disable_account",
            checked: false
        }];
        return c
    },
    setValidator: function(b) {
        var c = this,
            a = (undefined !== b) && (b.passwordPolicy.strong_password_enable && (b.passwordPolicy.mixed_case || b.passwordPolicy.included_numeric_char || b.passwordPolicy.included_special_char || b.passwordPolicy.min_length_enable));
        this.passwordChecker = b;
        this.passwordChecker.initPasswordChecker({
            getForm: function() {
                return c.form
            },
            getUserAcc: "name",
            getUserDesc: "description",
            getPasswd: "password",
            getPasswdConfirm: "password_confirm",
            getStartValidate: function() {
                return c.form.findField("password").startValidate
            }
        });
        this.form.findField("password").validator = this.passwordChecker.isStrongValidator.createDelegate(this.passwordChecker);
        if (a) {
            this.form.findField("password").label.update(_T("common", "password") + ' <font class="red-status">' + _T("common", "star") + "</font>");
            this.form.findField("password_confirm").label.update(_T("user", "user_repswd") + ' <font class="red-status">' + _T("common", "star") + "</font>")
        } else {
            this.form.findField("password").label.update(_T("common", "password"));
            this.form.findField("password_confirm").label.update(_T("user", "user_repswd"))
        }
    },
    onActive: function() {
        this.groupBox.getStore().load()
    },
    checkSpecialAccout: function(a) {
        for (var b = 0; b < this.specialAccounts.length; b++) {
            if (this.specialAccounts[b] === a) {
                return true
            }
        }
        return false
    },
    checkSelf: function(a) {
        if (this.appWin._S("user") === a || (this.appWin.getOpenConfig("cms_self") === true && _S("user") === a)) {
            return true
        }
        return false
    },
    checkIgnored: function(a, b) {
        if (a.toLowerCase() === "users") {
            return true
        } else {
            if (a.toLowerCase() === "administrators" && ("admin" === b || "guest" === b || this.appWin._S("user") === b)) {
                return true
            }
        }
        return false
    },
    preventRemoveGroups: function() {
        var a = this.groupBox.items.items;
        a.each(function(b) {
            if (this.checkIgnored(b.value, this.username)) {
                b.disable()
            }
        }, this)
    },
    fillFormValues: function(c) {
        var b = this.groupBox.navigateItemsWithTab;
        this.groupBox.navigateItemsWithTab = false;
        this.form.findField("password").startValidate = false;
        if (this.newuser !== true) {
            this.form.setValues({
                name: this.username,
                password: "12345678",
                password_confirm: "87654321",
                description: this.userdesc,
                disable_account: this.disable_account,
                group: c.sort().join(",")
            });
            this.form.findField("name").setDisabled(this.checkSpecialAccout(this.username));
            this.form.findField("disable_account").setDisabled(this.checkSelf(this.username))
        } else {
            this.form.setValues({
                name: "",
                password: "",
                password_confirm: "",
                group: "users",
                description: "",
                disable_account: false
            });
            this.form.findField("name").enable();
            this.form.findField("disable_account").enable()
        }
        this.form.findField("password").startValidate = true;
        this.preventRemoveGroups();
        this.initShareGrid();
        this.changeUser = false;
        var a = new Ext.util.DelayedTask(function() {
            this.groupBox.navigateItemsWithTab = b
        }, this);
        a.delay(2000)
    },
    onGroupClear: function(b) {
        var a = b.originalValue.split(",");
        a.each(function(c) {
            if (this.checkIgnored(c, this.username)) {
                b.addValue(c)
            }
        }, this);
        this.preventRemoveGroups()
    },
    onGroupChange: function(e, g, f) {
        if (!this.shareGrid) {
            return
        }
        var d = this.shareGrid.getStore(),
            h = d.method,
            c = d.baseParams.name,
            b = e.getValue().split(","),
            a = false;
        if (this.newuser === true && h === "list_by_group" && c !== this.groupBox.getValue()) {
            Ext.apply(this.shareGrid.getStore().baseParams, {
                name: this.groupBox.getValue().split(",")
            });
            this.shareGrid.store.reload()
        }
        b.each(function(i) {
            if (i.toLowerCase() === "administrators") {
                a = true
            }
        });
        this.shareGrid.setAdminGroupMember(a)
    },
    onGroupLoad: function(a, e, c) {
        var b, f = [],
            d;
        if (this.changeUser !== true) {
            return
        }
        this.isAdminGroupMember = false;
        for (b = 0; b < e.length; b++) {
            d = e[b].data;
            if (d.is_member === true) {
                if (d.name.toLowerCase() === "administrators") {
                    this.isAdminGroupMember = true
                }
                f.push(d.name)
            }
        }
        this.fillFormValues(f)
    },
    getWebAPIParam: function() {
        var d = this.form;
        var k = d.findField("name").originalValue,
            i = d.findField("name").getValue(),
            g = (k !== i),
            m = [],
            c = d.findField("name").isDirty(),
            o = d.findField("password").isDirty(),
            f = d.findField("disable_account").isDirty(),
            j = d.findField("group").isDirty(),
            b = c || o || f;
        this.shareGrid.updateUserName(i);
        if (b) {
            m.push({
                api: "SYNO.Core.User",
                method: (this.newuser === true) ? "create" : "set",
                version: 1,
                params: {
                    name: (this.newuser === true) ? i : k
                }
            });
            if (g === true && this.newuser !== true) {
                Ext.apply(m[0].params, {
                    new_name: i
                })
            }
            if (f) {
                Ext.apply(m[0].params, {
                    expired: d.findField("disable_account").getValue() ? "now" : "normal"
                })
            }
            if (o) {
                Ext.apply(m[0].params, {
                    password: d.findField("password").getValue()
                })
            }
        }
        if (j || this.newuser === true) {
            var l = [],
                a = [];
            if (this.newuser) {
                var e = d.findField("group").getValue().split(",");
                e.splice(e.indexOf("users"), 1);
                l = e;
                a = []
            } else {
                var n = d.findField("group").originalValue.split(",");
                var h = d.findField("group").getValue().split(",");
                n.each(function(p) {
                    if (h.indexOf(p) < 0) {
                        a.push(p)
                    }
                });
                h.each(function(p) {
                    if (n.indexOf(p) < 0) {
                        l.push(p)
                    }
                })
            }
            l.each(function(p) {
                m.push({
                    api: "SYNO.Core.Group.Member",
                    method: "add",
                    version: 1,
                    params: {
                        group: p,
                        name: i
                    }
                })
            });
            a.each(function(p) {
                m.push({
                    api: "SYNO.Core.Group.Member",
                    method: "remove",
                    version: 1,
                    params: {
                        group: p,
                        name: i
                    }
                })
            })
        }
        return m.concat(this.shareGrid.getWebAPI())
    },
    getCompoundCfg: function() {
        return {
            stopwhenerror: true
        }
    },
    processParams: function(b, a) {
        a = this.getWebAPIParam();
        return a
    },
    onBeforeAction: function(b, d) {
        var c = b.findField("group"),
            a = c.getValue().split(",").sort().join(",");
        c.setValue(a);
        this.preventRemoveGroups();
        if (this.form.findField("name").el.hasClass("x-form-invalid") === true) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        return this.callParent(arguments)
    },
    cancelHandler: function(b, a) {
        this.callParent([arguments]);
        this.shareGrid.store.rejectChanges();
        this.shareGrid.colRo.checkSelectAll(this.shareGrid.getStore());
        this.shareGrid.colRw.checkSelectAll(this.shareGrid.getStore());
        this.shareGrid.colNa.checkSelectAll(this.shareGrid.getStore());
        this.preventRemoveGroups()
    },
    onApiSuccess: function(e, d, c) {
        if (d.has_fail) {
            var b;
            b = SYNO.API.getErrorString(d);
            this.appWin.getMsgBox().alert(_T("tree", "leaf_user"), b);
            return
        }
        var a = c.compound[0];
        this.fireEvent("usersetdone", a.new_name || a.name)
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.User", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.module = this;
        this.callParent([this.fillConfig(a)]);
        this.mon(this.userListPanel, "gridselectionchange", this.onGridSelectionChange, this);
        this.mon(this.userListPanel, "userlistloaded", this.onUserListLoad, this);
        this.mon(this.userEidtPanel, "usersetdone", this.onUserSetDone, this)
    },
    fillConfig: function(a) {
        this.userListPanel = new SYNO.SDS.AdminCenter.SimpleMode.UserList({
            region: "west",
            width: 218,
            border: false,
            layout: "fit",
            appWin: a.appWin,
            parentTab: this,
            gridWrapCls: "simple-mode-list-user-bg",
            view: new SYNO.ux.FleXcroll.grid.GridView({
                onLayout: function(d, f) {
                    var c = this,
                        e = c.scroller.dom;
                    if (!c.autoFlexcroll) {
                        return
                    }
                    if (e.clientWidth === e.offsetWidth) {
                        c.scrollOffset = 12
                    } else {
                        c.scrollOffset = undefined
                    }
                    this.fitColumns(false);
                    c.updateScrollbar(e)
                }
            })
        });
        this.userEidtPanel = new SYNO.SDS.AdminCenter.SimpleMode.UserFormPanel({
            region: "center",
            border: false,
            parentTab: this,
            appWin: a.appWin,
            module: this,
            owner: a.appWin
        });
        var b = Ext.apply({
            layout: "border",
            cls: "simple-mode-list-panel",
            bindWindowEvents: false,
            items: [{
                region: "west",
                split: true,
                width: 218,
                layout: "fit",
                border: false,
                tbar: this.getTBar(),
                tbarCfg: {
                    cls: "simple-mode-list-tbar"
                },
                items: [this.userListPanel]
            }, {
                region: "center",
                layout: "fit",
                xtype: "panel",
                cls: "simple-mode-right-panel",
                items: [this.userEidtPanel],
                border: false
            }],
            listeners: {
                scope: this,
                activate: this.activate
            }
        }, a);
        return b
    },
    getHelpParam: function() {
        return "AdminCenter/simple_user.html"
    },
    confirmCallback: function(a) {
        if (a === "yes") {
            this.userEidtPanel.cancelHandler()
        }
    },
    checkDeactivate: function() {
        if (this.userEidtPanel.isFormDirty() === true) {
            return false
        }
        return true
    },
    getPasswordChecker: function() {
        this.passwordChecker = new SYNO.SDS.Utils.CheckStrongPassword();
        this.appWin.setStatusBusy();
        this.appWin.sendWebAPI({
            api: "SYNO.Core.User.PasswordPolicy",
            version: 1,
            method: "get",
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    this.appWin.clearStatusBusy();
                    SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, b.code);
                    return
                }
                SYNO.SDS.AdminCenter.User.applyPasswordPolicy(this.passwordChecker, b.strong_password);
                this.userEidtPanel.setValidator(this.passwordChecker);
                this.appWin.clearStatusBusy()
            }
        })
    },
    activate: function() {
        this.userListPanel.onActive();
        this.getPasswordChecker()
    },
    getTBar: function() {
        this.createUserBtn = new SYNO.ux.Button({
            cls: "simple-mode-create-btn",
            width: 100,
            text: "",
            handler: this.createUserHandler,
            scope: this
        });
        this.deleteUserBtn = new SYNO.ux.Button({
            cls: "simple-mode-delete-btn",
            width: 100,
            text: "",
            handler: this.deleteUserHandler,
            scope: this
        });
        return {
            xtype: "syno_toolbar",
            items: [this.createUserBtn, this.deleteUserBtn]
        }
    },
    checkExpiredStatus: function(e) {
        var c = false,
            b = /([\d]{4})\/([\d]+)\/([\d]+)/;
        if (e.data.expired === "now") {
            c = true
        } else {
            if (b.match(e.data.expired)) {
                var d = new Date(e.data.expired),
                    a = new Date();
                c = (d - a) < 0
            } else {
                c = false
            }
        }
        return c
    },
    onGridSelectionChange: function(a, c) {
        if (a.length !== 1) {
            return
        }
        var d = a[0],
            b = this.checkExpiredStatus(d);
        this.username = d.id;
        this.userEidtPanel.updateFormPanel({
            newuser: c,
            username: this.username,
            description: d.get("description"),
            authType: d.data.type,
            disable_account: b
        });
        this.deleteUserBtn.setDisabled(c);
        if (this.username.toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
            this.userEidtPanel.el.mask()
        } else {
            this.userEidtPanel.el.unmask()
        }
    },
    createUserHandler: function() {
        this.userListPanel.insertNewRow()
    },
    deleteUserHandler: function() {
        var a = this.userListPanel.getSelectionModel();
        if (this.selectReservedUser(a)) {
            this.appWin.getMsgBox().alert(_T("tree", "leaf_user"), _T("user", "error_rmvdef"));
            return
        }
        if (a.isIdSelected(this._S("user"))) {
            this.appWin.getMsgBox().alert(_T("tree", "leaf_user"), _T("user", "error_rmvcur"));
            return
        }
        this.loadHomeInfoAndDelete()
    },
    selectReservedUser: function(b) {
        var a = false;
        Ext.each(b.getSelections(), function(c) {
            if (c.id.toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
                a = true;
                return false
            }
        });
        return b.isIdSelected("admin") || a || b.isIdSelected("guest")
    },
    loadHomeInfoAndDelete: function() {
        this.appWin.setStatusBusy();
        this.appWin.sendWebAPI({
            api: "SYNO.Core.User.Home",
            version: 1,
            method: "get",
            callback: function(c, b, a) {
                if (this.isDestroyed) {
                    return
                }
                this.appWin.clearStatusBusy();
                if (!c) {
                    SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, b.code);
                    return
                }
                this.launchUserDeletionDialog(b.enable)
            },
            scope: this
        })
    },
    launchUserDeletionDialog: function(e) {
        var a = this.userListPanel.getSelectionModel().getSelections();
        var d = [];
        var b = 0;
        var c = null;
        if (a.length === 0) {
            SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("user", "error_rmvempty"));
            return
        }
        for (b = 0; b < a.length; b++) {
            d.push(a[b].get("name"))
        }
        c = new SYNO.SDS.AdminCenter.User.DeleteDialog({
            owner: this.appWin,
            module: this,
            appWin: this.appWin,
            ownerGrid: this.userListPanel,
            homesExist: e
        });
        c.loadUserName(d);
        c.show()
    },
    onUserListLoad: function(f, c) {
        if (f.length <= 0) {
            return
        }
        var a = this.userListPanel.store.getTotalCount();
        this.createUserBtn.setDisabled(a >= this._D("maxaccounts"));
        if (Ext.isEmpty(c)) {
            this.userListPanel.selModel.selectFirstRow()
        } else {
            var d = this.userListPanel.store.indexOfId(c),
                e = this.userListPanel.getEl(),
                b;
            this.userListPanel.selModel.selectRow(d);
            b = e.child(".x-grid3-row-selected");
            this.userListPanel.fleXcrollTo(b)
        }
    },
    onUserSetDone: function(a) {
        this.userListPanel.onActive({
            name: a
        })
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Share");
Ext.define("SYNO.SDS.AdminCenter.Share.Delete", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.share = a.share;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            title: _T("share", "share_delete"),
            width: 420,
            height: 300,
            layout: "fit",
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "delete"),
                itemId: "apply",
                btnStyle: "red",
                disabled: true,
                scope: this,
                handler: this.applySetting
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                itemId: "cancel",
                scope: this,
                handler: this.close
            }],
            items: [{
                xtype: "syno_formpanel",
                itemId: "deleteFormPanel",
                items: [{
                    xtype: "syno_displayfield",
                    name: "message"
                }, {
                    xtype: "syno_displayfield",
                    name: "sharename"
                }, {
                    xtype: "syno_checkbox",
                    boxLabel: String.format('<span class="red-status">{0}</span>', _T("share", "share_delete_confirm")),
                    listeners: {
                        check: {
                            scope: this,
                            fn: this.onCheckboxCheck
                        }
                    }
                }]
            }]
        };
        Ext.apply(b, a);
        return b
    },
    loadShareName: function(d, b) {
        var c = this.getComponent("deleteFormPanel").getForm();
        var e = c.findField("message");
        var a = c.findField("sharename");
        e.setValue(d);
        a.setValue(String.format('<div style="padding: 5px;">{0}</div>', b.join(", ")));
        this.shares = b
    },
    onCheckboxCheck: function(c, b) {
        var a = this.getFooterToolbar().getComponent("apply");
        a.setDisabled(!b)
    },
    applySetting: function() {
        this.close();
        this.submitDeleteShare(this)
    },
    submitDeleteShare: function(a) {
        this.module.appWin.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            method: "delete",
            params: {
                name: this.shares
            },
            version: 1,
            scope: this,
            callback: this.afterDeleteShare
        })
    },
    afterDeleteShare: function(e, d, b) {
        var a = [];
        this.module.appWin.clearStatusBusy();
        if (!e) {
            this.module.appWin.getMsgBox().alert("warning_msg", SYNO.API.getErrorString(d.code));
            return
        }
        SYNO.SDS.StatusNotifier.fireEvent("sharefolderchanged", "delete");
        if (!d) {
            this.module.store.load();
            return true
        }
        if (d.hasOwnProperty("warning_external")) {
            var f = String.format("{0} ({1})", _T("share", "share_cannot_delete_for_reserved"), d.warning_external.join(""));
            a.push(f)
        }
        if (d.hasOwnProperty("warning_mount_point")) {
            var c = String.format("{0} ({1})", _T("share", "error_mount_point_delete"), d.warning_mount_point.join(""));
            a.push(c)
        }
        if (0 < a.length) {
            this.module.appWin.getMsgBox().alert("warning_msg", a.join(""))
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.ShareList", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.pageSize = 256;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            store: this.createStore(a),
            colModel: this.initColumnModel(),
            header: false,
            hideHeaders: true,
            cls: "simple-mode-panel-list-panel",
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true,
                silentMode: true,
                listeners: {
                    scope: this,
                    rowselect: function(d) {
                        var c = d.getSelections();
                        if (this.newRec && this.newRec !== c[0]) {
                            this.getStore().remove(this.newRec);
                            this.newRec = null
                        }
                        this.fireEvent("gridselectionchange", c, (c[0] === this.newRec))
                    }
                }
            }),
            listeners: {
                beforedestroy: this.onBeforeDestroy,
                scope: this
            }
        }, a);
        return b
    },
    initColumnModel: function() {
        var a = new Ext.grid.ColumnModel({
            columns: [{
                id: "data",
                renderer: function(g, c, b) {
                    var h = Ext.util.Format.htmlEncode(g),
                        e = _T("share", "share_unnamed"),
                        f = '<div> <div class="simple-mode-list-img">{0}</div> <div class="simple-mode-list-text"><p class="simple-mode-list-title normal-font">' + h + '</p><p class="simple-mode-list-fake-title disable-font title-not-display">' + e + "</p></div></div>",
                        d = (this.gridWrapCls) ? '<div class="' + this.gridWrapCls + '"></div>' : "";
                    c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(h) + '"';
                    return String.format(f, d)
                },
                scope: this
            }],
            scope: this
        });
        return a
    },
    createStore: function(a) {
        return new SYNO.API.JsonStore({
            api: "SYNO.Core.Share",
            method: "list",
            version: 1,
            appWindow: a.appWin,
            baseParams: {
                additional: ["is_aclmode", "unite_permission", "recyclebin", "encryption", "share_quota", "support_snapshot", "is_usb_share", "external_dev_type"],
                shareType: "all",
                offset: 0,
                limit: this.pageSize
            },
            fields: ["name", "vol_path", "is_aclmode", "unite_permission", "enable_recycle_bin", "encryption", "quota_value", "share_quota_used", "support_snapshot", "is_usb_share", "external_dev_type"],
            root: "shares",
            idProperty: "name",
            totalProperty: "total",
            id: "name",
            scope: this,
            listeners: {
                scope: this,
                buffer: 50,
                load: function(b, d, c) {
                    this.appWin.clearStatusBusy();
                    this.fireEvent("sharelistloaded", d, c.name, c.gridRequest)
                }
            }
        })
    },
    onVolumeLoad: function(e, d, c, a) {
        this.appWin.clearStatusBusy();
        var b;
        if (true === d.isTimeout || true === d.has_fail) {
            b = _T("common", "error_system");
            this.appWin.getMsgBox().alert(this.title, b)
        } else {
            if (e === true && d.volumes && d.volumes.length > 0) {
                this.fireEvent("volumeloaded", d.volumes);
                if (this.selModel.hasSelection()) {
                    this.getStore().load({
                        name: this.selModel.getSelected().get("name")
                    })
                } else {
                    this.getStore().load()
                }
            } else {
                this.getStore().load();
                this.fireEvent("novolumedetected")
            }
        }
    },
    onActive: function(b, a) {
        if (b) {
            this.appWin.setStatusBusy();
            this.getStore().load({
                name: b,
                gridRequest: a
            });
            return
        }
        this.appWin.setStatusBusy();
        this.volReqId = this.sendWebAPI({
            api: "SYNO.Core.Storage.Volume",
            method: "list",
            params: {
                limit: -1,
                offset: 0,
                location: this._D("usbstation") === "" ? "internal" : "external"
            },
            version: 1,
            callback: this.onVolumeLoad,
            scope: this
        })
    },
    insertNewRow: function() {
        if (this.newRec) {
            return
        }
        var a = new Ext.data.Record.create([{
            name: "name",
            type: "string"
        }, {
            name: "enable_recycle_bin",
            type: "bool"
        }, {
            name: "is_aclmode",
            type: "bool"
        }]);
        this.newRec = new a({
            name: "",
            enable_recycle_bin: false,
            is_aclmode: true
        });
        this.getStore().add(this.newRec);
        var d = this.getEl().child(".x-grid3-row-last"),
            b = d.child(".simple-mode-list-title"),
            c = d.child(".simple-mode-list-fake-title");
        b.addClass("title-not-display");
        c.removeClass("title-not-display");
        this.selModel.selectLastRow();
        this.fleXcrollTo(d)
    },
    onBeforeDestroy: function() {
        Ext.Ajax.abort(this.volReqId)
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.ShareFormPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    pageSize: 1000,
    moveShareMsg: String.format('<div style="text-align: center;"> {0} </div>', _T("share", "share_move_progress")),
    constructor: function(a) {
        this.defineGrid();
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            useDefaultBtn: true,
            cls: "simple-mode-share-formpanel",
            items: this.createObjs(a),
            trackResetOnLoad: true,
            padding: "0 0 0 0",
            listeners: {
                scope: this,
                resize: this.adjustGridHeight
            }
        }, a);
        return b
    },
    adjustGridHeight: function() {
        if (!this.shareGrid) {
            return
        }
        var a = 0,
            b = this.form.getEl().query(".x-form-item"),
            c;
        for (c = 0; c < b.length; c++) {
            var d = b[c],
                e = d.getHeight() + parseInt(d.getStyle("marginTop"), 10) + parseInt(d.getStyle("marginBottom"), 10);
            if (d.getStyle("display") !== "none") {
                a += e
            }
        }
        a += Ext.getCmp(this.cleanBinBtnId).getHeight();
        a += parseInt(this.shareGrid.getEl().getStyle("marginTop"), 10);
        this.shareGrid.setHeight(this.form.getEl().getHeight() - a)
    },
    createObjs: function(a) {
        this.cleanBinBtnId = Ext.id();
        var b = new Ext.data.JsonStore({
            idProperty: "value",
            fields: ["value", "display", "size_total_mb", "vol_name", "fs_type"],
            data: []
        });
        var c = [{
            xtype: "syno_textfield",
            fieldLabel: _T("common", "name") + ' <font class="red-status">' + _T("common", "star") + "</font>",
            name: "name",
            allowBlank: false,
            blankText: _T("share", "error_noname"),
            maxlength: 32,
            validationEvent: "keyup",
            vtype: "sharename"
        }, {
            xtype: "syno_combobox",
            name: "vol_path",
            fieldLabel: _T("volume", "volume_share_position") + ' <font class="red-status">' + _T("common", "star") + "</font>",
            store: b,
            displayField: "display",
            valueField: "value",
            allowBlank: false
        }, {
            xtype: "syno_displayfield",
            name: "my_vol_status",
            fieldLabel: _T("volume", "volume_share_position"),
            value: "",
            hidden: true
        }, {
            xtype: "syno_checkbox",
            name: "recycle_bin",
            boxLabel: _T("share", "share_enable_recycle_bin")
        }, {
            xtype: "syno_button",
            text: _T("share", "share_clean_recycle_bin"),
            indent: 1,
            id: this.cleanBinBtnId,
            handler: this.onCleanBinBtnClick,
            scope: this
        }];
        return c
    },
    onCleanBinBtnClick: function(b, a) {
        var f = {};
        var g, e;
        var d = this.form;
        if (this._S("demo_mode")) {
            this.findAppWindow().getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        if (this.cleanBinBtnType === 1) {
            g = "stop";
            e = _T("share", "share_recycle_bin_clean_abort_warn")
        } else {
            g = "start";
            e = _T("share", "share_recycle_bin_clean_warn")
        }
        f = {
            id: d.findField("name").originalValue
        };
        var c = {
            yes: {
                text: Ext.MessageBox.buttonText.yes,
                btnStyle: "red"
            },
            no: {
                text: Ext.MessageBox.buttonText.no
            }
        };
        this.findAppWindow().getMsgBox().confirm(_T("share", "share_clean_recycle_bin"), e, function(h) {
            if (h === "yes") {
                Ext.getCmp(this.cleanBinBtnId).disable();
                this.sendWebAPI({
                    api: "SYNO.Core.RecycleBin",
                    method: g,
                    version: 1,
                    params: f,
                    callback: this.setStatusCleanRecycle,
                    scope: this
                })
            }
        }, this, c)
    },
    setStatusCleanRecycle: function(d, c, b) {
        if (!d) {
            this.startPollRecycleStatus()
        } else {
            var a = Ext.getCmp(this.cleanBinBtnId);
            if (!c.is_cleaning) {
                this.cleanBinBtnType = 0;
                a.setText(_T("share", "share_clean_recycle_bin"));
                a.enable();
                this.stopPollRecycleStatus()
            } else {
                this.cleanBinBtnType = 1;
                a.setText(_T("share", "share_clean_recycle_bin_abort"));
                a.enable();
                this.startPollRecycleStatus()
            }
        }
    },
    updateStatusCleanRecycle: function(d, c, b) {
        if (d) {
            var a = Ext.getCmp(this.cleanBinBtnId);
            if (!c.is_cleaning) {
                this.cleanBinBtnType = 0;
                a.setText(_T("share", "share_clean_recycle_bin"));
                a.enable();
                this.stopPollRecycleStatus()
            } else {
                this.cleanBinBtnType = 1;
                a.setText(_T("share", "share_clean_recycle_bin_abort"));
                a.enable()
            }
        }
    },
    startPollRecycleStatus: function() {
        if (!this.PollTaskRecycleBinId) {
            var a = this.form;
            var b = {
                id: a.findField("name").originalValue
            };
            this.PollTaskRecycleBinId = this.pollReg({
                interval: 5,
                immediate: true,
                webapi: {
                    api: "SYNO.Core.RecycleBin",
                    method: "get",
                    version: 1,
                    params: b
                },
                scope: this,
                status_callback: this.updateStatusCleanRecycle
            })
        }
    },
    stopPollRecycleStatus: function() {
        if (this.PollTaskRecycleBinId) {
            this.pollUnreg(this.PollTaskRecycleBinId);
            this.PollTaskRecycleBinId = null
        }
    },
    loadNewShareData: function(b) {
        var a = [{
            api: "SYNO.Core.User",
            method: "list",
            version: 1,
            params: {}
        }, {
            api: "SYNO.Core.Group.Member",
            method: "list",
            params: {
                group: "administrators"
            }
        }];
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(f, c, e) {
                this.clearStatusBusy();
                if (!f || c.has_fail) {
                    var d = SYNO.API.Util.GetFirstError(c);
                    this.appWin.getMsgBox().alert("share", SYNO.API.Erros.core[d.code] || _T("common", "commfail"));
                    return
                }
                this.shareRecord = b;
                if (!this.shareGrid.disabled) {
                    this.shareGrid.loadEmptyPermission(b, c)
                }
            }
        })
    },
    loadPermissionData: function(c) {
        var d = c.get("vol_path") || c.get("real_path");
        d = d.toLowerCase();
        var b = (0 === d.indexOf("/volumeusb") || 0 === d.indexOf("/volumesd") || 0 === d.indexOf("/volumesata"));
        var e = c.get("vol_path");
        if (!e) {
            if (b) {
                e = c.get("real_path")
            } else {
                e = c.get("real_path").replace(c.get("path"), "")
            }
        }
        var a = [{
            api: "SYNO.Core.Directory.LDAP",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.Directory.Domain",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.Directory.Domain",
            method: "test_dc",
            version: 1
        }, {
            api: "SYNO.Core.Share",
            method: "get",
            version: 1,
            params: {
                name: c.get("name"),
                additional: ["disable_list", "disable_modify", "disable_download", "unite_permission", "is_aclmode"]
            }
        }, {
            api: "SYNO.Core.Storage.Volume",
            method: "get",
            version: 1,
            params: {
                volume_path: e
            }
        }];
        if (this._D("supportdomain") === "yes") {
            a.push({
                api: "SYNO.Core.Directory.Domain",
                method: "get_domain_list",
                version: 1
            })
        }
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(j, f, h) {
                this.clearStatusBusy();
                if (!j || f.has_fail) {
                    var g = SYNO.API.Util.GetFirstError(f);
                    this.appWin.getMsgBox().alert("share", SYNO.API.Erros.core[g.code] || _T("common", "commfail"));
                    return
                }
                var i = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Storage.Volume", "get").volume;
                c.set("share_path", i.volume_path + "/" + c.get("name"));
                c.set("readonly", i.readonly);
                c.set("is_aclmode", SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Share", "get", "is_aclmode"));
                c.set("is_sync_share", SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Share", "get", "is_sync_share"));
                this.shareRecord = c;
                if (i.readonly) {
                    this.el.mask();
                    this.appWin.getMsgBox().alert("share", _T("error", "error_volume_ro"))
                } else {
                    if (!this.shareGrid.disabled) {
                        this.el.unmask();
                        this.shareGrid.loadPermissions(c, f)
                    }
                }
            }
        })
    },
    updateVolumeStore: function(b) {
        var d = [],
            c, a = this.form;
        this.nonExt4Vols = [];
        b.each(function(e) {
            if (!e.readonly) {
                var f = new Ext.data.Record({
                    value: e.volume_path,
                    display: e.display_name,
                    size_total_mb: e.size_total_byte,
                    vol_name: e.display_name,
                    readonly: e.readonly,
                    fs_type: e.fs_type
                }, e.volume_path);
                d.push(f);
                if (this._D("usbstation", "no") === "yes" && e.fs_type !== "ext4") {
                    this.nonExt4Vols.push(f)
                }
            }
        }, this);
        c = a.findField("vol_path").store;
        c.removeAll();
        c.add(d)
    },
    setGridRequest: function(a) {
        this.gridRequest = a
    },
    updateFormPanel: function(f) {
        var a, c = this.form,
            g = false,
            b = false,
            h = false,
            l = false,
            d = f.rec,
            k = c.findField("vol_path").store,
            j = d.get("encryption") || 0;
        this.is_newshare = f.is_newshare;
        a = (this.is_newshare) ? "" : d.get("name");
        g = (this.is_newshare) ? false : SYNO.SDS.ControlPanel.Share.usedBySurveillance(a, this) || a.toLowerCase() === "homes" || -1 !== d.get("vol_path").indexOf("SATA");
        b = (this.is_newshare) ? false : SYNO.SDS.ControlPanel.Share.usedBySurveillance(a, this);
        c.setValues({
            name: a,
            recycle_bin: d.get("enable_recycle_bin"),
            vol_path: d.get("vol_path")
        });
        Ext.getCmp(this.cleanBinBtnId).setDisabled(d.get("enable_recycle_bin") !== true);
        if (b) {
            c.findField("recycle_bin").hide();
            Ext.getCmp(this.cleanBinBtnId).hide()
        } else {
            c.findField("recycle_bin").show();
            Ext.getCmp(this.cleanBinBtnId).show()
        }
        switch (j) {
            case 0:
                g = false || g;
                break;
            case 1:
                g = false || g;
                h = true;
                break;
            case 2:
                g = true;
                l = true;
                break;
            default:
                g = false || g;
                break
        }
        c.findField("name").setDisabled(g);
        c.findField("recycle_bin").setDisabled(h);
        c.findField("vol_path").setDisabled(l);
        if (this._D("usbstation", "no") === "yes") {
            var i;
            if (a.toLowerCase() === "homes" || a.toLowerCase() === "web" || j !== 0) {
                this.nonExt4Vols.each(function(m) {
                    i = k.getById(m.id);
                    if (i) {
                        k.remove(i)
                    }
                }, this)
            } else {
                this.nonExt4Vols.each(function(m) {
                    i = k.getById(m.id);
                    if (!i) {
                        k.add(m)
                    }
                }, this)
            }
        }
        if (d.get("is_usb_share") === true) {
            var e = "-";
            if (-1 !== d.get("vol_path").indexOf("USB")) {
                if (d.get("external_dev_type") === "SDCARD") {
                    e = _T("tree", "leaf_sdcard")
                } else {
                    e = _T("status", "status_usb")
                }
            } else {
                if (-1 !== d.get("vol_path").indexOf("sata")) {
                    e = _T("status", "status_sata")
                }
            }
            c.setValues({
                my_vol_status: e
            });
            c.findField("my_vol_status").show();
            c.findField("vol_path").hide()
        } else {
            if (k.data.items.length === 1) {
                c.setValues({
                    my_vol_status: k.data.items[0].get("display"),
                    vol_path: k.data.items[0].get("value")
                });
                c.findField("my_vol_status").show();
                c.findField("vol_path").hide()
            } else {
                c.findField("my_vol_status").hide();
                c.findField("vol_path").show()
            }
        }
        this.doLayout();
        this.initShareGrid(d)
    },
    clearForm: function() {
        var a = this.form;
        a.setValues({
            name: "",
            recycle_bin: false,
            vol_path: ""
        });
        a.findField("name").clearInvalid();
        a.findField("vol_path").clearInvalid();
        this.removeShareGrid()
    },
    removeShareGrid: function() {
        if (!this.shareGrid) {
            return
        }
        this.mun(this.shareGrid.store, "load", this.onPermissionLoad, this);
        this.remove(this.shareGrid, true);
        this.shareGrid = null
    },
    initShareGrid: function(d) {
        this.removeShareGrid();
        var c = SYNO.SDS.ControlPanel.Share.usedBySurveillance(d.get("name"), this);
        var b = d.get("encryption");
        var a = {
            module: this.parentTab.shareListPanel,
            owner: this.appWin,
            appWin: this.appWin,
            height: 290,
            width: "auto",
            hide_custom: true,
            isAdvancedMode: false,
            cls: "simple-mode-permission-grid without-dirty-red-grid",
            title: _T("share", "share_user_permission"),
            header: true,
            disabled: c || (b === 1 && d.get("is_aclmode") === true),
            hidden: c || (b === 1 && d.get("is_aclmode") === true),
            pageSize: this.pageSize,
            view: new SYNO.ux.FleXcroll.grid.BufferView({
                cacheSize: 100,
                forceFit: true
            }),
            loadEmptyPermission: function(e, g) {
                this.shareRecord = e;
                this.colRo.isAclMode = e.get("is_aclmode");
                if (this.colCu) {
                    this.colCu.shareRecord = e
                }
                var h = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Group.Member", "list", "users"),
                    f;
                if (this.adminlist) {
                    this.adminlist = null
                }
                this.adminlist = {};
                for (f = 0; f < h.length; f++) {
                    this.adminlist[h[f].name] = true
                }
                this.store.load()
            }
        };
        if (this.is_newshare) {
            a.store = new SYNO.API.JsonStore({
                api: "SYNO.Core.User",
                method: "list",
                version: 1,
                appWindow: this.appWin,
                baseParams: {
                    type: "local",
                    offset: 0,
                    limit: 50
                },
                root: "users",
                totalProperty: "total",
                id: "name",
                fields: ["name", "is_writable", "is_readonly", "is_deny", "is_custom", "is_admin"],
                remoteSort: true,
                defaultSortable: false,
                scope: this,
                listeners: {
                    scope: this,
                    load: function(e, g) {
                        var f = 0;
                        e.suspendEvents();
                        if (e.api !== "SYNO.Core.Share.Permission") {
                            for (f = 0; f < g.length; f++) {
                                g[f].beginEdit();
                                g[f].set("is_admin", this.shareGrid.adminlist[g[f].get("name")] || false);
                                g[f].endEdit()
                            }
                        }
                        e.resumeEvents();
                        e.commitChanges()
                    },
                    beforeload: function(e, f) {
                        if (!this.shareGrid.isChanged()) {
                            return true
                        }
                        this.appWin.getMsgBox().confirm(this.title, _T("share", "share_save_chg_before_reload"), function(g) {
                            if (g === "yes") {
                                if (this.onBeforeAction(this.form, "set") === false) {
                                    return
                                }
                                this.sendCreateWebAPI(f)
                            } else {
                                e.rejectChanges();
                                e.load(f)
                            }
                        }, this);
                        return false
                    }
                }
            })
        }
        this.shareGrid = new SYNO.SDS.AdminCenter.SimpleMode.PermissionGrid(a);
        if (this.is_newshare) {
            this.loadNewShareData(d)
        } else {
            this.loadPermissionData(d)
        }
        this.shareGrid.getTopToolbar().hide();
        this.shareGrid.getBottomToolbar().hide();
        this.add(this.shareGrid);
        this.doLayout();
        this.adjustGridHeight();
        this.mon(this.shareGrid.store, "load", this.onPermissionLoad, this)
    },
    onPermissionLoad: function(d, f) {
        var c = this.shareGrid.getBottomToolbar(),
            e = c.getPageData().total > c.pageSize;
        if (e !== true) {
            c.hide()
        } else {
            var b = this.shareGrid.store.baseParams;
            var a = this.gridRequest && (this.gridRequest.offset !== b.offset);
            c.show();
            if (a) {
                this.shareGrid.store.load(this.gridRequest);
                this.gridRequest = null
            }
        }
        this.doLayout()
    },
    defineGrid: function() {
        if (!SYNO.SDS.AdminCenter.SimpleMode.PermissionGrid) {
            Ext.define("SYNO.SDS.AdminCenter.SimpleMode.PermissionGrid", {
                extend: "SYNO.SDS.Share.ShareGrid",
                constructor: function(a) {
                    var b = a.hideCustomColumn;
                    if (a.module.appWin.getOpenConfig("className") === "SYNO.SDS.CMS.Application") {
                        b = b || (a.module.appWin._S("version") < 4475)
                    }
                    this.colCu = new SYNO.SDS.Share.CustomColumn({
                        module: a.module,
                        owner: a.owner,
                        ownerGrid: a.module.shareListPanel,
                        dataIndex: "is_custom",
                        hidden: b,
                        applyCallback: function() {
                            this.store.load()
                        },
                        applyTarget: this
                    });
                    a.colCu = this.colCu;
                    this.callParent([a])
                }
            })
        }
    },
    cancelHandler: function(b, a) {
        this.callParent([arguments]);
        if (this.shareGrid) {
            this.shareGrid.store.rejectChanges();
            this.shareGrid.colRo.checkSelectAll(this.shareGrid.getStore());
            this.shareGrid.colRw.checkSelectAll(this.shareGrid.getStore());
            this.shareGrid.colNa.checkSelectAll(this.shareGrid.getStore())
        }
    },
    processParams: function(c, b) {
        if (!this.is_newshare && this.form.findField("vol_path").isDirty()) {
            var a = _T("volume", "volume_change_all_warning");
            if (this.shareRecord.get("support_snapshot")) {
                a += '<br/><span class="red-status">' + _T("share", "share_move_snapshot_lost_warning") + "</span>"
            }
            this.shareMovePolling = true;
            this.appWin.getMsgBox().confirm(_T("tree", "leaf_sharefolder"), a, function(e, f, d) {
                if ("yes" === e) {
                    this.sendAjaxRequest("set", this.getValidateSetWebapi())
                }
            }, this);
            return []
        } else {
            this.shareMovePolling = false
        }
        b = (this.is_newshare) ? this.getCreateWebAPI() : this.getValidateSetWebapi();
        return b
    },
    sendAjaxRequest: function(a, b) {
        if (b.length <= 0) {
            if (this.form.isDirty() === false) {
                this.sendApplySetWebAPI()
            }
            return
        }
        this.callParent(arguments)
    },
    getCompoundCfg: function() {
        return {
            stopwhenerror: true
        }
    },
    getCreateWebAPI: function() {
        var a = [],
            c = this.form,
            b = c.findField("name").getValue();
        this.shareGrid.shareRecord.set("name", b);
        a.push({
            api: "SYNO.Core.Share",
            method: "create",
            version: 1,
            params: {
                name: b,
                shareinfo: {
                    name: b,
                    vol_path: c.findField("vol_path").getValue(),
                    enable_recycle_bin: c.findField("recycle_bin").getValue()
                }
            }
        });
        if (!this.shareGrid.disabled) {
            a = a.concat(this.shareGrid.getWebAPI())
        }
        return a
    },
    getShareWebapi: function(a) {
        var i = [],
            f = this.form,
            b = f.findField("name").originalValue,
            h = f.findField("name").getValue(),
            e = f.findField("name").isDirty(),
            d = f.findField("vol_path").isDirty(),
            c = f.findField("recycle_bin").isDirty(),
            g = e || d || c;
        if (g) {
            i.push({
                api: "SYNO.Core.Share",
                method: a,
                version: 1,
                params: {
                    name: b,
                    shareinfo: {
                        name: h,
                        vol_path: f.findField("vol_path").getValue()
                    }
                }
            });
            if (c) {
                Ext.apply(i[0].params.shareinfo, {
                    enable_recycle_bin: f.findField("recycle_bin").getValue()
                })
            }
            if (this.shareRecord.get("quota_value") !== "") {
                Ext.apply(i[0].params.shareinfo, {
                    share_quota: this.shareRecord.get("quota_value")
                })
            }
        }
        return i
    },
    getValidateSetWebapi: function() {
        return this.getShareWebapi("validate_set")
    },
    getSetWebAPI: function() {
        var a = [];
        if (!this.shareGrid.disabled) {
            a = a.concat(this.shareGrid.getWebAPI())
        }
        a = a.concat(this.getShareWebapi("set"));
        return a
    },
    startShareMovePolling: function(b, a) {
        this.appWin.getMsgBox().show({
            title: _T("share", "percentage"),
            width: 300,
            wait: false,
            progress: true,
            closable: false,
            msg: this.moveShareMsg,
            progressText: "0 %"
        });
        this.share_move_pollingId = this.pollReg({
            webapi: {
                api: "SYNO.Core.Share",
                method: "move_status",
                version: 1,
                params: {
                    task_id: b
                }
            },
            interval: 5,
            immediate: true,
            scope: this,
            status_callback: function(j, g, f, d) {
                this.moveShareMsg = String.format('<div style="text-align: center;"> {0} </div>', _T("share", "share_move_progress"));
                if (!j) {
                    this.stopShareMovePolling();
                    var e = SYNO.API.Util.GetFirstError(g);
                    var i = SYNO.API.Erros.core[e.code] || _T("common", "error_system");
                    this.appWin.getMsgBox().alert("warning_msg", i);
                    return false
                }
                if (j && undefined !== g) {
                    if (g.status !== "success") {
                        var h;
                        if (g.percent > 99) {
                            h = '<div style="text-align: center;"> 100 % </div>'
                        } else {
                            h = String.format('<div style="text-align: center;"> {0} % </div>', g.percent)
                        }
                        this.appWin.getMsgBox().updateProgress(g.percent / 100, h, this.moveShareMsg)
                    } else {
                        this.appWin.sendWebAPI({
                            webapi: {
                                api: "SYNO.Core.Share",
                                version: 1,
                                method: "stop_move",
                                scope: this
                            }
                        });
                        this.stopShareMovePolling();
                        this.appWin.getMsgBox().hide();
                        var c = this.form.findField("name").getValue();
                        this.fireEvent("sharesetdone", c)
                    }
                }
            }
        })
    },
    stopShareMovePolling: function() {
        if (this.share_move_pollingId) {
            this.pollUnreg(this.share_move_pollingId);
            this.share_move_pollingId = undefined
        }
    },
    createShareDone: function(b, a) {
        this.fireEvent("sharesetdone", b, a)
    },
    onApiSuccess: function(a, g, b, e) {
        if (!g.has_fail && b.compound.length > 0 && b.compound[0].api === "SYNO.Core.Share" && b.compound[0].method === "create") {
            this.createShareDone(b.compound[0].name, e);
            return
        }
        var k = [];
        var l = "";
        var c = "";
        if (g.has_fail) {
            var h = g.result[0].error;
            if (h && h.errors && h.errors.warning_package) {
                var j = [];
                for (var f = 0; f < h.errors.warning_package.length; f++) {
                    j.push(SYNO.SDS.AdminCenter.Share.Utils.GetPackageName(h.errors.warning_package[f]))
                }
                c = _T("share", "share_cannot_rename_since_service_enable");
                c = c + j.join(", ")
            } else {
                var d = SYNO.API.Util.GetFirstError(g);
                c = SYNO.API.Erros.core[d.code] || _T("common", "error_system");
                if (d.code === 3309) {
                    c = String.format(c, this._D("maxshares"))
                }
            }
            this.appWin.getMsgBox().alert("warning_msg", c);
            return
        }
        if (g.result[0] && g.result[0].hasOwnProperty("warning_pause_service")) {
            Ext.each(g.result[0].warning_pause_service, function(i) {
                k.push(SYNO.SDS.AdminCenter.Share.Utils.GetServiceI18N(i))
            });
            l = "<b>" + k.join(", ") + "</b><br>";
            c = String.format(_T("share", "share_service_pause_confirm"), l)
        }
        if (c.empty()) {
            this.sendApplySetWebAPI();
            return
        }
        this.appWin.getMsgBox().confirm("warning_msg", c, function(n, m, i) {
            if ("yes" === n) {
                this.sendApplySetWebAPI()
            }
        }, this)
    },
    sendCreateWebAPI: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: true,
                params: this.getCreateWebAPI()
            },
            scope: this,
            callback: function(e, c, b) {
                this.clearStatusBusy();
                if (e) {
                    this.onApiSuccess("set", c, b, a)
                } else {
                    var d = _T("common", "error_system");
                    this.appWin.getMsgBox().alert("warning_msg", d)
                }
            }
        })
    },
    sendApplySetWebAPI: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: true,
                params: this.getSetWebAPI()
            },
            scope: this,
            callback: this.onApplySuccess
        })
    },
    onApplySuccess: function(f, e, d) {
        this.clearStatusBusy();
        if (e.has_fail) {
            var c;
            c = SYNO.API.Util.GetFirstError(e);
            this.appWin.getMsgBox().alert("share", SYNO.API.Erros.core[c.code] || _T("common", "commfail"));
            return
        }
        if (this.shareMovePolling) {
            var a = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Share.Permission", "set");
            this.startShareMovePolling(SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Share", "set", "task_id"), a)
        } else {
            var b = this.form.findField("name").getValue();
            this.fireEvent("sharesetdone", b)
        }
    },
    isFormDirty: function() {
        if (this.form.isDirty() || (this.shareGrid && this.shareGrid.store.getModifiedRecords().length !== 0)) {
            return true
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.Share", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.module = this;
        this.callParent([this.fillConfig(a)]);
        this.mon(this.shareListPanel, "gridselectionchange", this.onGridSelectionChange, this);
        this.mon(this.shareListPanel, "sharelistloaded", this.onShareListLoaded, this);
        this.mon(this.shareListPanel, "volumeloaded", this.onVolumeLoaded, this);
        this.mon(this.editSharePanel, "sharesetdone", this.onShareSetDone, this);
        this.mon(this.shareListPanel, "novolumedetected", this.onNoVolumeDeteced, this)
    },
    fillConfig: function(a) {
        this.shareListPanel = new SYNO.SDS.AdminCenter.SimpleMode.ShareList({
            border: false,
            layout: "fit",
            appWin: a.appWin,
            parentTab: this,
            gridWrapCls: "simple-mode-list-share-bg",
            view: new SYNO.ux.FleXcroll.grid.GridView({
                onLayout: function(d, f) {
                    var c = this,
                        e = c.scroller.dom;
                    if (!c.autoFlexcroll) {
                        return
                    }
                    if (e.clientWidth === e.offsetWidth) {
                        c.scrollOffset = 12
                    } else {
                        c.scrollOffset = undefined
                    }
                    this.fitColumns(false);
                    c.updateScrollbar(e)
                }
            })
        });
        this.editSharePanel = new SYNO.SDS.AdminCenter.SimpleMode.ShareFormPanel({
            appWin: a.appWin,
            parentTab: this
        });
        var b = Ext.apply({
            layout: "border",
            cls: "simple-mode-list-panel without-dirty-red-grid",
            bindWindowEvents: false,
            items: [{
                region: "west",
                layout: "fit",
                xtype: "panel",
                minWidth: 218,
                border: false,
                width: 218,
                split: true,
                tbar: this.getTBar(),
                tbarCfg: {
                    cls: "simple-mode-list-tbar"
                },
                items: [this.shareListPanel]
            }, {
                region: "center",
                layout: "fit",
                xtype: "panel",
                cls: "simple-mode-right-panel",
                items: [this.editSharePanel],
                border: false
            }],
            listeners: {
                scope: this,
                activate: this.activate,
                deactivate: this.deactivate
            }
        }, a);
        return b
    },
    getHelpParam: function() {
        return "AdminCenter/simple_share.html"
    },
    activate: function() {
        this.shareListPanel.onActive()
    },
    deactivate: function() {
        this.shareListPanel.newRec = null
    },
    getTBar: function() {
        this.createShareBtn = new SYNO.ux.Button({
            cls: "simple-mode-create-btn",
            width: 100,
            text: "",
            handler: this.createShareHandler,
            scope: this
        });
        this.deleteShareBtn = new SYNO.ux.Button({
            cls: "simple-mode-delete-btn",
            width: 100,
            text: "",
            handler: this.deleteShareHandler,
            scope: this
        });
        return {
            xtype: "syno_toolbar",
            items: [this.createShareBtn, this.deleteShareBtn]
        }
    },
    confirmCallback: function(a) {
        if (a === "yes") {
            this.editSharePanel.cancelHandler()
        }
    },
    checkDeactivate: function() {
        if (this.editSharePanel.isFormDirty() === true) {
            return false
        }
        return true
    },
    createShareHandler: function() {
        if (this.editSharePanel.form.findField("vol_path").store.data.length <= 0) {
            var a = ("yes" === this._D("usbstation", "no")) ? _T("volume", "volume_share_noexternal") : _T("volume", "volume_share_volumeno");
            this.appWin.getMsgBox().alert("alert", a, function() {
                var b = this.appWin.findAppWindow();
                if (b.getOpenConfig("className") !== "SYNO.SDS.CMS.Application") {
                    SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                }
            }, this);
            return
        }
        this.editSharePanel.getEl().unmask();
        this.shareListPanel.getEl().unmask();
        this.shareListPanel.insertNewRow()
    },
    errorGlusterMsg: function(a) {
        var b = "";
        b = _T("share", "share_gluster_share") + a;
        this.appWin.getMsgBox().alert("warning_msg", b);
        return false
    },
    combineWarningMsg: function(e) {
        var j = [];
        if (e.hasOwnProperty("warning_external")) {
            var b = String.format("{0}<br><b>{1}</b><br>", _T("share", "share_cannot_delete_for_reserved"), e.warning_external.join(", "));
            j.push(b)
        }
        if (e.hasOwnProperty("warning_mount_point")) {
            var g = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_mount_point_delete"), e.warning_mount_point.join(", "));
            j.push(g)
        }
        if (e.hasOwnProperty("warning_homes")) {
            var h = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_home_service"), e.warning_homes.join(", "));
            j.push(h)
        }
        if (e.hasOwnProperty("warning_ftp_anonymousroot")) {
            var c = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_ftp_anonymousroot"), e.warning_ftp_anonymousroot.join(", "));
            j.push(c)
        }
        if (e.hasOwnProperty("warning_package")) {
            var f = [];
            var a;
            for (var d = 0; d < e.warning_package.length; d++) {
                f.push(SYNO.SDS.AdminCenter.Share.Utils.GetPackageName(e.warning_package[d]))
            }
            a = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_packages"), e.warning_package.join(", "));
            a = String.format(a, f.join(", "));
            j.push(a)
        }
        return j
    },
    combineWarningConfirm: function(b) {
        var c = "";
        if (b.hasOwnProperty("warning_sd_destination")) {
            var d = "";
            if (b.hasOwnProperty("warning_sd_default_destination")) {
                d = _T("share", "share_rmsdcopyfolder");
                d = String.format(d, b.warning_sd_destination, b.warning_sd_default_destination)
            } else {
                d = _T("share", "share_rmsdcopyfolderempty");
                d = String.format(d, b.warning_sd_destination)
            }
            c = d
        }
        if (b.hasOwnProperty("warning_usb_destination")) {
            var a = "";
            if (b.hasOwnProperty("warning_usb_default_destination")) {
                a = _T("share", "share_rmusbcopyfolder");
                a = String.format(a, b.warning_usb_destination, b.warning_usb_default_destination)
            } else {
                a = _T("share", "share_rmusbcopyfolderempty");
                a = String.format(a, b.warning_usb_destination)
            }
            if (c.empty()) {
                c = a
            } else {
                c = c + "<b>" + a
            }
        }
        if (b.hasOwnProperty("warning_disable_service")) {
            Ext.each(b.warning_disable_service, function(i) {
                var f = i.services;
                var g = [];
                var e = "";
                var h = "";
                if (!Ext.isArray(f)) {
                    return false
                }
                Ext.each(f, function(j) {
                    g.push(SYNO.SDS.AdminCenter.Share.Utils.GetServiceI18N(j))
                });
                e = "<b>" + i.share + "</b>";
                h = "<b>" + g.join(", ") + "</b>";
                if (c.empty()) {
                    c = String.format(_T("share", "share_service_disable_confirm"), e, h)
                } else {
                    c = c + "<br>" + String.format(_T("share", "share_service_disable_confirm"), e, h)
                }
            });
            c = c + "<br><br>" + _T("share", "share_service_disable_confirm_post")
        }
        return c
    },
    warningConfirm: function(c, a) {
        var b = this.combineWarningConfirm(c);
        this.module.appWin.getMsgBox().confirmDelete("warning_msg", b, function(f, e, d) {
            if ("yes" === f) {
                if (a) {
                    this.loadDeleteDialog(a)
                } else {
                    return
                }
            }
        }, this)
    },
    deleteShareHandler: function() {
        var a = this.shareListPanel.getSelectionModel().getSelections();
        if (a.length !== 1) {
            return
        }
        var d = a[0],
            c = d.get("name"),
            b = [c];
        var e = (-1 !== d.get("vol_path").indexOf("Gluster"));
        if (e === true) {
            this.errorGlusterMsg(c);
            return
        }
        this.appWin.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            method: "validate_delete",
            params: {
                name: b
            },
            version: 1,
            scope: this,
            callback: function(i, h, g) {
                this.module.appWin.clearStatusBusy();
                if (!i) {
                    var f = this.combineWarningMsg(h.errors);
                    this.appWin.getMsgBox().alert("warning_msg", f.join(""));
                    return false
                }
                if (!h) {
                    this.loadDeleteDialog(b);
                    return true
                }
                this.warningConfirm(h, b)
            }
        })
    },
    onNoVolumeDeteced: function() {
        this.editSharePanel.clearForm();
        this.editSharePanel.getEl().mask();
        this.editSharePanel.updateVolumeStore([])
    },
    onVolumeLoaded: function(a) {
        this.editSharePanel.getEl().unmask();
        this.editSharePanel.updateVolumeStore(a)
    },
    onShareListLoaded: function(f, c, a) {
        if (f.length <= 0) {
            this.editSharePanel.clearForm();
            this.editSharePanel.getEl().mask();
            this.shareListPanel.getEl().mask(_T("error", "error_no_shared_folder"), "syno-ux-mask-info");
            this.deleteShareBtn.disable();
            return
        }
        this.shareListPanel.getEl().unmask();
        this.deleteShareBtn.enable();
        if (Ext.isEmpty(c)) {
            this.shareListPanel.selModel.selectFirstRow()
        } else {
            var d = this.shareListPanel.store.indexOfId(c),
                e = this.shareListPanel.getEl(),
                b;
            if (d !== -1) {
                this.shareListPanel.selModel.selectRow(d);
                b = e.child(".x-grid3-row-selected");
                this.shareListPanel.fleXcrollTo(b)
            } else {
                this.shareListPanel.selModel.selectFirstRow()
            }
            if (a) {
                this.editSharePanel.setGridRequest(a)
            }
        }
    },
    onGridSelectionChange: function(b, c) {
        if (b.length !== 1) {
            return
        }
        var a = c || (b[0].get("is_usb_share") === true);
        this.editSharePanel.updateFormPanel({
            rec: b[0],
            is_newshare: c
        });
        this.deleteShareBtn.setDisabled(a)
    },
    onShareSetDone: function(b, a) {
        this.shareListPanel.onActive(b, a);
        SYNO.SDS.StatusNotifier.fireEvent("sharefolderchanged", "permission")
    },
    loadDeleteDialog: function(a) {
        var c = new SYNO.SDS.AdminCenter.SimpleMode.Delete({
            module: this,
            owner: this.module.appWin,
            share: a
        });
        var b = String.format("<b>{0}</b>", _T("share", "share_cfrmrmv"));
        c.loadShareName(b, a);
        c.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.Delete", {
    extend: "SYNO.SDS.AdminCenter.Share.Delete",
    afterDeleteShare: function(e, d, b) {
        var a = [];
        this.module.appWin.clearStatusBusy();
        if (!e) {
            this.module.appWin.getMsgBox().alert("warning_msg", _T("common", "error_system"));
            return
        }
        SYNO.SDS.StatusNotifier.fireEvent("sharefolderchanged", "delete");
        if (!d) {
            this.module.shareListPanel.store.load();
            return true
        }
        if (d.hasOwnProperty("warning_external")) {
            var f = String.format("{0} ({1})", _T("share", "share_cannot_delete_for_reserved"), d.warning_external.join(""));
            a.push(f)
        }
        if (d.hasOwnProperty("warning_mount_point")) {
            var c = String.format("{0} ({1})", _T("share", "error_mount_point_delete"), d.warning_mount_point.join(""));
            a.push(c)
        }
        if (0 < a.length) {
            this.module.appWin.getMsgBox().alert("warning_msg", a.join(""))
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.QuickConnect.AdvanceDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.parent_panel = a.originalFormPanel;
        this.panel = new SYNO.SDS.AdminCenter.QuickConnect.AdvancePanel(Ext.apply(a, {
            window_: this
        }));
        var b = Ext.apply({
            width: 820,
            dsmStyle: "v5",
            autoHeight: true,
            title: _T("relayservice", "adv_setting"),
            resizable: false,
            closable: false,
            useStatusBar: true,
            items: this.panel,
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _T("common", "ok"),
                disabled: _S("demo_mode"),
                tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                id: this.btn_commit = Ext.id(),
                scope: this,
                handler: this.sendData
            }, {
                xtype: "syno_button",
                btnStyle: "gray",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.cancel
            }]
        }, a);
        this.callParent([b]);
        this.btn_commit = Ext.getCmp(this.btn_commit)
    },
    sendData: function() {
        if (!this.isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return
        }
        var c = [];
        var d = this.panel.store.getCount();
        this.dsm_permission = false;
        this.photo_permission = false;
        this.ds_photo_permission = false;
        this.mobile_apps_permission = false;
        this.cloud_permission = false;
        this.file_sharing_permission = false;
        for (var b = 0; b < d; b++) {
            var a = this.panel.store.getAt(b);
            c[b] = {};
            c[b].id = this.panel.name_index[b];
            c[b].enabled = a.data.enable;
            switch (c[b].id) {
                case "dsm_portal":
                    this.dsm_permission = c[b].enabled;
                    break;
                case "photo_portal":
                    this.photo_permission = c[b].enabled;
                    break;
                case "mobile_apps":
                    this.mobile_apps_permission = c[b].enabled;
                    break;
                case "photostation":
                    this.ds_photo_permission = c[b].enabled;
                    break;
                case "cloudstation":
                    this.cloud_permission = c[b].enabled;
                    break;
                case "file_sharing":
                    this.file_sharing_permission = c[b].enabled;
                    break
            }
        }
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.QuickConnect.Permission",
            method: "set",
            params: {
                services: c
            },
            version: "1",
            scope: this,
            callback: this.sendCallback
        })
    },
    sendCallback: function(c, b, a) {
        this.clearStatusBusy();
        if (c) {
            this.setStatusOK();
            this.originalFormPanel.dsm_permission = this.dsm_permission;
            this.originalFormPanel.photo_permission = this.photo_permission;
            this.originalFormPanel.mobile_apps_permission = this.mobile_apps_permission;
            this.originalFormPanel.ds_photo_permission = this.ds_photo_permission;
            this.originalFormPanel.cloud_permission = this.cloud_permission;
            this.originalFormPanel.file_sharing_permission = this.file_sharing_permission;
            if (this.originalFormPanel.field_enabled.originalValue) {
                this.originalFormPanel.checkServicesFirewall()
            }
            this.originalFormPanel.startPolling();
            this.close()
        } else {
            this.setStatusError({
                text: _T("error", "error_unknown_desc"),
                clear: true
            })
        }
    },
    cancel: function() {
        if (this.isDirty()) {
            this.getMsgBox().confirm(_T("relayservice", "adv_setting"), _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        } else {
            this.originalFormPanel.startPolling();
            this.close()
        }
    },
    loadStore: function() {
        this.panel.loadStore()
    },
    isDirty: function() {
        return this.panel.store.getModifiedRecords().length !== 0
    }
});
Ext.define("SYNO.SDS.AdminCenter.QuickConnect.AdvancePanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        this.window_ = a.window_;
        this.owner = a.owner;
        this.url = "";
        this.isStoreUpdated = false;
        this.store = this.createStore();
        this.columnModel = this.createColumnModel();
        var b = Ext.apply({
            module: a.module,
            height: 220,
            title: _T("relayservice", "adv_setting"),
            store: this.store,
            enableColumnMove: false,
            enableHdMenu: false,
            hideMode: "offsets",
            colModel: this.columnModel,
            plugins: [this.columnModel.enable_column]
        }, a);
        this.callParent([b])
    },
    updateButtonStatus: function() {
        var d = this.store.getCount();
        var c = 0;
        for (var b = 0; b < d; b++) {
            var a = this.store.getAt(b);
            if (a.data.enable === true) {
                c++
            }
        }
        this.window_.btn_commit.setDisabled(c <= 0 || _S("demo_mode"))
    },
    createStore: function() {
        var a = new Ext.data.ArrayStore({
            autoDestroy: true,
            autoLoad: false,
            idProperty: "name",
            listeners: {
                update: this.updateButtonStatus,
                scope: this
            },
            fields: ["name", "enable"]
        });
        return a
    },
    loadStore: function() {
        this.window_.setStatusBusy();
        this.owner.sendWebAPI({
            api: "SYNO.Core.QuickConnect.Permission",
            method: "get",
            version: "1",
            scope: this,
            callback: this.loadCallback
        })
    },
    loadCallback: function(e, d, c) {
        if (!e) {
            this.window_.setStatusError({
                text: _T("error", "error_unknown_desc")
            });
            return
        }
        var a = [];
        this.name_index = [];
        for (var b = 0; b < d.services.length; b++) {
            a[b] = [];
            this.name_index[b] = d.services[b].id;
            a[b][0] = this.getDisplayNameByID(d.services[b].id);
            a[b][1] = d.services[b].enabled
        }
        this.store.loadData(a, false);
        this.window_.clearStatusBusy()
    },
    createColumnModel: function() {
        var b = new SYNO.ux.EnableColumn({
            id: "enable",
            align: "center",
            header: _T("relayservice", "enable_service"),
            dataIndex: "enable",
            width: 150,
            sortable: false
        });
        var a = new Ext.grid.ColumnModel({
            defaults: {
                align: "center"
            },
            columns: [b, {
                id: "name",
                align: "left",
                header: _T("common", "name"),
                dataIndex: "name",
                width: 650,
                sortable: false
            }]
        });
        a.enable_column = b;
        return a
    },
    getDisplayNameByID: function(a) {
        var b = {
            mobile_apps: null !== this._D("unique").match(/synology_.+_nvr.+/) ? _T("relayservice", "name_mobile_app_for_nvr") : _T("relayservice", "name_mobile_app"),
            photostation: _T("relayservice", "name_photostation"),
            cloudstation: _T("relayservice", "name_cloud"),
            file_sharing: _T("relayservice", "name_file_sharing"),
            dsm_portal: _T("relayservice", "name_dsm_portal"),
            photo_portal: _T("relayservice", "name_photo_portal")
        };
        return b[a]
    }
});
Ext.define("SYNO.SDS.AdminCenter.QuickConnect.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent([a]);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.QuickConnect.FormPanel({
            module: this,
            appWin: a.appWin,
            isInTunnel: SYNO.SDS.QuickConnect.Utils.isInTunnel()
        })
    },
    getPanel: function() {
        return this.panel
    },
    activate: function(a) {
        this.panel.loadForm()
    },
    deactivate: function() {
        this.panel.stopPolling();
        var a = [this.panel.field_enabled, this.panel.field_portforward_enabled, this.panel.field_server_alias];
        for (var b = 0; b < a.length; ++b) {
            if (a[b].isDirty()) {
                return false
            }
        }
        return true
    },
    confirmCallback: function(a) {
        if (a === "no") {
            this.panel.startPolling()
        }
    },
    getHelpParam: function() {
        return "AdminCenter/connection_quickconnect.html"
    },
    statics: {
        quickConnectSetStatusError: function(a, b, g, c) {
            var e = {
                2900: _T("error", "error_unknown_desc"),
                2901: _T("error", "error_unknown_desc"),
                2902: _T("relayservice", "relayservice_err_resolv"),
                2903: _T("relayservice", "error_alias_server_internal"),
                2904: String.format(_T("relayservice", "relayservice_err_alias_in_use"), c),
                2905: _T("pkgmgr", "myds_error_account"),
                2906: _T("relayservice", "error_alias_used_in_your_own"),
                3000: _T("error", "error_unknown_desc"),
                3001: _T("error", "error_unknown_desc"),
                3002: _T("relayservice", "relayservice_err_network"),
                3003: _T("relayservice", "myds_server_internal_error"),
                3004: _T("error", "error_auth"),
                3005: String.format(_T("relayservice", "relayservice_err_alias_in_use"), c),
                3006: _T("relayservice", "myds_exceed_max_register_error")
            };
            if (b.success) {
                return ""
            }
            var d = b.error.code;
            var f = d < 400 ? SYNO.API.CheckResponse(false, b, g) : e[d];
            return a.setStatusError({
                text: f,
                clear: false
            })
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.QuickConnect.FormPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.info_template = new SYNO.SDS.AdminCenter.QuickConnect.InfoTemplate({
            parentPanel: this
        });
        this.module = a.module;
        this.callParent([Ext.apply({
            module: a.module,
            appWin: a.appWin,
            useDefaultBtn: true,
            webapi: {
                api: "SYNO.Core.QuickConnect",
                methods: {
                    get: "get",
                    set: "set_server_alias"
                },
                version: this.getQcWebApiVersion("SYNO.Core.QuickConnect", "get")
            },
            labelWidth: 250,
            items: this.createObjs(a)
        }, a)]);
        if (a.isInTunnel) {
            this.on("afterlayout", this.insideTunnelHandler, this, {
                single: true
            })
        } else {
            this.on("afterlayout", this.addTip, this, {
                single: true
            })
        }
        this.on("afterlayout", this.addMydsAccountListener, this, {
            single: true
        });
        this.getCmpsAsMembers();
        this.addEnableDisableListeners(this.field_server_alias);
        this.getForm().parentPanel = this;
        this.getForm().isDirty = this.isDirty;
        this.initialize_permission(this.getDsmVersion());
        this.showTos = false;
        this.mydsAccount = ""
    },
    getDsmVersion: function() {
        return this._S("version")
    },
    getQcWebApiVersion: function(b, d) {
        var c = this.getDsmVersion();
        var a = 1;
        switch (b) {
            case "SYNO.Core.QuickConnect":
                switch (d) {
                    case "get":
                        if (4989 <= c && c < 5450) {
                            a = 2
                        } else {
                            if (5456 <= c) {
                                a = 2
                            } else {
                                a = 1
                            }
                        }
                        break;
                    case "set":
                        if (4989 <= c && c < 5450) {
                            a = 2
                        } else {
                            if (5456 <= c) {
                                a = 2
                            } else {
                                a = 1
                            }
                        }
                        break;
                    case "set_server_alias":
                        if (4989 <= c && c < 5450) {
                            a = 2
                        } else {
                            if (5456 <= c) {
                                a = 2
                            } else {
                                a = 1
                            }
                        }
                        break;
                    default:
                        a = 1
                }
                break;
            case "SYNO.Core.QuickConnect.Permission":
            case "SYNO.Core.QuickConnect.Upnp":
                a = 1;
                break;
            default:
                a = 1
        }
        return a
    },
    VERSION_WITH_PERMISSION: 4482,
    VERSION_WITH_UPNP: 5479,
    permissions: ["dsm_permission", "photo_permission", "ds_photo_permission", "mobile_apps_permission", "cloud_permission", "file_sharing_permission"],
    initialize_permission: function(b) {
        var a = (b < this.VERSION_WITH_PERMISSION) ? true : false;
        for (var c = 0; c < this.permissions.length; ++c) {
            this[this.permissions[c]] = a
        }
    },
    addEnableDisableListeners: function(a) {
        a.addListener("enable", function(b) {
            if (b.getValue() !== "") {
                b.validate()
            }
        }, a);
        a.addListener("disable", a.clearInvalid, a)
    },
    insideTunnelHandler: function() {
        this.field_inside_tunnel_msg.setVisible(true);
        this.button_adv.disable();
        this.field_enabled.disable();
        this.field_portforward_enabled.disable();
        this.field_server_alias.disable();
        this.getFooterToolbar().disable()
    },
    getCmpsAsMembers: function() {
        var b = ["field_enabled", "field_myds_account", "field_portforward_enabled", "field_server_alias", "field_status", "field_force", "field_info_box", "field_inside_tunnel_msg", "field_tos_enabled", "button_adv"];
        for (var a = 0; a < b.length; ++a) {
            this[b[a]] = Ext.getCmp(this[b[a]])
        }
    },
    enableChanged: function(b, a) {
        if (!SYNO.SDS.QuickConnect.Utils.isInTunnel()) {
            this.field_server_alias.setDisabled(!a || "" === this.mydsAccount);
            this.button_adv.setDisabled(!a);
            this.field_tos_enabled.setVisible(this.showTos && a);
            this.field_portforward_enabled.setDisabled(!a)
        }
    },
    setApplyBtn: function(b, a) {
        this.buttons[2].setDisabled(_S("demo_mode") || (this.showTos && (!b || a === "")));
        this.buttons[2].tooltip = _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
    },
    tosChanged: function(b, a) {
        if (!b.hidden) {
            this.setApplyBtn(a, this.mydsAccount)
        }
    },
    addTip: function() {
        SYNO.SDS.Utils.AddTip(this.getForm().findField("server_alias").getEl(), _JSLIBSTR("vtype", "bad_relay_alias_name"));
        SYNO.SDS.Utils.AddTip(this.getForm().findField("portforward_enabled").getEl(), _T("relayservice", "enable_portforward_tip"))
    },
    addMydsAccountListener: function() {
        this.field_myds_account.getEl().addListener("click", this.onClickMyDsAccountField, this)
    },
    setInfoItems: function(b) {
        var c = ("connected" === this.quick_connect_status);
        var a = !(this.dsm_permission || this.photo_permission || this.ds_photo_permission || this.cloud_permission || this.mobile_apps_permission);
        this.field_status.setVisible(!b && (!c || a) && this.enabled);
        this.field_info_box.setVisible(!b && c && !a);
        if (!b) {
            this.field_info_box.update(this.info_template.getData());
            this.doLayout()
        }
    },
    processParams: function(f, e) {
        var a = [];
        this.stopPolling();
        this.setInfoItems(true);
        if (f === "get") {
            a.push(e[0]);
            a.push(this.createQuickConnectAPI("status", {}));
            if (this._S("version") >= this.VERSION_WITH_PERMISSION) {
                a.push(this.createQuickConnectAPI("get", {}, "SYNO.Core.QuickConnect.Permission"))
            }
            if (this._S("version") >= this.VERSION_WITH_UPNP) {
                a.push(this.createQuickConnectAPI("get", {}, "SYNO.Core.QuickConnect.Upnp"))
            }
            return a
        }
        var c = this.field_enabled.getValue();
        var d = e[0];
        var b = e[1];
        if (c) {
            a.push(e[0])
        }
        a.push(this.createSetApi(d));
        if (this._S("version") >= this.VERSION_WITH_UPNP) {
            a.push(this.createQuickConnectAPI("set", {
                enabled: this.field_portforward_enabled.getValue()
            }, "SYNO.Core.QuickConnect.Upnp"))
        }
        a.push(b);
        a.push(this.createQuickConnectAPI("status", {}));
        delete d.enabled;
        if (this.field_enabled.getValue() && false === this.field_enabled.originalValue) {
            this.checkServicesFirewall()
        }
        return a
    },
    createSetApi: function(c) {
        var b = {};
        for (var a in c) {
            if (c.hasOwnProperty(a)) {
                b[a] = c[a]
            }
        }
        b.method = "set";
        b.params = {};
        b.params.enabled = c.params.enabled;
        return b
    },
    createQuickConnectAPI: function(d, c, a) {
        a = typeof(a) === "undefined" ? "SYNO.Core.QuickConnect" : a;
        var b = {};
        b.api = a;
        b.version = this.getQcWebApiVersion(a, d);
        b.method = d;
        b.params = c;
        return b
    },
    getCompoundCfg: function(a) {
        return a === "set" ? {
            stopwhenerror: true
        } : {}
    },
    errorHandling: function(f, e) {
        var c, d, g;
        for (var a in f.result) {
            if (!f.result[a].success) {
                c = f.result[a];
                d = e.compound[a];
                g = e.compound[a].server_alias;
                SYNO.SDS.AdminCenter.QuickConnect.Main.quickConnectSetStatusError(this, c, d, g);
                break
            }
        }
        if (c.error.code === 2906) {
            var b = new SYNO.SDS.MessageBoxV5({
                modal: true,
                draggable: false,
                renderTo: document.body
            });
            b.confirm(_T("relayservice", "error_alias_used_in_your_own"), _T("relayservice", "alias_change_machine_message"), function(h) {
                if (h === "yes") {
                    this.field_force.setValue(true);
                    this.applyForm()
                }
            }, this)
        }
    },
    processReturnData: function(e, c, b) {
        if (c.has_fail === true) {
            this.errorHandling(c, b)
        } else {
            for (var a in c.result) {
                if (c.result.hasOwnProperty(a)) {
                    var d = c.result[a];
                    switch (d.api) {
                        case "SYNO.Core.QuickConnect":
                            switch (d.method) {
                                case "get":
                                    this.updateServerInfo(d);
                                    break;
                                case "status":
                                    this.updateStatus(d);
                                    break
                            }
                            break;
                        case "SYNO.Core.QuickConnect.Permission":
                            if (d.method === "get") {
                                this.updatePermissionInfo(d)
                            }
                            break;
                        case "SYNO.Core.QuickConnect.Upnp":
                            if (d.method === "get") {
                                this.updateUpnpInfo(d)
                            } else {
                                if (d.method === "set" && d.success === true) {
                                    this.field_portforward_enabled.originalValue = this.field_portforward_enabled.getValue()
                                }
                            }
                            break
                    }
                }
            }
            this.superclass().processReturnData.apply(this, [e, c, b])
        }
        this.enableChanged(this.field_enabled, this.field_enabled.getValue());
        if (this.field_server_alias.getValue() === "") {
            this.field_server_alias.clearInvalid()
        }
        this.field_force.setValue(false);
        this.setInfoItems(false);
        this.startPolling()
    },
    setMyDsAccount: function(a) {
        if (a !== undefined && a.length > 0) {
            this.mydsAccount = a;
            this.field_myds_account.setValue('<a class="link-font" href="javascript: void(0)">' + a + "</a>")
        } else {
            this.mydsAccount = "";
            this.field_myds_account.setValue('<a class="link-font" href="javascript: void(0)">' + _T("myds", "login_or_register_myds_account") + "</a>")
        }
        if (!SYNO.SDS.QuickConnect.Utils.isInTunnel()) {
            this.field_server_alias.setDisabled("" === this.mydsAccount)
        }
        this.field_myds_account.originalValue = this.field_myds_account.getValue()
    },
    updateServerInfo: function(a) {
        if (a.data !== undefined) {
            this.enabled = a.data.enabled;
            this.server_alias = a.data.server_alias;
            this.server_id = a.data.server_id;
            this.setMyDsAccount(a.data.myds_account);
            this.field_tos_enabled.setValue(this.enabled);
            this.field_tos_enabled.setVisible(!this.enabled);
            this.showTos = !this.enabled;
            this.setApplyBtn(this.field_tos_enabled.getValue(), this.mydsAccount)
        }
    },
    updateStatus: function(a) {
        this.quick_connect_status = a.data.status;
        this.alias_status = a.data.alias_status
    },
    updatePermissionInfo: function(b) {
        if (b.data !== undefined) {
            this.dsm_permission = false;
            this.photo_permission = false;
            this.ds_photo_permission = false;
            this.mobile_apps_permission = false;
            this.cloud_permission = false;
            this.file_sharing_permission = false;
            for (var a in b.data.services) {
                if (b.data.services.hasOwnProperty(a)) {
                    switch (b.data.services[a].id) {
                        case "dsm_portal":
                            this.dsm_permission = b.data.services[a].enabled;
                            break;
                        case "photo_portal":
                            this.photo_permission = b.data.services[a].enabled;
                            break;
                        case "mobile_apps":
                            this.mobile_apps_permission = b.data.services[a].enabled;
                            break;
                        case "photostation":
                            this.ds_photo_permission = b.data.services[a].enabled;
                            break;
                        case "cloudstation":
                            this.cloud_permission = b.data.services[a].enabled;
                            break;
                        case "file_sharing":
                            this.file_sharing_permission = b.data.services[a].enabled;
                            break
                    }
                }
            }
        }
    },
    updateUpnpInfo: function(a) {
        if (a === undefined) {
            return
        }
        this.field_portforward_enabled.setValue(a.data.enabled);
        this.field_portforward_enabled.originalValue = this.field_portforward_enabled.getValue()
    },
    createObjs: function(b) {
        var a = 1;
        var c = [{
            xtype: "syno_fieldset",
            title: (b.innerTitle !== undefined) ? b.innerTitle : "QuickConnect",
            cls: "syno_quickconnect_fieldset",
            collapsible: false,
            items: [{
                xtype: "syno_displayfield",
                id: this.field_inside_tunnel_msg = Ext.id(),
                value: '<span class="syno-ux-note">' + _T("common", "note") + ": </span>" + _T("relayservice", "inside_tunnel_msg"),
                hidden: true
            }, {
                xtype: "syno_displayfield",
                value: _T("relayservice", "quickconnect_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enabled",
                id: this.field_enabled = Ext.id(),
                listeners: {
                    scope: this,
                    check: this.enableChanged
                },
                tabIndex: a++,
                boxLabel: _T("relayservice", "enable_quickconnect")
            }, {
                xtype: "syno_displayfield",
                value: "",
                fieldLabel: _T("cloudbkp", "my_ds_account"),
                id: this.field_myds_account = Ext.id(),
                tabIndex: a++,
                indent: 1
            }, {
                xtype: "syno_displayfield",
                value: _T("relayservice", "alias_description"),
                indent: 1
            }, {
                xtype: "syno_textfield",
                allowBlank: false,
                fieldLabel: _T("relayservice", "title_svrid"),
                id: this.field_server_alias = Ext.id(),
                name: "server_alias",
                tabIndex: a++,
                maxLength: 63,
                regex: /^[a-zA-Z][a-zA-Z\-0-9]*$/,
                regexText: _JSLIBSTR("vtype", "bad_relay_alias_name"),
                enableKeyEvents: true,
                indent: 1
            }, {
                xtype: "syno_checkbox",
                id: this.field_portforward_enabled = Ext.id(),
                name: "portforward_enabled",
                hidden: this._S("version") < this.VERSION_WITH_UPNP,
                value: true,
                boxLabel: _T("relayservice", "enable_portforward"),
                indent: 1
            }, {
                xtype: "syno_button",
                text: _T("relayservice", "adv_setting"),
                indent: 1,
                tabIndex: a++,
                scope: this,
                handler: this.onClickAdvBtn,
                id: this.button_adv = Ext.id()
            }, {
                xtype: "syno_displayfield",
                height: 10
            }, {
                xtype: "syno_checkbox",
                id: this.field_force = Ext.id(),
                name: "force",
                value: false,
                hidden: true
            }, {
                xtype: "syno_displayfield",
                id: this.field_status = Ext.id(),
                hidden: true,
                fieldLabel: _T("relayservice", "status")
            }, {
                xtype: "box",
                id: this.field_info_box = Ext.id(),
                tpl: this.info_template,
                selectable: true
            }, {
                xtype: "syno_checkbox",
                id: this.field_tos_enabled = Ext.id(),
                hidden: true,
                value: false,
                listeners: {
                    scope: this,
                    check: this.tosChanged
                },
                boxLabel: _T("service", "service_ddns_syno_tos")
            }]
        }];
        return c
    },
    startPolling: function() {
        if (typeof(this.polling_id) !== "undefined") {
            return
        }
        if (this.field_enabled.originalValue !== true) {
            return
        }
        this.quick_connect_status = "";
        this.alias_status = "";
        this.status_changed = true;
        this.polling_id = this.pollReg({
            interval: 5,
            immediate: true,
            scope: this,
            webapi: {
                api: "SYNO.Core.QuickConnect",
                method: "status",
                version: this.getQcWebApiVersion("SYNO.Core.QuickConnect", "status")
            },
            status_callback: this.polling_callback
        })
    },
    stopPolling: function() {
        this.pollUnreg(this.polling_id);
        delete this.polling_id
    },
    polling_callback: function(h, f, d, b) {
        var i = {
            disconnect: _T("relayservice", "relayservice_disconnected"),
            direct_connect: _T("relayservice", "relayservice_direct_connect"),
            login: _T("relayservice", "relayservice_login"),
            starting: _T("relayservice", "relayservice_starting"),
            not_running: _T("relayservice", "relayservice_disconnected"),
            logout: _T("relayservice", "relayservice_stop"),
            stoped: _T("relayservice", "relayservice_disconnected"),
            connected: _T("relayservice", "relayservice_connected"),
            unknown: _T("relayservice", "relayservice_err_unknown"),
            no_service: _T("relayservice", "no_service_enabled"),
            network_abnormal: _T("relayservice", "relayservice_err_resolv")
        };
        if (typeof(this.polling_id) === "undefined") {
            return
        }
        this.old_alias_status = this.alias_status;
        this.old_quick_connect_status = this.quick_connect_status;
        this.alias_status = h ? f.alias_status : "unknown";
        this.quick_connect_status = h ? f.status : "unknown";
        this.status_changed = ((this.old_alias_status !== this.alias_status) || (this.old_quick_connect_status !== this.quick_connect_status));
        if (this.status_changed) {
            var g = !(this.dsm_permission || this.photo_permission || this.cloud_permission || this.mobile_apps_permission || this.ds_photo_permission || this.file_sharing_permission);
            var e = h ? false : (2902 === f.code);
            var a = "unknown";
            if (e) {
                a = "network_abnormal"
            } else {
                if (g) {
                    a = "no_service"
                } else {
                    if (h) {
                        a = f.status
                    }
                }
            }
            var c = i[a];
            this.field_status.setValue(c);
            this.setInfoItems(false)
        }
    },
    isDirty: function() {
        var c = this.parentPanel;
        if (c.abnormalStatus()) {
            return true
        }
        var a = [c.field_enabled, c.field_portforward_enabled, c.field_server_alias];
        for (var b = 0; b < a.length; ++b) {
            if (a[b].isDirty()) {
                return true
            }
        }
        return false
    },
    abnormalStatus: function() {
        return this.field_enabled.getValue() === true && (this.alias_status !== "success" || (this.quick_connect_status !== "connected" && this.quick_connect_status !== "login" && this.quick_connect_status !== "starting"))
    },
    onClickAdvBtn: function() {
        if (this._S("version") < this.VERSION_WITH_PERMISSION) {
            this.appWin.getMsgBox().alert("", _T("relayservice", "cms_upgrade_msg"));
            return
        }
        this.stopPolling();
        var a = new SYNO.SDS.AdminCenter.QuickConnect.AdvanceDialog({
            owner: this.module.appWin,
            module: this.module,
            originalFormPanel: this
        });
        a.open();
        a.loadStore()
    },
    afterRegisterMyDSAccount: function(b, a) {
        this.setMyDsAccount(b);
        this.setApplyBtn(this.field_tos_enabled.getValue(), b)
    },
    onClickMyDsAccountField: function() {
        if (this.mydsAccount === "") {
            var a = new SYNO.SDS.MyDSCenter.RegisterDialog({
                owner: this.module.appWin,
                listeners: {
                    scope: this,
                    login_success: this.afterRegisterMyDSAccount
                }
            });
            a.open()
        } else {
            SYNO.SDS.AppLaunch("SYNO.SDS.MyDSCenter.Application", {
                fn: "SYNO.SDS.MyDSCenter.AccountModule"
            })
        }
    },
    checkServicesFirewall: function() {
        var a = [];
        if (this.dsm_permission || this.mobile_apps_permission || this.file_sharing_permission) {
            a.push({
                name: "SYNO.SDS.AdminCenter.Network.DSM",
                isPkg: false
            })
        }
        if (this.photo_permission || this.ds_photo_permission) {
            a.push({
                name: "PhotoStation",
                isPkg: true
            })
        }
        if (this.cloud_permission) {
            a.push({
                name: "CloudStation",
                isPkg: true
            })
        }
        if (typeof a !== "undefined" && a.length > 0) {
            SYNO.SDS.StatusNotifier.checkServiceBlocked(a)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.QuickConnect.InfoTemplate", {
    extend: "Ext.XTemplate",
    constructor: function(a) {
        this.parentPanel = a.parentPanel;
        this.callParent([this.template])
    },
    getData: function() {
        var e = this.parentPanel;
        var c = ("connected" === e.quick_connect_status);
        var d = e.server_alias !== "" ? e.server_alias : e.server_id;
        var k = SYNO.SDS.QuickConnect.Utils.aliasToPortalUrl(d, SYNO.SDS.QuickConnect.Utils.TYPES.NORMAL);
        var i = d.indexOf("_") !== -1 || d.length > 63;
        var j = e.server_alias !== "" && e.mydsAccount !== "";
        var h = SYNO.SDS.StatusNotifier.isAppEnabled("SYNO.SDS.PhotoStation");
        h = h && e.photo_permission;
        var a = SYNO.SDS.StatusNotifier.isAppEnabled("SYNO.SDS.CSTN.Instance");
        a = a && e.cloud_permission;
        var f = e.dsm_permission;
        var b = !(e.dsm_permission || e.photo_permission || e.ds_photo_permission || e.cloud_permission || e.mobile_apps_permission);
        var g = 'style="display:none"';
        return {
            alias: d,
            dsm_url: k,
            photo_url: k + "/photo",
            description: j ? _T("relayservice", "welcome_message") : _T("relayservice", "welcome_no_alias"),
            hidden: !e.enabled || !c || b ? g : "",
            url_hidden: !j || i || (!h && !f) ? g : "",
            alias_note_hidden: i ? "" : g,
            mobile_hidden: !(e.mobile_apps_permission || e.cloud_permission || e.ds_photo_permission) ? g : "",
            photo_hidden: !h ? g : "",
            cloud_hidden: !a ? g : "",
            cloud_not_hidden: a ? g : "",
            dsm_hidden: !f ? g : ""
        }
    },
    template: ('<div class="syno_quickconnect_container" {hidden}><div class="title normal-font">{description}</div><div {url_hidden}><div class="description normal-font">' + _T("relayservice", "browser_description") + '</div><div class="content selectabletext" {dsm_hidden}><span class="title normal-font">DSM:</span><span class="info allowDefCtxMenu"><a class="link-font" target = "_blank" href="{dsm_url}">{dsm_url}</a></span></div><div class="content selectabletext" {photo_hidden}><span class="title normal-font">Photo Station:</span><span class="info allowDefCtxMenu"><a class="link-font" target = "_blank" href="{photo_url}">{photo_url}</a></span></div></div><div class="description normal-font" {mobile_hidden}><span {cloud_hidden}>' + _T("relayservice", "syno_mobile_apps") + "</span><span {cloud_not_hidden}>" + _T("relayservice", "syno_mobile_apps_only") + '</span></div><div class="content selectabletext" {mobile_hidden}><span class="title normal-font">QuickConnect ID:</span><span class="info allowDefCtxMenu link-font">{alias}</span></div><div class="content syno-ux-displayfield x-form-display-field" {alias_note_hidden}><span class="syno-ux-note">' + _T("common", "note") + ': </span><span class="normal-font">' + _T("relayservice", "alias_new_restriction") + "</span></div></div>")
});
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.QuickConnect", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.panel = new SYNO.SDS.AdminCenter.QuickConnect.FormPanel({
            innerTitle: "",
            module: this,
            appWin: a.appWin,
            isInTunnel: SYNO.SDS.QuickConnect.Utils.isInTunnel()
        });
        var b = Ext.apply({
            itemId: "quick_connect",
            layout: "fit",
            items: [this.panel],
            listeners: {
                activate: this.activate,
                deactivate: this.deactivate,
                scope: this
            }
        }, a);
        return b
    },
    activate: function(a) {
        if (!this.activated) {
            this.panel.loadForm();
            this.activated = true
        } else {
            this.panel.startPolling()
        }
    },
    deactivate: function() {
        this.panel.stopPolling();
        var a = [this.panel.field_enabled, this.panel.field_myds_account, this.panel.field_server_alias];
        for (var b = 0; b < a.length; ++b) {
            if (a[b].isDirty()) {
                return false
            }
        }
        this.activated = false;
        return true
    },
    checkDeactivate: function() {
        return this.deactivate()
    },
    confirmCallback: function(a) {
        if (a === "yes") {
            this.activated = false;
            this.panel.cancelHandler()
        } else {
            if (a === "no") {
                this.panel.startPolling()
            }
        }
    },
    getHelpParam: function() {
        return "AdminCenter/simple_quickconnect.html"
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.SimpleMode");
Ext.define("SYNO.SDS.AdminCenter.SimpleMode.TabPanel", {
    extend: "SYNO.ux.TabPanel",
    constructor: function(a) {
        this.initTabs(a);
        var b = {
            activeTab: 0,
            listeners: {
                afterrender: {
                    fn: this.initLayout,
                    single: true
                },
                beforetabchange: {
                    fn: this.onBeforeTabChange
                },
                scope: this
            },
            items: [this.dashborad]
        };
        Ext.apply(b, a);
        this.callParent([b])
    },
    initTabs: function(a) {
        this.dashborad = new SYNO.SDS.AdminCenter.SimpleMode.Dashboard({
            title: _T("controlpanel", "dashboard"),
            owner: this,
            appWin: a.appWin
        })
    },
    initLayout: function() {
        this.add([new SYNO.SDS.AdminCenter.SimpleMode.User({
            title: _T("controlpanel", "leaf_user"),
            appWin: this.appWin,
            jsConfig: this.appWin.jsConfig
        }), new SYNO.SDS.AdminCenter.SimpleMode.Share({
            title: _T("tree", "leaf_sharefolder"),
            appWin: this.appWin,
            jsConfig: this.appWin.jsConfig
        }), new SYNO.SDS.AdminCenter.SimpleMode.QuickConnect({
            title: "QuickConnect",
            appWin: this.appWin,
            jsConfig: this.appWin.jsConfig
        })]);
        this.doLayout()
    },
    confirmCallback: function(a) {
        if (this.activeTab && this.activeTab.confirmCallback) {
            this.activeTab.confirmCallback(a)
        }
    },
    canDeactivate: function() {
        var a = this.activeTab;
        if (a && a.checkDeactivate && a.checkDeactivate() === false) {
            return false
        }
        return true
    },
    onBeforeTabChange: function(b, c, a) {
        if (this.canDeactivate() === false) {
            this.appWin.getMsgBox().confirm("simple mode", _T("common", "confirm_lostchange"), function(d, e) {
                if (a.confirmCallback) {
                    a.confirmCallback(d)
                }
                if (d == "yes") {
                    this.setActiveTab(c)
                }
            }, this);
            return false
        }
        return true
    },
    getPage: function(a) {
        if (Ext.isEmpty(a)) {
            return null
        }
        return this.get(a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.SimpleModePanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.createAdvLink();
        var b = {
            cls: "simple-mode-panel",
            padding: "0 20px",
            layout: "fit",
            items: [this.initTabPanel(a), this.advModeLink],
            listeners: {
                afterrender: {
                    fn: function() {
                        this.registerEvents()
                    },
                    scope: this
                }
            }
        };
        Ext.apply(b, a);
        return b
    },
    getHelpParam: function() {
        var a = this.tabPanel.getActiveTab();
        if (a.getHelpParam()) {
            return a.getHelpParam()
        }
        return "AdminCenter/simple_desc.html"
    },
    createAdvLink: function() {
        this.advModeLink = new Ext.Container({
            cls: "advanced-mode-link",
            xtype: "container",
            items: [{
                xtype: "container",
                cls: "text",
                html: _T("controlpanel", "advanced_mode")
            }, {
                xtype: "container",
                cls: "icon"
            }],
            listeners: {
                afterrender: {
                    fn: function(a) {
                        a.el.on("click", this.owner.switchFromSimpleToHome, this.owner)
                    },
                    scope: this
                }
            }
        })
    },
    registerEvents: function() {
        this.on("deactivate", this.fireDeactivate, this);
        this.mon(this.owner, "close", this.fireWindowDeactivate, this);
        this.mon(this.owner, "minimize", this.fireWindowDeactivate, this);
        this.mon(this.owner, "deactivate", this.fireWindowDeactivate, this);
        this.on("activate", this.fireActivate, this);
        this.mon(this.owner, "restore", this.fireWindowActivate, this);
        this.mon(this.owner, "activate", this.fireWindowActivate, this)
    },
    fireWindowActivate: function() {
        var b = this.tabPanel,
            a = b.getActiveTab();
        if (a && a.bindWindowEvents !== false) {
            this.fireActivate()
        }
    },
    fireWindowDeactivate: function() {
        var b = this.tabPanel,
            a = b.getActiveTab();
        if (a && a.bindWindowEvents !== false) {
            this.fireDeactivate()
        }
    },
    fireActivate: function() {
        if (this.owner.isInSimpleMode() && !this.isActive) {
            var a = this.tabPanel;
            if (a && a.getActiveTab()) {
                a.getActiveTab().fireEvent("activate")
            }
            this.isActive = true
        }
    },
    fireDeactivate: function() {
        if (this.isActive !== false) {
            var a = this.tabPanel;
            if (a && a.getActiveTab()) {
                a.getActiveTab().fireEvent("deactivate")
            }
            this.isActive = false
        }
    },
    initTabPanel: function(a) {
        this.tabPanel = new SYNO.SDS.AdminCenter.SimpleMode.TabPanel({
            appWin: a.owner
        });
        return this.tabPanel
    },
    canDeactivate: function() {
        return this.tabPanel.canDeactivate()
    },
    confirmCallback: function(a) {
        this.tabPanel.confirmCallback(a)
    },
    getTabPanel: function() {
        return this.tabPanel
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Share");
Ext.define("SYNO.SDS.AdminCenter.Share.NFSRuleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.module = a.module;
        this.blKerberosEnabled = a.blKerberosEnabled;
        this.blKerberosSupport = a.blKerberosSupport;
        this.blShareReadOnly = Ext.isDefined(a.owner.share.get("force_readonly_reason"));
        this.record = (a.record) ? a.record : null;
        this.menu = this.createMenu();
        this.panel = this.createPanel();
        var b = this.fillConfig(a);
        this.callParent([b]);
        if (!this.record) {
            this.initAddRule()
        } else {
            this.initEditRule()
        }
    },
    fillConfig: function(a) {
        var b = {
            width: 550,
            height: 480,
            minWidth: 550,
            minHeight: 400,
            title: "",
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                plain: true,
                activeTab: 0,
                items: [this.panel]
            }],
            buttons: [{
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.applyHandler
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(b, a);
        return b
    },
    createMenu: function() {
        var a = {
            fieldLabel: _T("nfs", "nfs_security"),
            indent: 0,
            hidden: !this.blKerberosSupport,
            allowBlank: false,
            editable: false,
            items: [{
                xtype: "syno_checkbox",
                itemId: "nfs_auth_sys",
                boxLabel: "AUTH_SYS"
            }, "-", {
                xtype: "syno_checkbox",
                itemId: "nfs_krb5",
                boxLabel: _T("nfs", "nfs_kerberos_authentication")
            }, {
                xtype: "syno_checkbox",
                itemId: "nfs_krb5i",
                boxLabel: _T("nfs", "nfs_kerberos_integrity")
            }, {
                xtype: "syno_checkbox",
                itemId: "nfs_krb5p",
                boxLabel: _T("nfs", "nfs_kerberos_privacy")
            }]
        };
        return new SYNO.SDS.AdminCenter.Share.NFSRuleDialog.CheckItemsMenu(a)
    },
    createPanel: function() {
        var b = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["value", "display"],
            data: [
                ["root", _T("nfs", "nfs_mapping_no")],
                ["admin", String.format(_T("nfs", "nfs_mapping_yes"), "admin")],
                ["guest", String.format(_T("nfs", "nfs_mapping_yes"), "guest")],
                ["all_admin", _T("nfs", "nfs_mapping_all")]
            ]
        });
        var a = {
            title: _T("nfs", "nfs_tab_title"),
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_textfield",
                name: "client",
                maxlength: 1024,
                fieldLabel: _T("nfs", "nfs_host") + _T("common", "star"),
                allowBlank: false,
                blankText: _T("nfs", "nfs_error_nohost"),
                renderer: Ext.util.Format.htmlEncode,
                validator: this.webDomainValid
            }, {
                xtype: "syno_combobox",
                name: "privilege",
                disabled: this.blShareReadOnly,
                fieldLabel: _T("nfs", "nfs_privilege"),
                store: [
                    ["ro", _T("nfs", "nfs_read_only")],
                    ["rw", (this.blShareReadOnly) ? _T("nfs", "nfs_read_only") : _T("nfs", "nfs_read_write")]
                ]
            }, {
                xtype: "syno_combobox",
                name: "root_squash",
                fieldLabel: _T("nfs", "nfs_mapping"),
                tpl: '<tpl for="."><div ext:qtip="{display}" class="x-combo-list-item">{display}</div></tpl>',
                displayField: "display",
                valueField: "value",
                store: b
            }, this.menu, {
                xtype: "syno_checkbox",
                name: "async",
                boxLabel: _T("nfs", "nfs_async_enable")
            }, {
                xtype: "syno_checkbox",
                name: "insecure",
                boxLabel: _T("nfs", "nfs_insecure_port_desc")
            }, {
                xtype: "syno_checkbox",
                name: "crossmnt",
                boxLabel: _T("nfs", "nfs_crossmnt_desc")
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_displayfield",
                value: [_T("common", "star"), " ", _T("nfs", "nfs_hint_host"), _T("common", "colon"), '<ul style="list-style: disc inside; margin-left: 1em; padding-left: 0;">', String.format("<li>{0}</li>", _T("nfs", "nfs_fieldtitle_host")), String.format("<li>{0}{1}{2}</li>", _T("nfs", "nfs_fieldtitle_wildcard"), _T("common", "colon"), "   *, *.synology.com"), String.format("<li>{0}{1}{2}</li>", _T("nfs", "nfs_fieldtitle_netmask"), _T("common", "colon"), "    203.74.205.32/255.255.255.0, 203.74.205.32/24"), "</ul>"].join("")
            }]
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    webDomainValid: function(b) {
        var a = /([\'\"\|\=\(\) ]+)/;
        if (b.match(a)) {
            return false
        } else {
            return true
        }
    },
    initAddRule: function() {
        this.setTitle(_T("nfs", "nfs_new_rule"));
        this.panel.getForm().setValues({
            client: "",
            privilege: "rw",
            root_squash: "root",
            async: true,
            insecure: false,
            crossmnt: false
        });
        this.menu.setDefaultSec();
        this.panel.getForm().clearInvalid()
    },
    initEditRule: function() {
        this.setTitle(_T("nfs", "nfs_edit_rule"));
        this.panel.getForm().setValues(this.record.data);
        if ("object" == typeof this.record.get("security_flavor")) {
            this.menu.setSecurityPolicy(this.record)
        } else {
            this.menu.setDefaultSec()
        }
    },
    isKerberosConfirmShow: function(a) {
        if (this.blKerberosSupport && !this.blKerberosEnabled && (a.security_flavor.kerberos || a.security_flavor.kerberos_intergrity || a.security_flavor.kerberos_privacy)) {
            return true
        } else {
            return false
        }
    },
    applyHandler: function() {
        var c = this.panel.getForm();
        var b = c.getValues();
        if (!c.isValid()) {
            return
        }
        if (!Ext.isDefined(b.privilege)) {
            b.privilege = c.findField("privilege").getValue()
        }
        b.security_flavor = {
            kerberos: this.menu.getItemValue("nfs_krb5"),
            kerberos_integrity: this.menu.getItemValue("nfs_krb5i"),
            kerberos_privacy: this.menu.getItemValue("nfs_krb5p"),
            sys: this.menu.getItemValue("nfs_auth_sys")
        };
        if (!this.record) {
            if (this.isHostExist(b.client)) {
                return
            }
            this.addRecord(b)
        } else {
            if ((b.client !== this.record.get("client")) && this.isHostExist(b.client)) {
                return
            }
            var a = this.getFirstSelection();
            a.set("client", b.client);
            a.set("privilege", b.privilege);
            a.set("root_squash", b.root_squash);
            a.set("async", b.async);
            a.set("insecure", b.insecure);
            a.set("crossmnt", b.crossmnt);
            a.set("security_flavor", b.security_flavor)
        }
        if (this.isKerberosConfirmShow(b)) {
            this.getMsgBox().confirm(this.title, _T("nfs", "nfs_kerberos_disabled_desc"), function(e) {
                this.close();
                if ("yes" === e) {
                    var d = new SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.MainDialog({
                        module: this.module,
                        owner: this.module.appWin
                    });
                    d.open()
                }
            }, this)
        } else {
            this.close()
        }
    },
    addRecord: function(c) {
        var b = Ext.data.Record.create([{
            name: "client"
        }, {
            name: "privilege"
        }, {
            name: "root_squash"
        }, {
            name: "async"
        }, {
            name: "insecure"
        }, {
            name: "crossmnt"
        }, {
            name: "security_flavor"
        }]);
        var a = new b(c);
        this.ownerGrid.store.add(a)
    },
    getFirstSelection: function() {
        var a = this.ownerGrid.getSelectionModel();
        return a.getSelected()
    },
    isRuleExist: function(c, d) {
        var a = this.ownerGrid.store;
        var b = false;
        a.each(function(e) {
            if (e.get(c) === d) {
                b = true;
                return false
            }
        }, this);
        return b
    },
    isHostExist: function(a) {
        if (this.isRuleExist("client", a)) {
            this.module.appWin.getMsgBox().alert(this.title, _T("nfs", "nfs_rule_host_exist"));
            return true
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.NFSRuleDialog.CheckItemsMenu", {
    extend: "Ext.form.TriggerField",
    overCls: "syno-ux-triggerfield-hover",
    triggerClass: "syno-ux-triggerfield-trigger",
    constructor: function(a) {
        var b = {
            autoDestroy: true,
            defaults: {
                width: 190
            },
            items: a.items
        };
        this.menu = new SYNO.ux.Menu(b);
        this.menu.mon(this.menu, "hide", this.onHide, this);
        this.callParent([a]);
        this.mon(this, "afterrender", function() {
            this.setSecurityText()
        }, this);
        this.addClass("syno-ux-triggerfield")
    },
    onTriggerClick: function() {
        this.menu.show(this.el)
    },
    onHide: function() {
        this.setSecurityText()
    },
    setDefaultSec: function() {
        this.menu.getComponent("nfs_auth_sys").setValue(true);
        this.setSecurityText()
    },
    onMouseover: function() {
        this.addClass("syno-ux-triggerfield-hover");
        this.trigger.addClass("x-form-trigger-over")
    },
    onMouseout: function() {
        this.removeClass("syno-ux-triggerfield-hover");
        this.trigger.removeClass("x-form-trigger-over")
    },
    markInvalid: function(a) {
        this.callParent(arguments);
        this.trigger.addClass("syno-ux-trigger-invalid")
    },
    clearInvalid: function() {
        this.callParent(arguments);
        this.trigger.removeClass("syno-ux-trigger-invalid")
    },
    setSecurityPolicy: function(a) {
        this.setItemValue("nfs_auth_sys", a.get("security_flavor").sys);
        this.setItemValue("nfs_krb5", a.get("security_flavor").kerberos);
        this.setItemValue("nfs_krb5i", a.get("security_flavor").kerberos_integrity);
        this.setItemValue("nfs_krb5p", a.get("security_flavor").kerberos_privacy);
        this.setSecurityText()
    },
    setSecurityText: function() {
        var b = [];
        var a = "";
        if (true === this.getItemValue("nfs_auth_sys")) {
            b.push("sys")
        }
        if (true === this.getItemValue("nfs_krb5")) {
            b.push("krb5")
        }
        if (true === this.getItemValue("nfs_krb5i")) {
            b.push("krb5i")
        }
        if (true === this.getItemValue("nfs_krb5p")) {
            b.push("krb5p")
        }
        a = b.join(",");
        SYNO.SDS.AdminCenter.Share.NFSRuleDialog.CheckItemsMenu.superclass.setValue.call(this, a)
    },
    getItemValue: function(a) {
        return this.menu.getComponent(a).getValue()
    },
    setItemValue: function(b, a) {
        this.menu.getComponent(b).setValue(a)
    },
    onRender: function(b, a) {
        this.callParent(arguments);
        if (this.label) {
            this.label.addClass("syno-ux-item-label")
        }
        SYNO.ux.Utils.setFormItemIndent(this);
        SYNO.ux.Utils.setFormFieldWidth(this)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Share");
SYNO.SDS.AdminCenter.Share.onClickNfsSetting = function(b) {
    var a = Ext.getCmp(b);
    a.owner.close();
    SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", Ext.apply(a.findAppWindow().openConfig || {}, {
        fn: "SYNO.SDS.AdminCenter.FileService.Main"
    }))
};
Ext.define("SYNO.SDS.AdminCenter.Share.NFSGridPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.module = a.module;
        this.store = this.createStore();
        this.colModel = this.createColModel(a);
        this.dataModified = 0;
        this.actionGroup = this.createActionGroup();
        this.blKerberosEnabled = a.blKerberosEnabled;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "deactivate", function() {
            this.getEl().unmask()
        }, this)
    },
    fillConfig: function(a) {
        var b = "";
        if (true === this.owner.share.get("is_usb_share")) {
            b = this.owner.share.get("vol_path")
        } else {
            if (this._D("usbstation") === "yes") {
                b = this.owner.share.get("vol_path") + "/@sharebin/" + this.owner.share.get("name")
            } else {
                b = this.owner.share.get("vol_path") + "/" + this.owner.share.get("name")
            }
        }
        var c = {
            title: _T("nfs", "nfs_privilege_setup"),
            cls: "without-dirty-red-grid",
            store: this.store,
            colModel: this.colModel,
            autoExpandColumn: "client",
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    scope: this,
                    selectionchange: this.chgNFSButtonStatus
                }
            }),
            tbar: {
                defaultType: "syno_button",
                items: [{
                    xtype: "syno_button",
                    text: _T("common", "create"),
                    itemId: "addBtn",
                    scope: this,
                    handler: this.addRule
                }, this.actionGroup.getArray()]
            },
            bbar: {
                items: [{
                    xtype: "tbtext",
                    itemId: "mntpath",
                    text: String.format('{0}{1}<span class="blue-status">{2}</span>', _T("nfs", "nfs_mount_path"), _T("common", "colon"), b)
                }]
            },
            listeners: {
                scope: this,
                activate: this.onActivate,
                rowcontextmenu: {
                    scope: this,
                    fn: this.onRowContextMenu
                },
                rowdblclick: {
                    scope: this,
                    fn: this.onRowDblClick
                }
            }
        };
        Ext.apply(c, a);
        return c
    },
    createStore: function() {
        return new SYNO.API.JsonStore({
            api: "SYNO.Core.FileServ.NFS.SharePrivilege",
            method: "load",
            version: "1",
            baseParams: {
                share_name: this.owner.share.get("name")
            },
            appWindow: this.findAppWindow(),
            root: "rule",
            idProperty: "client",
            fields: ["client", "privilege", "root_squash", "async", "insecure", "crossmnt", "security_flavor"],
            autoDestroy: true,
            listeners: {
                scope: this,
                beforeload: this.onBeforeLoad,
                load: this.onLoad,
                exception: this.onException,
                add: this.onStoreAdd,
                update: this.onStoreUpdate,
                remove: this.onStoreRemove
            }
        })
    },
    createColModel: function(b) {
        var d = Ext.isDefined(b.owner.share.get("force_readonly_reason"));
        var a = function(i) {
            if (d || i === "ro") {
                return _T("nfs", "nfs_read_only")
            } else {
                if (i === "rw") {
                    return _T("nfs", "nfs_read_write")
                }
            }
            return ""
        };
        var f = function(j) {
            var i = "";
            switch (j) {
                case "all_admin":
                    i = _T("nfs", "nfs_mapping_all");
                    break;
                case "root":
                    i = _T("nfs", "nfs_mapping_no");
                    break;
                case "admin":
                    i = String.format(_T("nfs", "nfs_mapping_yes"), "admin");
                    break;
                case "guest":
                    i = String.format(_T("nfs", "nfs_mapping_yes"), "guest");
                    break
            }
            return '<div ext:qtip="' + i + '">' + i + "</div>"
        };
        var c = function(j) {
            var i = [];
            if (j.sys) {
                i.push("sys")
            }
            if (j.kerberos) {
                i.push("krb5")
            }
            if (j.kerberos_integrity) {
                i.push("krb5i")
            }
            if (j.kerberos_privacy) {
                i.push("krb5p")
            }
            return i.join()
        };
        var h = function(i) {
            if (i === true) {
                return _T("common", "yes")
            }
            return _T("common", "no")
        };
        var g = function(i) {
            if (i === true) {
                return _T("nfs", "nfs_nonprivileged_port_allow")
            }
            return _T("nfs", "nfs_nonprivileged_port_deny")
        };
        var e = new Ext.grid.ColumnModel({
            columns: [{
                id: "client",
                header: _T("nfs", "nfs_host_position"),
                dataIndex: "client",
                width: 100,
                renderer: Ext.util.Format.htmlEncode
            }, {
                id: "privilege",
                header: _T("nfs", "nfs_access_right"),
                dataIndex: "privilege",
                renderer: a,
                align: "center",
                width: 120
            }, {
                id: "root_squash",
                header: _T("nfs", "nfs_mapping"),
                dataIndex: "root_squash",
                renderer: f,
                align: "center",
                width: 120
            }, {
                id: "async",
                header: _T("nfs", "nfs_async"),
                dataIndex: "async",
                renderer: h,
                align: "center",
                width: 100
            }, {
                name: "insecure",
                header: _T("nfs", "nfs_insecure_port"),
                dataIndex: "insecure",
                renderer: g,
                align: "center",
                width: 100
            }, {
                name: "crossmnt",
                header: _T("nfs", "nfs_crossmnt"),
                dataIndex: "crossmnt",
                renderer: g,
                align: "center",
                width: 100
            }, {
                name: "security_flavor",
                header: _T("nfs", "nfs_security"),
                dataIndex: "security_flavor",
                renderer: c,
                hidden: true,
                width: 150
            }]
        });
        return e
    },
    createActionGroup: function() {
        var a = new Ext.Action({
            text: _T("common", "alt_edit"),
            itemId: "editRule",
            scope: this,
            handler: this.editRule
        });
        var b = new Ext.Action({
            text: _T("common", "delete"),
            itemId: "delRule",
            scope: this,
            handler: this.delRule
        });
        var c = new SYNO.SDS.Utils.ActionGroup([a, b]);
        return c
    },
    onActivate: function() {
        if (this.blNfsEnabled) {
            return
        }
        var b = _T("share", "nfs_not_enabled");
        var a = '<a href="javascript:void(0)" class="blue-status" onclick=SYNO.SDS.AdminCenter.Share.onClickNfsSetting("' + this.getId() + '")>' + _T("nfs", "nfs_title") + "</a>";
        this.getEl().mask(String.format(b, a), "syno-ux-mask-info")
    },
    onBeforeLoad: function(a, b) {
        this.owner.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        return true
    },
    onLoad: function(b, a, c) {
        if (this.blKerberosSupport) {
            this.colModel.setHidden(5, false)
        }
        if (a.length > 0) {
            this.getSelectionModel().selectFirstRow()
        }
        this.storeDataCached(b);
        this.owner.clearStatusBusy();
        this.chgNFSButtonStatus()
    },
    storeDataCached: function(a) {
        var b = 0;
        this.cachedStoreData = {};
        a.each(function(c) {
            this.cachedStoreData[c.id] = JSON.stringify(c.data);
            b++
        }, this);
        this.cachedStoreData.size = b
    },
    storeDataCompare: function(a) {
        this.dataModified = 0;
        if (this.cachedStoreData.size != a.data.length) {
            this.dataModified = 1;
            return
        }
        a.each(function(b) {
            if (this.cachedStoreData[b.id] != JSON.stringify(b.data)) {
                this.dataModified = 1;
                return
            }
        }, this)
    },
    onException: function(d, e, f, c, b, a) {
        var g = _T("nfs", "nfs_fail_load_rules");
        this.owner.clearStatusBusy();
        this.owner.getMsgBox().alert(this.title, g, this.close, this)
    },
    onStoreAdd: function(b, a, c) {
        this.storeDataCompare(b)
    },
    onStoreUpdate: function(c, a, b) {
        this.storeDataCompare(c)
    },
    onStoreRemove: function(b, a, c) {
        this.storeDataCompare(b)
    },
    chgNFSButtonStatus: function() {
        var a = this.getSelectionModel().getSelections().length;
        var b = this.actionGroup;
        if (1 != a) {
            b.disable("editRule")
        } else {
            b.enable("editRule")
        }
        if (0 >= a) {
            b.disable("delRule")
        } else {
            b.enable("delRule")
        }
    },
    addRule: function() {
        var a = new SYNO.SDS.AdminCenter.Share.NFSRuleDialog({
            owner: this.owner,
            module: this.module,
            ownerGrid: this,
            blKerberosSupport: this.blKerberosSupport,
            blKerberosEnabled: this.blKerberosEnabled
        });
        a.open()
    },
    editRule: function() {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.SDS.AdminCenter.Share.NFSRuleDialog({
            owner: this.owner,
            module: this.module,
            ownerGrid: this,
            blKerberosSupport: this.blKerberosSupport,
            blKerberosEnabled: this.blKerberosEnabled,
            record: a
        });
        b.open()
    },
    delRule: function() {
        var a = this.getSelectionModel().getSelections();
        Ext.each(a, function(d, b, c) {
            this.store.remove(d)
        }, this);
        this.chgNFSButtonStatus()
    },
    onRowContextMenu: function(b, e, a) {
        var c = new SYNO.ux.Menu({
            autoDestroy: true,
            items: this.actionGroup.getArray()
        });
        var d = b.getSelectionModel();
        d.selectRow(e, d.isSelected(e));
        c.showAt(a.getXY());
        a.preventDefault()
    },
    onRowDblClick: function(c, d, b) {
        var a = c.getStore().getAt(d);
        this.editRule(a)
    },
    enumNFSRules: function() {
        var a = [];
        this.store.each(function(b) {
            a.push({
                client: b.get("client"),
                privilege: b.get("privilege"),
                root_squash: b.get("root_squash"),
                async: b.get("async"),
                insecure: b.get("insecure"),
                crossmnt: b.get("crossmnt"),
                security_flavor: b.get("security_flavor")
            })
        }, this);
        return a
    },
    hasKerboerosSecurity: function() {
        var a = false;
        var b = {};
        this.store.each(function(c) {
            b = c.get("security_flavor");
            if (true === b.kerberos || true === b.kerberos_integrity || true === b.kerberos_privacy) {
                a = true
            }
        }, this);
        return a
    },
    onRuleCheck: function() {
        var a = true;
        if (this.owner.getIsSnapshotBrowsing()) {
            this.store.each(function(b) {
                if (!b.get("crossmnt")) {
                    a = false;
                    return
                }
            }, this)
        }
        return a
    },
    getWebAPI: function() {
        return (this.dataModified === 0) ? [] : [{
            api: "SYNO.Core.FileServ.NFS.SharePrivilege",
            method: "save",
            version: "1",
            params: {
                share_name: this.owner.share.get("name"),
                rule: this.enumNFSRules()
            }
        }]
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Share");
Ext.define("SYNO.SDS.AdminCenter.Share.Dialog", {
    extend: "SYNO.SDS.ModalWindow",
    moveShareMsg: String.format('<div style="text-align: center;"> {0} </div>', _T("share", "init_status")),
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.share = a.share;
        this.mode = a.mode;
        this.supportShareSnapshot = (this._D("support_share_snapshot", "no") === "yes");
        this.supportShareQuota = (this._D("support_share_quota", "no") === "yes");
        this.snapshot = a.snapshot;
        this.rgQuotaUnit = [
            ["TB", "TB"],
            ["GB", "GB"],
            ["MB", "MB"]
        ];
        this.defineGrid();
        var b = this.fillTabPanelConfig(a);
        this.callParent([b]);
        this.panel = this.getComponent("tab");
        this.shareTab = this.panel.getComponent("shareForm");
        this.indexTab = this.panel.getComponent("indexForm");
        this.shareForm = this.shareTab.getForm();
        this.indexForm = this.indexTab.getForm();
        this.gridPanel = this.panel.getComponent("sharegrid");
        this.formPanel = this.panel.getComponent("advperm");
        this.nfsPanel = this.panel.getComponent("nfsgrid");
        this.loadData();
        if (this.nfsPanel && this.nfsPanel.getStore()) {
            this.nfsPanel.getStore().load()
        }
        this.mon(this, "afterlayout", function(c, d) {
            this.enableGroupDummy1 = new SYNO.ux.Utils.EnableCheckGroup(this.shareForm, "encryption", ["enc_passwd", "enc_passwd2", "enc_auto_mount"], []);
            this.enableGroupDummy2 = new SYNO.ux.Utils.EnableCheckGroup(this.shareForm, "enable_recycle_bin", ["recycle_bin_admin_only"], [], {
                disable_group: true
            })
        }, this, {
            single: true
        });
        this.mon(this, "deactivate", this.deactivate, this);
        this.mon(this.shareForm.findField("vol_path"), "collapse", this.onLocationChange, this);
        this.mon(this.shareForm.findField("encryption"), "check", this.snapshotBrowsingCheck, this)
    },
    fillTabPanelConfig: function(e) {
        var d = this.fillShareFormConfig(e);
        var b = this.fillIndexFormConfig(e);
        var h = "";
        if ("clone" === this.mode) {
            h = _T("share", "share_clone");
            h = String.format(h, this.share.get("name"))
        } else {
            if ("create" === this.mode) {
                h = _T("share", "share_add")
            } else {
                h = _T("share", "share_edit_title");
                h = String.format(h, this.share.get("name"))
            }
        }
        var g = [d];
        if ("edit" === this.mode) {
            var f = SYNO.SDS.ControlPanel.Share.usedBySurveillance(this.share.get("name"), this);
            var i = this.share.get("encryption");
            var c = Ext.isDefined(this.share.get("force_readonly_reason"));
            g.push(new SYNO.SDS.Share.PermissionGrid({
                module: this.module,
                owner: this,
                itemId: "sharegrid",
                disabled: f || (i === 1 && this.share.get("is_aclmode") === true),
                blShareReadOnly: c,
                hidden: f || (i === 1 && this.share.get("is_aclmode") === true),
                hideCustomColumn: !SYNO.SDS.ControlPanel.Share.isCustomizable(this.share.data)
            }));
            g.push(new SYNO.SDS.Share.AdvanceForm({
                module: this.module,
                owner: this,
                disabled: f || (i === 1 && this.share.get("is_aclmode") === true),
                blShareReadOnly: c,
                itemId: "advperm"
            }));
            g.push(new SYNO.SDS.AdminCenter.Share.NFSGridPanel({
                module: this.module,
                owner: this,
                itemId: "nfsgrid",
                disabled: i !== 0 || this._S("demo_mode"),
                blNfsEnabled: e.blNfsEnabled,
                blKerberosSupport: e.blKerberosSupport,
                blKerberosEnabled: e.blKerberosEnabled
            }))
        }
        g.push(b);
        var j = new SYNO.SDS.Utils.TabPanel({
            itemId: "tab",
            activeTab: 0,
            deferredRender: false,
            useDefaultBtn: false,
            items: g,
            listeners: {
                beforetabchange: {
                    fn: this.onActivatePanel,
                    scope: this
                }
            }
        });
        var a = {
            title: h,
            width: 860,
            height: 550,
            layout: "fit",
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }],
            items: j
        };
        Ext.apply(a, e);
        return a
    },
    onApply: function() {
        if ("edit" === this.mode) {
            this.editHandler()
        } else {
            this.createHandler()
        }
    },
    defineGrid: function() {
        if (!SYNO.SDS.Share.PermissionGrid) {
            Ext.define("SYNO.SDS.Share.PermissionGrid", {
                extend: "SYNO.SDS.Share.ShareGrid",
                constructor: function(a) {
                    var b = a.hideCustomColumn;
                    if (a.module.appWin.getOpenConfig("className") === "SYNO.SDS.CMS.Application") {
                        b = b || (a.module.appWin._S("version") < 4475)
                    }
                    this.colCu = new SYNO.SDS.Share.CustomColumn({
                        module: a.module,
                        owner: a.owner,
                        ownerGrid: this,
                        dataIndex: "is_custom",
                        hidden: b,
                        applyCallback: function() {
                            this.store.load()
                        },
                        applyTarget: this
                    });
                    a.colCu = this.colCu;
                    this.callParent([a])
                }
            })
        }
    },
    createHandler: function() {
        var a = this.shareForm.findField("name").getValue();
        var e = this.volumeFsMap[this.shareForm.findField("vol_path").getValue()];
        var f = this.shareForm.findField("encryption").getValue();
        var c = ["hidden", "enable_recycle_bin", "recycle_bin_admin_only", "hide_unreadable", "encryption", "enc_passwd", "enc_auto_mount", "enable_share_cow"];
        var d = {};
        if (!this.shareForm.isValid()) {
            this.panel.setActiveTab("shareForm");
            return
        }
        if (this._D("usbstation", "no") === "yes" && a.toLowerCase() === "web" && e !== "ext4") {
            this.getMsgBox().alert(this.title, String.format(_T("service", "no_ext4_external_devices"), a));
            return
        }
        d.name = this.shareForm.findField("name").getValue();
        d.shareinfo = this.getParamShareForm(c);
        d.shareinfo.name_org = this.shareForm.findField("name_org").getValue();
        if (f) {
            var b = [_T("share", "share_encryption_warning_desc"), '<table border="0" cellpadding="0" cellspacing="3">', '<tr><td valign="top">1.</td><td class="red-status">', _T("share", "share_encryption_warning_savekey"), "</td></tr>", '<tr><td valign="top">2.</td><td>', _T("share", "share_encryption_warning_perf"), "</td></tr>", '<tr><td valign="top">3.</td><td>', _T("share", "share_encryption_warning_nfs"), "</td></tr>", '<tr><td valign="top">4.</td><td>', _T("share", "share_encryption_warning_length"), "</td></tr>", "</table>", "<br>", _T("common", "ask_cont")];
            this.getMsgBox().confirm(_T("tree", "leaf_sharefolder"), b.join(""), function(h, i, g) {
                if ("yes" === h) {
                    this.submitCreateShareInfo(d)
                }
            }, this)
        } else {
            this.submitCreateShareInfo(d)
        }
    },
    getParamShareForm: function(a) {
        var b = ["name", "vol_path", "desc"];
        var c = {};
        Ext.each(b, function(f, d, e) {
            c[f] = this.shareForm.findField(f).getValue()
        }, this);
        Ext.each(a, function(f, d, e) {
            if (this.shareForm.findField(f).isDirty()) {
                c[f] = this.shareForm.findField(f).getValue()
            }
        }, this);
        if ("yes" === this._D("supportfileindex") && (this.indexForm.findField("enable_fileindex").isDirty())) {
            c.enable_fileindex = this.indexForm.findField("enable_fileindex").getValue()
        }
        if (this.supportShareSnapshot) {
            if (this.shareForm.findField("enable_snapshot_browsing").isDirty()) {
                c.enable_snapshot_browsing = this.shareForm.findField("enable_snapshot_browsing").getValue()
            }
        }
        if ("btrfs" === this.volumeFsMap[this.shareForm.findField("vol_orig").getValue()]) {
            c.enable_share_cow = this.shareForm.findField("enable_share_cow").getValue()
        }
        if (this.supportShareQuota) {
            if (this.shareForm.findField("enable_share_quota").isDirty() || this.shareForm.findField("quota_unit").isDirty() || this.shareForm.findField("quota_value").isDirty()) {
                if (this.shareForm.findField("enable_share_quota").getValue()) {
                    c.share_quota = this.getQuotaInMB()
                } else {
                    c.share_quota = "0"
                }
            }
        }
        return c
    },
    submitCreateShareInfo: function(a) {
        if ("clone" === this.mode) {
            if (this.snapshot) {
                a.snapshot = this.snapshot
            }
        }
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            method: this.mode,
            params: a,
            version: 1,
            scope: this,
            callback: function(f, d, c) {
                this.clearStatusBusy();
                var e = "";
                if (!f) {
                    if (3312 == d.code) {}
                    var b = SYNO.API.Util.GetFirstError(d);
                    e = SYNO.API.Erros.core[b.code] || _T("common", "error_system");
                    if (b.code === 3309) {
                        e = String.format(e, this._D("maxshares"))
                    }
                    this.getMsgBox().alert("warning_msg", e);
                    return false
                }
                if (a.shareinfo.encryption) {
                    this.findAppWindow().downloadWebAPI({
                        webapi: {
                            api: "SYNO.Core.Share.Crypto.Key",
                            method: "export",
                            version: 1,
                            params: {
                                name: a.name,
                                password: a.shareinfo.enc_passwd
                            }
                        },
                        callback: function(i, h, g) {},
                        scope: this
                    })
                }
                this.module.getPanel().fireEvent("sharefolderchanged", a.shareinfo.name);
                this.newShareInfo = Ext.apply({
                    is_aclmode: true,
                    encryption: (a.shareinfo.encryption === true) ? 2 : 0
                }, a.shareinfo);
                this.close();
                SYNO.SDS.StatusNotifier.fireEvent("sharefolderchanged", "permission");
                return true
            }
        })
    },
    getCreateResult: function() {
        return (Ext.isObject(this.newShareInfo)) ? new Ext.data.Record(this.newShareInfo) : null
    },
    onCancel: function() {
        if (this.shareTab.isFormDirty() || this.indexTab.isFormDirty() || ("edit" === this.mode && (SYNO.SDS.Share.PermissionDialog.prototype.isChanged.call(this) || this.nfsPanel.dataModified !== 0))) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if (a === "yes") {
                    this.close()
                }
            }, this)
        } else {
            this.close()
        }
    },
    fillShareFormConfig: function(a) {
        var b = new Ext.data.JsonStore({
            idProperty: "value",
            fields: ["value", "display", "size_total_mb", "vol_name"],
            data: [
                [0, 0]
            ]
        });
        var c = {
            title: _T("share", "share_subject"),
            itemId: "shareForm",
            border: false,
            frame: false,
            autoScroll: true,
            header: false,
            height: 450,
            trackResetOnLoad: true,
            items: [{
                validationEvent: "keyup",
                xtype: "syno_textfield",
                name: "name",
                maxlength: 32,
                fieldLabel: _T("share", "share_name"),
                allowBlank: false,
                blankText: _T("share", "error_noname"),
                width: 250,
                vtype: "sharename"
            }, {
                xtype: "hidden",
                name: "name_org"
            }, {
                xtype: "syno_textfield",
                name: "desc",
                maxlength: 64,
                width: 250,
                fieldLabel: _T("share", "share_comment")
            }, {
                xtype: "syno_combobox",
                name: "vol_path",
                fieldLabel: _T("volume", "volume_share_position"),
                store: b,
                displayField: "display",
                valueField: "value",
                disabled: "clone" === this.mode,
                allowBlank: false,
                width: 250
            }, {
                xtype: "hidden",
                name: "vol_orig"
            }, {
                xtype: "syno_displayfield",
                name: "my_vol_status",
                fieldLabel: _T("volume", "volume_share_position")
            }, {
                xtype: "syno_checkbox",
                name: "hidden",
                boxLabel: _T("share", "share_hide"),
                hidden: ("no" === this._D("support_share_encryption", "no"))
            }, {
                xtype: "syno_checkbox",
                name: "hide_unreadable",
                boxLabel: _T("share", "share_hide_unreadable"),
                hideLabel: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_recycle_bin",
                boxLabel: _T("share", "share_enable_recycle_bin"),
                hideLabel: true
            }, {
                xtype: "syno_checkbox",
                name: "recycle_bin_admin_only",
                boxLabel: _T("network", "cifs_safe_recycle_bin"),
                width: 500,
                indent: 1
            }, {
                xtype: "syno_button",
                indent: 1,
                width: "auto",
                id: this.cleanBinBtnId = Ext.id(),
                text: _T("share", "share_clean_recycle_bin"),
                scope: this,
                handler: this.onCleanBinBtnClick,
                hidden: "edit" !== this.mode
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: '<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + ' </span><span id="' + Ext.id() + '" class="link-font" style="cursor:pointer">' + _T("network", "cifs_recycle_bin_help_link") + "</span>",
                listeners: {
                    afterrender: function(e) {
                        var d = e.el.query("span");
                        if (d[1]) {
                            this.mon(Ext.fly(d[1]), "click", function() {
                                var f = "SYNO.SDS.AdminCenter.Application";
                                var g = SYNO.SDS.AdminCenter.TaskScheduler.Main.prototype.getHelpParam();
                                f += ":" + g;
                                SYNO.SDS.AppLaunch("SYNO.SDS.HelpBrowser.Application", {
                                    topic: f
                                }, false)
                            }, this)
                        }
                    },
                    scope: this
                }
            }, {
                xtype: "syno_checkbox",
                name: "enable_snapshot_browsing",
                hidden: !this.supportShareSnapshot || ("edit" === this.mode && 0 !== this.share.get("encryption")),
                boxLabel: _T("share", "share_snapshot_browsing_enable"),
                listeners: {
                    scope: this,
                    enable: function() {
                        this.restoreValue("enable_snapshot_browsing")
                    },
                    disable: function() {
                        this.storeValue("enable_snapshot_browsing")
                    }
                }
            }, {
                xtype: "syno_displayfield",
                name: "enable_snapshot_browsing_desc",
                hidden: !this.supportShareSnapshot || ("edit" === this.mode && 0 !== this.share.get("encryption")),
                indent: 1,
                value: _T("share", "share_snapshot_browsing_enable_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_share_cow",
                hidden: !this.supportShareSnapshot,
                checked: "create" === this.mode,
                boxLabel: _T("share", "share_integrity_protection_enable"),
                listeners: {
                    scope: this,
                    enable: function() {
                        this.restoreValue("enable_share_cow")
                    },
                    disable: function() {
                        this.storeValue("enable_share_cow")
                    }
                }
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                hidden: !this.supportShareQuota,
                items: [{
                    xtype: "syno_checkbox",
                    name: "enable_share_quota",
                    boxLabel: _T("share", "share_quota_enable"),
                    listeners: {
                        scope: this,
                        check: {
                            fn: this.onEnableShareQuota
                        },
                        disable: function() {
                            this.storeValue("enable_share_quota");
                            this.shareForm.findField("quota_unit").disable();
                            this.shareForm.findField("quota_value").disable()
                        },
                        enable: function() {
                            this.restoreValue("enable_share_quota");
                            if (this.shareForm.findField("enable_share_quota").getValue()) {
                                this.shareForm.findField("quota_value").enable();
                                this.shareForm.findField("quota_unit").enable()
                            }
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    name: "share_quota_used"
                }],
                fieldLabel: _T("share", "share_quota_enable")
            }, {
                xtype: "syno_compositefield",
                indent: 1,
                hideLabel: true,
                hidden: !this.supportShareQuota,
                items: [{
                    xtype: "syno_numberfield",
                    width: 90,
                    disabled: true,
                    value: 0,
                    name: "quota_value",
                    vtype: "number",
                    listeners: {
                        scope: this,
                        disable: function() {
                            this.storeValue("quota_value")
                        },
                        enable: function() {
                            this.restoreValue("quota_value")
                        }
                    },
                    validator: function(g) {
                        var e;
                        if (this.ownerCt && this.ownerCt.ownerCt && this.ownerCt.ownerCt.ownerCt) {
                            e = this.ownerCt.ownerCt.ownerCt.getForm()
                        } else {
                            return "Failed to find ownerCt"
                        }
                        var j = e.findField("vol_path").getValue();
                        var i = e.findField("vol_path").getStore().getById(j).data;
                        var d = e.findField("quota_unit").getValue();
                        var f = e.findField("quota_value").getValue();
                        if (d === "GB") {
                            f *= 1024
                        } else {
                            if (d === "TB") {
                                f *= 1024 * 1024
                            }
                        }
                        if (i.size_total_mb <= f) {
                            var h = String.format(_T("user", "user_quota_limit_max_vol"), i.vol_name, (i.size_total_mb / 1024).toFixed(2));
                            return h
                        }
                        return true
                    }
                }, {
                    xtype: "syno_combobox",
                    name: "quota_unit",
                    width: 60,
                    displayField: "display",
                    valueField: "value",
                    disabled: true,
                    value: this.rgQuotaUnit[1][0],
                    store: new Ext.data.ArrayStore({
                        fields: ["value", "display"],
                        data: this.rgQuotaUnit
                    })
                }]
            }, {
                xtype: "syno_checkbox",
                name: "encryption",
                boxLabel: _T("share", "share_encryption_enable"),
                hidden: "create" !== this.mode || ("no" === this._D("support_share_encryption", "no")),
                listeners: {
                    scope: this,
                    check: function(e, d) {
                        if (d) {
                            this.shareForm.findField("enable_snapshot_browsing").disable()
                        }
                    }
                }
            }, {
                xtype: "syno_textfield",
                textType: "password",
                name: "enc_passwd",
                disabled: true,
                minLength: 8,
                maxLength: 64,
                indent: 1,
                width: 180,
                allowBlank: false,
                fieldLabel: _T("share", "share_encryption_key"),
                hidden: "create" !== this.mode || ("no" === this._D("support_share_encryption", "no")),
                validator: function(d) {
                    if (-1 !== d.indexOf("=") || -1 !== d.indexOf(",") || -1 !== d.indexOf(":")) {
                        return _T("share", "encryption_password_invalid")
                    }
                    return true
                }
            }, {
                xtype: "syno_textfield",
                textType: "password_confirm",
                name: "enc_passwd2",
                disabled: true,
                confirmFor: "enc_passwd",
                maxlength: 64,
                indent: 1,
                width: 180,
                allowBlank: false,
                fieldLabel: _T("share", "share_encryption_key_confirm"),
                hidden: "create" !== this.mode || ("no" === this._D("support_share_encryption", "no"))
            }, {
                xtype: "syno_checkbox",
                indent: "create" === this.mode ? 1 : 0,
                name: "enc_auto_mount",
                boxLabel: _T("share", "share_encryption_autodecrypt"),
                hidden: "clone" === this.mode || ("no" === this._D("support_share_encryption", "no"))
            }, {
                xtype: "syno_textfield",
                textType: "password",
                indent: 1,
                name: "eam_passwd",
                allowBlank: false,
                fieldLabel: _T("share", "share_encryption_key"),
                disabled: true,
                minLength: 8,
                maxlength: 64,
                hidden: "edit" !== this.mode || ("no" === this._D("support_share_encryption", "no")),
                validator: function(d) {
                    if (-1 !== d.indexOf("=") || -1 !== d.indexOf(",") || -1 !== d.indexOf(":")) {
                        return _T("share", "encryption_password_invalid")
                    }
                    return true
                }
            }]
        };
        Ext.apply(c, a);
        return new SYNO.SDS.Utils.FormPanel(c)
    },
    fillIndexFormConfig: function(a) {
        var b = {
            title: _T("fileindex", "fileindex_title"),
            itemId: "indexForm",
            height: 350,
            disabled: ("edit" === this.mode && SYNO.SDS.ControlPanel.Share.usedBySurveillance(this.share.get("name"), this) || (this._D("usbstation") === "yes")),
            items: [{
                xtype: "syno_displayfield",
                value: _T("fileindex", "fileindex_enable_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_fileindex",
                boxLabel: _T("fileindex", "fileindex_enable"),
                listeners: {
                    scope: this,
                    check: function(d, c) {
                        if (this.fileIndexData) {
                            this.updateFileIndexBtn(this.fileIndexData.blenablefileindex, this.fileIndexData.blfileindexing)
                        }
                    }
                }
            }, {
                xtype: "panel",
                border: false,
                hidden: "edit" !== this.mode,
                items: [{
                    xtype: "syno_compositefield",
                    indent: 1,
                    items: [{
                        id: this.btnReIndex = Ext.id(),
                        xtype: "syno_button",
                        disabled: true,
                        tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                        text: _T("service", "service_photo_reindex"),
                        handler: this.onClickReindexBtn,
                        scope: this
                    }, {
                        xtype: "syno_displayfield",
                        name: "filetable_status",
                        id: this.fileindexMsgId = Ext.id(),
                        value: "&nbsp;",
                        hidden: true
                    }]
                }]
            }]
        };
        Ext.apply(b, a);
        return new SYNO.SDS.Utils.FormPanel(b)
    },
    loadData: function() {
        var b = [{
            api: "SYNO.Core.Storage.Volume",
            method: "list",
            params: {
                limit: -1,
                offset: 0,
                location: this._D("usbstation") === "" ? "internal" : "external"
            },
            version: 1
        }];
        if (this._D("usbstation") === "yes") {
            this.getComponent("tab").hideTabStripItem("advperm");
            this.getComponent("tab").hideTabStripItem("indexForm")
        }
        if ("create" !== this.mode) {
            if (!this.share) {
                this.setStatusError({
                    text: _T("common", "error_system"),
                    clear: true
                });
                return false
            }
            var a = [];
            if ("clone" !== this.mode) {
                a = ["hidden", "recyclebin", "fileindex", "advance_setting", "encryption"];
                if (this.supportShareSnapshot) {
                    a = a.concat(["enable_snapshot_browsing"])
                }
                if (this.supportShareQuota) {
                    a = a.concat(["share_quota"])
                }
            }
            a = a.concat(["enable_share_cow"]);
            b = b.concat([{
                api: "SYNO.Core.Share",
                method: "get",
                params: {
                    name: this.share.get("name"),
                    additional: a
                },
                version: 1
            }])
        }
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: true,
                params: b
            },
            timeout: 360000,
            scope: this,
            callback: function(f, d, c) {
                this.clearStatusBusy();
                if (true === d.isTimeout || true === d.has_fail) {
                    var e = _T("common", "error_system");
                    if (d.result[1].error) {
                        e = SYNO.API.Erros.core[d.result[1].error.code] || _T("common", "error_system")
                    }
                    this.getMsgBox().alert(this.title, e, function() {
                        this.close()
                    }, this);
                    this.setStatusError({
                        text: e,
                        clear: true
                    });
                    return false
                }
                SYNO.SDS.Utils.DisplayField(this.shareForm, "my_vol_status", false);
                if ("clone" === this.mode) {
                    this.setCloneHandler(d)
                } else {
                    if ("create" === this.mode) {
                        if (false === this.pushVolumeList(null, d.result[0].data.volumes)) {
                            return false
                        }
                    } else {
                        if (this.setEditHandler(d)) {
                            SYNO.SDS.Share.PermissionDialog.prototype.loadPermissionData.call(this, this.share)
                        }
                    }
                }
                this.onLocationChange(this.shareForm.findField("vol_path"));
                return true
            }
        })
    },
    pushVolumeList: function(a, h, e) {
        var b = this.shareForm.findField("vol_path");
        var l = b.getStore();
        var i = (Ext.isObject(e)) ? e.name.toLowerCase() : "";
        var c = (Ext.isObject(e) && e.encryption !== 0);
        var k;
        var g;
        if (!Ext.isArray(h) || h.length === 0) {
            if (this._D("usbstation", "no") === "yes") {
                g = _T("volume", "volume_share_noexternal")
            } else {
                if (Ext.isObject(e) && e.is_usb_share) {
                    g = ""
                } else {
                    g = _T("volume", "volume_share_volumeno")
                }
            }
            if (g !== "") {
                this.getMsgBox().alert(this.title, g, function() {
                    var m = this.module.appWin.findAppWindow();
                    if (m.getOpenConfig("className") !== "SYNO.SDS.CMS.Application") {
                        SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                    }
                    this.close()
                }, this);
                return false
            }
        }
        this.volumeFsMap = {};
        var f = [];
        var d = false;
        Ext.each(h, function(o, m, n) {
            this.volumeFsMap[o.volume_path] = o.fs_type;
            if (a === o.volume_path) {
                k = o.fs_type
            }
            if (!o.readonly) {
                if (this._D("usbstation", "no") === "yes") {
                    if (c && o.fs_type !== "ext3" && o.fs_type !== "ext4") {
                        return
                    } else {
                        if ((i === "homes" || i == "web") && o.fs_type !== "ext4") {
                            return
                        }
                    }
                }
                f.push([o.volume_path, SYNO.SDS.Utils.StorageUtils.VolumeNameSizeRenderer(o), o.size_total_byte / 1024 / 1024, o.display_name])
            } else {
                if (o.volume_path === a) {
                    this.getMsgBox().alert(this.title, _T("error", "error_volume_ro"), function() {
                        this.close()
                    }, this);
                    d = true;
                    return false
                }
            }
        }, this);
        if (d) {
            return false
        }
        f.sort();
        var j = [];
        Ext.each(f, function(o, m, n) {
            j = j.concat({
                value: o[0],
                display: o[1],
                size_total_mb: o[2],
                vol_name: o[3]
            })
        });
        l.loadData(j);
        if (!a) {
            a = f[0][0];
            k = f[0][2]
        }
        this.shareForm.setValues({
            vol_path: a,
            vol_orig: a
        });
        return true
    },
    setCloneHandler: function(b) {
        var a = b.result[1].data;
        var c = a.vol_path;
        this.pushVolumeList(c, b.result[0].data.volumes);
        this.shareForm.setValues({
            name_org: a.name,
            enable_share_cow: a.enable_share_cow
        })
    },
    setEditHandler: function(e) {
        var g;
        var f;
        var j;
        g = e.result[1].data;
        f = g.vol_path;
        j = g.name.toLowerCase();
        this.fileIndexData = {
            blsupportfileindex: g.support_fileindex,
            blenablefileindex: g.enable_fileindex,
            blfileindexing: g.fileindexing
        };
        if (SYNO.SDS.ControlPanel.Share.usedBySurveillance(g.name, this) || j === "homes" || -1 !== f.indexOf("SATA")) {
            this.shareForm.findField("name").disable()
        }
        if (SYNO.SDS.ControlPanel.Share.usedBySurveillance(g.name, this)) {
            this.shareForm.findField("enable_recycle_bin").hide();
            this.shareForm.findField("recycle_bin_admin_only").hide();
            Ext.getCmp(this.cleanBinBtnId).hide()
        }
        if (!g.enable_recycle_bin) {
            Ext.getCmp(this.cleanBinBtnId).disable()
        }
        this.shareForm.setValues({
            name_org: g.name
        });
        this.shareForm.setValues(g);
        switch (g.encryption) {
            case 0:
                SYNO.SDS.Utils.DisplayField(this.shareForm, "encryption", false);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enc_auto_mount", false);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "eam_passwd", false);
                break;
            case 1:
                this.indexTab.disable();
                this.shareForm.findField("encryption").disable();
                this.shareForm.findField("enable_recycle_bin").disable();
                Ext.getCmp(this.cleanBinBtnId).disable();
                this.shareForm.findField("enc_auto_mount").disable();
                break;
            case 2:
                this.shareForm.setValues({
                    encryption: true
                });
                this.shareForm.findField("name").disable();
                this.shareForm.findField("vol_path").disable();
                this.shareForm.findField("enc_passwd").disable();
                this.shareForm.findField("enc_passwd2").disable();
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enc_auto_mount", true);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "eam_passwd", !g.enc_auto_mount);
                if (g.enc_auto_mount) {
                    this.shareForm.findField("eam_passwd").disable()
                } else {
                    var b;
                    b = new SYNO.ux.Utils.EnableCheckGroup(this.shareForm, "enc_auto_mount", ["eam_passwd"])
                }
                break;
            default:
                var i = "Error: unknown encryption = " + this.shareInfo.encryption;
                this.getMsgBox().alert("warning_msg", i);
                break
        }
        if (false === this.pushVolumeList(f, e.result[0].data.volumes, g)) {
            return false
        }
        if (g.is_usb_share) {
            var d = "-";
            if (-1 !== g.vol_path.indexOf("USB")) {
                if (g.external_dev_type === "SDCARD") {
                    d = _T("tree", "leaf_sdcard")
                } else {
                    d = _T("status", "status_usb")
                }
            } else {
                if (-1 !== g.vol_path.indexOf("sata")) {
                    d = _T("status", "status_sata")
                }
            }
            this.shareForm.setValues({
                my_vol_status: d
            });
            this.indexTab.disable();
            this.formPanel.disable();
            SYNO.SDS.Utils.DisplayField(this.shareForm, "my_vol_status", true);
            SYNO.SDS.Utils.DisplayField(this.shareForm, "vol_path", false);
            SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_snapshot_browsing", false);
            SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_snapshot_browsing_desc", false);
            SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_share_quota", false);
            SYNO.SDS.Utils.DisplayField(this.shareForm, "share_quota_used", false);
            SYNO.SDS.Utils.DisplayField(this.shareForm, "quota_value", false);
            SYNO.SDS.Utils.DisplayField(this.shareForm, "quota_unit", false)
        } else {
            if (this.supportShareQuota && g.hasOwnProperty("quota_value") && g.quota_value > 0) {
                this.shareForm.setValues({
                    enable_share_quota: true
                });
                var c = g.quota_value;
                if ((c / 1024 / 1024) == Math.floor(c / 1024 / 1024)) {
                    this.shareForm.setValues({
                        quota_unit: "TB"
                    });
                    this.shareForm.setValues({
                        quota_value: c / 1024 / 1024
                    })
                } else {
                    if ((c / 1024) == Math.floor(c / 1024)) {
                        this.shareForm.setValues({
                            quota_unit: "GB"
                        });
                        this.shareForm.setValues({
                            quota_value: c / 1024
                        })
                    } else {
                        this.shareForm.setValues({
                            quota_unit: "MB"
                        });
                        this.shareForm.setValues({
                            quota_value: c
                        })
                    }
                }
            }
            if (this.supportShareQuota && g.hasOwnProperty("share_quota_used")) {
                var a;
                var h = SYNO.SDS.Utils.StorageUtils.UiRenderHelper.SizeRender(g.share_quota_used * 1024 * 1024);
                a = String.format(' <span style="color:#0086E5">{0}</span>&nbsp;&nbsp;' + _T("share", "share_used"), h);
                this.shareForm.setValues({
                    share_quota_used: a
                })
            }
            this.indexForm.setValues(g)
        }
        return true
    },
    editHandler: function() {
        var a = this.shareForm.findField("name").getValue();
        var d = this.volumeFsMap[this.shareForm.findField("vol_path").getValue()];
        if (!this.shareForm.isValid()) {
            this.panel.setActiveTab("shareForm");
            return
        }
        if (!this.shareForm.isDirty() && !this.indexForm.isDirty() && 0 === this.gridPanel.store.getModifiedRecords().length && !this.formPanel.getForm().isDirty() && 0 === this.nfsPanel.dataModified) {
            this.close();
            return
        }
        if (this._D("usbstation", "no") === "yes" && a.toLowerCase() === "web" && d !== "ext4") {
            this.getMsgBox().alert(this.title, String.format(_T("service", "no_ext4_external_devices"), a));
            return
        }
        if (this.share.get("is_aclmode") === true) {
            var c = this.shareForm.findField("name").getValue().toLowerCase();
            if ("photo" === c || "surveillance" === c) {
                this.getMsgBox().alert(this.title, _T("share", "share_acl_share_not_support"));
                return
            }
        }
        var b = this.formPanel.getForm().findField("unite_permission");
        if (b.isDirty() && b.getValue() === true) {
            this.getMsgBox().alert(this.title, _T("share", "warn_enable_advanced_permission"), function() {
                this.confirmPolling()
            }, this)
        } else {
            this.confirmPolling()
        }
    },
    confirmPolling: function() {
        var a = ["hidden", "enable_recycle_bin", "recycle_bin_admin_only", "hide_unreadable", "encryption", "enc_auto_mount", "eam_passwd"];
        var c = {};
        c.name = this.shareForm.findField("name_org").getValue();
        c.shareinfo = this.getParamShareForm(a);
        c.shareinfo.encryption = this.shareForm.findField("encryption").getValue();
        this.shareMovePolling = this.shareForm.findField("vol_path").isDirty();
        if (this.shareMovePolling) {
            var b = _T("volume", "volume_change_all_warning");
            if ("btrfs" === this.volumeFsMap[this.shareForm.findField("vol_orig").getValue()]) {
                b += '<br/><span class="red-status">' + _T("share", "share_move_snapshot_lost_warning") + "</span>"
            }
            this.getMsgBox().confirm(_T("tree", "leaf_sharefolder"), b, function(e, f, d) {
                if ("yes" === e) {
                    if (this.shareForm.findField("enable_share_quota").getValue()) {
                        c.shareinfo.share_quota = this.getQuotaInMB()
                    }
                    this.submitValidShareInfo(c)
                }
            }, this)
        } else {
            this.submitValidShareInfo(c)
        }
    },
    submitValidShareInfo: function(a) {
        this.stopFileIndexPolling();
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            method: "validate_set",
            params: a,
            version: 1,
            scope: this,
            callback: function(m, f, k) {
                var l = [];
                var n = "";
                var c = "",
                    j = [];
                if (!m) {
                    if (f && f.errors && f.errors.warning_package) {
                        var h = [];
                        for (var e = 0; e < f.errors.warning_package.length; e++) {
                            h.push(SYNO.SDS.AdminCenter.Share.Utils.GetPackageName(f.errors.warning_package[e]))
                        }
                        c = _T("share", "share_cannot_rename_since_service_enable");
                        c = c + h.join(", ")
                    } else {
                        var d = SYNO.API.Util.GetFirstError(f);
                        c = SYNO.API.Erros.core[d.code] || _T("common", "error_system")
                    }
                    this.clearStatusBusy();
                    this.getMsgBox().alert("warning_msg", c);
                    return false
                }
                if (f && f.hasOwnProperty("warning_pause_service")) {
                    Ext.each(f.warning_pause_service, function(i) {
                        l.push(SYNO.SDS.AdminCenter.Share.Utils.GetServiceI18N(i))
                    });
                    n = "<b>" + l.join(", ") + "</b><br>";
                    j.push(String.format(_T("share", "share_service_pause_confirm"), n))
                }
                if (this.supportShareSnapshot) {
                    var b = this.getIsSnapshotBrowsing();
                    var g = (this.nfsPanel.disabled) ? true : this.nfsPanel.onRuleCheck();
                    if (b && !g) {
                        j.push(_T("share", "share_nfs_crossmnt_enable_confirm"))
                    }
                }
                if (0 === j.length) {
                    this.submitEditShareInfo(a);
                    return true
                }
                this.clearStatusBusy();
                this.showConfirmMsg(j, a)
            }
        })
    },
    showConfirmMsg: function(a, c) {
        var b = a.pop();
        this.getMsgBox().confirm("warning_msg", b, function(d) {
            if ("yes" === d) {
                if (0 === a.length) {
                    this.submitEditShareInfo(c)
                } else {
                    this.showConfirmMsg(a, c)
                }
            }
        }, this)
    },
    submitEditShareInfo: function(d) {
        var b = true;
        var h = (this.gridPanel.disabled) ? [] : this.gridPanel.getWebAPI();
        var c = (this.formPanel.disabled) ? [] : this.formPanel.getWebAPI();
        var g = (this.nfsPanel.disabled) ? [] : this.nfsPanel.getWebAPI();
        var f = h.concat(c);
        f = f.concat(g);
        for (var i = 0; i < f.length; i++) {
            var j = f[i];
            if ("SYNO.Core.Share" === j.api && "set" === j.method) {
                Ext.apply(d.shareinfo, {
                    advanceperm: j.params.shareinfo.advanceperm,
                    unite_permission: j.params.shareinfo.unite_permission
                });
                j.params = d;
                j.version = 1;
                b = false;
                break
            }
        }
        if (b) {
            f.push({
                api: "SYNO.Core.Share",
                method: "set",
                params: d,
                version: 1
            })
        }
        var e = {
            name: this.share.get("name"),
            is_sync_share: this.share.get("is_sync_share"),
            permissions: [],
            no_check_permission: false
        };
        if (!this.gridPanel.disabled) {
            e.permissions = this.gridPanel.getModifiedPermissions()
        }
        if (!this.formPanel.disabled && this.formPanel.isAdvPermissionDisabled()) {
            e.no_check_permission = true
        }
        SYNO.SDS.Utils.S2S.confirmIfSyncShareAffected(false, e, {
            dialogTitle: this.title,
            dialogMsg: _T("s2s", "s2s_warn_share_change_priv"),
            dialogOwner: this,
            continueHandler: function() {
                this.sendApplyRequest(f)
            },
            abortHandler: function() {
                this.clearStatusBusy()
            },
            scope: this
        })
    },
    sendApplyRequest: function(a) {
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: true,
                params: a
            },
            scope: this,
            callback: function(g, e, d) {
                this.clearStatusBusy();
                if (!g || e.has_fail) {
                    var c = SYNO.API.Util.GetFirstError(e);
                    var f = SYNO.API.Erros.core[c.code] || _T("common", "error_system");
                    if (c.code === 3309) {
                        f = String.format(f, this._D("maxshares"))
                    }
                    this.getMsgBox().alert(this.title, f);
                    return
                }
                var b = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Share.Permission", "set");
                if (this.shareMovePolling) {
                    this.startShareMovePolling(SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Share", "set", "task_id"), b)
                } else {
                    if (!b && e.result[0] && e.result[0].data) {
                        b = e.result[0].data
                    }
                    this.applyDone(b)
                }
            }
        })
    },
    applyDone: function(a) {
        this.clearStatusBusy();
        this.module.getPanel().fireEvent("sharefolderchanged", this.shareForm.findField("name").getValue());
        SYNO.SDS.StatusNotifier.fireEvent("sharefolderchanged", "permission");
        if (a) {
            if (a.is_ftp_anonymous_chroot_conflict) {
                this.gridPanel.confirmToShowFTPAdvancedSetting({
                    closeDialog: true
                })
            } else {
                this.close()
            }
        } else {
            this.close()
        }
    },
    onCleanBinBtnClick: function(b, a) {
        var f = {};
        var g, e;
        var d = this.shareTab.getForm();
        if (this._S("demo_mode")) {
            this.findAppWindow().getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        if (this.cleanBinBtnType === 1) {
            g = "stop";
            e = _T("share", "share_recycle_bin_clean_abort_warn")
        } else {
            g = "start";
            e = _T("share", "share_recycle_bin_clean_warn")
        }
        f = {
            id: d.findField("name_org").getValue()
        };
        var c = {
            yes: {
                text: Ext.MessageBox.buttonText.yes,
                btnStyle: "red"
            },
            no: {
                text: Ext.MessageBox.buttonText.no
            }
        };
        this.getMsgBox().confirm(_T("share", "share_clean_recycle_bin"), e, function(h) {
            if (h === "yes") {
                Ext.getCmp(this.cleanBinBtnId).disable();
                this.sendWebAPI({
                    api: "SYNO.Core.RecycleBin",
                    method: g,
                    version: 1,
                    params: f,
                    callback: this.setStatusCleanRecycle,
                    scope: this
                })
            }
        }, this, c)
    },
    setStatusCleanRecycle: function(d, c, b) {
        if (!d) {
            this.startPollRecycleStatus()
        } else {
            var a = Ext.getCmp(this.cleanBinBtnId);
            if (!c.is_cleaning) {
                this.cleanBinBtnType = 0;
                a.setText(_T("share", "share_clean_recycle_bin"));
                a.enable();
                this.stopPollRecycleStatus()
            } else {
                this.cleanBinBtnType = 1;
                a.setText(_T("share", "share_clean_recycle_bin_abort"));
                a.enable();
                this.startPollRecycleStatus()
            }
        }
    },
    updateStatusCleanRecycle: function(d, c, b) {
        if (d) {
            var a = Ext.getCmp(this.cleanBinBtnId);
            if (!c.is_cleaning) {
                this.cleanBinBtnType = 0;
                a.setText(_T("share", "share_clean_recycle_bin"));
                a.enable();
                this.stopPollRecycleStatus()
            } else {
                this.cleanBinBtnType = 1;
                a.setText(_T("share", "share_clean_recycle_bin_abort"));
                a.enable()
            }
        }
    },
    startPollRecycleStatus: function() {
        if (!this.PollTaskRecycleBinId) {
            var a = this.shareTab.getForm();
            var b = {
                id: a.findField("name_org").getValue()
            };
            this.PollTaskRecycleBinId = this.pollReg({
                interval: 5,
                immediate: true,
                webapi: {
                    api: "SYNO.Core.RecycleBin",
                    method: "get",
                    version: 1,
                    params: b
                },
                scope: this,
                status_callback: this.updateStatusCleanRecycle
            })
        }
    },
    stopPollRecycleStatus: function() {
        if (this.PollTaskRecycleBinId) {
            this.pollUnreg(this.PollTaskRecycleBinId);
            this.PollTaskRecycleBinId = null
        }
    },
    updateFileIndexBtn: function(d, a) {
        var c = this.indexForm;
        var b = c.findField("enable_fileindex").getValue();
        if (d) {
            Ext.getCmp(this.btnReIndex).setDisabled(this._S("demo_mode") || a || !b);
            Ext.getCmp(this.fileindexMsgId).setVisible(true)
        } else {
            Ext.getCmp(this.btnReIndex).setDisabled(true);
            Ext.getCmp(this.fileindexMsgId).setVisible(false)
        }
    },
    updateFileIndexingUI: function(a, b, c) {
        if (this.isDestroyed) {
            return
        }
        var d = this.indexForm;
        this.updateFileIndexBtn(this.fileIndexData.blenablefileindex, a);
        var e = "";
        if (Ext.isDefined(b) && Ext.isDefined(c)) {
            e = "<font class='blue-status'>" + String.format(_T("fileindex", "indexing_status"), b, c) + "</font>"
        } else {
            e = "<font class='blue-status'>" + String.format(_T("fileindex", "indexing_status"), 0, 0) + "</font>"
        }
        d.setValues({
            filetable_status: e
        })
    },
    onClickReindexBtn: function() {
        this.updateFileIndexingUI(true);
        this.sendWebAPI({
            api: "SYNO.Core.Share.Fileindex",
            method: "reindex",
            params: {
                name: this.shareForm.findField("name_org").getValue()
            },
            version: 1,
            scope: this,
            callback: this.startFileIndexPolling
        })
    },
    startFileIndexPolling: function(d, c, b, a) {
        if (!d) {
            SYNO.Debug("Failed to start update.");
            return
        }
        if (this.pollingId) {
            this.pollUnreg(this.pollingId)
        }
        this.pollingId = this.pollReg({
            webapi: {
                api: "SYNO.Core.Share.Fileindex",
                method: "status",
                version: 1,
                params: {
                    name: this.shareForm.findField("name_org").getValue()
                }
            },
            interval: 5,
            immediate: true,
            scope: this,
            status_callback: function(h, g, f, e) {
                if (!h) {
                    this.stopFileIndexPolling();
                    return false
                }
                this.updateFileIndexingUI(g.indexing, g.count_files, g.count_dirs)
            }
        })
    },
    stopFileIndexPolling: function() {
        if (this.pollingId) {
            Ext.getCmp(this.btnReIndex).setDisabled(false);
            Ext.getCmp(this.fileindexMsgId).setVisible(true);
            this.pollUnreg(this.pollingId);
            this.pollingId = undefined
        }
    },
    onActivatePanel: function(b, a) {
        if (a.itemId === "indexForm" && undefined !== this.fileIndexData && this.fileIndexData.blenablefileindex) {
            this.startFileIndexPolling(true)
        } else {
            this.stopFileIndexPolling()
        }
    },
    restoreValue: function(b) {
        var a = this.shareForm.findField(b);
        if (a.hasSetOriginValue) {
            a.setValue(a.originValue);
            a.hasSetOriginValue = false
        }
    },
    storeValue: function(b) {
        var a = this.shareForm.findField(b);
        if (!a.hasSetOriginValue) {
            a.originValue = a.getValue();
            a.hasSetOriginValue = true
        }
        if ("syno_checkbox" === a.xtype) {
            a.setValue(false)
        } else {
            if ("syno_numberfield" === a.xtype) {
                a.setValue(0);
                a.clearInvalid()
            }
        }
    },
    snapshotBrowsingCheck: function() {
        var a = this.shareForm.findField("vol_path");
        if (a && this.volumeFsMap && this.supportShareSnapshot) {
            if (this.volumeFsMap[a.getValue()] === "btrfs" && this.shareForm.findField("encryption").getValue() === false) {
                this.shareForm.findField("enable_snapshot_browsing").enable();
                this.shareForm.findField("enable_snapshot_browsing_desc").enable()
            } else {
                this.shareForm.findField("enable_snapshot_browsing").disable();
                this.shareForm.findField("enable_snapshot_browsing_desc").disable()
            }
            if (this.volumeFsMap[a.getValue()] === "btrfs") {
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_snapshot_browsing", true);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_snapshot_browsing_desc", true)
            } else {
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_snapshot_browsing", false);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_snapshot_browsing_desc", false)
            }
        }
    },
    onLocationChange: function(b) {
        var a = this.volumeFsMap[b.getValue()];
        if ("yes" === this._D("usbstation", "no") && "create" === this.mode) {
            if (a === "ext3" || a === "ext4") {
                this.shareForm.findField("encryption").enable()
            } else {
                if (this.shareForm.findField("encryption").getValue() === true) {
                    this.getMsgBox().alert(this.title, _T("share", "share_enc_ext4_only"))
                }
                this.shareForm.setValues({
                    encryption: false,
                    enc_passwd: "",
                    enc_passwd2: ""
                });
                this.shareForm.findField("encryption").disable()
            }
        }
        if (this.supportShareQuota) {
            if ("btrfs" === a) {
                this.shareForm.findField("enable_share_quota").enable();
                this.shareForm.findField("share_quota_used").enable();
                this.shareForm.findField("quota_value").validate();
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_share_quota", true);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "share_quota_used", true);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "quota_value", true);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "quota_unit", true)
            } else {
                this.shareForm.findField("enable_share_quota").disable();
                this.shareForm.findField("share_quota_used").disable();
                SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_share_quota", false);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "share_quota_used", false);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "quota_value", false);
                SYNO.SDS.Utils.DisplayField(this.shareForm, "quota_unit", false)
            }
        }
        if ("btrfs" === a) {
            this.shareForm.findField("enable_share_cow").enable();
            SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_share_cow", true);
            if ("create" !== this.mode) {
                this.shareForm.findField("enable_share_cow").disable();
                this.restoreValue("enable_share_cow")
            }
            if ("edit" === this.mode) {
                if (b.getValue() !== this.shareForm.findField("vol_orig").getValue()) {
                    this.storeValue("enable_share_cow");
                    this.shareForm.findField("enable_share_cow").setValue(true)
                } else {
                    this.restoreValue("enable_share_cow")
                }
            }
        } else {
            this.shareForm.findField("enable_share_cow").disable();
            SYNO.SDS.Utils.DisplayField(this.shareForm, "enable_share_cow", false)
        }
        this.snapshotBrowsingCheck()
    },
    startShareMovePolling: function(b, a) {
        this.getMsgBox().show({
            title: _T("share", "percentage"),
            width: 300,
            wait: false,
            progress: true,
            closable: false,
            msg: this.moveShareMsg
        });
        this.share_move_pollingId = this.pollReg({
            webapi: {
                api: "SYNO.Core.Share",
                method: "move_status",
                version: 1,
                params: {
                    task_id: b
                }
            },
            interval: 5,
            immediate: true,
            scope: this,
            status_callback: function(i, f, e, c) {
                if (!i) {
                    this.stopShareMovePolling();
                    var d = SYNO.API.Util.GetFirstError(f);
                    var h = SYNO.API.Erros.core[d.code] || _T("common", "error_system");
                    this.getMsgBox().alert("warning_msg", h);
                    return false
                }
                if (i && undefined !== f) {
                    if ("success" === f.status) {
                        this.sendWebAPI({
                            webapi: {
                                api: "SYNO.Core.Share",
                                version: 1,
                                method: "stop_move",
                                scope: this
                            }
                        });
                        this.stopShareMovePolling();
                        this.applyDone(a)
                    } else {
                        if ("checking" === f.status) {
                            this.moveShareMsg = String.format('<div style="text-align: center;"> {0} </div>', _T("share", "enough_space_check"));
                            this.getMsgBox().updateProgress(0, "", this.moveShareMsg)
                        } else {
                            this.moveShareMsg = String.format('<div style="text-align: center;"> {0} </div>', _T("share", "share_move_progress"));
                            var g;
                            if (99 < f.percent) {
                                g = '<div style="text-align: center;"> 100 % </div>'
                            } else {
                                g = String.format('<div style="text-align: center;"> {0} % </div>', f.percent)
                            }
                            this.getMsgBox().updateProgress(f.percent / 100, g, this.moveShareMsg)
                        }
                    }
                }
            }
        })
    },
    stopShareMovePolling: function() {
        if (this.share_move_pollingId) {
            this.pollUnreg(this.share_move_pollingId);
            this.share_move_pollingId = undefined
        }
    },
    deactivate: function() {
        this.stopPollRecycleStatus();
        this.stopFileIndexPolling();
        return true
    },
    getQuotaInMB: function() {
        var b = this.shareForm.findField("quota_value").getValue();
        var a = this.shareForm.findField("quota_unit").getValue();
        if (a === "TB") {
            b = b * 1024 * 1024
        } else {
            if (a === "GB") {
                b = b * 1024
            }
        }
        return b
    },
    onEnableShareQuota: function() {
        var a = this.shareForm.findField("enable_share_quota").getValue();
        if (a) {
            this.shareForm.findField("quota_value").enable();
            this.shareForm.findField("quota_unit").enable();
            if (this.shareForm.findField("quota_value").getValue() === 0) {
                this.shareForm.setValues({
                    quota_value: 1
                })
            }
        } else {
            this.shareForm.findField("quota_value").disable();
            this.shareForm.findField("quota_unit").disable();
            this.shareForm.setValues({
                quota_value: 0
            })
        }
    },
    getIsSnapshotBrowsing: function() {
        var a = this.shareForm.findField("enable_snapshot_browsing");
        if (this.supportShareSnapshot && !a.disabled) {
            return a.getValue()
        } else {
            return false
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Share");
Ext.define("SYNO.SDS.AdminCenter.Share.Decrypt", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.shares = a.share;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.panel = this.getComponent("formpanel");
        this.DefineBehaviors()
    },
    fillConfig: function(a) {
        var c = new SYNO.SDS.Utils.FormPanel({
            itemId: "formpanel",
            trackResetOnLoad: true,
            fileUpload: true,
            webapi: {
                api: "SYNO.Core.Share.CryptoFile",
                method: "decrypt",
                version: 1,
                scope: this
            },
            items: [{
                xtype: "container",
                layout: "column",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    name: "decrypt_method",
                    width: 200,
                    inputValue: "manual",
                    boxLabel: _T("share", "share_encryption_keyinput"),
                    checked: true
                }, {
                    xtype: "syno_textfield",
                    textType: "password",
                    name: "passwd",
                    minLength: 8,
                    maxLength: 64,
                    allowBlank: false,
                    validator: function(d) {
                        if (-1 !== d.indexOf("=") || -1 !== d.indexOf(",")) {
                            return _T("share", "encryption_password_invalid")
                        }
                        return true
                    }
                }]
            }, {
                xtype: "syno_displayfield"
            }, {
                xtype: "container",
                layout: "column",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    name: "decrypt_method",
                    width: 200,
                    inputValue: "keyfile",
                    boxLabel: _T("share", "share_encryption_importfrom")
                }, {
                    xtype: "syno_filebutton",
                    allowBlank: false,
                    name: "password_file",
                    textConfig: {
                        width: 192
                    }
                }]
            }, {
                xtype: "hidden",
                name: "name",
                value: this.shares.id
            }],
            onApiSuccess: this.onActionComplete,
            onApiFailure: this.onFormFailed
        });
        var b = {
            width: 600,
            height: 230,
            minWidth: 600,
            minHeight: 230,
            title: _T("share", "share_encryption_decrypt"),
            layout: "fit",
            items: c,
            keys: [{
                key: Ext.EventObject.ENTER,
                scope: this,
                handler: this.onSubmit
            }],
            buttons: [{
                itemId: "apply",
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                scope: this,
                handler: this.onSubmit
            }, {
                itemId: "cancel",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(b, a);
        return b
    },
    DefineBehaviors: function() {
        this.mon(this, "afterlayout", function(a, c) {
            var b = this.panel.getForm();
            var d;
            d = new SYNO.ux.Utils.EnableRadioGroup(b, "decrypt_method", {
                manual: ["passwd"],
                keyfile: ["password_file"]
            })
        }, this, {
            single: true
        })
    },
    onOpen: function() {
        this.callParent(arguments);
        this.panel.getForm().findField("passwd").focus(false, 100)
    },
    onSubmit: function() {
        var b = this.panel.getForm();
        if (!b.isValid()) {
            return
        }
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        var c = b.findField("decrypt_method").getGroupValue();
        if (c === "keyfile") {
            if (!b.findField("password_file").getValue()) {
                return
            }
            this.get("formpanel").upload()
        } else {
            var a = b.findField("passwd").getValue();
            if (!a) {
                return
            }
            this.doSubmitEncryption(c, a)
        }
    },
    doSubmitEncryption: function(b, a) {
        this.sendWebAPI({
            api: "SYNO.Core.Share.Crypto",
            method: "decrypt",
            params: {
                name: this.shares.id,
                password: a
            },
            version: 1,
            scope: this,
            callback: function(g, e, d) {
                this.clearStatusBusy();
                if (!g) {
                    var c = SYNO.API.Util.GetFirstError(e);
                    var f = SYNO.API.Erros.core[c.code] || _T("common", "error_system");
                    this.getMsgBox().alert("warning_msg", f);
                    return false
                }
                this.module.getPanel().store.load();
                this.close()
            }
        })
    },
    onActionComplete: function(c, b, a) {
        this.ownerCt.clearStatusBusy();
        this.ownerCt.module.getPanel().store.load();
        this.ownerCt.close()
    },
    onFormFailed: function(e, c, b) {
        var a = SYNO.API.Util.GetFirstError(c);
        var d = SYNO.API.Erros.core[a.code] || _T("common", "error_system");
        this.ownerCt.clearStatusBusy();
        this.ownerCt.getMsgBox().alert("warning_msg", d);
        return false
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Share");
Ext.define("SYNO.SDS.AdminCenter.Share.Export", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.share = a.share;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.panel = this.getComponent("formpanel")
    },
    fillConfig: function(a) {
        var c = new SYNO.SDS.Utils.FormPanel({
            itemId: "formpanel",
            items: [{
                xtype: "syno_textfield",
                textType: "password",
                name: "passwd",
                width: 200,
                minLength: 8,
                maxLength: 64,
                allowBlank: false,
                fieldLabel: _T("share", "share_encryption_keyinput"),
                validator: function(d) {
                    if (-1 !== d.indexOf("=") || -1 !== d.indexOf(",")) {
                        return _T("share", "encryption_password_invalid")
                    }
                    return true
                }
            }]
        });
        var b = {
            width: 500,
            height: 200,
            minWidth: 500,
            minHeight: 200,
            title: _T("share", "share_encryption_exportkey"),
            layout: "fit",
            items: c,
            buttons: [{
                itemId: "apply",
                text: _T("common", "alt_apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.onSubmit
            }, {
                itemId: "cancel",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(b, a);
        return b
    },
    startDownload: function() {
        var a = this.panel.getForm();
        this.findAppWindow().downloadWebAPI({
            webapi: {
                api: "SYNO.Core.Share.Crypto.Key",
                method: "export",
                version: 1,
                params: {
                    name: this.share.id,
                    password: a.findField("passwd").getValue()
                }
            }
        });
        this.close.defer(4000, this)
    },
    onSubmit: function() {
        var a = this.panel.getForm();
        if (!a.isValid()) {
            return
        }
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share.Crypto.Key",
            method: "verify",
            version: 1,
            params: {
                name: this.share.id,
                password: a.findField("passwd").getValue()
            },
            callback: function(d, c, b) {
                if (!d) {
                    this.clearStatusBusy();
                    this.setStatusError({
                        text: SYNO.API.getErrorString(c),
                        clear: true
                    })
                } else {
                    this.startDownload()
                }
            },
            scope: this
        })
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Share.Utils");
SYNO.SDS.AdminCenter.Share.Utils.GetServiceI18N = function(a) {
    var b = [];
    if (-1 != a.lastIndexOf(":")) {
        b = a.split(":");
        return _T(b[0], b[1])
    } else {
        return a
    }
};
SYNO.SDS.AdminCenter.Share.Utils.convertBoolPermissions = function(a) {
    if (a.data.is_deny) {
        return "na"
    } else {
        if (a.data.is_custom) {
            return "cu"
        } else {
            if (a.data.is_writable) {
                return "rw"
            } else {
                if (a.data.is_readonly) {
                    return "ro"
                }
            }
        }
    }
    return "-"
};
SYNO.SDS.AdminCenter.Share.Utils.colorizePermission = function(a) {
    var b = function(c, d) {
        return String.format("<font class='{0}-status'><p>{1}</p></font>", c, d)
    };
    switch (a) {
        case "cu":
            return b("black", _T("share", "share_permission_custom") || "Custom");
        case "na":
            return b("red", _T("share", "share_permission_none"));
        case "rw":
            return b("orange", _T("share", "share_permission_writable"));
        case "ro":
            return b("blue", _T("share", "share_permission_readonly"));
        default:
            return a
    }
};
SYNO.SDS.AdminCenter.Share.Utils.GetPackageName = function(a) {
    if ("media" === a) {
        return _T("welcome", "welcome_package_mediaserver")
    } else {
        if ("audio" === a) {
            return _T("welcome", "welcome_package_audio")
        } else {
            if ("itune" === a) {
                return _T("firewall", "firewall_service_desc_itunes")
            } else {
                if ("photo" === a) {
                    return _T("welcome", "welcome_package_photo")
                } else {
                    if ("surveillance" === a) {
                        return _T("tree", "leaf_surveillance")
                    } else {
                        if ("web" === a) {
                            return _T("tree", "leaf_web")
                        } else {
                            if ("netbackup" === a) {
                                return _T("netbackup", "netbkp_subject")
                            } else {
                                return a
                            }
                        }
                    }
                }
            }
        }
    }
};
Ext.define("SYNO.SDS.AdminCenter.Share.Utils.PermissionColumn", {
    extend: "Ext.grid.Column",
    constructor: function(b) {
        var a = Ext.apply({
            width: 120,
            align: "center",
            renderer: this.colorize
        }, b);
        this.callParent([a])
    },
    colorize: function(e, d, a, f, c, b) {
        return SYNO.SDS.AdminCenter.Share.Utils.colorizePermission(Ext.isFunction(this.convert) ? this.convert(a) : e)
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.Share.Migrate");
Ext.define("SYNO.SDS.AdminCenter.Share.Migrate.WelcomePanel", {
    extend: "SYNO.SDS.Wizard.WelcomeStep",
    targetShare: [],
    originShare: [],
    callbacks: null,
    constructor: function(b) {
        var a = Ext.apply({
            headline: _T("sharemigrate", "welcome_title"),
            description: _T("sharemigrate", "welcome_desc")
        }, b);
        SYNO.LayoutConfig.fill(a);
        this.callParent([a]);
        this.originShare = this.callbacks.getTargetShare().slice(0)
    },
    activate: function() {
        SYNO.SDS.Wizard.WelcomeStep.prototype.activate.apply(this, arguments);
        this.targetShare = this.originShare.slice(0)
    },
    getNext: function() {
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Share.Migration",
            version: 1,
            method: "check",
            params: {
                shares: this.originShare
            },
            scope: this,
            callback: function(l, e, a, d) {
                this.owner.clearStatusBusy();
                if (false === l && e && e.errors) {
                    var g = e.errors.fail_shares;
                    var f = e.errors.migrated_before;
                    var b = e.errors.acl_exceed;
                    var j = e.errors.not_support;
                    var c = e.errors.cifs_share;
                    var k = e.errors.service_share;
                    var i = e.errors.umount_enc;
                    var h = "";
                    if (f) {
                        h = _T("sharemigrate", "migrated_share")
                    } else {
                        if (b) {
                            h = _T("sharemigrate", "acl_exceed")
                        } else {
                            if (j) {
                                h = _T("sharemigrate", "not_support")
                            } else {
                                if (c) {
                                    h = _T("sharemigrate", "cifs_share")
                                } else {
                                    if (k) {
                                        h = _T("sharemigrate", "unsupport_service_share")
                                    } else {
                                        if (i) {
                                            h = _T("sharemigrate", "umount_enc")
                                        } else {
                                            h = _T("sharemigrate", "unknown_error")
                                        }
                                    }
                                }
                            }
                        }
                    }
                    this.owner.getMsgBox().alert(_T("sharemigrate", "title"), h);
                    this.removeFailShare(g)
                }
                this.callbacks.setTargetShare(this.targetShare);
                if (0 < this.targetShare.size()) {
                    this.owner.goNext(this.nextId)
                }
                this.targetShare = this.originShare.slice(0)
            }
        });
        return false
    },
    removeFailShare: function(a) {
        Ext.each(a, function(e, c, d) {
            var b = this.targetShare.indexOf(e);
            if (-1 < c) {
                this.targetShare.splice(b, 1)
            }
        }, this)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.Migrate.SelectMethodPanel", {
    extend: "SYNO.ux.FormPanel",
    targetShare: [],
    pollingTaskId: null,
    suggestionTaskId: null,
    pBar: null,
    constructor: function(c) {
        var b;
        var a = "";
        this.pBar = new Ext.ProgressBar(Ext.apply({
            xtype: "progress",
            name: "progress_bar",
            value: 0
        }, c));
        this.targetShare = c.callbacks.getTargetShare();
        a = _T("sharemigrate", "recommand_yes") + "<p>" + _T("sharemigrate", "description_yes") + "</p>";
        b = Ext.apply({
            headline: _T("sharemigrate", "replace_all"),
            items: [this.pBar, {
                xtype: "syno_radio",
                boxLabel: a,
                name: "mode",
                hidden: true,
                itemId: "replace_yes",
                inputValue: 0
            }, {
                xtype: "syno_radio",
                boxLabel: _T("sharemigrate", "recommand_no") + "<p>" + _T("sharemigrate", "description_no") + "</p>",
                name: "mode",
                hidden: true,
                itemId: "replace_no",
                inputValue: 1
            }, {
                xtype: "syno_checkbox",
                itemId: "confirm_migrate",
                boxLabel: '<div style="color: red;">' + _T("sharemigrate", "caution") + "</div>",
                hideLabel: true,
                listeners: {
                    check: {
                        scope: this,
                        fn: this.onCheckboxCheck
                    }
                }
            }]
        }, c);
        SYNO.LayoutConfig.fill(b);
        this.callParent([b])
    },
    onCheckboxCheck: function(b, a) {
        this.owner.getButton("next").setDisabled(!a)
    },
    activate: function() {
        this.beforeSuggestion();
        this.pBar.progressBar.setStyle({
            height: this.pBar.getHeight().toString() + "px"
        });
        this.pBar.textEl.setStyle({
            height: this.pBar.getHeight().toString() + "px",
            width: this.pBar.getWidth().toString() + "px"
        })
    },
    checkState: function() {
        SYNO.SDS.Wizard.Step.prototype.checkState.apply(this, arguments);
        this.owner.getButton("next").setText(_T("common", "alt_start"));
        if (1 == this.targetShare.size() && "web" === this.targetShare[0]) {
            this.items.get("replace_yes").disable();
            this.items.get("replace_no").setValue(true);
            this.afterSuggestion()
        } else {
            this.checkSuggestion()
        }
    },
    beforeSuggestion: function() {
        if (!this.pBar || !this.items) {
            return
        }
        this.pBar.show();
        this.items.get("replace_yes").hide();
        this.items.get("replace_no").hide();
        this.items.get("confirm_migrate").hide()
    },
    afterSuggestion: function() {
        if (!this.pBar || !this.items) {
            return
        }
        this.pBar.hide();
        this.items.get("replace_yes").show();
        this.items.get("replace_no").show();
        this.items.get("confirm_migrate").show()
    },
    checkSuggestion: function() {
        this.owner.getButton("back").disable();
        this.owner.getButton("cancel").disable();
        this.owner.getButton("next").disable();
        this.sendWebAPI({
            webapi: {
                api: "SYNO.Core.Share.Migration",
                version: 1,
                method: "start",
                scope: this,
                params: {
                    polling: "suggestion",
                    shares: this.callbacks.getTargetShare()
                },
                callback: function(d, c, a, b) {
                    if (!d || !c || !c.task_id) {
                        this.owner.getMsgBox().alert(_T("sharemigrate", "title"), _T("common", "error_system"));
                        this.owner.getButton("back").enable();
                        this.owner.getButton("cancel").enable();
                        return false
                    }
                    this.suggestionTaskId = c.task_id;
                    this.pollingTaskId = this.pollReg({
                        interval: 1,
                        immediate: true,
                        scope: this,
                        webapi: {
                            api: "SYNO.Core.Share.Migration",
                            method: "status",
                            version: 1,
                            params: {
                                polling: "suggestion",
                                task_id: this.suggestionTaskId
                            }
                        },
                        status_callback: this.pollingSuggestion
                    })
                }
            }
        })
    },
    pollingSuggestion: function(j, g, c, a) {
        var i = 1,
            e = 0,
            d = 0,
            h = 0;
        var b = "";
        var f = null;
        if (!j || !g) {
            this.pollUnreg(this.pollingTaskId);
            this.owner.getButton("back").enable();
            this.owner.getButton("cancel").enable();
            return false
        }
        if (g.data) {
            f = g.data;
            if (f.total && f.done && f.share) {
                i = f.total;
                e = f.done
            }
            h = e * 100 / i;
            b = String.format('<div style="text-align: center;"> {0} {1} % </div>', _T("usb", "usb_st_fsck"), h.round());
            this.pBar.updateProgress(e / i, b)
        }
        if (g.finish) {
            if (g.data && undefined !== g.data.suggestion && this.items) {
                this.pBar.hide();
                d = g.data.suggestion;
                if (0 === d) {
                    this.items.get("replace_yes").setValue(true);
                    this.afterSuggestion()
                } else {
                    if (1 === d) {
                        this.items.get("replace_no").setValue(true);
                        this.afterSuggestion()
                    }
                }
            }
            this.pollUnreg(this.pollingTaskId);
            this.stopPolling();
            this.owner.getButton("back").enable();
            this.owner.getButton("cancel").enable();
            return
        }
    },
    stopPolling: function() {
        this.sendWebAPI({
            webapi: {
                api: "SYNO.Core.Share.Migration",
                version: 1,
                method: "stop",
                scope: this,
                params: {
                    polling: "suggestion"
                }
            }
        })
    },
    migrateStart: function() {
        var a = parseInt(this.getForm().getValues().mode, 10);
        this.sendWebAPI({
            webapi: {
                api: "SYNO.Core.Share.Migration",
                version: 1,
                method: "start",
                scope: this,
                params: {
                    polling: "migrate",
                    shares: this.callbacks.getTargetShare(),
                    migrate_method: a
                },
                callback: function(e, d, b, c) {
                    this.owner.clearStatusBusy();
                    if (!e || !d || !d.task_id) {
                        this.owner.getMsgBox().alert(_T("sharemigrate", "title"), _T("common", "error_system"));
                        return false
                    }
                    this.callbacks.setTaskId(d.task_id);
                    this.callbacks.setMigrating(true);
                    this.owner.goNext(this.nextId)
                }
            }
        })
    },
    getNext: function() {
        this.owner.setStatusBusy();
        this.sendWebAPI({
            webapi: {
                api: "SYNO.Core.Share.Migration.Task",
                version: 1,
                method: "list",
                scope: this,
                params: {
                    polling: "migrate"
                },
                callback: function(d, c, a, b) {
                    if (!d) {
                        this.owner.clearStatusBusy();
                        return false
                    }
                    if (c && c.admin) {
                        this.owner.getMsgBox().alert(_T("sharemigrate", "title"), _T("sharemigrate", "wait_migrate"));
                        this.owner.clearStatusBusy();
                        return false
                    }
                    this.migrateStart()
                }
            }
        });
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.Migrate.ProgressPanel", {
    extend: "SYNO.ux.FormPanel",
    pBar: null,
    pollingTaskId: null,
    callbacks: null,
    constructor: function(b) {
        var a;
        this.pBar = new Ext.ProgressBar(Ext.apply({
            xtype: "progress",
            name: "progress_bar",
            value: 0
        }, b));
        a = Ext.apply({
            headline: _T("sharemigrate", "progress_headline"),
            items: [this.pBar]
        }, b);
        SYNO.LayoutConfig.fill(a);
        this.callParent([a])
    },
    activate: function() {
        this.pBar.progressBar.setStyle({
            height: this.pBar.getHeight().toString() + "px"
        });
        this.pBar.textEl.setStyle({
            height: this.pBar.getHeight().toString() + "px",
            width: this.pBar.getWidth().toString() + "px"
        });
        this.pollingTaskId = this.pollReg({
            interval: 1,
            immediate: true,
            scope: this,
            webapi: {
                api: "SYNO.Core.Share.Migration",
                method: "status",
                version: 1,
                params: {
                    polling: "migrate",
                    task_id: this.callbacks.getTaskId()
                }
            },
            status_callback: this.pollingUpdate
        })
    },
    checkState: function() {
        SYNO.SDS.Wizard.Step.prototype.checkState.apply(this, arguments);
        this.owner.getButton("back").hide();
        this.owner.getButton("cancel").hide();
        this.owner.getButton("next").disable();
        this.owner.getButton("next").setText(_T("common", "finish"))
    },
    pollingUpdate: function(h, e, g, c) {
        var b = 1;
        var a = 0;
        var f = "";
        var d = null;
        if (!h || !e) {
            this.pollUnreg(this.pollingTaskId);
            this.owner.getMsgBox().alert(_T("sharemigrate", "title"), _T("sharemigrate", "fail"));
            this.callbacks.setMigrating(false);
            return false
        }
        if (e.data) {
            d = e.data;
            if (d.total && d.done && d.share) {
                b = d.total;
                a = d.done
            }
            if (!d.path) {
                f = ""
            } else {
                f = Ext.util.Format.ellipsis(d.path, 55)
            }
            this.pBar.updateProgress(a / b, f)
        }
        if (e.finish) {
            this.pollUnreg(this.pollingTaskId);
            this.pBar.updateProgress(1, _T("common", "finish"));
            this.owner.getButton("next").enable();
            this.callbacks.setMigrating(false);
            this.callbacks.setFinish(true);
            this.stopPolling();
            return
        }
    },
    stopPolling: function() {
        this.sendWebAPI({
            webapi: {
                api: "SYNO.Core.Share.Migration",
                version: 1,
                method: "stop",
                scope: this,
                params: {
                    polling: "migrate"
                }
            }
        })
    },
    getNext: function() {
        return this.nextId
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.Migrate.Wizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    targetShare: [],
    panelWelcome: null,
    panelSelectMethod: null,
    panelProgress: null,
    taskId: null,
    caller: null,
    migrating: false,
    finish: false,
    constructor: function(c) {
        var d = this;
        this.owner = c.owner;
        this.module = c.module;
        this.targetShare = c.targetShare;
        this.caller = c.caller;
        this.panelWelcome = new SYNO.SDS.AdminCenter.Share.Migrate.WelcomePanel({
            itemId: "welcome",
            owner: this,
            callbacks: {
                getTargetShare: function() {
                    return d.getTargetShare()
                },
                setTargetShare: function(e) {
                    return d.setTargetShare(e)
                }
            },
            nextId: "select"
        });
        this.panelSelectMethod = new SYNO.SDS.AdminCenter.Share.Migrate.SelectMethodPanel({
            itemId: "select",
            owner: this,
            callbacks: {
                setTaskId: function(e) {
                    return d.setTaskId(e)
                },
                getTargetShare: function() {
                    return d.getTargetShare()
                },
                setMigrating: function(e) {
                    return d.setMigrating(e)
                }
            },
            nextId: "progress"
        });
        this.panelProgress = new SYNO.SDS.AdminCenter.Share.Migrate.ProgressPanel({
            itemId: "progress",
            owner: this,
            callbacks: {
                getTargetShare: function() {
                    return d.getTargetShare()
                },
                getTaskId: function() {
                    return d.getTaskId()
                },
                setMigrating: function(e) {
                    return d.setMigrating(e)
                },
                setFinish: function(e) {
                    return d.setFinish(e)
                }
            },
            nextId: null
        });
        var a = [this.panelWelcome, this.panelSelectMethod, this.panelProgress];
        var b = Ext.apply({
            title: _T("sharemigrate", "title"),
            dd: true,
            width: 600,
            height: 500,
            resizable: true,
            steps: a
        }, c);
        this.callParent([b]);
        this.setStatusBusy();
        this.sendWebAPI({
            webapi: {
                api: "SYNO.Core.Share.Migration.Task",
                version: 1,
                method: "list",
                scope: this,
                params: {
                    polling: "migrate"
                },
                callback: function(h, g, e, f) {
                    this.clearStatusBusy();
                    if (!h) {
                        return false
                    }
                    if (!g) {
                        return
                    }
                    if (g.data && g.data.shares) {
                        this.setTargetShare(g.data.shares)
                    }
                    if (g.admin) {
                        this.owner.getMsgBox().alert(_T("sharemigrate", "title"), _T("sharemigrate", "go_migrate"));
                        this.setTaskId(g.admin);
                        this.goNext("progress")
                    }
                }
            }
        })
    },
    getTaskId: function() {
        return this.taskId
    },
    setTaskId: function(a) {
        this.taskId = a;
        return true
    },
    getTargetShare: function() {
        return this.targetShare
    },
    setTargetShare: function(a) {
        this.targetShare = a;
        return true
    },
    setMigrating: function(a) {
        this.migrating = a;
        return true
    },
    setFinish: function(a) {
        this.finish = a;
        return true
    },
    onClose: function() {
        if (this.migrating) {
            return false
        }
        if (true === this.finish) {
            this.caller.store.load()
        }
        return SYNO.SDS.AdminCenter.Share.Migrate.Wizard.superclass.onClose.apply(this, arguments)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.TakeSnapshot", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.owner = a.owner;
        this.module = a.module;
        this.share = a.share;
        this.mode = a.mode;
        this.snapshot = a.snapshot;
        var b = {
            title: a.title,
            width: 450,
            height: 250,
            resizable: false,
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                scope: this,
                handler: this.onSave
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }],
            items: [this.createForm()]
        };
        this.callParent([Ext.apply(b, a)])
    },
    getForm: function() {
        return this.getComponent("snapshot").getForm()
    },
    onOpen: function() {
        this.callParent(arguments);
        this.initValues()
    },
    initValues: function() {
        if (this.isEditMode()) {
            this.getForm().setValues({
                desc: this.snapshot.get("desc"),
                lock: this.snapshot.get("lock")
            })
        }
        SYNO.SDS.Utils.AddTip(this.getForm().findField("lock").getEl(), Ext.util.Format.htmlEncode(_T("iscsilun", "snapshot_lock_notify")))
    },
    onSave: function() {
        var b = "create";
        var a = {};
        if (!this.getForm().isValid()) {
            return
        }
        if (this.isEditMode() && !this.getForm().isDirty()) {
            this.close();
            return
        }
        a.desc = this.getForm().findField("desc").getValue();
        a.lock = this.getForm().findField("lock").getValue();
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        var c = {
            name: this.share.get("name"),
            snapinfo: a
        };
        if (this.isEditMode()) {
            b = "set";
            c.snapshot = this.snapshot.get("time")
        }
        this.sendWebAPI({
            api: "SYNO.Core.Share.Snapshot",
            method: b,
            params: c,
            version: 1,
            scope: this,
            callback: function(g, e, d) {
                this.clearStatusBusy();
                if (!g) {
                    var f = SYNO.SDS.AdminCenter.Share.SnapshotManager.GetErrMsg(e.code, this) || _T("common", "error_system");
                    this.owner.getMsgBox().alert("warning_msg", f)
                }
                this.isDataChanged = true;
                this.close()
            }
        })
    },
    onCancel: function() {
        if (this.getForm().isDirty()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    createForm: function() {
        var a = {
            xtype: "form",
            itemId: "snapshot",
            border: false,
            trackResetOnLoad: true,
            defaults: {
                width: 250,
                labelStyle: "width:150px"
            },
            items: [{
                xtype: "syno_textfield",
                name: "desc",
                itemId: "desc",
                maxLength: 511,
                fieldLabel: _T("share", "share_comment")
            }, {
                xtype: "syno_checkbox",
                name: "lock",
                itemId: "lock",
                boxLabel: _T("iscsilun", "snapshot_lock"),
                checked: true
            }]
        };
        return a
    },
    isCreateMode: function() {
        return ("create" === this.mode)
    },
    isEditMode: function() {
        return ("edit" === this.mode)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.SnapshotManager", {
    extend: "SYNO.SDS.ModalWindow",
    pageSize: 32,
    constructor: function(a) {
        this.appWin = a.appWin;
        this.owner = a.owner;
        this.module = a.module;
        this.share = a.share;
        this.blNfsEnabled = a.blNfsEnabled;
        this.blKerberosSupport = a.blKerberosSupport;
        this.blKerberosEnabled = a.blKerberosEnabled;
        var b = {
            title: _T("share", "share_snapshot_manager"),
            layout: "fit",
            items: [],
            minWidth: 500,
            minHeight: 300,
            width: 600,
            height: 450,
            buttons: [{
                text: _T("common", "alt_close"),
                scope: this,
                handler: this.onCancel
            }]
        };
        this.callParent([Ext.apply(b, a)])
    },
    initComponent: function() {
        this.items.push(this.createPanel());
        this.callParent(arguments)
    },
    getGrid: function() {
        return this.get("snapshots")
    },
    getButton: function(a) {
        return this.getGrid().getTopToolbar().get(a)
    },
    getSelections: function() {
        return this.getGrid().getSelectionModel().getSelections()
    },
    getSelected: function() {
        return this.getGrid().getSelectionModel().getSelected()
    },
    initEvents: function() {
        this.callParent(arguments);
        this.setLoadingMask();
        this.getGrid().getStore().load({
            callback: function() {
                this.appOwner.clearLoadingMask()
            }
        })
    },
    setLoadingMask: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.loadingMask = true
    },
    clearLoadingMask: function() {
        var a = this;
        if (true === a.loadingMask) {
            a.clearStatusBusy();
            a.loadingMask = false
        }
    },
    onSelectionChange: function(c) {
        var a = c.getCount();
        var b = this.share.get("support_action");
        if (0 !== a) {
            if (b & 2) {
                this.getButton("btDelete").enable()
            }
        } else {
            this.getButton("btDelete").disable()
        }
        if (1 === a) {
            this.getButton("btEdit").enable();
            if (b & 8) {
                this.getButton("btClone").enable()
            }
            if (b & 4) {
                this.getButton("btRestore").enable()
            }
        } else {
            this.getButton("btEdit").disable();
            this.getButton("btClone").disable();
            this.getButton("btRestore").disable()
        }
        return
    },
    onOpen: function() {
        this.callParent(arguments)
    },
    onCancel: function() {
        this.close()
    },
    createPanel: function() {
        var e = this;
        var a = new SYNO.API.JsonStore({
            appWindow: e.appWin,
            appOwner: e,
            autoDestroy: true,
            api: "SYNO.Core.Share.Snapshot",
            method: "list",
            version: 1,
            baseParams: {
                name: e.share.get("name"),
                offset: 0,
                limit: this.pageSize,
                filter: {
                    attr: ["!hide==true"]
                },
                additional: ["desc", "lock"]
            },
            fields: ["time", "desc", "lock"],
            root: "snapshots",
            id: "time",
            listeners: {
                exception: {
                    scope: e.owner,
                    fn: function(j, k, i, h, g) {
                        var l = SYNO.SDS.AdminCenter.Share.SnapshotManager.GetErrMsg(g.code, this) || _T("common", "error_system");
                        this.getMsgBox().alert("warning_msg", l)
                    }
                }
            }
        });
        this.store = a;
        var c = new Ext.grid.ColumnModel({
            defaults: {
                width: 120,
                sortable: false
            },
            columns: [{
                id: "time",
                header: _T("time", "time_time"),
                dataIndex: "time"
            }, {
                id: "desc",
                header: _T("share", "share_comment"),
                dataIndex: "desc",
                width: 180,
                renderer: Ext.util.Format.htmlEncode
            }, {
                id: "lock",
                header: _T("iscsilun", "snapshot_lock"),
                width: 60,
                dataIndex: "lock",
                renderer: this.lockIconRenderer
            }]
        });
        var f = new Ext.Toolbar({
            defaultType: "syno_button",
            items: [{
                text: _T("iscsilun", "clone"),
                itemId: "btClone",
                handler: function() {
                    this.snapshotClone({
                        blNewShare: true,
                        blClone: true
                    })
                },
                disabled: true,
                scope: this
            }, {
                text: _T("common", "remove"),
                itemId: "btDelete",
                handler: this.snapshotDelete,
                disabled: true,
                scope: this
            }, {
                text: _T("iscsilun", "restore"),
                itemId: "btRestore",
                handler: this.snapshotRestore,
                disabled: true,
                scope: this
            }, {
                text: _T("common", "alt_edit"),
                itemId: "btEdit",
                handler: this.snapshotEdit,
                disabled: true,
                scope: this
            }, "->", new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                store: this.store,
                pageSize: this.pageSize,
                queryAction: "list",
                enumAction: "list",
                queryParam: "substr"
            })]
        });
        var d = {
            forceFit: true,
            onLoad: Ext.emptyFn,
            listeners: {
                beforerefresh: function(g) {
                    g.scrollTop = g.scroller.dom.scrollTop
                },
                refresh: function(g) {
                    g.scroller.dom.scrollTop = g.scrollTop
                }
            }
        };
        var b = {
            layout: "fit",
            xtype: "syno_gridpanel",
            itemId: "snapshots",
            style: {
                padding: "0px 12px 0px 16px"
            },
            tbar: f,
            store: a,
            colModel: c,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: this.onSelectionChange,
                    scope: this
                }
            }),
            bbar: new SYNO.ux.PagingToolbar({
                store: a,
                pageSize: this.pageSize,
                displayInfo: true
            }),
            listeners: {
                scope: this,
                activate: this.onActivate,
                rowdblclick: {
                    scope: this,
                    fn: function(h, j, i) {
                        var g = this.store.getAt(j);
                        if (g) {
                            this.snapshotEdit()
                        }
                    }
                }
            },
            enableHdMenu: false,
            autoExpandColumn: "desc",
            viewConfig: d,
            enableColumnMove: false,
            cls: "without-dirty-red-grid"
        };
        return b
    },
    lockIconRenderer: function(b) {
        var c = "";
        var a = "";
        switch (b) {
            case true:
                c = "share-lock";
                break;
            case false:
                break;
            default:
                break
        }
        if (c !== "") {
            a = String.format('<div class="syno-admincenter-{0}"></div>', c)
        }
        return a
    },
    snapshotClone: function(b, a) {
        var c = new SYNO.SDS.AdminCenter.Share.Dialog(Ext.apply({
            module: this.module,
            owner: this,
            blNfsEnabled: this.blNfsEnabled,
            blKerberosSupport: this.blKerberosSupport,
            blKerberosEnabled: this.blKerberosEnabled,
            mode: "clone",
            share: this.share,
            snapshot: this.getSelected().get("time")
        }, b));
        c.mon(c, "close", function() {
            var d = c.getCreateResult();
            if (d) {
                this.snapshotClone({
                    share: d,
                    mode: "edit",
                    owner: this.module.appWin
                }, "sharegrid");
                this.close()
            }
        }, this, {
            single: true
        });
        c.open();
        if (a) {
            c.panel.setActiveTab(a)
        }
    },
    snapshotDelete: function() {
        var b = this.getSelections();
        if (!b) {
            return
        }
        var a = [];
        b.each(function(c) {
            a.push(c.get("time"))
        });
        this.getMsgBox().confirmDelete(this.title, _T("common", "remove_cfrmrmv"), function(c) {
            if ("yes" === c) {
                this.doSnapshotDelete(a)
            }
        }, this)
    },
    doSnapshotDelete: function(a) {
        this.setStatusBusy({
            text: _T("common", "msg_wating")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share.Snapshot",
            method: "delete",
            version: 1,
            params: {
                name: this.share.get("name"),
                snapshots: a
            },
            callback: function(g, d, c) {
                this.clearStatusBusy();
                var f = "";
                if (!g) {
                    f = SYNO.SDS.AdminCenter.Share.SnapshotManager.GetErrMsg(d.code, this) || _T("common", "error_system");
                    this.getMsgBox().alert("warning_msg", f)
                } else {
                    if (d && 0 < d.length) {
                        var b = this;
                        var e = new SYNO.SDS.AdminCenter.Share.SnapshotMultiDeleteError({
                            appWin: b.appWin,
                            owner: b,
                            title: _T("share", "share_snapshot_delete_failed"),
                            share: b.share,
                            errorData: d
                        });
                        e.open()
                    }
                }
                this.getGrid().getStore().load()
            },
            scope: this
        })
    },
    snapshotRestore: function() {
        var a = this.getSelected();
        var b = '<span class="red-status">' + String.format(_T("share", "share_snapshot_restore_lost_warning"), a.get("time")) + "</span><br/>" + String.format(_T("share", "share_snapshot_restore_confirm"), a.get("time"));
        this.getMsgBox().confirm(this.title, b, function(c) {
            if ("yes" === c) {
                this.doSnapshotRestore(a)
            }
        }, this)
    },
    doSnapshotRestore: function(a) {
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            method: "restore",
            version: 1,
            scope: this,
            params: {
                name: this.share.get("name"),
                snapshot: a.get("time")
            },
            callback: function(g, e, d) {
                this.clearStatusBusy();
                var f = "";
                if (!g) {
                    f = String.format(_T("share", "share_snapshot_restore_fail"), a.get("time"));
                    var c = SYNO.SDS.AdminCenter.Share.SnapshotManager.GetErrMsg(e.code, this) || SYNO.API.Erros.core[e.code];
                    if (c) {
                        f += "<br/>" + c
                    }
                    if (e.errors && e.errors.errMsg) {
                        var b = e.errors.errMsg.split(":");
                        f += "<br/>" + _T(b[0], b[1]) || ""
                    }
                    this.getMsgBox().alert("warning_msg", f)
                }
            }
        })
    },
    snapshotEdit: function() {
        var a = this.getSelected();
        var b = new SYNO.SDS.AdminCenter.Share.TakeSnapshot({
            owner: this,
            appWin: this.appWin,
            module: this.module,
            title: _T("common", "alt_edit"),
            lun: this.lun,
            mode: "edit",
            share: this.share,
            snapshot: a
        });
        this.mon(b, "close", function() {
            if (b.isDataChanged) {
                this.isDataChanged = true;
                this.getGrid().getStore().load()
            }
        }, this, {
            single: true
        });
        b.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.SnapshotMultiDeleteError", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var c = this;
        c.appWin = a.appWin;
        c.owner = a.owner;
        c.share = a.share;
        c.data = a.errorData;
        var b = {
            layout: "fit",
            items: [],
            width: 350,
            height: 300,
            minHeight: 200,
            buttons: [{
                text: _T("common", "alt_close"),
                scope: c,
                handler: c.onCancel
            }]
        };
        c.callParent([Ext.apply(b, a)])
    },
    initComponent: function() {
        var a = this;
        a.items.push(a.createPanel());
        a.callParent(arguments)
    },
    onCancel: function() {
        this.close()
    },
    initEvents: function() {
        this.callParent(arguments);
        var b = this;
        var c = [];
        for (var a = 0; a < b.data.length; ++a) {
            c[a] = [];
            c[a][0] = a;
            c[a][1] = String(b.data[a])
        }
        b.store.loadData(c);
        b.setHeight(350)
    },
    createPanel: function() {
        var f = this;
        var a = Ext.data.Record.create([{
            idIndex: "idIndex"
        }, {
            name: "time"
        }]);
        var b = new Ext.data.Store({
            appWindow: f.appWin,
            autoDestroy: true,
            reader: new Ext.data.ArrayReader({
                idIndex: 0
            }, a)
        });
        f.store = b;
        var d = new Ext.grid.ColumnModel({
            defaults: {
                width: 120,
                sortable: false
            },
            columns: [{
                id: "idIndex",
                header: _T("time", "time_time"),
                dataIndex: "idIndex",
                hidden: true
            }, {
                id: "time",
                header: _T("time", "time_time"),
                dataIndex: "time"
            }]
        });
        var e = {
            forceFit: true,
            onLoad: Ext.emptyFn,
            listeners: {
                beforerefresh: function(g) {
                    g.scrollTop = g.scroller.dom.scrollTop
                },
                refresh: function(g) {
                    g.scroller.dom.scrollTop = g.scrollTop
                }
            }
        };
        var c = {
            layout: "fit",
            xtype: "syno_gridpanel",
            itemId: "snapshots",
            style: {
                padding: "0px 12px 0px 16px"
            },
            store: b,
            colModel: d,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            enableHdMenu: false,
            viewConfig: e,
            enableColumnMove: false,
            cls: "without-dirty-red-grid"
        };
        return c
    }
});
SYNO.SDS.AdminCenter.Share.SnapshotManager.GetErrMsg = function(a, b) {
    var c;
    switch (a) {
        case 3329:
            c = SYNO.API.Erros.core[a];
            c = c.replace("{0}", (Ext.isObject(b)) ? b._D.call(b, "max_snapshots_per_share", 256) : _D("max_snapshots_per_share", 256));
            break;
        case 402:
        case 3118:
        case 3328:
        case 3330:
        case 3331:
            c = SYNO.API.Erros.core[a];
            break;
        default:
            break
    }
    return c
};
Ext.ns("SYNO.SDS.AdminCenter.Share");
Ext.define("SYNO.SDS.AdminCenter.Share.ScheduleSnapshot", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var d = this,
            b = [];
        d.owner = a.owner;
        d.appWin = a.appWin;
        d.share = a.share;
        d.type = "Share";
        b.push(new SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.Schedule({
            appWin: d.appWin,
            owner: d
        }));
        b.push(new SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.Retention({
            appWin: d.appWin,
            owner: d
        }));
        d.tabPanel = new SYNO.SDS.Utils.TabPanel({
            appWin: d.appWin,
            owner: d.owner,
            activeTab: 0,
            items: b
        });
        var c = {
            title: _T("snapmgr", "set_schedule") + " - " + d.share.get("name"),
            items: [d.tabPanel],
            width: 600,
            height: 460,
            minWidth: 600,
            minHeight: 460,
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                scope: d,
                handler: d.onSave
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: d,
                handler: d.onCancel
            }]
        };
        d.callParent([Ext.apply(c, a)]);
        d.getSharedFolderScheData()
    },
    getForm: function(a) {
        return this.tabPanel.getItem(a).getForm()
    },
    onSave: function() {
        var b = this,
            a = b.getForm("shareRetentionSnapshot"),
            c = _T("snapmgr", "err_max_rtt_cfg");
        if (!a.isValid()) {
            b.tabPanel.setActiveTab("shareRetentionSnapshot");
            return
        }
        if (!b.isRTTCfgValid()) {
            b.tabPanel.setActiveTab("shareRetentionSnapshot");
            b.getMsgBox().alert(_T("snapmgr", "app_title"), String.format(c, this._D("max_snapshots_per_share", "256")));
            return
        }
        if (a.isDirty() && (SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_ALL !== a.findField("policyType").getGroupValue())) {
            b.getMsgBox().confirm(_T("snapmgr", "set_schedule"), _T("snapmgr", "run_retention_immed"), function(d) {
                if ("ok" === d) {
                    b.setSharedFolderConf()
                }
            }, b, Ext.MessageBox.OKCANCEL)
        } else {
            b.setSharedFolderConf()
        }
    },
    isRTTCfgValid: function() {
        var d = this,
            c = d.getForm("shareRetentionSnapshot"),
            b = 0;
        var a = function(e) {
            return c.findField(e).getValue()
        };
        b = a("hourly") + a("daily") + a("weekly") + a("monthly") + a("yearly");
        if (b > this._D("max_snapshots_per_share", "256")) {
            return false
        }
        return true
    },
    setSharedFolderConf: function() {
        var a = this,
            b = a.getScheData();
        a.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        a.sendWebAPI({
            api: "SYNO.Core.Share.Snapshot",
            method: "set_schedule",
            version: 1,
            params: {
                name: a.share.get("name"),
                enable_snapshot_schedule: a.getForm("scheduleSnapshot").findField("enable_snapshot_schedule").getValue(),
                schedule: b,
                task_id: a.getForm("scheduleSnapshot").findField("task_id").getValue()
            },
            scope: a,
            callback: function(f, d, c) {
                if (!f) {
                    var e = _T("snapmgr", "err_set_sche");
                    a.clearStatusBusy();
                    a.getMsgBox().alert(_T("snapmgr", "set_schedule"), e, function() {
                        a.close()
                    }, a);
                    a.setStatusError({
                        text: e,
                        clear: true
                    });
                    return false
                } else {
                    a.setRetention()
                }
            }
        })
    },
    onCancel: function() {
        this.close()
    },
    getSharedFolderScheData: function() {
        var a = this;
        a.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        a.sendWebAPI({
            api: "SYNO.Core.Share.Snapshot",
            method: "get_schedule",
            version: 1,
            params: {
                name: a.share.get("name")
            },
            scope: a,
            callback: function(e, c, b) {
                if (!e) {
                    var d = _T("snapmgr", "err_get_sche");
                    a.clearStatusBusy();
                    a.getMsgBox().alert(_T("snapmgr", "set_schedule"), d, function() {
                        a.close()
                    }, a);
                    a.setStatusError({
                        text: d,
                        clear: true
                    });
                    return
                } else {
                    a.tabPanel.items.each(function(f) {
                        if (Ext.isFunction(f.updateScheData)) {
                            f.updateScheData(c)
                        }
                    }, a);
                    a.getRetention()
                }
            }
        })
    },
    setRetention: function() {
        var b = this,
            a = b.getForm("shareRetentionSnapshot");
        if (!a.isDirty()) {
            b.clearStatusBusy();
            b.close();
            return
        }
        var c = {
            type: b.type,
            name: b.share.get("name"),
            policyType: a.findField("policyType").getGroupValue(),
            hourly: a.findField("hourly").getValue(),
            daily: a.findField("daily").getValue(),
            weekly: a.findField("weekly").getValue(),
            monthly: a.findField("monthly").getValue(),
            yearly: a.findField("yearly").getValue()
        };
        b.sendWebAPI({
            api: "SYNO.DisasterRecovery.Retention",
            method: "set",
            version: 1,
            params: c,
            scope: b,
            callback: function(g, e, d) {
                b.clearStatusBusy();
                if (!g) {
                    var f = SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.GetErrMsg(e.code);
                    b.getMsgBox().alert(_T("snapmgr", "set_schedule"), f, function() {
                        b.close()
                    }, b);
                    b.setStatusError({
                        text: f,
                        clear: true
                    });
                    return
                } else {
                    b.close()
                }
            }
        })
    },
    getRetention: function() {
        var a = this;
        a.sendWebAPI({
            api: "SYNO.DisasterRecovery.Retention",
            method: "get",
            version: 1,
            params: {
                type: a.type,
                name: a.share.get("name")
            },
            scope: a,
            callback: function(e, c, b) {
                a.clearStatusBusy();
                if (!e) {
                    var d = SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.GetErrMsg(c.code);
                    a.getMsgBox().alert(_T("snapmgr", "set_schedule"), d, function() {
                        a.close()
                    }, a);
                    a.setStatusError({
                        text: d,
                        clear: true
                    });
                    return
                } else {
                    a.tabPanel.items.each(function(f) {
                        if (Ext.isFunction(f.updateRetData)) {
                            f.updateRetData(c)
                        }
                    }, a)
                }
            }
        })
    },
    getScheData: function() {
        var c = this,
            b = c.tabPanel.getItem("scheduleSnapshot"),
            a = {};
        a.date_type = 0;
        a.week_name = Ext.getCmp(b.week_name_id).getValue();
        a.hour = Ext.getCmp(b.hour_id).getValue();
        a.min = Ext.getCmp(b.min_id).getValue();
        a.repeat_hour = Ext.getCmp(b.repeat_hour_id).getValue() % 100;
        a.repeat_min = parseInt(Ext.getCmp(b.repeat_hour_id).getValue() / 100, 10);
        a.last_work_hour = Ext.getCmp(b.last_work_hour_id).getValue();
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.Schedule", {
    extend: "SYNO.SDS.TaskScheduler2.EditSchedulePanel",
    constructor: function() {
        var a = this;
        a.callParent(arguments);
        a.mon(a, "afterlayout", function() {
            a.dummy1 = new SYNO.ux.Utils.EnableCheckGroup(a.form, "enable_snapshot_schedule", [a.week_name_id, a.hour_id, a.min_id, a.repeat_hour_id, a.last_work_hour_id])
        }, a, {
            single: true
        })
    },
    fillConfig: function(e) {
        var f = this,
            d;
        var g = [];
        var c = [];
        for (d = 0; d < 24; ++d) {
            g.push([String.leftPad(String(d), 2, "0"), d])
        }
        var h = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: g
        });
        f.addManagedComponent(h);
        for (d = 0; d < 60; ++d) {
            c.push([String.leftPad(String(d), 2, "0"), d])
        }
        var a = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: c
        });
        f.addManagedComponent(a);
        f.repeat_hour_store = new Ext.data.ArrayStore({
            fields: ["display", "value"]
        });
        f.addManagedComponent(f.repeat_hour_store);
        f.last_work_hour_store = new Ext.data.ArrayStore({
            fields: ["display", "value"]
        });
        f.addManagedComponent(f.last_work_hour_store);
        var b = {
            title: _T("common", "schedule"),
            itemId: "scheduleSnapshot",
            border: false,
            MinInterval: [5, 15, 30],
            HourInterval: [1, 2, 3, 4, 6, 8, 12],
            items: [{
                xtype: "syno_numberfield",
                name: "task_id",
                hidden: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_snapshot_schedule",
                boxLabel: _T("iscsilun", "snapshot_schedule_enable")
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("snapmgr", "sche_exec_day"),
                labelWidth: 180,
                width: 200,
                indent: 1,
                items: [{
                    xtype: "syno_schedulefield",
                    id: f.week_name_id = Ext.id(),
                    hideLabel: true,
                    allowBlank: false,
                    editable: false,
                    width: 200
                }]
            }, {
                xtype: "syno_combobox",
                store: f.repeat_hour_store,
                value: 0,
                fieldLabel: _T("snapmgr", "sche_repeat_every"),
                labelWidth: 180,
                displayField: "display",
                valueField: "value",
                id: f.repeat_hour_id = Ext.id(),
                triggerAction: "all",
                width: 200,
                mode: "local",
                editable: false,
                indent: 1,
                listeners: {
                    select: {
                        fn: function() {
                            f.updateLastWorkTimeStore()
                        },
                        scope: f
                    }
                }
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("snapmgr", "sche_start_at"),
                labelWidth: 180,
                width: 200,
                indent: 1,
                items: [{
                    xtype: "syno_combobox",
                    store: h,
                    displayField: "display",
                    id: f.hour_id = Ext.id(),
                    valueField: "value",
                    triggerAction: "all",
                    mode: "local",
                    width: 92,
                    editable: false,
                    listeners: {
                        select: {
                            fn: function() {
                                f.updateRepeatHourStore();
                                f.updateLastWorkTimeStore()
                            },
                            scope: f
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    value: ":"
                }, {
                    xtype: "syno_combobox",
                    store: a,
                    displayField: "display",
                    valueField: "value",
                    id: f.min_id = Ext.id(),
                    triggerAction: "all",
                    width: 93,
                    mode: "local",
                    editable: false,
                    listeners: {
                        select: {
                            fn: function() {
                                f.updateLastWorkTimeStore()
                            },
                            scope: f
                        }
                    }
                }]
            }, {
                xtype: "syno_combobox",
                store: f.last_work_hour_store,
                value: 0,
                labelWidth: 180,
                fieldLabel: _T("snapmgr", "sche_repeat_until"),
                displayField: "display",
                valueField: "value",
                id: f.last_work_hour_id = Ext.id(),
                triggerAction: "all",
                width: 200,
                mode: "local",
                editable: false,
                indent: 1
            }]
        };
        Ext.apply(b, e);
        return b
    },
    updateLastWorkTimeStore: function() {
        var a = this;
        a.callParent(arguments);
        if (!a.form.findField("enable_snapshot_schedule").getValue()) {
            Ext.getCmp(a.min_id).disable(false)
        }
        if (a.last_work_hour_store.totalLength > 0) {
            Ext.getCmp(a.last_work_hour_id).setValue(a.last_work_hour_store.getAt(a.last_work_hour_store.totalLength - 1).data.value)
        }
    },
    updateScheData: function(b) {
        var a = this,
            c = b.schedule;
        Ext.getCmp(a.form.findField("task_id").setValue(b.task_id));
        Ext.getCmp(a.week_name_id).setValue(c.week_name);
        a.form.findField("enable_snapshot_schedule").setValue(b.enable_snapshot_schedule);
        Ext.getCmp(a.hour_id).setValue(c.hour);
        Ext.getCmp(a.min_id).setValue(c.min);
        a.updateRepeatHourStore();
        Ext.getCmp(a.repeat_hour_id).setValue(c.repeat_hour + c.repeat_min * 100);
        a.updateLastWorkTimeStore();
        Ext.getCmp(a.last_work_hour_id).setValue(c.last_work_hour)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.Retention", {
    extend: "SYNO.ux.FormPanel",
    MAX_RET_HOURLY: 256,
    MAX_RET_DAILY: 256,
    MAX_RET_WEEKLY: 256,
    MAX_RET_MONTHLY: 120,
    MAX_RET_YEARLY: 10,
    constructor: function(a) {
        var c = this,
            b;
        b = {
            title: _T("snapmgr", "ret_title"),
            itemId: "shareRetentionSnapshot",
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_displayfield",
                value: _T("snapmgr", "ret_desp")
            }, {
                xtype: "syno_radio",
                name: "policyType",
                boxLabel: _T("snapmgr", "ret_del_old"),
                inputValue: SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_DEL_OLD
            }, {
                xtype: "syno_radio",
                name: "policyType",
                id: "sahre_ret_all",
                boxLabel: _T("snapmgr", "ret_all_desc"),
                inputValue: SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_ALL
            }, {
                xtype: "syno_radio",
                name: "policyType",
                id: "sahre_ret_policy",
                boxLabel: _T("snapmgr", "ret_pol_desc"),
                inputValue: SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_POL_TIME
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                height: 28,
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    value: 0,
                    width: 90,
                    name: "hourly",
                    me: c,
                    id: c.ret_hourly_id = Ext.id(),
                    minValue: 0,
                    maxValue: c.MAX_RET_HOURLY,
                    listeners: {
                        disable: function() {
                            this.reset()
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    width: 10,
                    value: ""
                }, {
                    xtype: "syno_displayfield",
                    value: _T("snapmgr", "ret_hourly")
                }]
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                height: 28,
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    value: 0,
                    width: 90,
                    name: "daily",
                    me: c,
                    id: c.ret_daily_id = Ext.id(),
                    minValue: 0,
                    maxValue: c.MAX_RET_DAILY,
                    listeners: {
                        disable: function() {
                            this.reset()
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    width: 10,
                    value: ""
                }, {
                    xtype: "syno_displayfield",
                    value: _T("snapmgr", "ret_daily")
                }]
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                height: 28,
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    value: 0,
                    width: 90,
                    name: "weekly",
                    me: c,
                    id: c.ret_weekly_id = Ext.id(),
                    minValue: 0,
                    maxValue: c.MAX_RET_WEEKLY,
                    listeners: {
                        disable: function() {
                            this.reset()
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    width: 10,
                    value: ""
                }, {
                    xtype: "syno_displayfield",
                    value: _T("snapmgr", "ret_weekly")
                }]
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                height: 28,
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    value: 0,
                    width: 90,
                    name: "monthly",
                    me: c,
                    id: c.ret_monthly_id = Ext.id(),
                    minValue: 0,
                    maxValue: c.MAX_RET_MONTHLY,
                    listeners: {
                        disable: function() {
                            this.reset()
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    width: 10,
                    value: ""
                }, {
                    xtype: "syno_displayfield",
                    value: _T("snapmgr", "ret_monthly")
                }]
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                height: 28,
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    value: 0,
                    width: 90,
                    name: "yearly",
                    me: c,
                    id: c.ret_yearly_id = Ext.id(),
                    minValue: 0,
                    maxValue: c.MAX_RET_YEARLY,
                    listeners: {
                        disable: function() {
                            this.reset()
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    width: 10,
                    value: ""
                }, {
                    xtype: "syno_displayfield",
                    value: _T("snapmgr", "ret_yearly")
                }]
            }]
        };
        c.callParent([Ext.apply(b, a)]);
        c.mon(c, "afterlayout", function() {
            var d = {};
            d[SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_DEL_OLD] = [];
            d[SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_ALL] = [];
            d[SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_POL_TIME] = [c.ret_hourly_id, c.ret_daily_id, c.ret_weekly_id, c.ret_monthly_id, c.ret_yearly_id];
            c.dummy1 = new SYNO.ux.Utils.EnableRadioGroup(c.form, "policyType", d);
            SYNO.SDS.Utils.AddTip(Ext.getCmp("sahre_ret_all").getEl(), Ext.util.Format.htmlEncode(_T("snapmgr", "ret_all_tip")));
            SYNO.SDS.Utils.AddTip(Ext.getCmp("sahre_ret_policy").getEl(), Ext.util.Format.htmlEncode(_T("snapmgr", "ret_all_tip")))
        }, c, {
            single: true
        })
    },
    updateRetData: function(a) {
        this.form.setValues(a)
    }
});
SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.GetErrMsg = function(a) {
    var b;
    switch (a) {
        case 1001:
            b = _T("s2s", "err_invalid_param_value");
            break;
        case 1002:
            b = _T("snapmgr", "err_get_ret_policy");
            break;
        case 1003:
            b = _T("snapmgr", "err_set_ret_policy");
            break;
        default:
            b = _T("common", "error_system");
            break
    }
    return b
};
SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_ALL = 0;
SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_POL_TIME = (1 << 0);
SYNO.SDS.AdminCenter.Share.ScheduleSnapshot.RTT_DEL_OLD = (1 << 4);
Ext.ns("SYNO.SDS.AdminCenter.Share");
Ext.define("SYNO.SDS.AdminCenter.Share.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent();
        this.grid = new SYNO.SDS.AdminCenter.Share.GridPanel({
            module: this,
            appWin: a.appWin
        })
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.grid.getStore().load();
        return true
    },
    focus: function(a) {
        this.setActivateParams(a);
        this.grid.getStore().load()
    },
    getPanel: function() {
        return this.grid
    },
    getHelpParam: function() {
        return "AdminCenter/file_share_desc.html"
    },
    deactivate: function() {
        return true
    },
    setActivateParams: function(a) {
        if (a) {
            if ("create" === a.dlg) {
                this.grid.launchShareDialog({
                    mode: "create"
                })
            } else {
                if ("clone" === a.dlg) {
                    this.grid.launchShareDialog({
                        mode: "clone",
                        blNfsEnabled: a.params.blNfsEnabled,
                        blKerberosSupport: a.params.blKerberosSupport,
                        blKerberosEnabled: a.params.blKerberosEnabled,
                        share: a.params.share,
                        snapshot: a.params.snapshot
                    })
                }
            }
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Share.GridPanel", {
    extend: "SYNO.ux.GridPanel",
    title: "Grid for Share",
    constructor: function(a) {
        this.module = a;
        this.appWin = a.appWin;
        this.nfsEnabled = false;
        this.nfsKerberosSupport = false;
        this.nfsKerberosEnabled = false;
        this.supportShareSnapshot = (this._D("support_share_snapshot", "no") === "yes");
        this.supportOldSnapshotUI = this.supportShareSnapshot && (this._D("enable_old_snap_ui", "no") === "yes");
        this.initWebAPI();
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "show", this.showHandler, this);
        this.mon(this, "sharefolderchanged", function(c) {
            this.scrollShareName = c;
            this.store.load()
        }, this)
    },
    fillConfig: function(a) {
        this.store = this.createStore(a);
        this.actionGroup = this.createActionGroup();
        this.tbar = this.createTBar();
        var c = new Ext.grid.ColumnModel({
            defaults: {
                sortable: true
            },
            columns: [{
                header: "&nbsp;",
                dataIndex: "encryption",
                id: "encryption",
                width: 30,
                renderer: this.encryptionIconRenderer,
                hidden: ("no" === this._D("support_share_encryption", "no"))
            }, {
                header: _T("share", "share_name"),
                dataIndex: "name",
                width: 100
            }, {
                header: _T("share", "share_comment"),
                dataIndex: "desc",
                width: 200,
                renderer: this.descRenderer
            }, {
                header: _T("share", "share_hidden_status"),
                dataIndex: "hidden",
                align: "center",
                width: 150,
                renderer: this.hiddenRenderer
            }, {
                header: _T("volume", "volume"),
                dataIndex: "vol_path",
                align: "center",
                width: 100,
                renderer: this.volumeRenderer
            }]
        });
        this.selModel = new Ext.grid.RowSelectionModel({
            singleSelect: false,
            listeners: {
                selectionchange: this.onSelectionChange,
                scope: this
            }
        });
        var b = {
            colModel: c,
            tbar: this.tbar,
            enableHdMenu: false,
            viewConfig: {
                trackResetOnLoad: false
            },
            selModel: this.selModel,
            store: this.store,
            bbar: new SYNO.ux.PageLessToolbar({
                store: this.store,
                pageSize: -1,
                displayInfo: true,
                displayButtons: false
            }),
            listeners: {
                scope: this,
                rowdblclick: {
                    scope: this,
                    fn: function(e, g, f) {
                        var d = this.store.getAt(g);
                        if (d) {
                            if (-1 === d.data.vol_path.indexOf("Gluster")) {
                                this.launchShareDialog({
                                    share: d
                                })
                            }
                        }
                    }
                },
                rowcontextmenu: {
                    scope: this,
                    fn: this.onRowContextMenu
                }
            }
        };
        Ext.apply(b, a);
        return b
    },
    initWebAPI: function() {
        this.webapiNfsGet = {
            api: "SYNO.Core.FileServ.NFS",
            version: 1,
            method: "get"
        };
        this.webapiNfsKerberosGet = {
            api: "SYNO.Core.FileServ.NFS.Kerberos",
            version: 1,
            method: "get"
        }
    },
    showHandler: function() {
        this.appWin.setStatusBusy();
        this.appWin.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: [this.webapiNfsGet, this.webapiNfsKerberosGet]
            },
            scope: this,
            callback: function(c, b, a) {
                this.appWin.clearStatusBusy();
                if (c) {
                    this.afterLoad(b)
                } else {
                    this.appWin.setStatusError()
                }
            }
        })
    },
    afterLoad: function(a) {
        a.result.each(function(b) {
            if (true === SYNO.ux.Utils.checkApiConsistency(this.webapiNfsGet, b)) {
                this.nfsEnabled = b.data.enable_nfs
            } else {
                if (true === SYNO.ux.Utils.checkApiConsistency(this.webapiNfsKerberosGet, b)) {
                    this.nfsKerberosSupport = b.data.kerberos_support;
                    this.nfsKerberosEnabled = (0 < b.data.kerberos_principal.length)
                }
            }
        }, this)
    },
    onSelectionChange: function(o) {
        var l = o.getSelections();
        var e = o.getCount();
        var g = this.actionGroup;
        var q;
        var a = g.get("creation").initialConfig.menu.get("clone");
        var f = null;
        var i = null;
        if (g.get("action") && g.get("action").initialConfig && g.get("action").initialConfig.menu) {
            if (g.get("action").initialConfig.menu.get("migrate")) {
                f = g.get("action").initialConfig.menu.get("migrate")
            }
            if (g.get("action").initialConfig.menu.get("new_recycle_policy")) {
                i = g.get("action").initialConfig.menu.get("new_recycle_policy")
            }
        }
        if (0 === e) {
            g.disableAll();
            g.enable("add");
            g.enable("creation");
            if (a) {
                a.disable()
            }
            g.enable("action");
            if (f) {
                f.disable()
            }
            if (i) {
                i.disable()
            }
        } else {
            g.enable("creation");
            g.enable("delete");
            g.enable("action");
            g.enable("snapshot");
            if (a) {
                a.disable()
            }
            if (i) {
                i.enable()
            }
            if (e === 1) {
                g.enable("edit");
                var r = l[0].get("is_aclmode");
                var n = l[0].get("is_support_acl");
                var k = l[0].get("encryption");
                var m = this.menuEncryption.get("encrypt");
                var d = this.menuEncryption.get("decrypt");
                var h = this.menuEncryption.get("exportkey");
                var j = l[0].get("support_snapshot") || false;
                var c = l[0].get("is_usb_share");
                var b = 0;
                if (j === true) {
                    b = l[0].get("support_action")
                }
                m.hide();
                d.hide();
                h.hide();
                if (k === 1) {
                    g.enable("encryption");
                    d.show()
                } else {
                    if (k === 2) {
                        g.enable("encryption");
                        m.show();
                        h.show()
                    } else {
                        g.disable("encryption")
                    }
                }
                if (j !== true || c) {
                    g.disable("snapshot")
                } else {
                    var p = g.get("snapshot").initialConfig.menu.get("snapshot_take");
                    if (b & 1) {
                        p.enable()
                    } else {
                        p.disable()
                    }
                }
                if (a && j === true && !c) {
                    if (b & 8) {
                        a.enable()
                    }
                }
                q = l[0].get("vol_path");
                if (-1 !== q.indexOf("Gluster")) {
                    g.disableAll()
                }
                if (f) {
                    if (false === r && true === n) {
                        f.enable()
                    } else {
                        f.disable()
                    }
                }
            } else {
                g.disable("edit");
                g.disable("encryption");
                g.disable("snapshot");
                if (f) {
                    f.disable()
                }
            }
        }
    },
    createTBar: function() {
        var a = this.actionGroup.getArray();
        var b = new Ext.Toolbar({
            defaultType: "syno_button",
            items: [a, "->", new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                localFilter: true,
                localFilterField: ["name", "desc"],
                blOr: true,
                store: this.store
            })]
        });
        return b
    },
    createActionGroup: function() {
        var j = this.supportShareSnapshot && this._D("support_btrfs", "no") === "yes";
        var b = new Ext.Action({
            text: _T("common", "create"),
            itemId: "add",
            scope: this,
            hidden: j,
            handler: function() {
                this.launchShareDialog({
                    mode: "create"
                })
            }
        });
        var i = new SYNO.ux.Menu({
            items: [{
                text: _T("common", "create"),
                itemId: "create",
                scope: this,
                handler: function() {
                    this.launchShareDialog({
                        mode: "create"
                    })
                }
            }, {
                text: _T("iscsilun", "clone"),
                itemId: "clone",
                scope: this,
                handler: function() {
                    var o = this.getSelectionModel().getSelected();
                    if (o) {
                        this.launchShareDialog({
                            share: o,
                            mode: "clone"
                        })
                    }
                }
            }]
        });
        var l = new Ext.Action({
            text: _T("common", "create"),
            itemId: "creation",
            hidden: !j,
            scope: this,
            menu: i
        });
        var g = new Ext.Action({
            text: _T("common", "alt_edit"),
            itemId: "edit",
            scope: this,
            handler: function() {
                var o = this.getSelectionModel().getSelected();
                if (o) {
                    this.launchShareDialog({
                        share: o
                    })
                }
            }
        });
        var m = new Ext.Action({
            text: _T("common", "delete"),
            itemId: "delete",
            scope: this,
            handler: this.deleteHandler
        });
        this.menuEncryption = new SYNO.ux.Menu({
            items: [{
                text: _T("share", "share_encryption_encrypt"),
                itemId: "encrypt",
                scope: this,
                handler: this.encryptHandler
            }, {
                text: _T("share", "share_encryption_decrypt"),
                itemId: "decrypt",
                scope: this,
                handler: this.decryptHandler
            }, {
                text: _T("share", "share_encryption_exportkey"),
                itemId: "exportkey",
                scope: this,
                handler: this.exportKeyHandler
            }]
        });
        var c = new Ext.Action({
            text: _T("share", "share_encryption"),
            itemId: "encryption",
            hidden: ("no" === this._D("support_share_encryption", "no")),
            scope: this,
            menu: this.menuEncryption
        });
        var h = new SYNO.ux.Menu({
            items: [{
                text: _T("iscsilun", "take_snapshot"),
                itemId: "snapshot_take",
                scope: this,
                handler: this.snapshotTakeHandler
            }, {
                text: _T("iscsilun", "snapshot_management"),
                itemId: "snapshot_manager",
                scope: this,
                handler: this.snapshotManagerHandler
            }, {
                text: _T("iscsilun", "snapshot_schedule_task"),
                itemId: "snapshot_schedule",
                scope: this,
                handler: this.scheduleSnapshotHandler
            }]
        });
        var n = new Ext.Action({
            text: _T("iscsilun", "snapshot"),
            itemId: "snapshot",
            hidden: !this.supportOldSnapshotUI,
            scope: this,
            menu: h
        });
        var e = new Ext.Action({
            text: _T("share", "share_clean_all_recycle_bin"),
            scope: this,
            hidden: false,
            handler: this.cleanRecycleHandler
        });
        var k = new Ext.Action({
            text: _T("network", "cifs_recycle_bin_set_clean_policy"),
            itemId: "new_recycle_policy",
            scope: this,
            hidden: false,
            handler: this.newRecyclePolicyHandler
        });
        var f = new Ext.Action({
            text: _T("sharemigrate", "button"),
            itemId: "migrate",
            hidden: (this._D("support_synoacl") !== "yes"),
            scope: this,
            handler: this.migrateHandler
        });
        this.menuOtherActions = new SYNO.ux.Menu({
            items: [e, k, f]
        });
        var a = new Ext.Action({
            text: _T("rcpower", "action"),
            itemId: "action",
            hidden: false,
            scope: this,
            menu: this.menuOtherActions
        });
        var d = new SYNO.SDS.Utils.ActionGroup([b, l, g, m, c, n, a]);
        return d
    },
    onRowContextMenu: function(c, f, a) {
        var b = this.actionGroup.getArray();
        var e = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        var d;
        this.getSelectionModel().selectRow(f, this.getSelectionModel().isSelected(f));
        d = this.getSelectionModel().getSelected();
        if (-1 === d.data.vol_path.indexOf("Gluster")) {
            e.showAt(a.getXY());
            a.preventDefault()
        }
    },
    hiddenRenderer: function(a, b, c) {
        return (a) ? _T("share", "share_hide_in_samba") : "-"
    },
    encryptionIconRenderer: function(b) {
        var c = "";
        var a = "";
        switch (b) {
            case 1:
                c = "share-lock";
                break;
            case 2:
                c = "share-unlock";
                break;
            default:
                break
        }
        if (c !== "") {
            a = String.format('<div class="syno-admincenter-{0}"></div>', c)
        }
        return a
    },
    volumeRenderer: function(b, d, f) {
        var e = {
            id: 0,
            location: ""
        };
        var a = "";
        var c = b.replace("/volume", "");
        if (-1 !== b.indexOf("usb")) {
            if (f.get("is_usb_share") === false) {
                return f.get("display_vol_name")
            } else {
                if ("SDCARD" === f.get("external_dev_type")) {
                    return _T("tree", "leaf_sdcard")
                } else {
                    return _T("status", "status_usb")
                }
            }
        } else {
            if (-1 !== b.indexOf("sata")) {
                return _T("status", "status_sata")
            } else {
                if (-1 !== b.indexOf("Gluster")) {
                    return _T("status", "status_gluster")
                }
            }
        }
        if (!isNaN(c)) {
            e.id = parseInt(c, 10);
            e.location = "internal"
        } else {
            e.id = c;
            e.location = "internal"
        }
        a = String.format("{0} {1}", _T("volume", "volume"), e.id);
        return a
    },
    createStore: function(c) {
        var b = ["hidden", "encryption", "is_aclmode", "migrate", "unite_permission", "is_support_acl", "is_sync_share", "is_force_readonly"];
        var a = [{
            name: "name",
            sortType: "asNaturalUCString"
        }, "desc", "hidden", "vol_path", "encryption", "is_aclmode", "migrate", "unite_permission", "is_support_acl", "is_usb_share", "is_sync_share", "display_vol_name", "external_dev_type", "support_action", {
            name: "force_readonly_reason",
            defaultValue: undefined
        }];
        if (this.supportShareSnapshot) {
            b = b.concat(["support_snapshot"]);
            a = a.concat(["support_snapshot"])
        }
        return new SYNO.API.JsonStore({
            fields: a,
            api: "SYNO.Core.Share",
            method: "list",
            version: 1,
            idProperty: "name",
            totalProperty: "total",
            remoteSort: false,
            defaultSortable: true,
            sortInfo: {
                field: "name",
                direction: "asc"
            },
            baseParams: {
                additional: b,
                shareType: "all"
            },
            root: "shares",
            appWindow: this.appWin,
            scope: this,
            listeners: {
                load: {
                    scope: this,
                    fn: this.onLoad
                },
                exception: {
                    scope: this,
                    fn: function(g, h, i, f, e, d) {
                        this.findAppWindow().getMsgBox().alert("warning_msg", SYNO.API.getErrorString(e.code))
                    }
                }
            }
        })
    },
    descRenderer: function(d, a, c) {
        d = Ext.util.Format.htmlEncode(d);
        var b = Ext.util.Format.htmlEncode(d);
        a.attr = 'ext:qtip="' + b + '"';
        return d
    },
    onLoad: function(h, c, j) {
        this.onSelectionChange(this.selModel);
        if (0 === this.store.data.length) {
            var d = this.actionGroup;
            d.disableAll();
            var a = d.get("creation").initialConfig.menu.get("clone");
            d.enable("add");
            d.enable("creation");
            a.disable();
            return
        }
        if (!Ext.isDefined(this.scrollShareName)) {
            return
        }
        var e = this.scrollShareName;
        delete this.scrollShareName;
        var b = h.indexOfId(e);
        if (-1 === b) {
            return
        }
        var g = this.getSelectionModel();
        var f = this.getView();
        var i = f.getRow(b);
        g.selectRow(b);
        f.focusRow(i)
    },
    launchShareDialog: function(b, a, e) {
        if ("clone" === b.mode || "create" === b.mode) {
            var d = this._D("maxshares");
            if (d <= this.store.getTotalCount()) {
                this.findAppWindow().getMsgBox().alert(this.title, String.format(_T("share", "error_toomanysh"), d));
                return
            }
        }
        var c;
        if ("clone" === b.mode) {
            c = new SYNO.SDS.AdminCenter.Share.Dialog(Ext.apply({
                module: this.module,
                owner: this.module.appWin,
                blNfsEnabled: (undefined !== b.blNfsEnabled) ? b.blNfsEnabled : this.nfsEnabled,
                blKerberosSupport: (undefined !== b.blKerberosSupport) ? b.blKerberosSupport : this.nfsKerberosSupport,
                blKerberosEnabled: (undefined !== b.blKerberosEnabled) ? b.blKerberosEnabled : this.nfsKerberosEnabled,
                mode: "clone"
            }, b))
        } else {
            c = new SYNO.SDS.AdminCenter.Share.Dialog(Ext.apply({
                module: this.module,
                owner: this.module.appWin,
                blNfsEnabled: this.nfsEnabled,
                blKerberosSupport: this.nfsKerberosSupport,
                blKerberosEnabled: this.nfsKerberosEnabled,
                mode: "edit"
            }, b))
        }
        if (c.mode !== "edit") {
            this.mon(c, "close", function() {
                var f = c.getCreateResult();
                if (f) {
                    this.launchShareDialog({
                        share: f
                    }, "sharegrid")
                }
            }, this, {
                single: true
            })
        }
        c.open();
        if (a) {
            c.panel.setActiveTab(a)
        }
    },
    migrateHandler: function(d, b) {
        var a = this.getSelectionModel().getSelected();
        var e;
        var c = [];
        if (!a || !a.data || !a.data.name) {
            return
        }
        c.push(a.data.name);
        e = new SYNO.SDS.AdminCenter.Share.Migrate.Wizard({
            targetShare: c,
            caller: this,
            module: this.module,
            owner: this.module.appWin
        });
        SYNO.SDS.Utils.S2S.confirmIfSyncShareAffected(false, {
            name: a.data.name,
            is_sync_share: a.data.is_sync_share,
            no_check_permission: true
        }, {
            dialogTitle: this.title,
            dialogMsg: _T("s2s", "s2s_warn_share_change_priv"),
            dialogOwner: this.module.appWin,
            continueHandler: function() {
                e.open()
            },
            abortHandler: Ext.emptyFn,
            scope: this
        })
    },
    deleteHandler: function() {
        var a = this.getSelectionModel().getSelections();
        this.deleteShare(a)
    },
    newRecyclePolicyHandler: function() {
        var a = this.getSelectionModel().getSelections();
        this.module.appWin.startModule("SYNO.SDS.AdminCenter.TaskScheduler.Main", {
            newRecycleBinPolicy: true,
            share: a
        })
    },
    cleanRecycleHandler: function() {
        if (this._S("demo_mode")) {
            this.findAppWindow().getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        var a = {
            yes: {
                text: Ext.MessageBox.buttonText.yes,
                btnStyle: "red"
            },
            no: {
                text: Ext.MessageBox.buttonText.no
            }
        };
        this.findAppWindow().getMsgBox().confirm(_T("share", "share_clean_recycle_bin"), _T("share", "share_all_recycle_bin_clean_warn"), function(b) {
            if (b === "yes") {
                this.sendWebAPI({
                    api: "SYNO.Core.RecycleBin",
                    method: "start",
                    version: 1,
                    prams: {}
                })
            }
        }, this, a)
    },
    deleteShare: function(a) {
        if (!a) {
            return
        }
        var b = [];
        var c = [];
        Ext.each(a, function(f, d, e) {
            if (-1 !== f.get("vol_path").indexOf("Gluster")) {
                c.push(f.get("name"))
            } else {
                b.push(f.get("name"))
            }
        }, this);
        if (0 !== c.length) {
            this.errorGlusterMsg(c.join(", "));
            return false
        }
        if (0 === b.length) {
            return
        }
        this.module.appWin.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            method: "validate_delete",
            params: {
                name: b
            },
            version: 1,
            scope: this,
            callback: function(g, f, e) {
                this.module.appWin.clearStatusBusy();
                if (!g) {
                    var d = this.combineWarningMsg(f.errors);
                    this.module.appWin.getMsgBox().alert("warning_msg", d.join(""));
                    return false
                }
                if (!f && 0 === c.length) {
                    this.loadDeleteDialog(b);
                    return true
                }
                this.warningConfirm(f, b)
            }
        })
    },
    errorGlusterMsg: function(a) {
        var b = "";
        b = _T("share", "share_gluster_share") + a;
        this.module.appWin.getMsgBox().alert("warning_msg", b);
        return false
    },
    warningConfirm: function(c, a) {
        var b = this.combineWarningConfirm(c);
        this.module.appWin.getMsgBox().confirmDelete("warning_msg", b, function(f, e, d) {
            if ("yes" === f) {
                if (a) {
                    this.loadDeleteDialog(a)
                } else {
                    return
                }
            }
        }, this)
    },
    combineWarningMsg: function(e) {
        var j = [];
        if (e.hasOwnProperty("warning_external")) {
            var b = String.format("{0}<br><b>{1}</b><br>", _T("share", "share_cannot_delete_for_reserved"), e.warning_external.join(", "));
            j.push(b)
        }
        if (e.hasOwnProperty("warning_mount_point")) {
            var g = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_mount_point_delete"), e.warning_mount_point.join(", "));
            j.push(g)
        }
        if (e.hasOwnProperty("warning_homes")) {
            var h = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_home_service"), e.warning_homes.join(", "));
            j.push(h)
        }
        if (e.hasOwnProperty("warning_ftp_anonymousroot")) {
            var c = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_ftp_anonymousroot"), e.warning_ftp_anonymousroot.join(", "));
            j.push(c)
        }
        if (e.hasOwnProperty("warning_package")) {
            var f = [];
            var a;
            for (var d = 0; d < e.warning_package.length; d++) {
                f.push(SYNO.SDS.AdminCenter.Share.Utils.GetPackageName(e.warning_package[d]))
            }
            a = String.format("{0}<br><b>{1}</b><br>", _T("share", "error_packages"), e.warning_package.join(", "));
            a = String.format(a, f.join(", "));
            j.push(a)
        }
        return j
    },
    combineWarningConfirm: function(b) {
        var c = "";
        if (b.hasOwnProperty("warning_sd_destination")) {
            var d = "";
            if (b.hasOwnProperty("warning_sd_default_destination")) {
                d = _T("share", "share_rmsdcopyfolder");
                d = String.format(d, b.warning_sd_destination, b.warning_sd_default_destination)
            } else {
                d = _T("share", "share_rmsdcopyfolderempty");
                d = String.format(d, b.warning_sd_destination)
            }
            c = d
        }
        if (b.hasOwnProperty("warning_usb_destination")) {
            var a = "";
            if (b.hasOwnProperty("warning_usb_default_destination")) {
                a = _T("share", "share_rmusbcopyfolder");
                a = String.format(a, b.warning_usb_destination, b.warning_usb_default_destination)
            } else {
                a = _T("share", "share_rmusbcopyfolderempty");
                a = String.format(a, b.warning_usb_destination)
            }
            if (c.empty()) {
                c = a
            } else {
                c = c + "<b>" + a
            }
        }
        if (b.hasOwnProperty("warning_disable_service")) {
            Ext.each(b.warning_disable_service, function(i) {
                var f = i.services;
                var g = [];
                var e = "";
                var h = "";
                if (!Ext.isArray(f)) {
                    return false
                }
                Ext.each(f, function(j) {
                    g.push(SYNO.SDS.AdminCenter.Share.Utils.GetServiceI18N(j))
                });
                e = "<b>" + i.share + "</b>";
                h = "<b>" + g.join(", ") + "</b>";
                if (c.empty()) {
                    c = String.format(_T("share", "share_service_disable_confirm"), e, h)
                } else {
                    c = c + "<br>" + String.format(_T("share", "share_service_disable_confirm"), e, h)
                }
            });
            c = c + "<br><br>" + _T("share", "share_service_disable_confirm_post")
        }
        return c
    },
    loadDeleteDialog: function(a) {
        var c = new SYNO.SDS.AdminCenter.Share.Delete({
            module: this,
            owner: this.module.appWin,
            share: a
        });
        var b = String.format("<b>{0}</b>", _T("share", "share_cfrmrmv"));
        c.loadShareName(b, a);
        c.open()
    },
    encryptHandler: function(c, b) {
        var a = this.getSelectionModel().getSelected();
        this.module.appWin.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share.Crypto",
            method: "validate_encrypt",
            version: 1,
            params: {
                name: a.id
            },
            scope: this,
            callback: function(i, g, f) {
                var d = [];
                var e = "";
                var h = "";
                this.module.appWin.clearStatusBusy();
                if (!i) {
                    this.module.appWin.getMsgBox().alert("warning_msg", _T("common", "error_system"));
                    this.store.load();
                    return
                }
                if (g && g.warning_pause_service) {
                    Ext.each(g.warning_pause_service, function(j) {
                        d.push(SYNO.SDS.AdminCenter.Share.Utils.GetServiceI18N(j))
                    });
                    e = "<b>" + d.join(", ") + "</b><br>";
                    h = String.format(_T("share", "encrypt_share_service_pause_confirm"), a.id, e)
                } else {
                    h = _T("share", "share_encryption_encrypt_confirm")
                }
                this.module.appWin.getMsgBox().confirm(_T("share", "share_encryption_encrypt"), h, function(j) {
                    if (j == "yes") {
                        this.doEncrypt(a)
                    } else {
                        this.store.load()
                    }
                }, this)
            }
        })
    },
    doEncrypt: function(a) {
        this.module.appWin.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share.Crypto",
            method: "encrypt",
            version: 1,
            params: {
                name: a.id
            },
            scope: this,
            callback: function(d, c, b) {
                this.module.appWin.clearStatusBusy();
                if (!d) {
                    this.module.appWin.getMsgBox().alert("warning_msg", _T("share", "mount_point_not_empty"))
                }
                this.store.load()
            }
        })
    },
    decryptHandler: function() {
        var b = this.getSelectionModel().getSelected();
        var a = new SYNO.SDS.AdminCenter.Share.Decrypt({
            module: this.module,
            owner: this.module.appWin,
            share: b
        });
        a.open()
    },
    exportKeyHandler: function() {
        var b = this.getSelectionModel().getSelected();
        var a = new SYNO.SDS.AdminCenter.Share.Export({
            module: this.module,
            owner: this.module.appWin,
            share: b
        });
        a.open()
    },
    snapshotTakeHandler: function() {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.SDS.AdminCenter.Share.TakeSnapshot({
            appWin: this.appWin,
            module: this.module,
            owner: this.module.appWin,
            share: a,
            title: _T("iscsilun", "take_snapshot"),
            mode: "create"
        });
        b.open()
    },
    snapshotManagerHandler: function() {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.SDS.AdminCenter.Share.SnapshotManager({
            appWin: this.appWin,
            module: this.module,
            owner: this.module.appWin,
            share: a,
            blNfsEnabled: this.nfsEnabled,
            blKerberosSupport: this.nfsKerberosSupport,
            blKerberosEnabled: this.nfsKerberosEnabled
        });
        b.open()
    },
    scheduleSnapshotHandler: function() {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.SDS.AdminCenter.Share.ScheduleSnapshot({
            appWin: this.appWin,
            owner: this.module.appWin,
            module: this.module,
            share: a
        });
        b.open()
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.FileService.SMB");
Ext.define("SYNO.SDS.AdminCenter.FileService.SMB.AdvancedSettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.smbApiMaxVersion = a.smbApiMaxVersion;
        this.panel = this.configForm();
        var b = Ext.apply({
            title: _T("common", "adv_setting"),
            autoDestroy: true,
            width: 600,
            autoHeight: true,
            layout: "fit",
            border: false,
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "commit"),
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.load, this);
        this.on("afterlayout", function(c, d) {
            this.eanbleGroupDummy1 = new SYNO.ux.Utils.EnableCheckGroup(this.panel.getForm(), "enable_vetofile", ["vetofile"]);
            this.eanbleGroupDummy2 = new SYNO.ux.Utils.EnableCheckGroup(this.panel.getForm(), "enable_symlink", ["enable_widelink"])
        }, this, {
            single: true
        })
    },
    afterLoad: function(a) {
        this.mon(this.panel.getComponent("enable_local_master_browser"), "check", function(c, b) {
            if (b === true) {
                this.getMsgBox().alert(_T("tree", "leaf_winmacnfs"), _T("network", "cifs_lmb_enable_warm"))
            }
        }, this);
        this.mon(this.panel.getComponent("enable_widelink"), "check", this.confirmWideLink, this);
        this.mon(this.panel.getComponent("enable_symlink"), "check", function(b, c) {
            if (!c) {
                this.panel.getComponent("enable_widelink").setValue(false)
            }
        }, this)
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.SMB",
            method: "get",
            version: this.smbApiMaxVersion,
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    b.disable_op_lock = !b.enable_op_lock;
                    this.panel.getForm().setValues(b);
                    this.afterLoad(b);
                    if (3 === this.smbApiMaxVersion) {
                        this.updateSMBEncryptStatus()
                    }
                }
            }
        })
    },
    configForm: function() {
        var c = {
            border: false,
            itemId: "formpanel",
            trackResetOnLoad: true,
            height: 630,
            width: 250,
            labelWidth: 250,
            items: [{
                xtype: "syno_textfield",
                width: 220,
                name: "wins",
                maxlength: 15,
                itemId: "wins",
                fieldLabel: _T("network", "netif_wins"),
                vtype: "ip"
            }, {
                xtype: "syno_checkbox",
                name: "disable_op_lock",
                itemId: "disable_op_lock",
                boxLabel: _T("network", "cifs_oplock")
            }, {
                xtype: "syno_checkbox",
                name: "enable_local_master_browser",
                itemId: "enable_local_master_browser",
                boxLabel: _T("network", "network_lmb_enable")
            }, {
                xtype: "syno_checkbox",
                name: "enable_dirsort",
                boxLabel: _T("network", "smb_enable_dirsort")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("network", "smb_enable_dirsort_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_vetofile",
                itemId: "enable_vetofile",
                boxLabel: _T("network", "smb_enable_vetofile")
            }, {
                xtype: "syno_textfield",
                name: "vetofile",
                itemId: "vetofile",
                regex: /^(\/[^\/]+)+\/$/,
                indent: 1,
                width: 220,
                fieldLabel: _T("network", "smb_vetofile_list"),
                emptyText: "/*.txt/README/",
                allowBlank: false
            }, {
                xtype: "syno_checkbox",
                name: "enable_symlink",
                itemId: "enable_symlink",
                boxLabel: _T("network", "smb_enable_symlink")
            }, {
                xtype: "syno_checkbox",
                name: "enable_widelink",
                itemId: "enable_widelink",
                indent: 1,
                boxLabel: _T("network", "smb_enable_widelink")
            }, {
                xtype: "syno_checkbox",
                name: "enable_msdfs",
                boxLabel: _T("network", "smb_enable_msdfs")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("network", "smb_enable_msdfs_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_reset_on_zero_vc",
                itemId: "enable_reset_on_zero_vc",
                boxLabel: _T("network", "smb_reset_on_zero_vc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_enhance_log",
                boxLabel: _T("network", "smb_enhance_log")
            }, {
                xtype: "syno_checkbox",
                name: "enable_mask",
                boxLabel: _T("common", "apply_default_umask")
            }, {
                xtype: "syno_checkbox",
                name: "disable_strict_allocate",
                itemId: "disable_strict_allocate",
                boxLabel: _T("network", "smb_disable_strict_allocate")
            }, {
                xtype: "syno_checkbox",
                name: "syno_wildcard_search",
                itemId: "syno_wildcard_search",
                boxLabel: _T("network", "syno_wildcard_search")
            }, {
                xtype: "syno_button",
                itemId: "smb_clear_tdb",
                btnStyle: "default",
                text: _T("network", "smb_clear_tdb"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                handler: this.clearTDB,
                scope: this
            }, {
                xtype: "syno_checkbox",
                name: "enable_samba",
                hidden: true
            }]
        };
        if (3 === this.smbApiMaxVersion) {
            var a = c.items;
            var b = [{
                xtype: "syno_combobox",
                name: "smb_max_protocol",
                itemId: "smb_max_protocol",
                indent: 0,
                fieldLabel: _T("network", "smb_max_protocol"),
                displayField: "display",
                valueField: "value",
                store: new Ext.data.ArrayStore({
                    fields: ["display", "value"],
                    idIndex: 0,
                    data: [
                        [_T("network", "cifs_smb1_enable"), 0],
                        [_T("network", "cifs_smb2_enable"), 1],
                        [_T("network", "cifs_smb2_large_mtu_enable"), 2],
                        [_T("network", "cifs_smb3_enable"), 3]
                    ]
                }),
                listeners: {
                    change: this.updateSMBEncryptStatus,
                    select: this.updateSMBEncryptStatus,
                    scope: this
                }
            }, {
                xtype: "syno_combobox",
                name: "smb_encrypt_transport",
                itemId: "smb_encrypt_transport",
                indent: 0,
                fieldLabel: _T("network", "smb_encrypt_transport"),
                displayField: "display",
                valueField: "value",
                store: new Ext.data.ArrayStore({
                    fields: ["display", "value"],
                    idIndex: 1,
                    data: [
                        [_T("ftp", "ftp_utf8_disabled"), 0],
                        [_T("ftp", "ftp_utf8_auto"), 1],
                        [_T("ftp", "ftp_utf8_forced"), 2]
                    ]
                }),
                listeners: {
                    select: this.enableEncryptAlert,
                    scope: this
                }
            }];
            var d = 1;
            a = a.slice(0, d).concat(b).concat(a.slice(d));
            c.items = a
        }
        SYNO.LayoutConfig.fill(c);
        return new SYNO.SDS.Utils.FormPanel(c)
    },
    apply: function() {
        var b = this.panel.getForm();
        var c = b.getValues();
        var a = false;
        if (!b.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (!b.isDirty()) {
            this.close();
            return false
        }
        if (this.panel.getComponent("wins").isDirty() || this.panel.getComponent("enable_local_master_browser").isDirty() || this.panel.getComponent("disable_op_lock").isDirty() || this.panel.getComponent("enable_reset_on_zero_vc").isDirty() || this.panel.getComponent("enable_vetofile").isDirty() || this.panel.getComponent("vetofile").isDirty() || this.panel.getComponent("disable_strict_allocate").isDirty() || this.panel.getComponent("syno_wildcard_search").isDirty()) {
            a = true
        }
        if (3 === this.smbApiMaxVersion) {
            if (this.panel.getComponent("smb_max_protocol").isDirty()) {
                a = true
            }
        }
        c.enable_op_lock = !c.disable_op_lock;
        if (c.enable_samba && a) {
            this.confirmSubmit(c)
        } else {
            this.submit(c)
        }
        return true
    },
    enableClearTDB: function(a) {
        var b = this.panel.getComponent("smb_clear_tdb");
        b.setDisabled(!a)
    },
    clearTDB: function() {
        this.getMsgBox().confirm(_T("tree", "leaf_winmacnfs"), _T("network", "service_restart_warning") + " " + _T("common", "ask_cont"), function(a, b) {
            if ("yes" === a) {
                this.setStatusBusy();
                this.sendWebAPI({
                    api: "SYNO.Core.FileServ.SMB",
                    method: "clean_cache",
                    version: 1,
                    scope: this,
                    callback: function(e, d, c) {
                        this.clearStatusBusy();
                        if (e) {
                            this.enableClearTDB(false);
                            return true
                        }
                    }
                })
            }
        }, this)
    },
    confirmSubmit: function(a) {
        this.getMsgBox().confirm(_T("tree", "leaf_winmacnfs"), _T("network", "service_restart_warning") + " " + _T("common", "ask_cont"), function(d, c, b) {
            if ("yes" == d) {
                this.submit(a)
            }
        }, this)
    },
    submit: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.SMB",
            method: "set",
            version: this.smbApiMaxVersion,
            scope: this,
            params: a,
            callback: function(d, c, b) {
                this.clearStatusBusy();
                if (d) {
                    this.close();
                    return true
                } else {
                    this.setStatusError()
                }
            }
        })
    },
    confirmWideLink: function(a, b) {
        if (!b || !this.panel.getForm().isDirty()) {
            return
        }
        this.getMsgBox().confirm(_T("tree", "leaf_winmacnfs"), _T("common", "warning_option_affects_security"), function(c) {
            if ("no" == c) {
                this.panel.getComponent("enable_widelink").setValue(false)
            }
        }, this)
    },
    updateSMBEncryptStatus: function() {
        var a = this.panel;
        var c = a.getComponent("smb_encrypt_transport");
        var d = a.getComponent("smb_max_protocol");
        var b = true;
        if (3 === d.getValue()) {
            b = false
        }
        c.setDisabled(b)
    },
    enableEncryptAlert: function() {
        var a = this.panel;
        var b = a.getComponent("smb_encrypt_transport");
        if (2 === b.getValue()) {
            this.getMsgBox().confirm(_T("tree", "leaf_winmacnfs"), _T("network", "cifs_enable_encrypt_alert"), function(e, d, c) {
                if ("no" == e) {
                    b.reset()
                }
                if ("yes" == e) {
                    this.panel.getComponent("disable_op_lock").setValue(true)
                }
            }, this)
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService.NFS.IDMap");
Ext.define("SYNO.SDS.AdminCenter.FileService.NFS.IDMap.EditMapDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.principal = (a.principal) ? a.principal : null;
        this.userStore = this.createUserStore();
        this.panel = this.configForm();
        this.applyBtn = new SYNO.ux.Button({
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            btnStyle: "blue",
            text: _T("common", "apply"),
            handler: this.onApplyBtnClick,
            scope: this
        });
        this.cancelBtn = new SYNO.ux.Button({
            text: _T("common", "cancel"),
            btnStyle: "grey",
            handler: this.close,
            scope: this
        });
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("nfs", "nfs_create_static_mapping"),
            autoDestroy: true,
            width: 550,
            height: 200,
            layout: "fit",
            items: [this.panel],
            buttons: [this.applyBtn, this.cancelBtn]
        }, a);
        Ext.apply(b, a);
        this.callParent([b]);
        if (this.principal) {
            this.setTitle(_T("nfs", "nfs_edit_static_mapping"));
            this.panel.getForm().setValues(this.principal)
        }
    },
    configForm: function() {
        var a = {
            border: false,
            itemId: "formpanel",
            items: [{
                xtype: "syno_textfield",
                name: "kerberos_principal",
                itemId: "kerberos_principal",
                fieldLabel: _T("nfs", "nfs_krb5_principal"),
                allowBlank: false,
                width: 250,
                validator: function(b) {
                    if (0 > b.indexOf("=")) {
                        return true
                    } else {
                        return false
                    }
                }
            }, {
                xtype: "syno_combobox",
                name: "local_name",
                itemId: "local_name",
                fieldLabel: _T("app_privilege", "local_user"),
                store: this.userStore,
                displayField: "local_name",
                valueField: "local_name",
                triggerAction: "all",
                mode: "remote",
                editable: true,
                resizable: true,
                pageSize: SYNO.SDS.AdminCenter.USER_PAGING_SIZE,
                width: 250,
                grow: true,
                allowBlank: false,
                queryParam: "filter",
                listWidth: 300,
                maxHeight: 360,
                minChars: 1,
                typeAhead: true,
                typeAheadDelay: 1000,
                listeners: {
                    scope: this,
                    change: this.isValidUser,
                    blur: this.isValidUser
                }
            }]
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    onApplyBtnClick: function() {
        var a = this.panel.getComponent("local_name").getValue();
        if (!this.isValidUser(a) || !this.panel.getForm().isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        if (!this.panel.getForm().isDirty()) {
            this.close();
            return
        }
        this.applyHandler()
    },
    applyHandler: function() {
        var d = "";
        var c = {};
        var b = this.panel.getComponent("kerberos_principal").getValue();
        var a = this.panel.getComponent("local_name").getValue();
        if (!this.principal) {
            d = "create";
            c = {
                idmap: [{
                    kerberos_principal: b,
                    local_name: a
                }]
            }
        } else {
            d = "set";
            c = {
                id: this.principal.id,
                kerberos_principal: b,
                local_name: a
            }
        }
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.NFS.IDMap",
            method: d,
            params: c,
            version: 1,
            scope: this,
            callback: function(h, g, f) {
                this.clearStatusBusy();
                if (h) {
                    this.owner.idmapTab.idmapStore.reload();
                    this.close()
                } else {
                    if (2351 == g.code) {
                        this.setStatusError({
                            text: _T("nfs", "nfs_krb5_princ_conflict"),
                            clear: true
                        })
                    } else {
                        if (2353 == g.code) {
                            var e = _T("error", "error_bad_field");
                            this.setStatusError({
                                text: e,
                                clear: true
                            })
                        } else {
                            this.setStatusError({
                                text: _T("common", "commfail"),
                                clear: true
                            })
                        }
                    }
                }
            }
        })
    },
    isValidUser: function() {
        var b = false;
        var a = this.panel.getComponent("local_name").getValue();
        this.userStore.each(function(c) {
            if (a === c.get("local_name")) {
                b = true
            }
        }, this);
        if (!b) {
            this.panel.getComponent("local_name").markInvalid(_T("firewall", "firewall_field_blank_alert"))
        }
        return b
    },
    onActivate: function() {
        this.userStore.load({
            params: {
                offset: 0,
                limit: SYNO.SDS.AdminCenter.USER_PAGING_SIZE
            }
        })
    },
    createUserStore: function() {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.Core.FileServ.NFS.IDMap",
            method: "list",
            version: 1,
            root: "idmap",
            idProperty: "local_name",
            fields: ["local_name"],
            appWindow: this.findAppWindow() || false,
            autoDestroy: true,
            baseParams: {
                offset: 0,
                limit: this.pageSize,
                suggestion: true
            },
            sortInfo: {
                field: "local_name",
                direction: "ASC"
            },
            totalProperty: "total",
            listeners: {
                scope: this,
                beforeload: this.onBeforeLoad,
                exception: this.onException,
                load: this.onLoad
            }
        });
        return a
    },
    onBeforeLoad: function() {
        this.setStatusBusy()
    },
    onException: function() {
        this.clearStatusBusy();
        this.setStatusError({
            text: _T("common", "commfail"),
            clear: true
        })
    },
    onLoad: function() {
        this.clearStatusBusy()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService.NFS.Kerberos");
Ext.define("SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.KeyUploadDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.applyBtn = new SYNO.ux.Button({
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            btnStyle: "blue",
            text: _T("common", "apply"),
            handler: this.onApplyBtnClick,
            scope: this
        });
        this.cancelBtn = new SYNO.ux.Button({
            text: _T("common", "cancel"),
            btnStyle: "grey",
            handler: this.close,
            scope: this
        });
        this.panel = this.configForm();
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("nfs", "nfs_kerberos_import_keys"),
            autoDestroy: true,
            width: 500,
            height: 200,
            layout: "fit",
            items: [this.panel],
            buttons: [this.applyBtn, this.cancelBtn]
        }, a);
        Ext.apply(b, a);
        this.callParent([b])
    },
    configForm: function() {
        var a = {
            border: false,
            itemId: "formpanel",
            fileUpload: true,
            trackResetOnLoad: true,
            labelWidth: 130,
            items: [{
                xtype: "syno_displayfield",
                value: _T("nfs", "nfs_select_import_key")
            }, {
                xtype: "syno_filebutton",
                name: "keytab_file",
                fieldLabel: _T("nfs", "nfs_kerberos_keys")
            }],
            webapi: {
                api: "SYNO.Core.FileServ.NFS.Kerberos",
                method: "upload_key",
                version: 1
            },
            onApiSuccess: function() {
                this.ownerCt.owner.kerberosTab.keyStore.reload();
                this.ownerCt.clearStatusBusy();
                this.ownerCt.close()
            },
            onApiFailure: function(e, d, c) {
                var b = SYNO.API.getErrorString(d);
                this.ownerCt.clearStatusBusy();
                this.ownerCt.setStatusError({
                    text: b,
                    clear: true
                })
            }
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    onApplyBtnClick: function() {
        if (!this.panel.getForm().findField("keytab_file").getValue()) {
            this.setStatusError({
                text: _T("service", "service_ssl_no_file")
            });
            return
        }
        if (0 < this.owner.kerberosTab.keyStore.getCount()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("nfs", "nfs_key_overwrite_confirm"), function(a) {
                if ("yes" === a) {
                    this.setStatusBusy({
                        text: _T("common", "saving")
                    });
                    this.panel.upload()
                }
            }, this)
        } else {
            this.setStatusBusy({
                text: _T("common", "saving")
            });
            this.panel.upload()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.IdmapTab", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.idmapStore = this.createIdmapStore();
        this.defaultMapDialog = null;
        var b = {
            title: _T("nfs", "nfs_static_mapping"),
            store: this.idmapStore,
            header: false,
            disabled: true,
            height: 450,
            enableColumnMove: false,
            enableHdMenu: false,
            autoExpandColumn: "kerberos_principal",
            colModel: new Ext.grid.ColumnModel({
                defaults: {
                    sortable: true
                },
                columns: [{
                    id: "kerberos_principal",
                    header: _T("nfs", "nfs_krb5_principal"),
                    dataIndex: "kerberos_principal",
                    align: "center",
                    width: 50,
                    renderer: Ext.util.Format.htmlEncode
                }, {
                    id: "local_name",
                    header: _T("app_privilege", "local_user"),
                    dataIndex: "local_name",
                    align: "center",
                    width: 300,
                    renderer: Ext.util.Format.htmlEncode
                }]
            }),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: {
                        fn: this.onSelectionChange,
                        buffer: 50,
                        scope: this
                    }
                }
            }),
            tbar: {
                items: [{
                    xtype: "syno_button",
                    text: _T("common", "create"),
                    itemId: "addBtn",
                    menu: new SYNO.ux.Menu({
                        items: [{
                            text: _T("nfs", "nfs_static_mapping"),
                            scope: this,
                            handler: this.onCreateMapBtnClick
                        }, {
                            text: _T("nfs", "nfs_default_map_list"),
                            scope: this,
                            handler: this.onDefaultMapBtnClick
                        }]
                    })
                }, {
                    xtype: "syno_button",
                    text: _T("common", "alt_edit"),
                    itemId: "editBtn",
                    disabled: true,
                    scope: this,
                    handler: this.onEditMapBtnClick
                }, {
                    xtype: "syno_button",
                    text: _T("common", "delete"),
                    itemId: "delBtn",
                    disabled: true,
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    scope: this,
                    handler: this.onDelMapBtnClick
                }, "->", new SYNO.ux.TextFilter({
                    iconStyle: "filter",
                    itemId: "search",
                    store: this.idmapStore,
                    queryAction: "list",
                    enumAction: "list",
                    queryParam: "filter",
                    pageSize: SYNO.SDS.AdminCenter.USER_PAGING_SIZE
                })]
            },
            listeners: {
                scope: this,
                activate: {
                    fn: function() {
                        this.idmapStore.load()
                    }
                }
            },
            bbar: new SYNO.ux.PagingToolbar({
                store: this.idmapStore,
                pageSize: SYNO.SDS.AdminCenter.USER_PAGING_SIZE,
                displayInfo: true
            })
        };
        Ext.apply(b, a);
        SYNO.LayoutConfig.fill(b);
        this.callParent([b])
    },
    onCreateMapBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.NFS.IDMap.EditMapDialog({
            module: this.module,
            owner: this.owner,
            principal: null
        });
        a.open()
    },
    onEditMapBtnClick: function() {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.SDS.AdminCenter.FileService.NFS.IDMap.EditMapDialog({
            module: this.module,
            owner: this.owner,
            principal: a.data
        });
        b.open()
    },
    onDefaultMapBtnClick: function() {
        this.defaultMapDialog = new SYNO.SDS.UserChooser({
            owner: this.ownerCt.ownerCt,
            module: this.module,
            title: _T("nfs", "nfs_default_map_list"),
            setStoreConfig: function() {
                return {
                    api: "SYNO.Core.FileServ.NFS.IDMap",
                    method: "list",
                    version: "1",
                    id: "id",
                    root: "idmap"
                }
            },
            setApiParams: function() {
                return {
                    suggestion: true
                }
            },
            setStoreField: function() {
                return ["id", "kerberos_principal", "local_name"]
            },
            setColModel: function() {
                return [{
                    id: "kerberos_principal",
                    header: _T("nfs", "nfs_krb5_principal"),
                    dataIndex: "kerberos_principal",
                    width: 200
                }, {
                    id: "description",
                    header: _T("app_privilege", "local_user"),
                    dataIndex: "local_name",
                    width: 150
                }]
            },
            setTextFilterConfig: function() {
                return {
                    queryAction: "list",
                    queryParam: "filter"
                }
            },
            setGridPanelConfig: function() {
                return {
                    autoExpandColumn: "kerberos_principal"
                }
            },
            singleSelect: false,
            localOnly: true
        });
        this.mon(this.defaultMapDialog, "beforeclose", this.onBeforeCloseDefaultMap, this);
        this.defaultMapDialog.chooseUsers()
    },
    onBeforeCloseDefaultMap: function(b) {
        var d = [];
        var c = b.getRecords();
        if (0 === c.length) {
            return true
        }
        for (var a = 0; a < c.length; a++) {
            d.push({
                kerberos_principal: c[a].data.kerberos_principal,
                local_name: c[a].data.local_name
            })
        }
        b.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.NFS.IDMap",
            method: "create",
            params: {
                idmap: d
            },
            version: 1,
            scope: this,
            callback: function(g, f, e) {
                this.defaultMapDialog.clearStatusBusy();
                if (g) {
                    this.idmapStore.reload();
                    this.mun(this.defaultMapDialog, "beforeclose", this.onBeforeCloseDefaultMap, this);
                    this.defaultMapDialog.close()
                } else {
                    if (2351 == f.code) {
                        this.deselectConflictPrincipals(f.errors.principal_conflict)
                    }
                }
            }
        });
        return false
    },
    deselectConflictPrincipals: function(a) {
        var e = this.defaultMapDialog.grid.getSelectionModel();
        var b = this.defaultMapDialog.userStore;
        for (var c = 0; c < b.getCount(); c++) {
            if (e.isSelected(c)) {
                var d = b.getAt(c);
                if (-1 != a.indexOf(d.get("kerberos_principal"))) {
                    e.deselectRow(c)
                }
            }
        }
        this.module.appWin.getMsgBox().alert(this.defaultMapDialog.title, _T("nfs", "nfs_krb5_princ_conflict"))
    },
    createIdmapStore: function() {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.Core.FileServ.NFS.IDMap",
            method: "list",
            version: 1,
            root: "idmap",
            fields: ["id", "kerberos_principal", "local_name"],
            appWindow: this.findAppWindow() || false,
            defaultSortable: true,
            listeners: {
                scope: this,
                beforeload: this.onBeforeLoad,
                load: this.onLoad,
                exception: this.onException
            }
        });
        return a
    },
    onBeforeLoad: function() {
        this.owner.setStatusBusy()
    },
    onLoad: function() {
        this.owner.clearStatusBusy()
    },
    onException: function() {
        this.owner.clearStatusBusy();
        var a = _T("common", "commfail");
        this.owner.getMsgBox().alert(this.owner.title, a);
        this.idmapStore.loadData({}, false)
    },
    onSelectionChange: function() {
        var a = this.getTopToolbar();
        var b = this.getSelectionModel().getCount();
        a.getComponent("editBtn").setDisabled(1 != b);
        a.getComponent("delBtn").setDisabled(0 >= b || !!this._S("demo_mode"))
    },
    onDelMapBtnClick: function() {
        this.module.appWin.getMsgBox().confirmDelete(this.title, _T("nfs", "nfs_idmap_delete_confirm_desc"), function(a) {
            if (a === "yes") {
                this.doDelete()
            }
        }, this)
    },
    doDelete: function() {
        var b = [];
        var c = this.getSelectionModel().getSelections();
        for (var a = 0; a < c.length; a++) {
            b.push(c[a].id)
        }
        this.owner.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.NFS.IDMap",
            method: "delete",
            version: 1,
            scope: this,
            params: {
                id: b
            },
            callback: function(f, e, d) {
                this.owner.clearStatusBusy();
                if (f) {
                    this.deleteDone()
                }
            }
        })
    },
    deleteDone: function() {
        this.idmapStore.load()
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.KeyTab", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.keyStore = this.createKeyStore();
        var b = {
            title: _T("nfs", "nfs_kerberos_keys"),
            store: this.keyStore,
            header: false,
            height: 450,
            enableColumnMove: false,
            enableHdMenu: false,
            autoExpandColumn: "kerberos_principal",
            colModel: new Ext.grid.ColumnModel({
                columns: [{
                    id: "version",
                    header: _T("nfs", "nfs_key_version"),
                    dataIndex: "version",
                    align: "center",
                    width: 50
                }, {
                    id: "kerberos_principal",
                    header: _T("nfs", "nfs_krb5_principal"),
                    dataIndex: "kerberos_principal",
                    align: "center",
                    width: 300
                }, {
                    id: "enc_type",
                    header: _T("nfs", "nfs_key_encrypt"),
                    dataIndex: "enc_type",
                    align: "center",
                    width: 200
                }]
            }),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            listeners: {
                scope: this,
                activate: {
                    fn: function() {
                        this.keyStore.load()
                    }
                }
            },
            tbar: {
                items: [{
                    xtype: "syno_button",
                    text: _T("nfs", "nfs_kerberos_import_keys"),
                    itemId: "keyImportBtn",
                    scope: this,
                    handler: this.onImportBtnClick
                }]
            }
        };
        Ext.apply(b, a);
        SYNO.LayoutConfig.fill(b);
        this.callParent([b])
    },
    onBeforeLoad: function() {
        this.owner.setStatusBusy()
    },
    onLoad: function() {
        this.owner.clearStatusBusy();
        if (0 < this.owner.kerberosTab.keyStore.getCount()) {
            this.owner.idmapTab.enable()
        }
    },
    onException: function() {
        this.owner.clearStatusBusy();
        var a = _T("common", "commfail");
        this.owner.getMsgBox().alert(this.owner.title, a);
        this.keyStore.loadData({}, false)
    },
    onImportBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.KeyUploadDialog({
            module: this.module,
            owner: this.owner
        });
        a.open()
    },
    createKeyStore: function(a) {
        var b = new SYNO.API.JsonStore({
            api: "SYNO.Core.FileServ.NFS.Kerberos",
            method: "list",
            version: 1,
            root: "keytab",
            fields: ["version", "kerberos_principal", "enc_type"],
            appWindow: this.findAppWindow() || false,
            defaultSortable: true,
            listeners: {
                scope: this,
                beforeload: this.onBeforeLoad,
                load: this.onLoad,
                exception: this.onException
            }
        });
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.MainDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.kerberosTab = new SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.KeyTab({
            owner: this,
            itemId: "keyTab",
            module: this.module
        });
        this.idmapTab = new SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.IdmapTab({
            owner: this,
            itemId: "idmapTab",
            module: this.module
        });
        var b = Ext.apply({
            title: _T("nfs", "nfs_kerberos_setting"),
            autoDestroy: true,
            width: 670,
            height: 500,
            autoHeight: true,
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                itemId: "tabs",
                plain: true,
                activeTab: 0,
                items: [this.kerberosTab, this.idmapTab]
            }],
            buttons: [{
                text: _T("common", "alt_finish"),
                scope: this,
                handler: this.close
            }]
        }, a);
        Ext.apply(b, a);
        this.callParent([b])
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.FileService.NFS");
Ext.define("SYNO.SDS.AdminCenter.FileService.NFS.AdvancedSettingsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.panel = this.configForm();
        this.nfs_enable = a.nfs_enable;
        var b = Ext.apply({
            title: _T("common", "adv_setting"),
            width: 600,
            border: false,
            autoHeight: true,
            layout: "fit",
            resizable: true,
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "commit"),
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.panel.mon(this.panel.getForm().findField("custom_port_enable"), "check", function(c, d) {
            this.panel.getForm().findField("statd_port").setDisabled(!d);
            this.panel.getForm().findField("nlm_port").setDisabled(!d)
        }, this)
    },
    onOpen: function() {
        var a = [{
            api: "SYNO.Core.FileServ.NFS.AdvancedSetting",
            method: "get",
            version: 1,
            params: {}
        }, {
            api: "SYNO.Core.FileServ.NFS.Kerberos",
            method: "get",
            version: 1,
            params: {}
        }];
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: a
            },
            params: {},
            scope: this,
            callback: function(d, c, b) {
                this.clearStatusBusy();
                if (d) {
                    this.panel.getForm().setValues(c);
                    this.afterLoad(c)
                } else {
                    this.module.appWin.getMsgBox().alert(_T("tree", "leaf_nfs"), _T("common", "error_system"))
                }
            }
        });
        this.callParent([arguments])
    },
    configForm: function(a) {
        this.packetSizeStore = this.createLocalStore();
        var b = {
            title: _T("tree", "leaf_nfs"),
            autoScroll: true,
            autoHeight: true,
            itemId: "nfsFieldset",
            items: [{
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_checkbox",
                name: "unix_pri_enable",
                indent: 1,
                boxLabel: _T("common", "apply_default_umask")
            }, {
                xtype: "syno_checkbox",
                name: "custom_port_enable",
                indent: 1,
                boxLabel: _T("nfs", "nfs_custom_port")
            }, {
                xtype: "syno_numberfield",
                name: "statd_port",
                itemId: "statd_port",
                indent: 1,
                fieldLabel: _T("nfs", "nfs_statd_port"),
                validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("statd_port"),
                maxlength: 5,
                vtype: "port"
            }, {
                xtype: "syno_numberfield",
                name: "nlm_port",
                itemId: "nlm_port",
                indent: 1,
                validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("nlm_port"),
                fieldLabel: _T("nfs", "nfs_nlm_port"),
                maxlength: 5,
                vtype: "port"
            }, {
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("nfs", "nfs_prefer_rw_size_desc")
            }, {
                xtype: "syno_combobox",
                name: "read_size",
                fieldLabel: _T("nfs", "nfs_prefer_read_size"),
                displayField: "display",
                valueField: "value",
                value: this.rgPacketSize[1][0],
                indent: 1,
                store: this.packetSizeStore
            }, {
                xtype: "syno_combobox",
                name: "write_size",
                fieldLabel: _T("nfs", "nfs_prefer_write_size"),
                displayField: "display",
                valueField: "value",
                value: this.rgPacketSize[1][0],
                indent: 1,
                store: this.packetSizeStore
            }, {
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                name: "krb5_desc",
                itemId: "krb5_desc",
                indent: 1,
                value: _T("nfs", "nfs_kerberos_desc"),
                hidden: true
            }, {
                xtype: "syno_button",
                synotype: "indent_no_label",
                name: "krb5_btn",
                itemId: "krb5_btn",
                text: _T("nfs", "nfs_kerberos_setting"),
                indent: 1,
                id: this.nfsKrb5SetId = Ext.id(),
                handler: this.onNfsKerberosBtnClick,
                hidden: true,
                scope: this
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("nfs", "nfs_krb5_principal"),
                name: "kerberos_principal",
                itemId: "krb5_principal",
                hidden: true,
                indent: 1
            }, {
                xtype: "displayfield",
                height: 10
            }]
        };
        return new SYNO.SDS.Utils.FormPanel(b)
    },
    afterLoad: function(f) {
        var b = {
            api: "SYNO.Core.FileServ.NFS.AdvancedSetting",
            method: "get",
            version: 1
        };
        var d = {
            api: "SYNO.Core.FileServ.NFS.Kerberos",
            method: "get",
            version: 1
        };
        for (var e = 0; e < f.result.length; e++) {
            if (true === SYNO.ux.Utils.checkApiConsistency(b, f.result[e])) {
                this.panel.getForm().setValues(f.result[e].data);
                var a = this.panel.getForm().findField("custom_port_enable").getValue();
                this.ori_customPortEnable = a;
                this.ori_statd_port = f.result[e].data.statd_port;
                this.ori_nlm_port = f.result[e].data.nlm_port;
                this.panel.getForm().findField("statd_port").setDisabled(!a);
                this.panel.getForm().findField("nlm_port").setDisabled(!a)
            } else {
                if (true === SYNO.ux.Utils.checkApiConsistency(d, f.result[e])) {
                    if (true === f.result[e].data.kerberos_support) {
                        var c = this.getComponent("nfsFieldset");
                        c.getComponent("krb5_desc").show();
                        c.getComponent("krb5_btn").show();
                        if ("" !== f.result[e].data.kerberos_principal) {
                            c.getComponent("krb5_principal").show();
                            this.panel.getForm().setValues({
                                kerberos_principal: f.result[e].data.kerberos_principal
                            })
                        }
                    }
                }
            }
        }
    },
    onNfsKerberosBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.MainDialog({
            module: this.module,
            owner: this.module.appWin
        });
        a.open()
    },
    createLocalStore: function() {
        this.rgPacketSize = [
            [4096, "4KB"],
            [8192, "8KB"],
            [16384, "16KB"],
            [32768, "32KB"]
        ];
        var a = new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: this.rgPacketSize
        });
        return a
    },
    checkPortConfict: function(a) {
        if (a.findField("statd_port").getValue() === a.findField("nlm_port").getValue()) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_nfs"), _T("error", "error_port_conflict"));
            return false
        }
        return true
    },
    apply: function() {
        var a = this.panel.getForm();
        var b = a.getValues();
        b.enable_nfs = this.nfs_enable;
        if (!a.isValid()) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "forminvalid"));
            return
        }
        if (!a.isDirty()) {
            this.close();
            return
        }
        if (b.custom_port_enable) {
            if (!this.checkPortConfict(a)) {
                return
            }
        }
        if (this.nfs_enable && ((b.custom_port_enable != this.ori_customPortEnable) || (b.statd_port != this.ori_statd_port) || (b.nlm_port != this.ori_nlm_port))) {
            this.confirmSubmit(b)
        } else {
            this.submit(b)
        }
        return
    },
    confirmSubmit: function(a) {
        this.getMsgBox().confirm(_T("tree", "leaf_winmacnfs"), _T("network", "service_restart_warning") + " " + _T("common", "ask_cont"), function(d, c, b) {
            if ("yes" == d) {
                this.submit(a)
            }
        }, this)
    },
    submit: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.NFS.AdvancedSetting",
            method: "set",
            version: 1,
            scope: this,
            params: a,
            callback: function(d, c, b) {
                this.clearStatusBusy();
                if (d) {
                    this.close();
                    return true
                } else {
                    this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(c.code))
                }
            }
        })
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService");
Ext.define("SYNO.SDS.AdminCenter.FileService.TMshareComboBox", {
    extend: "SYNO.ux.ComboBox",
    reset: function() {
        this.callParent();
        if (true !== this.validator(this.getValue())) {
            this.markInvalid(_T("error", "error_noshare"))
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.WinMacNfsTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        this.nfsApiMaxVersion = this.getKnownAPI("SYNO.Core.FileServ.NFS").maxVersion;
        var b = this.fillConfig(a);
        var c = this.getKnownAPI("SYNO.Core.FileServ.SMB");
        this.pgsqlEnabled = false;
        this.domainEnabled = false;
        this.callParent([b]);
        this.winHelpBox = Ext.getCmp(this.winHelpBox);
        this.macHelpBox = Ext.getCmp(this.macHelpBox);
        this.on("afterlayout", function(d, e) {
            if (1 === c.maxVersion) {
                this.checkEnableSamba = new SYNO.ux.Utils.EnableCheckGroup(d.getForm(), "enable_samba", ["enable_smb2_and_large_mtu", "smb_transfer_log_enable", "disable_shadow_copy"])
            } else {
                if (2 === c.maxVersion) {
                    this.checkEnableSamba = new SYNO.ux.Utils.EnableCheckGroup(d.getForm(), "enable_samba", ["enable_smb2", "smb_transfer_log_enable", "disable_shadow_copy"])
                } else {
                    this.checkEnableSamba = new SYNO.ux.Utils.EnableCheckGroup(d.getForm(), "enable_samba", ["smb_transfer_log_enable", "disable_shadow_copy"])
                }
            }
            d.mon(d.getForm().findField("enable_samba"), "check", function(g, i) {
                if (2 === c.maxVersion) {
                    var h = this.getForm().findField("enable_smb2").getValue();
                    this.getForm().findField("enable_large_mtu").setDisabled(!(!!i && !!h))
                }
                this.getComponent("winFieldset").getComponent("advanceBtnId").setDisabled(!i);
                this.setWinHelpBoxVisible(i)
            }, this);
            d.mon(d.getForm().findField("enable_afp"), "check", function(g, h) {
                this.setMacHelpBoxVisible(h);
                this.getComponent("macFieldset").getComponent("advanceBtnId").setDisabled(!h)
            }, this);
            if (2 == this.nfsApiMaxVersion) {
                d.mon(d.getForm().findField("enable_nfs"), "check", function(g, h) {
                    this.getComponent("nfsFieldset").getComponent("NfsadvanceBtnId").setDisabled(!h)
                }, this)
            }
            this.checkEnableNFSV4 = new SYNO.ux.Utils.EnableCheckGroup(d.getForm(), "enable_nfs_v4", ["nfs_v4_domain"]);
            var f = ["enable_nfs_v4"];
            if (2 > this.nfsApiMaxVersion) {
                f = ["enable_nfs_v4", "read_size", "write_size", this.nfsKrb5SetId, "unix_pri_enable"]
            }
            this.checkEnableNFS = new SYNO.ux.Utils.EnableCheckGroup(d.getForm(), "enable_nfs", f);
            this.checkEnableAFP = new SYNO.ux.Utils.EnableCheckGroup(d.getForm(), "enable_afp", ["time_machine"]);
            if (this._D("support_share_snapshot", "no") === "no" || this._D("support_btrfs", "no") === "no") {
                d.getForm().findField("disable_shadow_copy").hide()
            }
        }, this, {
            single: true
        })
    },
    setWinHelpBoxVisible: function(a) {
        this.winHelpBox.setVisible(a);
        this.doLayout()
    },
    setMacHelpBoxVisible: function(a) {
        this.macHelpBox.setVisible(a);
        this.doLayout()
    },
    fillConfig: function(a) {
        var b;
        if (2 > this.nfsApiMaxVersion) {
            b = this.createNfsTabObj(a)
        } else {
            if (2 == this.nfsApiMaxVersion) {
                b = this.createNfsTabObjV2(a)
            }
        }
        var c = {
            title: _T("tree", "leaf_winmacnfs"),
            autoScroll: true,
            items: [this.createWinTabObj(a), this.createMacTabObj(a), b]
        };
        Ext.apply(c, a);
        return c
    },
    createWinTabObj: function(a) {
        var c = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::win::win",
            title: _T("network", "wnds_file_service"),
            webapi: {
                api: "SYNO.Core.FileServ.SMB",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            itemId: "winFieldset",
            collapsible: true,
            items: [{
                xtype: "syno_checkbox",
                name: "enable_samba",
                itemId: "enable_samba",
                boxLabel: _T("network", "samba_enable")
            }, {
                xtype: "syno_textfield",
                indent: 1,
                style: "text-transform: uppercase;",
                itemId: "workgroup",
                name: "workgroup",
                fieldLabel: _T("network", "wnds_group"),
                vtype: "workgroup",
                maxlength: 15,
                allowBlank: false
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                name: "enable_smb2_and_large_mtu",
                boxLabel: _T("network", "cifs_smb2_large_mtu_enable")
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                name: "disable_shadow_copy",
                boxLabel: _T("network", "smb_disable_shadow_copy")
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                itemId: "smb_transfer_log_enable",
                name: "smb_transfer_log_enable",
                boxLabel: _T("service", "service_smb_transfer_log"),
                listeners: {
                    check: {
                        scope: this,
                        fn: this.onLogCheckHandler
                    },
                    enable: {
                        scope: this,
                        fn: function() {
                            var g = this.getKnownAPI("SYNO.Core.FileServ.SMB");
                            if (3 <= g.maxVersion) {
                                var f = this.getComponent("winFieldset");
                                var e = f.getComponent("smbLogBtn");
                                e.setDisabled(false)
                            }
                        }
                    },
                    disable: {
                        scope: this,
                        fn: function() {
                            var g = this.getKnownAPI("SYNO.Core.FileServ.SMB");
                            if (3 <= g.maxVersion) {
                                var f = this.getComponent("winFieldset");
                                var e = f.getComponent("smbLogBtn");
                                e.setDisabled(true)
                            }
                        }
                    }
                }
            }, {
                xtype: "syno_button",
                btnStyle: "default",
                itemId: "smbLogBtn",
                name: "smbLogBtn",
                text: _T("log", "log_subtitle"),
                autoWidth: true,
                indent: 2,
                handler: function() {
                    SYNO.SDS.AppLaunch("SYNO.SDS.LogCenter.Instance", {
                        logType: "fileTransfer",
                        protocol: "smbxfer"
                    })
                }
            }, {
                xtype: "displayfield",
                height: 4
            }, {
                xtype: "syno_button",
                btnStyle: "default",
                name: "advanceBtnId",
                itemId: "advanceBtnId",
                text: _T("common", "adv_setting"),
                autoWidth: true,
                indent: 1,
                scope: this,
                handler: this.onSmbAdvSettingBtnClick
            }, {
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                fieldLabel: "Note",
                hideLabel: true,
                indent: 1,
                value: '<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + String.format(_T("share", "share_recycle_bin_win_desc"), '<a id="' + Ext.id() + '" class="link-font" href="javascript: void(0)">' + _T("helptoc", "share") + "</a>"),
                listeners: {
                    render: function(f) {
                        var e = f.el.first("a");
                        if (e) {
                            this.mon(e, "click", function() {
                                SYNO.SDS.AdminCenter.FileService.WinMacNfsTab.Utils.onClickShareUrl(this.module.appWin)
                            }, this)
                        }
                    },
                    scope: this,
                    single: true,
                    buffer: 80
                }
            }, {
                xtype: "box",
                hidden: "true",
                id: this.winHelpBox = Ext.id(),
                tpl: new Ext.XTemplate('<div class="syno_fileservice_container"><div><div class="description normal-font">' + _T("network", "share_access_prompt") + '</div><div class="content"><span class="title normal-font">' + _T("network", "share_access_prompt_pc") + " (" + _T("network", "windows_explorer") + '):</span><span class="info allowDefCtxMenu link-font">&#92;&#92;{hostname}</span></div><div class="content"><span class="title normal-font">' + _T("network", "share_access_prompt_mac") + " (" + _T("network", "mac_finder") + '):</span><span class="info allowDefCtxMenu link-font">smb://{hostname}</span></div></div></div>')
            }]
        };
        var d = this.getKnownAPI("SYNO.Core.FileServ.SMB");
        if (2 === d.maxVersion) {
            var b = [{
                xtype: "syno_checkbox",
                indent: 1,
                name: "enable_smb2",
                boxLabel: _T("network", "cifs_smb2_enable"),
                listeners: {
                    scope: this,
                    check: function(h, g) {
                        var e = this.getForm().findField("enable_samba").getValue();
                        var f = this.getForm().findField("enable_large_mtu");
                        f.setDisabled(!(g && e))
                    }
                }
            }, {
                xtype: "syno_checkbox",
                indent: 2,
                name: "enable_large_mtu",
                boxLabel: _T("network", "cifs_large_mtu_enable")
            }];
            Array.prototype.splice.apply(c.items, [2, 1].concat(b));
            c.webapi = {
                api: "SYNO.Core.FileServ.SMB",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 2
            }
        } else {
            if (3 === d.maxVersion) {
                Array.prototype.splice.apply(c.items, [2, 1].concat());
                c.webapi = {
                    api: "SYNO.Core.FileServ.SMB",
                    methods: {
                        get: "get",
                        set: "set"
                    },
                    version: 3
                }
            }
        }
        return c
    },
    createMacTabObj: function(a) {
        this.shareStore = new Ext.data.JsonStore({
            idProperty: "name",
            root: "shares",
            fields: ["name", "display"],
            totalProperty: "total"
        });
        var b = new SYNO.SDS.AdminCenter.FileService.TMshareComboBox({
            indent: 1,
            name: "time_machine",
            itemId: "time_machine",
            fieldLabel: _T("network", "network_time_machine"),
            displayField: "display",
            valueField: "name",
            emptyText: _T("system", "none_opt"),
            store: this.shareStore,
            validator: this.isTMShareValid
        });
        var c = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::win::mac",
            collapsible: true,
            itemId: "macFieldset",
            title: _T("network", "apple_subject"),
            webapi: {
                api: "SYNO.Core.FileServ.AFP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_checkbox",
                itemId: "enable_afp",
                name: "enable_afp",
                boxLabel: _T("network", "apple_enable")
            }, b, {
                xtype: "syno_button",
                btnStyle: "default",
                name: "advanceBtnId",
                itemId: "advanceBtnId",
                text: _T("common", "adv_setting"),
                indent: 1,
                scope: this,
                handler: this.onAfpAdvSettingBtnClick
            }, {
                xtype: "displayfield",
                height: 5
            }, {
                xtype: "box",
                hidden: "true",
                id: this.macHelpBox = Ext.id(),
                tpl: new Ext.XTemplate('<div class="syno_fileservice_container"><div><div class="description normal-font">' + _T("network", "share_access_prompt") + '</div><div class="content"><span class="title normal-font">' + _T("network", "share_access_prompt_mac") + " (" + _T("network", "mac_finder") + '):</span><span class="info allowDefCtxMenu link-font">afp://{hostname}.local</span></div></div></div>')
            }, {
                xtype: "syno_displayfield",
                height: 20
            }, {
                xtype: "syno_checkbox",
                name: "enable_bonjour_support",
                boxLabel: _T("network", "bonjourPrinter_enable")
            }]
        };
        return c
    },
    createNfsTabObj: function(a) {
        this.packetSizeStore = this.createLocalStore();
        var b = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::win::nfs",
            collapsible: true,
            title: _T("nfs", "nfs_title"),
            webapi: {
                api: "SYNO.Core.FileServ.NFS",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            itemId: "nfsFieldset",
            items: [{
                xtype: "syno_displayfield",
                value: _T("nfs", "nfs_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_nfs",
                itemId: "enable_nfs",
                boxLabel: _T("nfs", "nfs_enable")
            }, {
                xtype: "syno_checkbox",
                name: "enable_nfs_v4",
                indent: 1,
                boxLabel: _T("nfs", "nfs_enable_version_4")
            }, {
                xtype: "syno_textfield",
                name: "nfs_v4_domain",
                itemId: "nfs_v4_domain",
                indent: 2,
                fieldLabel: _T("nfs", "nfs_v4_domain"),
                width: 200,
                maxlength: 512,
                vtype: "hostname"
            }, {
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_checkbox",
                name: "unix_pri_enable",
                indent: 1,
                boxLabel: _T("common", "apply_default_umask")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("nfs", "nfs_prefer_rw_size_desc")
            }, {
                xtype: "syno_combobox",
                name: "read_size",
                fieldLabel: _T("nfs", "nfs_prefer_read_size"),
                displayField: "display",
                valueField: "value",
                value: this.rgPacketSize[1][0],
                indent: 1,
                store: this.packetSizeStore
            }, {
                xtype: "syno_combobox",
                name: "write_size",
                fieldLabel: _T("nfs", "nfs_prefer_write_size"),
                displayField: "display",
                valueField: "value",
                value: this.rgPacketSize[1][0],
                indent: 1,
                store: this.packetSizeStore
            }, {
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                name: "krb5_desc",
                itemId: "krb5_desc",
                indent: 1,
                value: _T("nfs", "nfs_kerberos_desc"),
                hidden: true
            }, {
                xtype: "syno_button",
                synotype: "indent_no_label",
                name: "krb5_btn",
                itemId: "krb5_btn",
                text: _T("nfs", "nfs_kerberos_setting"),
                indent: 1,
                id: this.nfsKrb5SetId = Ext.id(),
                handler: this.onNfsKerberosBtnClick,
                hidden: true,
                scope: this
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("nfs", "nfs_krb5_principal"),
                name: "kerberos_principal",
                itemId: "krb5_principal",
                hidden: true,
                indent: 1
            }, {
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: '<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + String.format(_T("nfs", "nfs_share_permission_desc"), '<a id="' + Ext.id() + '" class="link-font" href="javascript: void(0)">' + _T("helptoc", "share") + "</a>"),
                listeners: {
                    render: function(d) {
                        var c = d.el.first("a");
                        if (c) {
                            this.mon(c, "click", function() {
                                SYNO.SDS.AdminCenter.FileService.WinMacNfsTab.Utils.onClickShareUrl(this.module.appWin)
                            }, this)
                        }
                    },
                    scope: this,
                    single: true,
                    buffer: 80
                }
            }]
        };
        return b
    },
    createNfsTabObjV2: function(a) {
        var b = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::win::nfs",
            collapsible: true,
            title: _T("nfs", "nfs_title"),
            webapi: {
                api: "SYNO.Core.FileServ.NFS",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 2
            },
            itemId: "nfsFieldset",
            items: [{
                xtype: "syno_displayfield",
                value: _T("nfs", "nfs_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_nfs",
                itemId: "enable_nfs",
                boxLabel: _T("nfs", "nfs_enable")
            }, {
                xtype: "syno_checkbox",
                name: "enable_nfs_v4",
                indent: 1,
                boxLabel: _T("nfs", "nfs_enable_version_4")
            }, {
                xtype: "syno_textfield",
                name: "nfs_v4_domain",
                itemId: "nfs_v4_domain",
                indent: 2,
                fieldLabel: _T("nfs", "nfs_v4_domain"),
                width: 200,
                maxlength: 512,
                vtype: "hostname"
            }, {
                xtype: "displayfield",
                height: 4
            }, {
                xtype: "syno_button",
                btnStyle: "default",
                name: "NfsadvanceBtnId",
                itemId: "NfsadvanceBtnId",
                text: _T("common", "adv_setting"),
                autoWidth: true,
                indent: 1,
                scope: this,
                handler: this.onNfsAdvSettingBtnClick
            }, {
                xtype: "displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: '<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + String.format(_T("nfs", "nfs_share_permission_desc"), '<a id="' + Ext.id() + '" class="link-font" href="javascript: void(0)">' + _T("helptoc", "share") + "</a>"),
                listeners: {
                    render: function(d) {
                        var c = d.el.first("a");
                        if (c) {
                            this.mon(c, "click", function() {
                                SYNO.SDS.AdminCenter.FileService.WinMacNfsTab.Utils.onClickShareUrl(this.module.appWin)
                            }, this)
                        }
                    },
                    scope: this,
                    single: true,
                    buffer: 80
                }
            }]
        };
        return b
    },
    selectHelpText: function(d, c) {
        var a = c.ownerDocument.createRange();
        a.selectNode(c.firstChild);
        var b = window.getSelection();
        b.removeAllRanges();
        b.addRange(a)
    },
    onSmbAdvSettingBtnClick: function() {
        var b = this.getKnownAPI("SYNO.Core.FileServ.SMB").maxVersion;
        var a = new SYNO.SDS.AdminCenter.FileService.SMB.AdvancedSettingDialog({
            module: this.module,
            owner: this.module.appWin,
            smbApiMaxVersion: b
        });
        a.open()
    },
    onAfpAdvSettingBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.AFP.AdvancedSettingDialog({
            module: this.module,
            owner: this.module.appWin
        });
        a.open()
    },
    onNfsKerberosBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.NFS.Kerberos.MainDialog({
            module: this.module,
            owner: this.module.appWin
        });
        a.open()
    },
    onNfsAdvSettingBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.NFS.AdvancedSettingsDialog({
            nfs_enable: this.getForm().findField("enable_nfs").getValue(),
            module: this.module,
            owner: this.module.appWin
        });
        a.open()
    },
    createLocalStore: function() {
        this.rgPacketSize = [
            [4096, "4KB"],
            [8192, "8KB"],
            [16384, "16KB"],
            [32768, "32KB"]
        ];
        var a = new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: this.rgPacketSize
        });
        return a
    },
    onBeforeRequest: function(a) {
        return true
    },
    processParams: function(c, b) {
        var a = {};
        if ("set" == c) {
            a = this.getForm().getValues();
            if (this.getForm().findField("smb_transfer_log_enable").isDirty()) {
                b = b.concat({
                    api: "SYNO.Core.SyslogClient.FileTransfer",
                    method: "set",
                    version: 1,
                    params: {
                        cifs: a.smb_transfer_log_enable
                    }
                })
            }
            b = b.concat({
                api: "SYNO.Core.ExternalDevice.Printer.BonjourSharing",
                method: "set",
                version: 1,
                params: {
                    enable_bonjour_support: a.enable_bonjour_support
                }
            });
            this.smbChange = this.getForm().findField("enable_samba").isDirty();
            this.afpChange = this.getForm().findField("enable_afp").isDirty();
            this.nfsChange = this.getForm().findField("enable_nfs").isDirty();
            this.bonjourChange = this.getForm().findField("enable_bonjour_support").isDirty()
        }
        b = b.concat({
            api: "SYNO.Core.Directory.Domain",
            method: "get",
            version: 1
        });
        b = b.concat({
            api: "SYNO.Core.Share",
            method: "list",
            version: 1,
            params: {
                additional: ["is_service_share"],
                shareType: ["dec", "local", "usb", "sata"]
            }
        });
        if (2 > this.nfsApiMaxVersion) {
            b = b.concat({
                api: "SYNO.Core.FileServ.NFS.Kerberos",
                method: "get",
                version: 1
            })
        }
        b = b.concat({
            api: "SYNO.Core.Service",
            method: "get",
            version: 1,
            params: {
                service_id: "pgsql"
            }
        });
        b = b.concat({
            api: "SYNO.Core.SyslogClient.FileTransfer",
            method: "get",
            version: 1
        });
        b = b.concat({
            api: "SYNO.Core.ExternalDevice.Printer.BonjourSharing",
            method: "get",
            version: 1
        });
        b = b.concat({
            api: "SYNO.Core.Network",
            method: "get",
            version: 1
        });
        return b
    },
    processReturnData: function(a, n, h) {
        var p = false;
        var k = {};
        if (2 > this.nfsApiMaxVersion) {
            k = {
                api: "SYNO.Core.FileServ.NFS.Kerberos",
                method: "get",
                version: 1
            }
        }
        var o = {
            api: "SYNO.Core.Share",
            method: "list",
            version: 1
        };
        var l = {
            api: "SYNO.Core.Service",
            method: "get",
            version: 1
        };
        var b = {
            api: "SYNO.Core.SyslogClient.FileTransfer",
            method: "get",
            version: 1
        };
        var q = {
            api: "SYNO.Core.ExternalDevice.Printer.BonjourSharing",
            method: "get",
            version: 1
        };
        var d = {
            api: "SYNO.Core.Directory.Domain",
            method: "get",
            version: 1
        };
        var f = {
            api: "SYNO.Core.Network",
            method: "get",
            version: 1
        };
        for (var m = 0; m < n.result.length; m++) {
            var g = 0;
            if (true === SYNO.ux.Utils.checkApiConsistency(o, n.result[m])) {
                var c = {
                    shares: [{
                        name: "",
                        display: _T("common", "not_choose")
                    }],
                    total: 1
                };
                var r = {};
                for (g = 0; g < n.result[m].data.total; g++) {
                    r = n.result[m].data.shares[g];
                    if (false === r.is_service_share) {
                        r.display = r.name;
                        c.shares.push(r);
                        c.total += 1
                    }
                }
                this.shareStore.loadData(c, false)
            } else {
                if (2 > this.nfsApiMaxVersion) {
                    if (true === SYNO.ux.Utils.checkApiConsistency(k, n.result[m])) {
                        if (true === n.result[m].data.kerberos_support) {
                            var e = this.getComponent("nfsFieldset");
                            e.getComponent("krb5_desc").show();
                            e.getComponent("krb5_btn").show();
                            if ("" !== n.result[m].data.kerberos_principal) {
                                e.getComponent("krb5_principal").show();
                                this.getForm().setValues({
                                    kerberos_principal: n.result[m].data.kerberos_principal
                                })
                            }
                        }
                        this.doLayout()
                    }
                } else {
                    if (true === SYNO.ux.Utils.checkApiConsistency(l, n.result[m])) {
                        for (g = 0; g < n.result[m].data.service.length; g++) {
                            if ("pgsql" == n.result[m].data.service[g].service_id) {
                                this.pgsqlEnabled = n.result[m].data.service[g].enable;
                                break
                            }
                        }
                    } else {
                        if (true === SYNO.ux.Utils.checkApiConsistency(b, n.result[m])) {
                            p = n.result[m].data.cifs
                        } else {
                            if (true === SYNO.ux.Utils.checkApiConsistency(q, n.result[m])) {
                                this.getForm().setValues({
                                    enable_bonjour_support: n.result[m].data.enable_bonjour_support
                                })
                            } else {
                                if (true === SYNO.ux.Utils.checkApiConsistency(d, n.result[m])) {
                                    this.domainEnabled = n.result[m].data.enable_domain
                                } else {
                                    if (true === SYNO.ux.Utils.checkApiConsistency(f, n.result[m])) {
                                        this.winHelpBox.update({
                                            hostname: n.result[m].data.server_name
                                        });
                                        this.winHelpBox.getEl().on("click", this.selectHelpText, null, {
                                            delegate: "span.link-font"
                                        });
                                        this.macHelpBox.update({
                                            hostname: n.result[m].data.server_name
                                        });
                                        this.macHelpBox.getEl().on("click", this.selectHelpText, null, {
                                            delegate: "span.link-font"
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (this.pgsqlEnabled) {
            this.getForm().setValues({
                smb_transfer_log_enable: p
            })
        }
        this.getForm().loadRecords(n.result, h.compound);
        this.afterLoad()
    },
    afterLoad: function() {
        var j = this.getComponent("winFieldset");
        var k = this.getComponent("macFieldset");
        var f = this.getComponent("nfsFieldset");
        var i = k.getComponent("time_machine");
        var d = j.getComponent("enable_samba").getValue();
        var e = k.getComponent("enable_afp").getValue();
        var m = f.getComponent("enable_nfs").getValue();
        var l = j.getComponent("smb_transfer_log_enable").getValue();
        var c = (d && l);
        var h = j.getComponent("enable_samba");
        var b = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var g = this.getKnownAPI("SYNO.Core.FileServ.SMB");
        if (!m) {
            f.getComponent("nfs_v4_domain").disable()
        }
        if (2 == this.nfsApiMaxVersion) {
            f.getComponent("NfsadvanceBtnId").setDisabled(!m)
        }
        this.setWinHelpBoxVisible(d);
        this.setMacHelpBoxVisible(e);
        if (false === this.isTMShareValid(i.getValue())) {
            i.markInvalid(_T("error", "error_noshare"))
        }
        if (2 === g.maxVersion) {
            var a = this.getForm().findField("enable_smb2").getValue();
            this.getForm().findField("enable_large_mtu").setDisabled(!(!!d && !!a))
        }
        j.getComponent("advanceBtnId").setDisabled(!d);
        if (b) {
            j.getComponent("smbLogBtn").disable()
        } else {
            j.getComponent("smbLogBtn").setDisabled(!c)
        }
        if (!this.domainEnabled) {
            if (d) {
                j.getComponent("workgroup").enable()
            } else {
                j.getComponent("workgroup").disable()
            }
            h.mon(h, "check", this.workgroupHandler, this)
        } else {
            j.getComponent("workgroup").disable();
            h.mun(h, "check", this.workgroupHandler, this)
        }
        k.getComponent("advanceBtnId").setDisabled(!e);
        this.sendServiceEvent()
    },
    isTMShareValid: function(b) {
        var c = false;
        if (undefined === this.store) {
            return true
        }
        for (var a = 0; a < this.store.getCount(); a++) {
            if (b === this.store.getAt(a).get("display")) {
                c = true;
                break
            }
        }
        if (true === c) {
            return true
        } else {
            return _T("error", "error_noshare")
        }
    },
    sendServiceEvent: function() {
        var a = this.getForm();
        if (this.bonjourChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WinMacNfs.BONJOUR", !a.findField("enable_bonjour_support").getValue())
        }
        if (this.smbChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WinMacNfs.SAMBA", !a.findField("enable_samba").getValue())
        }
        if (this.afpChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WinMacNfs.AFP", !a.findField("enable_afp").getValue())
        }
        if (this.nfsChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WinMacNfs.NFS", !a.findField("enable_nfs").getValue())
        }
    },
    workgroupHandler: function(b, a) {
        var c = this.getComponent("winFieldset").getComponent("workgroup");
        if (a) {
            c.enable()
        } else {
            c.disable()
        }
    },
    onLogCheckHandler: function(f, c) {
        var b = this.getForm();
        var d = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var a = ("yes" === this._D("usbstation")) ? true : false;
        var e;
        if (c && !this.pgsqlEnabled) {
            b.findField("smb_transfer_log_enable").setValue(false);
            if (d && !a) {
                this.module.appWin.getMsgBox().alert(this.title, _T("cms", "cms_no_volumes"));
                return
            }
            if (a) {
                e = _T("metadata", "metadata_warning_required")
            } else {
                e = _T("error", "volume_no_volumes")
            }
            this.module.appWin.getMsgBox().confirm(this.title, e, function(g) {
                if ("yes" === g) {
                    if (a) {
                        this.module.appWin.startModule("SYNO.SDS.AdminCenter.SystemDatabase.Main")
                    } else {
                        SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                    }
                }
            }, this)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.WinMacNfsTab.Utils", {
    statics: {
        onClickShareUrl: function(a) {
            a.findAppWindow().startModule("SYNO.SDS.AdminCenter.Share.Main")
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService.FTP");
Ext.define("SYNO.SDS.AdminCenter.FileService.FTP.ConnectionSettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.panel = this.configForm();
        var b = Ext.apply({
            title: _T("ftp", "conn_restriction"),
            autoDestroy: true,
            width: 500,
            autoHeight: true,
            layout: "fit",
            border: false,
            items: [this.panel],
            buttons: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                btnStyle: "blue",
                text: _T("common", "commit"),
                scope: this,
                handler: this.apply
            }, {
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.load, this);
        this.on("afterlayout", function(c, d) {
            this.checkEnableMaxConnPerIP = new SYNO.ux.Utils.EnableCheckGroup(this.panel.getForm(), "enable_max_conn_per_ip", ["max_conn_per_ip"]);
            this.checkEnableFlowCtrl = new SYNO.ux.Utils.EnableCheckGroup(this.panel.getForm(), "enable_flow_ctrl", ["maxuploadrate", "maxdownloadrate"])
        }, this, {
            single: true
        })
    },
    configForm: function() {
        var a = {
            border: false,
            itemId: "formpanel",
            trackResetOnLoad: true,
            height: 400,
            width: 200,
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("ftp", "ftp_enable_max_conn_per_ip"),
                name: "enable_max_conn_per_ip"
            }, {
                xtype: "syno_combobox",
                name: "max_conn_per_ip",
                indent: 1,
                width: 100,
                fieldLabel: _T("ftp", "ftp_max_conn"),
                store: [2, 3, 4, 5, 6, 7, 8, 9, 10],
                value: 2,
                allowBlank: false
            }, {
                xtype: "syno_checkbox",
                name: "enable_flow_ctrl",
                boxLabel: _T("ftp", "ftp_flow_ctrl")
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("ftp", "ftp_max_upload"),
                width: 270,
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    name: "maxuploadrate",
                    width: 100,
                    maxlength: 6
                }, {
                    xtype: "syno_displayfield",
                    value: " KB/s " + _T("ftp", "ftp_flow_desc")
                }]
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("ftp", "ftp_max_download"),
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    name: "maxdownloadrate",
                    width: 100,
                    maxlength: 6
                }, {
                    xtype: "syno_displayfield",
                    value: " KB/s " + _T("ftp", "ftp_flow_desc")
                }]
            }, {
                xtype: "syno_checkbox",
                name: "enable_ftp",
                hidden: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_ftps",
                hidden: true
            }]
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.FTP",
            method: "get",
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    if (0 === b.max_conn_per_ip) {
                        b.enable_max_conn_per_ip = false;
                        delete b.max_conn_per_ip
                    } else {
                        b.enable_max_conn_per_ip = true
                    }
                    this.panel.getForm().setValues(b)
                }
            }
        })
    },
    apply: function() {
        var a = this.panel.getForm();
        var b = a.getValues();
        if (!a.isValid()) {
            return false
        }
        if (!a.isDirty()) {
            this.close();
            return false
        }
        if (false === b.enable_max_conn_per_ip) {
            b.max_conn_per_ip = 0
        }
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.FTP",
            method: "set",
            version: 1,
            scope: this,
            params: b,
            callback: function(e, d, c) {
                this.clearStatusBusy();
                if (e) {
                    this.close();
                    return true
                }
            }
        });
        return true
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService.FTP");
Ext.define("SYNO.SDS.AdminCenter.FileService.FTP.ChrootRuleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.domainUserHomeEnabled = a.domainUserHomeEnabled;
        this.ldapUserHomeEnabled = a.ldapUserHomeEnabled;
        this.panel = new SYNO.SDS.AdminCenter.FileService.FTP.ChrootRulePanel({
            owner: this,
            module: this.module,
            domainUserHomeEnabled: this.domainUserHomeEnabled,
            ldapUserHomeEnabled: this.ldapUserHomeEnabled
        });
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("ftp", "ftp_chroot_user_list"),
            autoDestroy: true,
            width: 670,
            height: 500,
            autoHeight: true,
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "apply"),
                scope: this,
                handler: this.onApplyBtnClick
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCloseBtnClick
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.panel.onShow, this.panel)
    },
    onCloseBtnClick: function() {
        if (!this.panel.isDirty()) {
            this.close();
            return true
        }
        if (this.panel.isDirty()) {
            this.getMsgBox().confirm(_T("ftp", "ftp_chroot_user_list"), _T("common", "confirm_lostchange"), function(a, b) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        }
    },
    onApplyBtnClick: function() {
        var b = [];
        var a = [];
        if (!this.panel.isDirty()) {
            this.close();
            return true
        }
        a = this.panel.getStore().getRange();
        a.each(function(c) {
            b.push({
                type: c.data.type,
                name: c.data.name,
                path: c.data.path
            })
        }, this);
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.FTP.ChrootUser",
            method: "save",
            version: 2,
            scope: this,
            params: {
                rules: b
            },
            callback: function(g, f, e) {
                this.clearStatusBusy();
                if (g) {
                    this.close()
                } else {
                    var d = SYNO.API.Util.GetFirstError(f);
                    var c = _T("common", "commfail");
                    if (SYNO.API.Erros.core[d.code]) {
                        c = SYNO.API.Erros.core[d.code]
                    }
                    this.getMsgBox().alert(this.title, c)
                }
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.FTP.ChrootRulePanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.domainUserHomeEnabled = a.domainUserHomeEnabled;
        this.ldapUserHomeEnabled = a.ldapUserHomeEnabled;
        this.ruleStore = this.createRuleStore();
        this.isRuleChanged = false;
        var b = {
            store: this.ruleStore,
            header: false,
            height: 450,
            autoExpandColumn: "path",
            ddGroup: "ChrootRulesDD",
            enableDragDrop: true,
            enableColumnMove: false,
            enableHdMenu: false,
            ddText: _T("firewall", "firewall_rules_drag_drop_text"),
            listeners: {
                rowdblclick: function() {
                    this.openRuleDialog("edit")
                },
                rowcontextmenu: this.onRowContextMenu,
                scope: this
            },
            tbar: {
                defaultType: "syno_button",
                items: [{
                    text: _T("common", "add"),
                    itemId: "addBtn",
                    handler: function() {
                        this.openRuleDialog("add")
                    },
                    scope: this
                }, {
                    text: _T("common", "alt_edit"),
                    itemId: "editBtn",
                    handler: function() {
                        this.openRuleDialog("edit")
                    },
                    scope: this
                }, {
                    text: _T("common", "remove"),
                    itemId: "delBtn",
                    handler: this.onDelBtnClick,
                    scope: this
                }, {
                    text: _T("common", "up"),
                    itemId: "upBtn",
                    handler: function() {
                        this.onMoveRow(true)
                    },
                    scope: this
                }, {
                    text: _T("common", "down"),
                    itemId: "downBtn",
                    handler: function() {
                        this.onMoveRow(false)
                    },
                    scope: this
                }]
            },
            colModel: new Ext.grid.ColumnModel({
                columns: [{
                    header: " ",
                    dataIndex: "type",
                    width: 34,
                    fixed: true,
                    menuDisabled: true,
                    renderer: function(e) {
                        var c = '<div class="acl-grid-item-group" style="width: 26px; height: 26px; margin-left: -4px;"> </div>';
                        var f = '<div class="acl-grid-item-user" style="width: 26px; height: 26px; margin-left: -4px;"> </div>';
                        var d = ("user" === e) ? f : c;
                        return d
                    },
                    scope: this
                }, {
                    id: "name",
                    header: _WFT("acl_editor", "user_or_group"),
                    dataIndex: "name",
                    width: 150
                }, {
                    id: "path",
                    header: _T("ftp", "ftp_root_dir"),
                    dataIndex: "path",
                    width: 200,
                    renderer: function(g, d, c) {
                        var f = Ext.util.Format.htmlEncode(g.substr(1));
                        var e = true;
                        if (!c.data.path_exist) {
                            d.attr = String.format('ext:qtip="{0}"', _T("mediaservice", "error_folder_not_exist"));
                            e = false
                        }
                        if ("/home" === c.data.path) {
                            if ((0 < c.data.name.indexOf("@") && !this.ldapUserHomeEnabled) || (0 < c.data.name.indexOf("\\") && !this.domainUserHomeEnabled)) {
                                d.attr = String.format('ext:qtip="{0}"', _T("mediaservice", "error_folder_not_exist"));
                                e = false
                            }
                        }
                        return (e) ? f : '<span class="red-status">' + f + "</span>"
                    },
                    scope: this
                }]
            }),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: {
                        fn: this.onChgButtonStatus,
                        buffer: 50,
                        scope: this
                    }
                }
            })
        };
        Ext.apply(b, a);
        SYNO.LayoutConfig.fill(b);
        this.callParent([b])
    },
    initEvents: function() {
        this.mon(this.ruleStore, "beforeload", this.onGridBeforeLoad, this);
        this.mon(this.ruleStore, "load", this.onGridAfterLoad, this);
        this.mon(this.ruleStore, "exception", this.onGridException, this);
        this.mon(this.ruleStore, "update", this.onChgButtonStatus, this);
        this.mon(this.ruleStore, "add", this.onStoreAdd, this);
        this.mon(this.ruleStore, "remove", this.onStoreRemove, this);
        this.mon(this, "afterlayout", function() {
            this.ddrow = new Ext.dd.DropTarget(this.getView().mainBody, {
                ddGroup: "ChrootRulesDD",
                copy: false,
                scope: this,
                notifyDrop: function(a, c, b) {
                    return this.scope.mvRules(a.getDragData(c).rowIndex, b.selections, b.grid.getStore())
                }
            })
        }, this, {
            single: true
        })
    },
    onGridException: function(d, e, g, c, b, a) {
        var f = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            f = SYNO.API.Erros.core[b.code]
        }
        this.owner.getMsgBox().alert(this.title, f);
        this.onChgButtonStatus();
        this.owner.clearStatusBusy()
    },
    onGridBeforeLoad: function(a, b) {
        this.owner.setStatusBusy({
            text: _T("common", "loading")
        })
    },
    onGridAfterLoad: function(b, a, c) {
        this.onChgButtonStatus();
        this.owner.clearStatusBusy()
    },
    onStoreAdd: function(b, a, c) {
        this.isRuleChanged = true;
        this.onChgButtonStatus()
    },
    onStoreRemove: function(b, a, c) {
        this.isRuleChanged = true;
        this.onChgButtonStatus()
    },
    isDirty: function() {
        return (0 < this.ruleStore.getModifiedRecords().length || this.isRuleChanged)
    },
    mvRules: function(b, c, d) {
        if (undefined === b) {
            return false
        }
        for (var a = 0; a < c.length; a++) {
            d.remove(c[a])
        }
        if (b >= d.getCount()) {
            d.add(c)
        } else {
            d.insert(b, c)
        }
        this.isRuleChanged = true;
        return true
    },
    onShow: function() {
        this.ruleStore.load({
            params: {
                offset: 0,
                limit: SYNO.SDS.AdminCenter.USER_PAGING_SIZE
            }
        })
    },
    onChgButtonStatus: function() {
        var a = this.getSelectionModel().getCount();
        this.setButton("delBtn", 0 < a);
        this.setButton("editBtn", 1 === a);
        this.setButton("upBtn", 1 === a);
        this.setButton("downBtn", 1 === a)
    },
    onRowContextMenu: function(c, f, a) {
        var b = [];
        var e = c.getSelectionModel();
        e.suspendEvents(false);
        e.selectRow(f, e.isSelected(f));
        this.onChgButtonStatus();
        e.resumeEvents();
        if (!this.getButton("editBtn").disabled) {
            b.push(this.getButton("editBtn").initialConfig)
        }
        if (!this.getButton("delBtn").disabled) {
            b.push(this.getButton("delBtn").initialConfig)
        }
        var d = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        d.showAt(a.getXY());
        a.preventDefault()
    },
    onMoveRow: function(a) {
        var d = this.getStore();
        var c = this.getSelectionModel().getSelected();
        var b = d.indexOf(c);
        b += a ? -1 : 1;
        if (b < 0 || b > d.getCount() - 1) {
            return
        }
        d.remove(c);
        d.insert(b, c);
        this.getSelectionModel().selectRecords([c])
    },
    getButton: function(c) {
        var b = this.getTopToolbar();
        var a;
        if (b) {
            a = b.getComponent(c)
        }
        return a
    },
    setButton: function(c, a) {
        var b = this.getButton(c);
        if (b) {
            b[a ? "enable" : "disable"]()
        }
    },
    createRuleStore: function() {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.Core.FileServ.FTP.ChrootUser",
            method: "load",
            version: 2,
            root: "rules",
            fields: ["type", "name", "path", "path_exist"],
            appWindow: this.owner || false,
            defaultSortable: true
        });
        return a
    },
    onDelBtnClick: function() {
        var a = this.getSelectionModel().getSelections();
        var c = this.getStore();
        for (var b = 0; b < a.length; b++) {
            c.remove(a[b])
        }
    },
    openRuleDialog: function(d) {
        var c = "";
        var a = null;
        if ("add" === d) {
            c = _T("common", "add");
            a = null
        } else {
            c = _T("common", "alt_edit");
            a = this.getSelectionModel().getSelected()
        }
        var b = new SYNO.SDS.AdminCenter.FileService.FTP.ChrootRuleEditDialog({
            owner: this.owner,
            module: this,
            title: c,
            rule: (a !== null) ? a.data : null,
            domainUserHomeEnabled: this.domainUserHomeEnabled,
            ldapUserHomeEnabled: this.ldapUserHomeEnabled
        });
        b.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.FTP.ChrootRuleEditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = null;
        this.owner = a.owner;
        this.domainUserHomeEnabled = a.domainUserHomeEnabled;
        this.ldapUserHomeEnabled = a.ldapUserHomeEnabled;
        this.shareStore = new Ext.data.JsonStore({
            fields: ["name"]
        });
        this.panel = this.configForm();
        this.rule = (a.rule) ? a.rule : null;
        b = this.fillConfig(a);
        Ext.apply(b, a || {});
        this.callParent([b]);
        this.mon(this, "show", this.load, this)
    },
    configForm: function() {
        var c = null;
        var a = function(e, d) {
            return d.type + ":" + d.name
        };
        var b = {
            itemId: "chroot_form",
            trackResetOnLoad: true,
            border: false,
            height: 200,
            labelWidth: 150,
            items: [new SYNO.FileStation.PropertyDialog.ACLPrivilege.UserGrpCombo({
                fieldLabel: _WFT("acl_editor", "user_or_group"),
                itemId: "cmb_owner",
                queryParam: "prefix",
                width: 280,
                listeners: {
                    change: function() {
                        this.checkHomeExist()
                    },
                    select: function() {
                        this.checkHomeExist()
                    },
                    scope: this
                },
                store: new Ext.data.Store({
                    autoDestroy: true,
                    proxy: new SYNO.API.Proxy({
                        api: "SYNO.Core.ACL",
                        method: "list_owners",
                        version: 1,
                        appWindow: this
                    }),
                    reader: new Ext.data.JsonReader({
                        root: "owners",
                        totalProperty: "total",
                        id: "value"
                    }, [{
                        name: "type"
                    }, {
                        name: "name"
                    }, {
                        name: "value",
                        convert: a
                    }]),
                    paramNames: {
                        start: "offset",
                        limit: "limit"
                    },
                    remoteSort: true,
                    baseParams: {
                        include_everyone: false,
                        include_owner: false
                    },
                    pruneModifiedRecords: true
                })
            }), {
                xtype: "syno_displayfield",
                value: _T("ftp", "ftp_chroot_to") + ":"
            }, {
                xtype: "syno_radio",
                name: "chroot_type",
                inputValue: "home",
                boxLabel: _T("user", "user_home")
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    name: "chroot_type",
                    inputValue: "custom",
                    width: 150,
                    boxLabel: _T("ftp", "ftp_root_dir") + ":"
                }, {
                    xtype: "syno_combobox",
                    name: "chroot_share",
                    itemId: "chroot_share",
                    indent: 0,
                    width: 280,
                    displayField: "name",
                    valueField: "name",
                    allowBlank: false,
                    store: this.shareStore
                }]
            }]
        };
        SYNO.LayoutConfig.fill(b);
        c = new SYNO.SDS.Utils.FormPanel(b);
        c.on("afterlayout", function(d, e) {
            this.checkChrootType = new SYNO.ux.Utils.EnableRadioGroup(d.getForm(), "chroot_type", {
                custom: ["chroot_share"]
            })
        }, this, {
            single: true
        });
        return c
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            version: 1,
            method: "list",
            params: {
                shareType: ["local", "usb", "sata", "dec"]
            },
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    this.setShareStore(b);
                    this.afterLoad()
                } else {
                    this.setStatusError()
                }
            }
        })
    },
    setShareStore: function(c) {
        var b = [];
        for (var a = 0; a < c.shares.length; a++) {
            if ("home" === c.shares[a].name || "homes" === c.shares[a].name) {
                continue
            }
            b.push({
                name: c.shares[a].name
            })
        }
        this.shareStore.loadData(b, false)
    },
    afterLoad: function() {
        if (this.rule) {
            var b = this.panel.getComponent("cmb_owner");
            var a = this.rule.path.substr(1);
            b.setDefaultValue(this.rule.name, this.rule.type, this.rule.type + ":" + this.rule.name);
            if ("home" === a) {
                this.panel.getForm().setValues({
                    chroot_type: "home"
                })
            } else {
                this.panel.getForm().setValues({
                    chroot_type: "custom",
                    chroot_share: a
                })
            }
        } else {
            this.panel.getForm().setValues({
                chroot_type: "home"
            })
        }
        this.checkHomeExist()
    },
    checkHomeExist: function() {
        var a = this.getRecord();
        if ((0 < a.name.indexOf("@") && !this.ldapUserHomeEnabled) || (0 < a.name.indexOf("\\") && !this.domainUserHomeEnabled)) {
            this.panel.getForm().setValues({
                chroot_type: "custom"
            });
            this.panel.getForm().findFields("chroot_type")[0].setDisabled(true)
        } else {
            this.panel.getForm().findFields("chroot_type")[0].setDisabled(false)
        }
    },
    fillConfig: function(a) {
        var b = {
            owner: a.owner,
            module: a.module,
            width: 500,
            autoHeight: true,
            autoScroll: false,
            title: a.title,
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "ok"),
                handler: this.onUpdateRuleGrid,
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                handler: this.onCloseHandler,
                scope: this
            }],
            keys: [{
                key: [10, 13],
                fn: this.onUpdateRuleGrid,
                scope: this
            }, {
                key: 27,
                fn: this.onCloseHandler,
                scope: this
            }]
        };
        Ext.apply(b, a);
        return b
    },
    onCloseHandler: function() {
        this.close()
    },
    getRecord: function() {
        var c = {
            type: "",
            name: "",
            path: ""
        };
        var b = this.panel.getForm().findField("chroot_type").getGroupValue();
        var a = this.panel.getComponent("cmb_owner").getValue().split(":");
        if (undefined !== a[0] && "" !== a[0]) {
            c.type = a[0]
        }
        if (undefined !== a[1] && "" !== a[1]) {
            c.name = a[1]
        }
        if ("home" === b) {
            c.path = "/home"
        } else {
            c.path = "/" + this.panel.getForm().findField("chroot_share").getValue()
        }
        return c
    },
    validateData: function(b) {
        if (this.panel.getComponent("cmb_owner").valueNotFound() || "" === b.type || "" === b.name) {
            this.setStatusError({
                text: _WFT("acl_editor", "error_invalid_user_or_group"),
                clear: true
            });
            return false
        }
        if (!this.panel.getForm().isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        var a = -1;
        if (null !== this.rule) {
            var e = this.owner.panel.getStore();
            a = e.indexOf(this.owner.panel.getSelectionModel().getSelected())
        }
        var c = this.owner.panel.getStore().getRange();
        for (var d = 0; d < c.length; d++) {
            if (b.name === c[d].get("name") && b.type === c[d].get("type")) {
                if (a === d) {
                    continue
                }
                this.setStatusError({
                    text: _T("ftp", "ftp_chroot_duplicate_user_group"),
                    clear: true
                });
                this.panel.getComponent("cmb_owner").markInvalid(_T("ftp", "ftp_chroot_duplicate_user_group"));
                return false
            }
        }
        return true
    },
    onUpdateRuleGrid: function() {
        var b = null;
        var c = null;
        var e = null;
        var a = this.owner.panel;
        var d = this.owner.panel.ruleStore;
        b = this.getRecord();
        if (!this.validateData(b)) {
            return false
        }
        if (this.rule === null) {
            e = new d.recordType({
                type: "",
                name: "",
                path: "",
                path_exist: true
            });
            d.insert(0, e);
            e.set("type", b.type);
            e.set("name", b.name);
            e.set("path", b.path)
        } else {
            c = a.getSelectionModel().getSelected();
            if (b.path !== c.get("path")) {
                c.set("path_exist", true)
            }
            c.set("type", b.type);
            c.set("name", b.name);
            c.set("path", b.path)
        }
        this.close()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService.FTP");
Ext.define("SYNO.SDS.AdminCenter.FileService.FTP.ChrootUserPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.userStore = this.createUserStore();
        this.userChooserDialog = null;
        this.domainUserHomeEnabled = a.domainUserHomeEnabled;
        this.ldapUserHomeEnabled = a.ldapUserHomeEnabled;
        var b = {
            store: this.userStore,
            header: false,
            height: 450,
            autoExpandColumn: "descr",
            tbar: {
                items: [{
                    xtype: "syno_button",
                    text: _T("common", "add"),
                    itemId: "addBtn",
                    handler: this.onAddBtnClick,
                    scope: this
                }, {
                    xtype: "syno_button",
                    text: _T("common", "remove"),
                    itemId: "delBtn",
                    handler: this.onDelBtnClick,
                    disabled: true,
                    scope: this
                }]
            },
            colModel: new Ext.grid.ColumnModel({
                columns: [{
                    id: "name",
                    header: _T("user", "user_account"),
                    dataIndex: "name",
                    width: 150
                }, {
                    id: "descr",
                    header: _T("user", "user_fullname"),
                    dataIndex: "descr",
                    width: 150,
                    renderer: Ext.util.Format.htmlEncode
                }]
            }),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: {
                        fn: this.onSelectionChange,
                        buffer: 50,
                        scope: this
                    }
                }
            })
        };
        Ext.apply(b, a);
        SYNO.LayoutConfig.fill(b);
        this.callParent([b])
    },
    onShow: function() {
        this.userStore.load({
            params: {
                offset: 0,
                limit: SYNO.SDS.AdminCenter.USER_PAGING_SIZE
            }
        })
    },
    onSelectionChange: function() {
        var a = this.getTopToolbar();
        var b = this.getSelectionModel().getCount();
        a.getComponent("delBtn").setDisabled(0 >= b)
    },
    createUserStore: function() {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.Core.FileServ.FTP.ChrootUser",
            method: "list",
            version: 1,
            root: "user",
            idProperty: "id",
            fields: ["id", "name", "descr"],
            totalProperty: "total",
            appWindow: this.findAppWindow() || false,
            defaultSortable: true,
            baseParams: {
                type: "all",
                chroot: true
            },
            paramNames: {
                start: "offset",
                limit: "limit"
            }
        });
        return a
    },
    onDelBtnClick: function() {
        this.module.appWin.getMsgBox().confirmDelete(_T("ftp", "ftp_chroot_user_list"), _T("ftp", "ftp_cfrm_remove_users"), function(a) {
            if ("yes" == a) {
                this.doDelete()
            }
        }, this)
    },
    doDelete: function() {
        var b = [];
        var c = this.getSelectionModel().getSelections();
        for (var a = 0; a < c.length; a++) {
            b.push(c[a].id)
        }
        this.owner.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.FTP.ChrootUser",
            method: "delete",
            version: 1,
            scope: this,
            params: {
                id: b
            },
            callback: function(f, e, d) {
                this.owner.clearStatusBusy();
                if (f) {
                    this.deleteDone()
                }
            }
        })
    },
    deleteDone: function() {
        this.userStore.reload()
    },
    onAddBtnClick: function() {
        this.userChooserDialog = new SYNO.SDS.UserChooser({
            owner: this.owner,
            module: this.module,
            domainForceIgnore: !this.domainUserHomeEnabled,
            ldapForceIgnore: !this.ldapUserHomeEnabled,
            setStoreConfig: function() {
                return {
                    api: "SYNO.Core.FileServ.FTP.ChrootUser",
                    method: "list",
                    version: "1",
                    id: "id",
                    root: "user",
                    totalProperty: "total"
                }
            },
            setApiParams: function() {
                return {
                    chroot: false,
                    type: "all"
                }
            },
            setStoreField: function() {
                return ["id", "name", "descr"]
            },
            setColModel: function() {
                return [{
                    id: "name",
                    header: _T("user", "user_account"),
                    dataIndex: "name",
                    width: 150
                }, {
                    id: "descr",
                    header: _T("user", "user_fullname"),
                    dataIndex: "descr",
                    width: 150,
                    renderer: Ext.util.Format.htmlEncode
                }]
            },
            setTextFilterConfig: function() {
                return {
                    queryAction: "list",
                    queryParam: "substr"
                }
            },
            setGridPanelConfig: function() {
                return {
                    autoExpandColumn: "descr"
                }
            },
            singleSelect: false,
            localOnly: false
        });
        this.mon(this.userChooserDialog, "beforeclose", this.onBeforeCloseUserChooser, this);
        this.userChooserDialog.chooseUsers()
    },
    onBeforeCloseUserChooser: function(b) {
        var d = [];
        var c = b.getRecords();
        if (0 === c.length) {
            return true
        }
        for (var a = 0; a < c.length; a++) {
            d.push(c[a].id)
        }
        b.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.FTP.ChrootUser",
            method: "add",
            params: {
                id: d
            },
            version: 1,
            scope: this,
            callback: function(g, f, e) {
                this.userChooserDialog.clearStatusBusy();
                if (g) {
                    this.userStore.reload();
                    this.mun(this.userChooserDialog, "beforeclose", this.onBeforeCloseUserChooser, this);
                    this.userChooserDialog.close()
                } else {
                    this.setStatusError()
                }
            }
        });
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.FTP.ChrootUserDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.panel = new SYNO.SDS.AdminCenter.FileService.FTP.ChrootUserPanel({
            owner: this,
            module: this.module,
            domainUserHomeEnabled: a.domainUserHomeEnabled,
            ldapUserHomeEnabled: a.ldapUserHomeEnabled
        });
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("ftp", "ftp_chroot_user_list"),
            autoDestroy: true,
            width: 670,
            height: 500,
            autoHeight: true,
            layout: "fit",
            items: [this.panel],
            buttons: [{
                text: _T("common", "alt_finish"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.panel.onShow, this.panel)
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.FTP.AdvancedSettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.xferFieldSet = this.createXferFieldSet();
        this.securityFieldSet = this.createSecurityFieldSet();
        this.pgsqlEnabled = false;
        this.userHomeEnabled = false;
        this.domainUserHomeEnabled = false;
        this.ldapUserHomeEnabled = false;
        this.needResetAnonymousChrootShare = false;
        this.webapi = [{
            api: "SYNO.Core.FileServ.FTP.Security",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.FileServ.FTP.Security",
            method: "list_ftp_share",
            version: 1
        }, {
            api: "SYNO.Core.Service",
            method: "get",
            version: 1,
            params: {
                service_id: "pgsql"
            }
        }, {
            api: "SYNO.Core.User.Home",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.SyslogClient.FileTransfer",
            method: "get",
            version: 1
        }];
        this.panel = this.configForm();
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("common", "adv_setting"),
            autoDestroy: true,
            width: 550,
            autoHeight: true,
            layout: "fit",
            border: false,
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "apply"),
                scope: this,
                handler: this.onApplyBtnClick
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.load, this)
    },
    configForm: function() {
        var b = null;
        var a = {
            border: false,
            itemId: "formpanel",
            trackResetOnLoad: true,
            autoHeight: true,
            width: 250,
            items: [this.xferFieldSet, this.securityFieldSet]
        };
        SYNO.LayoutConfig.fill(a);
        b = new SYNO.SDS.Utils.FormPanel(a);
        b.on("afterlayout", function(c, d) {
            this.checkEnableAnonymousChroot = new SYNO.ux.Utils.EnableCheckGroup(c.getForm(), "anonymous_chroot", ["anonymous_chroot_share"])
        }, this, {
            single: true
        });
        return b
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                params: this.webapi
            },
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    this.setAllValues(b);
                    this.afterLoad()
                } else {
                    this.setStatusError()
                }
            }
        })
    },
    anonymousChrootHandler: function(b, a) {
        var c = this.panel.getForm().findField("anonymous_chroot");
        if (a) {
            c.enable()
        } else {
            c.disable()
        }
    },
    isAnonymousChrootShareValid: function() {
        var c = this.panel.getForm();
        var b = c.findField("anonymous_chroot_share").getValue();
        var d = false;
        for (var a = 0; a < this.ftpShareStore.getCount(); a++) {
            if (b == this.ftpShareStore.getAt(a).get("name")) {
                d = true;
                break
            }
        }
        return d
    },
    afterLoad: function() {
        var a = this.panel.getForm();
        var c = a.findField("xferlog").getValue();
        var b = a.findField("anonymous");
        var d = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var e = this.isAnonymousChrootShareValid();
        if (!e) {
            a.setValues({
                anonymous_chroot: false,
                anonymous_chroot_share: ""
            });
            this.needResetAnonymousChrootShare = true
        }
        if (0 >= this.ftpShareStore.getCount()) {
            a.findField("anonymous_chroot").disable();
            a.findField("no_share").show()
        } else {
            if (a.findField("anonymous").getValue()) {
                a.findField("anonymous_chroot").enable()
            } else {
                a.findField("anonymous_chroot").disable()
            }
            b.mon(b, "check", this.anonymousChrootHandler, this);
            if ("" === a.findField("anonymous_chroot_share").getValue()) {
                a.setValues({
                    anonymous_chroot_share: this.ftpShareStore.getAt(0).get("name")
                })
            }
        }
        this.panel.getComponent("xferFieldSet").getComponent("exportLogBtn").setDisabled(!c);
        if (d) {
            this.panel.getComponent("xferFieldSet").getComponent("viewLogBtn").disable()
        } else {
            this.panel.getComponent("xferFieldSet").getComponent("viewLogBtn").setDisabled(!c)
        }
    },
    onApplyBtnClick: function() {
        var b = this.panel.getForm();
        var c = b.getValues();
        var a = c.xferlog;
        var d = [];
        if (!b.isDirty()) {
            this.close();
            return
        }
        if (this.needResetAnonymousChrootShare) {
            if (undefined === c.anonymous_chroot) {
                c.anonymous_chroot = false
            }
            if (undefined === c.anonymous_chroot_share) {
                c.anonymous_chroot_share = ""
            }
        }
        if (b.findField("xferlog").isDirty()) {
            d = d.concat({
                api: "SYNO.Core.SyslogClient.FileTransfer",
                method: "set",
                version: 1,
                params: {
                    ftp: a
                }
            })
        }
        d = d.concat({
            api: "SYNO.Core.FileServ.FTP.Security",
            method: "set",
            version: 1,
            params: c
        });
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: d
            },
            scope: this,
            callback: function(h, g, f) {
                this.clearStatusBusy();
                if (!g.has_fail) {
                    this.close();
                    return
                }
                var e = SYNO.API.Util.GetFirstError(g);
                if (1905 == e.code) {
                    b.findField("anonymous_chroot_share").markInvalid(SYNO.API.Erros.core[e.code]);
                    this.setStatusError({
                        text: _T("error", "error_invalid"),
                        clear: true
                    })
                } else {
                    this.setStatusError({
                        text: SYNO.API.Erros.core[e.code],
                        clear: true
                    })
                }
            }
        })
    },
    setAllValues: function(g) {
        var b = {};
        var h = [];
        var d = false;
        Ext.each(g.result, function(i) {
            Ext.apply(b, i.data)
        });
        var l = {
            api: "SYNO.Core.FileServ.FTP.Security",
            method: "list_ftp_share",
            version: 1
        };
        var e = {
            api: "SYNO.Core.Service",
            method: "get",
            version: 1
        };
        var k = {
            api: "SYNO.Core.User.Home",
            method: "get",
            version: 1
        };
        var a = {
            api: "SYNO.Core.SyslogClient.FileTransfer",
            method: "get",
            version: 1
        };
        for (var f = 0; f < g.result.length; f++) {
            var c = 0;
            if (true === SYNO.ux.Utils.checkApiConsistency(l, g.result[f])) {
                this.ftpShareStore.removeAll();
                for (c = 0; c < g.result[f].data.share.length; c++) {
                    h.push({
                        name: g.result[f].data.share[c]
                    })
                }
                this.ftpShareStore.loadData(h, false)
            } else {
                if (true === SYNO.ux.Utils.checkApiConsistency(e, g.result[f])) {
                    for (c = 0; c < g.result[f].data.service.length; c++) {
                        if ("pgsql" == g.result[f].data.service[c].service_id) {
                            this.pgsqlEnabled = g.result[f].data.service[c].enable;
                            break
                        }
                    }
                } else {
                    if (true === SYNO.ux.Utils.checkApiConsistency(k, g.result[f])) {
                        this.userHomeEnabled = g.result[f].data.enable;
                        this.domainUserHomeEnabled = g.result[f].data.enable_domain;
                        this.ldapUserHomeEnabled = g.result[f].data.enable_ldap
                    } else {
                        if (true === SYNO.ux.Utils.checkApiConsistency(a, g.result[f])) {
                            d = g.result[f].data.ftp
                        } else {
                            Ext.apply(b, g.result[f].data)
                        }
                    }
                }
            }
        }
        if (this.pgsqlEnabled) {
            Ext.apply(b, {
                xferlog: d
            })
        }
        this.panel.getForm().setValues(b)
    },
    createXferFieldSet: function() {
        var a = {
            xtype: "syno_fieldset",
            title: _T("ftp", "xfer_setting"),
            itemId: "xferFieldSet",
            collapsible: false,
            items: [{
                xtype: "syno_checkbox",
                name: "xferlog",
                itemId: "xferlog",
                boxLabel: _T("ftp", "ftp_xferlog"),
                listeners: {
                    check: {
                        scope: this,
                        fn: this.onLogCheckedHandler
                    }
                }
            }, {
                xtype: "syno_button",
                itemId: "viewLogBtn",
                indent: 1,
                text: _T("log", "log_subtitle"),
                handler: function() {
                    SYNO.SDS.AppLaunch("SYNO.SDS.LogCenter.Instance", {
                        logType: "fileTransfer",
                        protocol: "ftpxfer"
                    })
                }
            }, {
                xtype: "displayfield",
                height: 0
            }, {
                xtype: "syno_splitbutton",
                indent: 1,
                itemId: "exportLogBtn",
                text: _T("ftp", "export_log"),
                scope: this,
                handler: this.onExportHtml,
                menu: {
                    items: [{
                        text: _T("log", "html_type"),
                        handler: this.onExportHtml,
                        scope: this
                    }, {
                        text: _T("log", "csv_type"),
                        handler: this.onExportCSV,
                        scope: this
                    }]
                }
            }]
        };
        return a
    },
    onExportCSV: function() {
        this.onLogSave("csv")
    },
    onExportHtml: function() {
        this.onLogSave("html")
    },
    onLogSave: function(a) {
        if (this._S("demo_mode")) {
            this.module.appWin.getMsgBox().alert(this.module.appWin.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        this.saveLog(a)
    },
    saveLog: function(a) {
        this.downloadWebAPI({
            webapi: {
                api: "SYNO.Core.SyslogClient.Log",
                method: "export",
                version: 1,
                params: {
                    logtype: "ftp",
                    export_format: a
                }
            }
        })
    },
    createSecurityFieldSet: function() {
        this.ftpShareStore = new Ext.data.JsonStore({
            fields: ["name"]
        });
        var a = {
            xtype: "syno_fieldset",
            title: _T("ftp", "security_setting"),
            itemId: "securityFieldSet",
            collapsible: false,
            items: [{
                xtype: "syno_checkbox",
                name: "user_chroot",
                itemId: "user_chroot",
                boxLabel: (2 <= this.getKnownAPI("SYNO.Core.FileServ.FTP.ChrootUser").maxVersion) ? _T("ftp", "ftp_chroot_desc") : _T("ftp", "ftp_user_chroot"),
                listeners: {
                    check: {
                        scope: this,
                        fn: this.onUserChrootCheck
                    }
                }
            }, {
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                xtype: "syno_button",
                indent: 1,
                text: _T("ftp", "ftp_user_select"),
                scope: this,
                handler: this.onSelectUserBtnClick
            }, {
                xtype: "syno_checkbox",
                name: "user_home",
                hidden: true
            }, {
                xtype: "syno_checkbox",
                name: "anonymous",
                itemId: "anonymous",
                boxLabel: _T("ftp", "ftp_anonymous")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("ftp", "ftp_anonymous_desc")
            }, {
                xtype: "syno_checkbox",
                name: "anonymous_chroot",
                itemId: "anonymous_chroot",
                indent: 1,
                boxLabel: _T("ftp", "ftp_anonymous_chroot")
            }, {
                xtype: "syno_combobox",
                name: "anonymous_chroot_share",
                itemId: "anonymous_chroot_share",
                indent: 1,
                fieldLabel: _T("ftp", "ftp_root_dir"),
                displayField: "name",
                valueField: "name",
                store: this.ftpShareStore
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                name: "no_share",
                itemId: "no_share",
                hidden: true,
                value: String.format('<span class="red-status">{0}</span>', _T("ftp", "ftp_no_share"))
            }, {
                xtype: "hidden",
                name: "share_status"
            }, {
                xtype: "syno_checkbox",
                name: "enable_umask",
                itemId: "enable_umask",
                boxLabel: _T("common", "apply_default_umask")
            }]
        };
        return a
    },
    onSelectUserBtnClick: function() {
        var b = this.getKnownAPI("SYNO.Core.FileServ.FTP.ChrootUser");
        var a = null;
        if (2 <= b.maxVersion) {
            a = new SYNO.SDS.AdminCenter.FileService.FTP.ChrootRuleDialog({
                module: this.module,
                owner: this,
                domainUserHomeEnabled: this.domainUserHomeEnabled,
                ldapUserHomeEnabled: this.ldapUserHomeEnabled
            })
        } else {
            a = new SYNO.SDS.AdminCenter.FileService.FTP.ChrootUserDialog({
                module: this.module,
                owner: this,
                domainUserHomeEnabled: this.domainUserHomeEnabled,
                ldapUserHomeEnabled: this.ldapUserHomeEnabled
            })
        }
        a.open()
    },
    onLogCheckedHandler: function(f, c) {
        var b = this.panel.getForm();
        var d = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var a = ("yes" === this._D("usbstation")) ? true : false;
        var e;
        if (c && !this.pgsqlEnabled) {
            b.findField("xferlog").setValue(false);
            if (d && !a) {
                this.module.appWin.getMsgBox().alert(this.title, _T("cms", "cms_no_volumes"));
                return
            }
            if (a) {
                e = _T("metadata", "metadata_warning_required")
            } else {
                e = _T("error", "volume_no_volumes")
            }
            this.module.appWin.getMsgBox().confirm(this.title, e, function(g) {
                if ("yes" === g) {
                    if (a) {
                        this.close();
                        this.module.appWin.startModule("SYNO.SDS.AdminCenter.SystemDatabase.Main")
                    } else {
                        SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                    }
                }
            }, this)
        }
    },
    onUserChrootCheck: function(b, a) {
        if (!a || this.userHomeEnabled) {
            return
        }
        this.module.appWin.getMsgBox().confirm(this.title, _T("service", "service_web_localuser_warning"), function(c) {
            if ("yes" === c) {
                this.close();
                this.module.appWin.startModule("SYNO.SDS.AdminCenter.User.Main", {
                    userHomeDialog: true
                })
            } else {
                b.setValue(false)
            }
        }, this)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService");
Ext.define("SYNO.SDS.AdminCenter.FileService.FtpSftpTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        this.SFTP_DEFAULT_PORT = 22;
        this.defaultPasvMinPort = parseInt(this._D("ftp_pasv_def_min_port", "55536"), 10);
        this.defaultPasvMaxPort = parseInt(this._D("ftp_pasv_def_max_port", "55663"), 10);
        this.sftpPort = 0;
        this.ftpApiMaxVersion = this.getKnownAPI("SYNO.Core.FileServ.FTP").maxVersion;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.generalForm = this.getComponent("generalFieldSet");
        this.ftpForm = this.getComponent("ftpFieldSet");
        this.sftpForm = this.getComponent("sftpFieldSet");
        this.on("afterlayout", function(c, d) {
            this.checkEnableCustomPortRange = new SYNO.ux.Utils.EnableRadioGroup(c.getForm(), "custom_port_range", {
                "true": ["port_low", "port_high"]
            });
            this.checkEnableExtIP = new SYNO.ux.Utils.EnableCheckGroup(c.getForm(), "use_ext_ip", ["ext_ip"])
        }, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        var b = {
            title: _T("tree", "leaf_ftp"),
            autoScroll: true,
            items: [this.createFtpTabObj(a), this.createSftpTabObj(a), this.createGeneralTabObj(a)]
        };
        Ext.apply(b, a);
        return b
    },
    createGeneralTabObj: function(a) {
        var b = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::ftp::general",
            title: _T("common", "general"),
            itemId: "generalFieldSet",
            collapsible: true,
            items: [{
                xtype: "syno_displayfield",
                value: _T("ftp", "ftp_advanced_option_desc")
            }, {
                xtype: "syno_button",
                btnStyle: "default",
                itemId: "advBtn",
                text: _T("common", "adv_setting"),
                autoWidth: true,
                handler: this.onFtpAdvSettingBtnClick,
                scope: this
            }, {
                xtype: "syno_displayfield",
                height: 10
            }, SYNO.SDS.BandwidthControl.SchedulePanelConfig(this, "FTP")]
        };
        return b
    },
    onFtpAdvSettingBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.FTP.AdvancedSettingDialog({
            module: this.module,
            owner: this.module.appWin
        });
        a.open()
    },
    createFtpTabObj: function(a) {
        var d = 1;
        var c = 7200;
        var b = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::ftp::ftp",
            title: _T("ftp", "ftp_ftpes"),
            itemId: "ftpFieldSet",
            name: "ftpFieldSet",
            labelWidth: 220,
            collapsible: true,
            webapi: {
                api: "SYNO.Core.FileServ.FTP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_checkbox",
                itemId: "enable_ftp",
                name: "enable_ftp",
                boxLabel: _T("ftp", "ftp_enabled"),
                listeners: {
                    scope: this,
                    check: this.setFormsEnabled
                }
            }, {
                xtype: "syno_checkbox",
                itemId: "enable_ftps",
                name: "enable_ftps",
                boxLabel: _T("ftp", "ftpes_enabled"),
                listeners: {
                    scope: this,
                    check: this.setFormsEnabled
                }
            }, {
                xtype: "syno_compositefield",
                indent: 1,
                items: [{
                    xtype: "syno_numberfield",
                    name: "timeout",
                    maxlength: 4,
                    fieldLabel: _T("ftp", "ftp_timeout"),
                    validator: function(e) {
                        var f = parseInt(e, 10);
                        if (f < d || f > c) {
                            return _T("error", "error_bad_field")
                        }
                        return true
                    }
                }, {
                    xtype: "syno_displayfield",
                    value: _T("time", "time_second") + " " + _T("ftp", "timeout_range")
                }]
            }, {
                xtype: "syno_numberfield",
                indent: 1,
                name: "portnum",
                maxlength: 5,
                fieldLabel: _T("ftp", "ftp_port"),
                vtype: "port",
                validator: function(e) {
                    if (SYNO.SDS.Utils.isReservedPort("ftp", e, e)) {
                        return _T("service", "error_dl_port_in_used")
                    } else {
                        return true
                    }
                }
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("ftp", "ftp_pasv_port_range")
            }, {
                xtype: "syno_radio",
                checked: true,
                indent: 2,
                name: "custom_port_range",
                inputValue: "false",
                boxLabel: _T("service", "service_dl_default_port") + " (" + this.defaultPasvMinPort + "-" + this.defaultPasvMaxPort + ")"
            }, {
                xtype: "syno_radio",
                indent: 2,
                name: "custom_port_range",
                inputValue: "true",
                boxLabel: _T("ftp", "ftp_manual_port_range") + _T("common", "colon")
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                fieldLabel: "composite field",
                indent: 3,
                items: [{
                    xtype: "syno_displayfield",
                    value: _T("ftp", "ftp_port_from") + _T("common", "colon")
                }, {
                    xtype: "syno_numberfield",
                    name: "port_low",
                    maxlength: 5,
                    vtype: "port"
                }, {
                    xtype: "syno_displayfield",
                    value: _T("ftp", "ftp_port_to") + _T("common", "colon")
                }, {
                    xtype: "syno_numberfield",
                    name: "port_high",
                    maxlength: 5,
                    vtype: "port"
                }]
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                name: "use_ext_ip",
                boxLabel: _T("ftp", "ftp_pasv_ext_ip")
            }, {
                xtype: "syno_combobox",
                name: "ext_ip",
                itemId: "ext_ip",
                indent: 2,
                fieldLabel: _T("ftp", "ftp_pasv_ext_ip_assign"),
                store: new Ext.data.JsonStore({
                    fields: ["display", "value"],
                    idProperty: "value",
                    data: []
                }),
                editable: true,
                displayField: "display",
                valueField: "value",
                width: 230,
                allowBlank: false,
                validator: function(f) {
                    if ("" === f) {
                        return _JSLIBSTR("extlang", "fieldblank")
                    }
                    if (Ext.form.VTypes.ip(f)) {
                        return true
                    }
                    for (var e = 0; e < this.getStore().getCount(); e++) {
                        if ((f == this.getStore().getAt(e).data.display) || (f == this.getStore().getAt(e).data.value)) {
                            return true
                        }
                    }
                    return _JSLIBSTR("vtype", "bad_ip")
                }
            }]
        };
        if (2 == this.ftpApiMaxVersion) {
            b.items.push({
                xtype: "syno_checkbox",
                indent: 1,
                name: "use_utf8",
                boxLabel: _T("ftp", "ftp_use_utf8")
            })
        } else {
            if (1 == this.ftpApiMaxVersion) {
                b.items.push({
                    xtype: "syno_checkbox",
                    indent: 1,
                    name: "enable_utf8",
                    boxLabel: _T("ftp", "ftp_utf8_client")
                })
            }
        }
        b.items = b.items.concat([{
            xtype: "syno_checkbox",
            indent: 1,
            name: "enable_fxp",
            boxLabel: _T("ftp", "fxp_enable")
        }, {
            xtype: "syno_checkbox",
            indent: 1,
            name: "enable_fips",
            boxLabel: _T("ftp", "fips_enable")
        }, {
            xtype: "syno_checkbox",
            indent: 1,
            name: "enable_ascii",
            boxLabel: _T("ftp", "ftp_support_ascii_mode")
        }]);
        if (3 <= this.ftpApiMaxVersion) {
            b.items.push({
                xtype: "syno_combobox",
                name: "utf8_mode",
                indent: 1,
                fieldLabel: _T("ftp", "ftp_utf8_desc"),
                displayField: "display",
                valueField: "value",
                store: new Ext.data.ArrayStore({
                    fields: ["display", "value"],
                    idIndex: 0,
                    data: [
                        [_T("ftp", "ftp_utf8_disabled"), 0],
                        [_T("ftp", "ftp_utf8_auto"), 1],
                        [_T("ftp", "ftp_utf8_forced"), 2]
                    ]
                })
            })
        }
        b.items.push({
            xtype: "syno_button",
            indent: 1,
            btnStyle: "default",
            itemId: "advanceBtnId",
            text: _T("ftp", "conn_restriction"),
            autoWidth: true,
            scope: this,
            handler: this.onFtpConnectionSettingBtnClick
        });
        b.webapi.version = this.ftpApiMaxVersion;
        return b
    },
    createSftpTabObj: function(a) {
        var b = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::ftp::sftp",
            title: _T("ftp", "sftp_setting"),
            itemId: "sftpFieldSet",
            collapsible: true,
            webapi: {
                api: "SYNO.Core.FileServ.FTP.SFTP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_checkbox",
                itemId: "enable_sftp",
                name: "enable",
                boxLabel: _T("ftp", "sftp_enabled"),
                listeners: {
                    scope: this,
                    check: this.setFormsEnabled
                }
            }, {
                xtype: "syno_numberfield",
                indent: 1,
                name: "sftp_portnum",
                maxlength: 5,
                vtype: "port",
                fieldLabel: _T("ftp", "sftp_port"),
                validator: function(c) {
                    if (SYNO.SDS.Utils.isReservedPort("ssh", c, c)) {
                        return _T("service", "error_dl_port_in_used")
                    } else {
                        return true
                    }
                }
            }]
        };
        return b
    },
    getScheduleForm: function() {
        return this.getForm()
    },
    setFormsEnabled: function() {
        var b = this.ftpForm.getComponent("enable_ftp").checked;
        var c = this.ftpForm.getComponent("enable_ftps").checked;
        var a = this.sftpForm.getComponent("enable_sftp").checked;
        this.setFtpFormEnabled(b || c);
        this.setSftpFormEnabled(a);
        this.setGeneralFormEnabled(b || c || a)
    },
    setFtpFormEnabled: function(a) {
        var d = this.ftpForm;
        var c = null;
        var e = "";
        for (var b = 0; b < d.items.getCount(); b++) {
            c = d.items.get(b);
            e = c.getItemId();
            if ("enable_ftp" == e || "enable_ftps" == e) {
                continue
            }
            c.setDisabled(!a)
        }
    },
    setSftpFormEnabled: function(a) {
        var d = this.sftpForm;
        var c = null;
        for (var b = 0; b < d.items.getCount(); b++) {
            c = d.items.get(b);
            if ("enable_sftp" == c.getItemId() || "sftp_ssh_prompt" == c.getItemId()) {
                continue
            }
            c.setDisabled(!a)
        }
    },
    setGeneralFormEnabled: function(a) {
        var b = this.generalForm;
        b.getComponent("advBtn").setDisabled(!a);
        this.bandwidthSettingEnable(a)
    },
    onFtpConnectionSettingBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.FTP.ConnectionSettingDialog({
            module: this.module,
            owner: this.module.appWin
        });
        a.open()
    },
    isPortConflict: function(e) {
        var d = ("true" == e.findField("custom_port_range").getGroupValue());
        var f = e.findField("portnum").getValue();
        var a = e.findField("sftp_portnum").getValue();
        var b = this.defaultPasvMinPort;
        var c = this.defaultPasvMaxPort;
        if (d) {
            b = e.findField("port_low").getValue();
            c = e.findField("port_high").getValue();
            if (b > c) {
                e.findField("port_low").setValue(c);
                e.findField("port_high").setValue(b);
                b = e.findField("port_low").getValue();
                c = e.findField("port_high").getValue()
            }
            if (SYNO.SDS.Utils.isReservedPort("ftp", b, c)) {
                this.ownerCt.setStatusError({
                    text: _T("ftp", "ftp_port_in_used"),
                    clear: true
                });
                return true
            }
        }
        if (f >= b && f <= c) {
            this.ownerCt.setStatusError({
                text: _T("ftp", "ftp_ports_conflict"),
                clear: true
            });
            return true
        }
        if (a == f || (a >= b && a <= c)) {
            this.ownerCt.setStatusError({
                text: _T("app_port_alias", "err_port_dup"),
                clear: true
            });
            return true
        }
        if (f == this.sftpPort) {
            this.ownerCt.setStatusError({
                text: _T("app_port_alias", "err_port_dup"),
                clear: true
            });
            return true
        }
        return false
    },
    beforeRequest: function(a) {
        if ("set" != a) {
            return true
        }
        if (this.isPortConflict(this.getForm())) {
            return false
        }
        return true
    },
    processParams: function(e, d) {
        var c = this.getForm();
        var b = {
            api: "SYNO.Core.FileServ.FTP.SFTP",
            method: "set",
            version: 1
        };
        d = d.concat({
            api: "SYNO.Core.DDNS.ExtIP",
            version: 1,
            method: "list"
        });
        for (var a = 0; a < d.length; a++) {
            if ("SYNO.Core.FileServ.FTP" === d[a].api && "set" === d[a].method) {
                d[a].params.custom_port_range = ("true" == d[a].params.custom_port_range) ? true : false;
                if (d[a].params.custom_port_range) {
                    d[a].params.custom_port = d[a].params.port_low + ":" + d[a].params.port_high
                }
            } else {
                if (true === SYNO.ux.Utils.checkApiConsistency(b, d[a])) {
                    d[a].params.portnum = d[a].params.sftp_portnum
                }
            }
        }
        if ("set" === e) {
            this.ftpChange = c.findField("enable_ftp").isDirty();
            this.ftpsChange = c.findField("enable_ftps").isDirty();
            this.sftpChange = c.findField("enable_sftp").isDirty()
        }
        return d
    },
    processReturnData: function(b, n, k) {
        var q = [];
        var o = {
            api: "SYNO.Core.DDNS.ExtIP",
            version: 1,
            method: "list"
        };
        var e = {
            api: "SYNO.Core.FileServ.FTP.SFTP",
            method: "get",
            version: 1
        };
        var p = {
            api: "SYNO.Core.BandwidthControl.Protocol",
            method: "get",
            version: 1,
            protocol: "FTP"
        };
        var f = [{
            display: "WAN: Default external IP",
            value: "default"
        }];
        var c = [];
        var a = [];
        var m = [];
        for (var l = 0; l < n.result.length; l++) {
            if ("SYNO.Core.FileServ.FTP" === n.result[l].api && "get" === n.result[l].method) {
                n.result[l].data.custom_port_range = (n.result[l].data.custom_port_range) ? "true" : "false";
                q = n.result[l].data.custom_port.split(":");
                n.result[l].data.port_low = parseInt(q[0], 10);
                n.result[l].data.port_high = parseInt(q[1], 10);
                if ("" === n.result[l].data.ext_ip) {
                    n.result[l].data.ext_ip = "default"
                }
                if ("default" != n.result[l].data.ext_ip && "ha" != n.result[l].data.ext_ip.substr(0, 2)) {
                    a.push({
                        display: "MANUAL: " + n.result[l].data.ext_ip,
                        value: n.result[l].data.ext_ip
                    })
                }
            } else {
                if (true === SYNO.ux.Utils.checkApiConsistency(e, n.result[l])) {
                    n.result[l].data.sftp_portnum = n.result[l].data.portnum;
                    this.sftpPort = n.result[l].data.portnum
                } else {
                    if (true === SYNO.ux.Utils.checkApiConsistency(p, n.result[l]) && k.compound[l].protocol === p.protocol) {
                        n.result[l].data = SYNO.SDS.BandwidthControl.reConstructApiKey("get", p.protocol, n.result[l].data)
                    } else {
                        if (true === SYNO.ux.Utils.checkApiConsistency(o, n.result[l])) {
                            for (var h = 0; h < n.result[l].data.length; h++) {
                                if ("WAN" == n.result[l].data[h].type) {
                                    f = [{
                                        display: "WAN: " + n.result[l].data[h].ip,
                                        value: "default"
                                    }]
                                } else {
                                    if ("ha" == n.result[l].data[h].type.substr(0, 2)) {
                                        var g = n.result[l].data[h].type.match(/\d+/)[0];
                                        g = parseInt(g, 10) + 1;
                                        c.push({
                                            display: String.format("HA ({0}): {1}", g, n.result[l].data[h].ip),
                                            value: n.result[l].data[h].type
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        m = m.concat(f);
        m = m.concat(c);
        m = m.concat(a);
        this.ftpForm.getComponent("ext_ip").getStore().loadData(m, false);
        var d = this.getForm();
        d.loadRecords(n.result, k.compound);
        this.setFormsEnabled();
        this.sendServiceEvent()
    },
    sendServiceEvent: function() {
        var a = this.getForm();
        if (this.ftpChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.FTP.FTP", !a.findField("enable_ftp").getValue())
        }
        if (this.ftpsChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.FTP.FTPES", !a.findField("enable_ftps").getValue())
        }
        if (this.sftpChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.FTP.SFTP", !a.findField("enable_sftp").getValue())
        }
    },
    errorHandling: function(a) {
        if (1903 == a) {
            this.getForm().findField("portnum").markInvalid(SYNO.API.Erros.core[a])
        } else {
            if (1904 == a) {
                this.getForm().findField("port_low").markInvalid(SYNO.API.Erros.core[a]);
                this.getForm().findField("port_high").markInvalid(SYNO.API.Erros.core[a])
            } else {
                if (1951 == a) {
                    this.getForm().findField("sftp_portnum").markInvalid(SYNO.API.Erros.core[a])
                }
            }
        }
        this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_bad_field"))
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService.WebDAV");
Ext.define("SYNO.SDS.AdminCenter.FileService.WebDAV.CalDAVDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.panel = new SYNO.SDS.AdminCenter.FileService.WebDAV.CalDAVPanel({
            module: this
        });
        var a = {
            dsmStyle: "v5",
            resizable: false,
            title: _T("service", "calendar_list"),
            width: 550,
            height: 450,
            layout: "fit",
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "close"),
                scope: this,
                handler: this.close
            }],
            keys: [{
                key: 27,
                fn: this.close,
                scope: this
            }],
            items: [this.panel]
        };
        Ext.apply(a, b || {});
        this.callParent([a])
    },
    onShow: function() {
        this.load()
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.WebDAV.CalDAV.Calendar",
            method: "list",
            version: 1,
            scope: this,
            callback: this.loadListData
        })
    },
    loadListData: function(c, b, a) {
        this.clearStatusBusy();
        if (!c) {
            this.errorHandling(b);
            return
        }
        this.panel.getStore().loadData(b.item)
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.setStatusError({
            text: a,
            clear: true
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.WebDAV.CalDAVPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.owner = a.module.owner;
        this.btntask = new Ext.util.DelayedTask(this.updateBtnCB, this);
        this.IpAddr = this.getDsmHost();
        if (undefined === this.IpAddr) {
            this.IpAddr = window.location.hostname
        }
        Ext.apply(this, a || {});
        a = {
            layout: "fit",
            store: this.createStore(),
            loadMask: true,
            stripeRows: true,
            autoExpandColumn: "destination",
            border: false,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    scope: this,
                    selectionchange: function() {
                        this.btntask.delay(100)
                    }
                }
            }),
            enableHdMenu: false,
            colModel: new Ext.grid.ColumnModel({
                columns: [{
                    id: "calendarname",
                    header: _T("service", "calendar_name"),
                    dataIndex: "calendarname",
                    width: 135
                }, {
                    id: "destination",
                    header: _T("service", "calendar_location"),
                    dataIndex: "destination",
                    renderer: function(g, d, f, c, e, b) {
                        g = "<span ";
                        g += ' ext:qtip="';
                        if (this.module.webdav_enable) {
                            g += "http://" + this.IpAddr + ":" + this.module.port + "/" + f.data.destination + "/" + f.data.calendarname;
                            g += "<br />"
                        }
                        if (this.module.webdav_enable_https) {
                            g += "https://" + this.IpAddr + ":" + this.module.ports + "/" + f.data.destination + "/" + f.data.calendarname
                        }
                        g += ' ">';
                        g += f.data.destination + "/" + f.data.calendarname + "</span>";
                        return g
                    }.createDelegate(this)
                }, {
                    id: "status",
                    header: _T("download", "download_list_status"),
                    dataIndex: "status",
                    width: 100,
                    renderer: function(i, f, h, e, g, d) {
                        var c;
                        var b;
                        i = '<span ext:qtip="{0}" class="{1}">{2}</span>';
                        if ("normal" === h.data.status) {
                            b = _T("service", "status_normal");
                            c = "normal-font"
                        } else {
                            c = "red-status";
                            if ("noexist" === h.data.status) {
                                b = _T("service", "calendar_broken")
                            } else {
                                b = _T("service", "calendar_crashed")
                            }
                        }
                        i = String.format(i, b, c, b);
                        return i
                    }
                }]
            }),
            listeners: {
                scope: this,
                beforedestroy: function() {
                    this.btntask.cancel()
                },
                rowdblclick: function(c, g, f) {
                    var b = this.getSelectionModel();
                    var d = b.getSelections();
                    if (1 !== d.length || "normal" !== d[0].data.status) {
                        return false
                    }
                    this.EditHandler()
                }
            },
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "add"),
                itemId: "upload",
                scope: this,
                handler: function() {
                    this.createHandler()
                }
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_edit"),
                itemId: "edit",
                disabled: true,
                scope: this,
                handler: function() {
                    this.EditHandler()
                }
            }, {
                xtype: "syno_button",
                text: _T("common", "delete"),
                itemId: "delete",
                disabled: true,
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: function() {
                    this.deleteHandler()
                }
            }]
        };
        this.callParent([a]);
        this.defineBehaviors()
    },
    createStore: function() {
        var a = new Ext.data.JsonStore({
            autoLoad: false,
            fields: ["id", "calendarname", "destination", "share", "status"]
        });
        return a
    },
    defineBehaviors: function() {
        var a = this.getTopToolbar();
        this.btnDelete = a.getComponent("delete");
        this.btnEdit = a.getComponent("edit")
    },
    updateBtnCB: function() {
        var a = this.getSelectionModel();
        var b = a.getSelections();
        if (0 >= b.length) {
            this.btnEdit.disable();
            this.btnDelete.disable();
            return
        }
        if (!this._S("demo_mode")) {
            this.btnDelete.enable()
        }
        if (b.length === 1 && "normal" === b[0].data.status) {
            this.btnEdit.enable()
        } else {
            this.btnEdit.disable()
        }
    },
    createHandler: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.WebDAV.CreateCalDAVDialog({
            owner: this.module,
            module: this,
            title: _T("common", "add")
        });
        a.open()
    },
    EditHandler: function() {
        var a = new SYNO.SDS.AdminCenter.FileService.WebDAV.CreateCalDAVDialog({
            owner: this.module,
            module: this,
            title: _T("common", "alt_edit")
        });
        a.GetEditData();
        a.open()
    },
    deleteHandler: function() {
        this.module.getMsgBox().confirmDelete(_T("service", "calendar_list"), _T("service", "delete_check_calendar") + '<br><font class="red-status">' + _T("service", "delete_check_calendar_note") + "</font>", this.deleteBtnCB, this);
        return
    },
    deleteBtnCB: function(c) {
        var a = this.getSelectionModel();
        var d = a.getSelections();
        var e = [];
        if ("yes" != c) {
            return
        }
        if (0 >= d.length) {
            return
        }
        for (var b = 0; b < d.length; b++) {
            e.push(d[b].id)
        }
        this.module.getEl().mask();
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.WebDAV.CalDAV.Calendar",
            version: 1,
            method: "delete",
            params: {
                id: e
            },
            scope: this,
            callback: this.onDeleteDone
        })
    },
    onDeleteDone: function(c, b, a) {
        if (this.module.getEl().isMasked()) {
            this.module.getEl().unmask()
        }
        if (!c) {
            this.errorHandling(b);
            return
        }
        this.module.load()
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.module.getMsgBox().alert(_T("tree", "leaf_downloadtask"), a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.WebDAV.CreateCalDAVDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        Ext.apply(this, a || {});
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.defineBehaviors()
    },
    fillConfig: function(a) {
        var b = {
            owner: a.owner,
            module: a.module,
            width: 560,
            height: 195,
            minWidth: 100,
            minHeight: 120,
            collapsible: false,
            autoScroll: false,
            constrainHeader: true,
            monitorResize: true,
            title: a.title,
            layout: "fit",
            items: [this.initFormConfig()],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "ok"),
                handler: this.Apply,
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                handler: this.onCloseHandler,
                scope: this
            }],
            keys: [{
                key: [10, 13],
                fn: this.Apply,
                scope: this
            }, {
                key: 27,
                fn: this.onCloseHandler,
                scope: this
            }]
        };
        Ext.apply(b, a);
        return b
    },
    initFormConfig: function() {
        var a = {
            xtype: "syno_formpanel",
            itemId: "newformpanel",
            labelAlign: "left",
            trackResetOnLoad: true,
            waitMsgTarget: true,
            border: false,
            labelWidth: 161,
            items: [{
                xtype: "field",
                inputType: "hidden",
                value: "",
                name: "id"
            }, {
                xtype: "field",
                inputType: "hidden",
                value: "",
                name: "share"
            }, {
                xtype: "field",
                inputType: "hidden",
                value: "",
                name: "fullpath"
            }, {
                xtype: "syno_textfield",
                name: "calendarname",
                fieldLabel: _T("service", "calendar_name"),
                tabIndex: 1,
                width: 157,
                maxlength: 255
            }, {
                xtype: "syno_compositefield",
                hideLabel: false,
                fieldLabel: _T("download", "download_list_dest_folder"),
                labelStyle: "width: 132px",
                width: 300,
                items: [{
                    xtype: "syno_textfield",
                    name: "destination",
                    readOnly: true,
                    tabIndex: 2,
                    width: 157
                }, {
                    xtype: "syno_button",
                    text: _T("common", "choose"),
                    scope: this,
                    handler: this.ChoosedestHandler
                }]
            }]
        };
        return a
    },
    defineBehaviors: function() {
        this.form = this.get("newformpanel").form
    },
    onCloseHandler: function() {
        this.close()
    },
    GetEditData: function() {
        var a = this.module.getSelectionModel();
        var b = a.getSelections();
        if (0 >= b.length) {
            return
        }
        this.form.loadRecord(b[0]);
        this.Edit = true
    },
    IsValidCheck: function(e, a) {
        var b = true;
        var d = ["#", "%", "&", "/", "<", ">", "?", "\\", "^", "`", "{", "}", "|", " ", "[", "]", '"', ";", "'", "*", ":"];
        if (!e) {
            this.getMsgBox().alert(this.title, _T("service", "enter_calendar_name"));
            b = false
        } else {
            if (!a) {
                this.getMsgBox().alert(this.title, _T("service", "warning_select_dest"));
                b = false
            } else {
                if ("homes" === a) {
                    this.getMsgBox().alert(this.title, _T("service", "cannot_create_calender_inhomes"));
                    b = false
                } else {
                    if (("@eadir" === e.toLowerCase()) || (0 === e.indexOf("._"))) {
                        this.getMsgBox().alert(this.title, _WFT("common", "reservedname"));
                        b = false
                    } else {
                        for (var c = 0; c < d.length; c++) {
                            if (-1 !== e.indexOf(d[c])) {
                                this.getMsgBox().alert(this.title, _T("service", "calendar_name_illegal"));
                                b = false;
                                break
                            }
                        }
                        for (c = 0; c < d.length; c++) {
                            if ("/" !== d[c] && -1 !== a.indexOf(d[c])) {
                                this.getMsgBox().alert(this.title, _T("service", "calender_destination_illegal"));
                                b = false;
                                break
                            }
                        }
                    }
                }
            }
        }
        return b
    },
    getCalendarData: function() {
        var a = {
            calendarname: this.form.findField("calendarname").getValue(),
            destination: this.form.findField("destination").getValue(),
            fullpath: this.form.findField("fullpath").getValue(),
            share: this.form.findField("share").getValue()
        };
        return a
    },
    createCalendar: function() {
        var a = this.form.getValues();
        delete a.id;
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.WebDAV.CalDAV.Calendar",
            version: 1,
            method: "create",
            params: a,
            callback: this.SaveDone,
            scope: this
        })
    },
    editCalendar: function() {
        var a = this.form.getValues();
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.WebDAV.CalDAV.Calendar",
            version: 1,
            method: "set",
            params: a,
            callback: this.SaveDone,
            scope: this
        })
    },
    Apply: function() {
        var d = this.form.findField("calendarname");
        var b = this.form.findField("destination");
        var c = d.getValue();
        var a = b.getValue();
        if (!this.IsValidCheck(c, a)) {
            return false
        }
        if (!d.isDirty() && !b.isDirty()) {
            this.close()
        } else {
            this.setStatusBusy({
                text: _T("common", "saving")
            });
            if (this.Edit) {
                this.editCalendar()
            } else {
                this.createCalendar()
            }
        }
    },
    ChoosedestHandler: function(b, a) {
        var c = new SYNO.SDS.Utils.FileChooser.Chooser({
            owner: this,
            superuser: true,
            caldavIgnore: true,
            closeOwnerWhenNoShare: true,
            closeOwnerNumber: 2,
            treeFilter: function(f, d) {
                if (d) {
                    var e = d.spath || d.path;
                    if ("iso" === d.mountType || ".DAV" === e.substr(e.lastIndexOf("/") + 1) || e.toLowerCase() === "/surveillance") {
                        return false
                    }
                }
                return true
            },
            title: _T("common", "add"),
            usage: {
                type: "chooseDir"
            }
        }, true);
        c.mon(c, "choose", this.onChooserSelect, this);
        c.open()
    },
    onChooserSelect: function(e, d, b) {
        var a = d.path.substr(1);
        var c;
        c = a.indexOf("/");
        if (c > 0) {
            this.form.findField("share").setValue(a.substr(0, c))
        } else {
            this.form.findField("share").setValue(a)
        }
        this.form.findField("destination").setValue(a);
        this.form.findField("fullpath").setValue(d.fullpath);
        e.close()
    },
    SaveDone: function(c, b, a) {
        this.clearStatusBusy();
        if (!c) {
            this.errorHandling(b);
            return
        }
        this.owner.load();
        this.close()
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.setStatusError({
            text: a,
            clear: true
        })
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.FileService.WebDAV");
Ext.define("SYNO.SDS.AdminCenter.FileService.WebDAV.AdvancedSettingsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.formPanel = this.createForm();
        this.runpgsql = true;
        var a = Ext.apply({
            dsmStyle: "v5",
            title: _T("common", "adv_setting"),
            width: 460,
            resizable: true,
            autoDestroy: true,
            layout: "fit",
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                handler: this.apply
            }, {
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.close
            }],
            items: [this.formPanel]
        }, b);
        this.callParent([a]);
        this.mon(this, "show", this.onShowHandler, this)
    },
    createForm: function() {
        var a = {
            border: false,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_checkbox",
                name: "anonymouslogin_enable",
                indent: 0,
                boxLabel: _T("service", "service_webdav_anonymous")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                name: "webdav_anonymouslogin_desc",
                value: _T("service", "service_webdav_anonymous_desc")
            }, {
                xtype: "syno_checkbox",
                name: "depth_infinity_enable",
                indent: 0,
                boxLabel: _T("service", "service_webdav_depth_infinity")
            }, {
                xtype: "syno_checkbox",
                name: "webdav_transfer_log_enable",
                indent: 0,
                boxLabel: _T("service", "service_webdav_transfer_log"),
                listeners: {
                    scope: this,
                    check: this.onLogCheckHandler
                }
            }, {
                xtype: "syno_button",
                disabled: true,
                id: this.logBtnId = Ext.id(),
                text: _T("log", "log_subtitle"),
                indent: 1,
                handler: function() {
                    SYNO.SDS.AppLaunch("SYNO.SDS.LogCenter.Instance", {
                        logType: "fileTransfer",
                        protocol: "webdavxfer"
                    })
                }
            }, {
                xtype: "syno_checkbox",
                name: "enable_http",
                hidden: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_https",
                hidden: true
            }]
        };
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    onLogCheckHandler: function(f, c) {
        var b = this.formPanel.getForm();
        var d = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var a = ("yes" === this._D("usbstation")) ? true : false;
        var e;
        if (c && false === this.runpgsql) {
            b.findField("webdav_transfer_log_enable").setValue(false);
            if (d && !a) {
                this.findAppWindow().getMsgBox().alert(this.title, _T("cms", "cms_no_volumes"));
                return
            }
            if (a) {
                e = _T("metadata", "metadata_warning_required")
            } else {
                e = _T("error", "volume_no_volumes")
            }
            this.findAppWindow().getMsgBox().confirm(this.title, e, function(g) {
                if ("yes" === g) {
                    if (a) {
                        this.close();
                        this.findAppWindow().startModule("SYNO.SDS.AdminCenter.SystemDatabase.Main")
                    } else {
                        SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                    }
                }
            }, this)
        }
    },
    onShowHandler: function() {
        this.load()
    },
    updateLogBtn: function() {
        var a = this.formPanel.getForm();
        var b = a.findField("webdav_transfer_log_enable").getValue();
        var c = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        if (c) {
            Ext.getCmp(this.logBtnId).disable()
        } else {
            Ext.getCmp(this.logBtnId).setDisabled(!b)
        }
    },
    getWebDAVGetParam: function() {
        var a = {
            api: "SYNO.Core.FileServ.WebDAV",
            version: 1,
            method: "get"
        };
        return a
    },
    getLogGetParam: function() {
        var a = {
            api: "SYNO.Core.SyslogClient.FileTransfer",
            version: 1,
            method: "get"
        };
        return a
    },
    getPgSqlParam: function() {
        var a = {
            api: "SYNO.Core.Service",
            version: 1,
            method: "get",
            params: {
                service_id: ["pgsql"]
            }
        };
        return a
    },
    load: function() {
        this.setStatusBusy();
        var a = [];
        a = a.concat(this.getWebDAVGetParam());
        a = a.concat(this.getLogGetParam());
        a = a.concat(this.getPgSqlParam());
        this.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: false,
                params: a
            },
            callback: this.getConfCB
        })
    },
    processLogGetParam: function(b) {
        var a = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.SyslogClient.FileTransfer", "get", "webdav");
        if (undefined === a) {
            a = false
        }
        if (this.runpgsql) {
            this.formPanel.getForm().setValues({
                webdav_transfer_log_enable: a
            })
        }
        this.updateLogBtn()
    },
    processPgSqlGetParam: function(b) {
        var a = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Service", "get", "service");
        if (undefined === a) {
            SYNO.Debug("Error");
            return
        }
        if (false === a instanceof Array || "pgsql" != a[0].service_id) {
            SYNO.Debug("Error (Cannot find pgsql in service array)");
            return
        }
        this.runpgsql = a[0].enable
    },
    processWebDAVGetParam: function(b) {
        var a = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.FileServ.WebDAV", "get");
        if (undefined === a) {
            SYNO.Debug("Error");
            return
        }
        this.formPanel.getForm().setValues(a)
    },
    getConfCB: function(c, b, a) {
        this.clearStatusBusy();
        if (true === b.has_fail) {
            this.errorHandling(b);
            return
        }
        this.processWebDAVGetParam(b);
        this.processPgSqlGetParam(b);
        this.processLogGetParam(b)
    },
    onBeforeApply: function() {
        var a = this.formPanel.getForm();
        if (!a.isDirty()) {
            var b = _T("error", "nochange_subject");
            this.setStatusError({
                text: b,
                clear: true
            });
            return false
        }
        if (!a.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        return true
    },
    getWebDAVSetParam: function() {
        var c = this.formPanel.getForm().getValues();
        var b = ["webdav_transfer_log_enable"];
        b.each(function(d) {
            delete c[d]
        }, this);
        var a = {
            api: "SYNO.Core.FileServ.WebDAV",
            version: 1,
            method: "set",
            params: c
        };
        return a
    },
    getLogSetParam: function() {
        var b = this.formPanel.getForm();
        var a = b.findField("webdav_transfer_log_enable").getValue();
        var c = {
            api: "SYNO.Core.SyslogClient.FileTransfer",
            version: 1,
            method: "set",
            params: {
                webdav: a
            }
        };
        return c
    },
    apply: function() {
        if (!this.onBeforeApply()) {
            return
        }
        this.setStatusBusy();
        var a = [];
        a = a.concat(this.getWebDAVSetParam());
        a = a.concat(this.getLogSetParam());
        this.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: false,
                params: a
            },
            callback: this.setConfCB
        })
    },
    setConfCB: function(c, b, a) {
        this.clearStatusBusy();
        if (true === b.has_fail) {
            this.errorHandling(b);
            return
        }
        this.close()
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.getMsgBox().alert(this.title, a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.WebAPIUtils", {
    getReqCompoundParam: function(d, b, e) {
        var c = [];
        if (!(d instanceof Array)) {
            c.append(d)
        } else {
            c = d
        }
        for (var a = 0; a < c.length; a++) {
            if (b === c[a].api && e === c[a].method) {
                return c[a]
            }
        }
        return
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService");
Ext.define("SYNO.SDS.AdminCenter.FileService.WebDAVTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    utils: new SYNO.SDS.AdminCenter.WebAPIUtils(),
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        })
    },
    enableCheckGroup: function() {
        var a;
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_http", ["http_port_num"]);
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https", ["https_port_num"]);
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_caldav", ["caldav_desc", this.ViewCalendarBtnId]);
        this.updateWEBDAVUI()
    },
    fillConfig: function(a) {
        var b = {
            title: _T("tree", "leaf_webdav"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.FileServ.WebDAV",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: this.createWebDAVItems()
        };
        Ext.apply(b, a);
        return b
    },
    createWebDAVItems: function() {
        var b = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::webdav::webdav",
            title: _T("tree", "leaf_webdav"),
            collapsible: true
        };
        var a = [{
            xtype: "syno_displayfield",
            value: _T("service", "service_webdav_desc")
        }, {
            xtype: "syno_checkbox",
            name: "enable_http",
            boxLabel: _T("service", "service_webdav"),
            listeners: {
                scope: this,
                check: this.updateWEBDAVUI
            }
        }, {
            xtype: "syno_numberfield",
            name: "http_port_num",
            indent: 1,
            maxlength: 5,
            vtype: "port",
            validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("webdav"),
            fieldLabel: _T("service", "service_vhost_port")
        }];
        if ("yes" === this._D("supportHTTPS")) {
            a.push({
                xtype: "syno_checkbox",
                name: "enable_https",
                indent: 0,
                boxLabel: _T("service", "service_webdav_https"),
                listeners: {
                    scope: this,
                    check: this.updateWEBDAVUI
                }
            }, {
                xtype: "syno_numberfield",
                name: "https_port_num",
                indent: 1,
                maxlength: 5,
                vtype: "port",
                validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("webdav"),
                fieldLabel: _T("service", "service_vhost_port")
            })
        }
        a.push({
            xtype: "syno_checkbox",
            name: "enable_caldav",
            boxLabel: _T("service", "service_caldav")
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            name: "caldav_desc",
            value: _T("service", "caldav_enable_desc")
        }, {
            synotype: "indent_no_label",
            xtype: "syno_button",
            id: this.ViewCalendarBtnId = Ext.id(),
            text: _T("service", "view_calendar_list"),
            indent: 1,
            disabled: true,
            scope: this,
            handler: function() {
                var d = this.getForm();
                var c = new SYNO.SDS.AdminCenter.FileService.WebDAV.CalDAVDialog({
                    owner: this.module.appWin,
                    webdav_enable: d.findField("enable_http").getValue(),
                    webdav_enable_https: d.findField("enable_https").getValue(),
                    port: d.findField("http_port_num").getValue(),
                    ports: d.findField("https_port_num").getValue()
                });
                c.open()
            }
        });
        a.push({
            xtype: "displayfield",
            height: 10,
            value: "&nbsp;"
        }, {
            xtype: "syno_button",
            itemId: "setBtnId",
            id: this.advSettingBtnId = Ext.id(),
            text: _T("common", "adv_setting"),
            scope: this,
            handler: function() {
                var c = new SYNO.SDS.AdminCenter.FileService.WebDAV.AdvancedSettingsDialog({
                    owner: this.module.appWin,
                    module: this
                });
                c.show()
            }
        }, {
            xtype: "displayfield",
            height: 20,
            value: "&nbsp;"
        });
        a.push(SYNO.SDS.BandwidthControl.SchedulePanelConfig(this, "WebDAV"));
        b.items = a;
        return b
    },
    getScheduleForm: function() {
        return this.getForm()
    },
    updateWEBDAVUI: function() {
        var a = false;
        var c = this.getForm();
        var b = c.findField("enable_http").getValue();
        var d = ("yes" === this._D("supportHTTPS")) ? c.findField("enable_https").getValue() : false;
        if (b || d) {
            a = true
        }
        this.bandwidthSettingEnable(a);
        c.findField("enable_caldav").setDisabled(!a);
        Ext.getCmp(this.advSettingBtnId).setDisabled(!a)
    },
    processReturnData: function(c, b, a) {
        this.processBandwidthReturnData(b, a);
        this.processCalDAVGetParam(b, a);
        this.getForm().loadRecords(b.result, a.compound);
        this.sendServiceEvent(b)
    },
    processCalDAVGetParam: function(c, b) {
        var a = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.FileServ.WebDAV.CalDAV", "get");
        if (undefined === a) {
            SYNO.Debug("Error");
            return
        }
        this.loadCaldavGetParam(a)
    },
    processBandwidthReturnData: function(e, d) {
        var a = {
            api: "SYNO.Core.BandwidthControl.Protocol",
            method: "get",
            version: 1,
            protocol: "WebDAV"
        };
        for (var b = 0; b < e.result.length; b++) {
            if (true === SYNO.ux.Utils.checkApiConsistency(a, e.result[b]) && d.compound[b].protocol === a.protocol) {
                e.result[b].data = SYNO.SDS.BandwidthControl.reConstructApiKey("get", a.protocol, e.result[b].data)
            }
        }
        var c = this.getForm();
        c.loadRecords(e.result, d.compound)
    },
    sendServiceEvent: function(b) {
        var a = this.getForm();
        if (this.httpChg) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WebDAV.HTTP", true)
        }
        if (this.webDAVChg || this.httpChg) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WebDAV.HTTP", !a.findField("enable_http").getValue())
        }
        if ("yes" === this._D("supportHTTPS")) {
            if (this.httpsChg) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WebDAV.HTTPS", true)
            }
            if (this.webDAVSChg || this.httpsChg) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.WebDAV.HTTPS", !a.findField("enable_https").getValue())
            }
        }
    },
    getCalDAVSetParam: function() {
        var c = this.getForm();
        if (!c.findField("enable_caldav").isDirty()) {
            return null
        }
        var b = c.findField("enable_caldav").getValue();
        var d = {
            enable: b
        };
        var a = {
            api: "SYNO.Core.FileServ.WebDAV.CalDAV",
            method: "set",
            version: 1,
            params: d
        };
        return a
    },
    getCalDAVGetParam: function() {
        var a = {
            api: "SYNO.Core.FileServ.WebDAV.CalDAV",
            method: "get",
            version: 1
        };
        return a
    },
    processWebDAVSetParam: function(c) {
        var b = this.utils.getReqCompoundParam(c, this.webapi.api, this.webapi.methods.set);
        if (undefined === b) {
            SYNO.Debug("Error");
            return
        }
        var a = ["enable_caldav"];
        a.each(function(d) {
            delete b.params[d]
        }, this)
    },
    processParams: function(c, b) {
        if ("set" == c) {
            this.processWebDAVSetParam(b);
            var a = this.getCalDAVSetParam();
            if (null !== a) {
                b = b.concat(a)
            }
            this.webDAVChg = this.getForm().findField("enable_http").isDirty();
            this.httpChg = this.getForm().findField("http_port_num").isDirty();
            if (("yes" === this._D("supportHTTPS"))) {
                this.webDAVSChg = this.getForm().findField("enable_https").isDirty();
                this.httpsChg = this.getForm().findField("https_port_num").isDirty()
            }
        }
        b = b.concat(this.getCalDAVGetParam());
        return b
    },
    loadCaldavGetParam: function(b) {
        var a = this.getForm();
        a.setValues({
            enable_caldav: b.enable
        })
    },
    checkPortConfict: function(a) {
        if ("yes" === this._D("supportHTTPS")) {
            if (a.findField("enable_http").getValue() && a.findField("enable_https").getValue() && (a.findField("http_port_num").getValue() == a.findField("https_port_num").getValue()) && Ext.isNumber(a.findField("http_port_num").getValue())) {
                return false
            }
        }
        return true
    },
    beforeRequest: function(a) {
        if ("set" != a) {
            return true
        }
        if (!this.getForm().isDirty()) {
            return true
        }
        if (!this.checkPortConfict(this.getForm())) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_webdav"), _T("error", "error_port_conflict"));
            return false
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.TFTPAdvancedSettingsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var a = this.fillConfig(b);
        this.callParent([a]);
        this.form = this.panel.getForm();
        this.pgsqlEnabled = false;
        this.tftpGet = {
            api: "SYNO.Core.TFTP",
            method: "get",
            version: 1
        };
        this.tftpSet = {
            api: "SYNO.Core.TFTP",
            method: "set",
            version: 1
        };
        this.syslogGet = {
            api: "SYNO.Core.SyslogClient.FileTransfer",
            method: "get",
            version: 1
        };
        this.syslogSet = {
            api: "SYNO.Core.SyslogClient.FileTransfer",
            method: "set",
            version: 1
        };
        this.serviceGet = {
            api: "SYNO.Core.Service",
            method: "get",
            version: 1,
            params: {
                service_id: "pgsql"
            }
        };
        this.mon(this, "show", function() {
            var d;
            var c = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
            d = new SYNO.ux.Utils.EnableRadioGroup(this.form, "allowclient", {
                manual: ["startip", "endip"]
            });
            if (c) {
                Ext.getCmp(this.logBtnId).disable()
            }
            this.load()
        }, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        this.owner = a.owner;
        return Ext.apply({
            resizable: false,
            width: 700,
            height: 540,
            title: _T("common", "adv_setting"),
            layout: {
                type: "fit"
            },
            items: [this.panel = this.createPanel()],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                btnStyle: "blue",
                handler: this.applyHandler,
                scope: this
            }, {
                xtype: "syno_button",
                text: _T("common", "cancel"),
                handler: this.cancelHandler,
                scope: this
            }]
        }, a)
    },
    createPanel: function() {
        return new SYNO.SDS.Utils.FormPanel({
            border: false,
            trackResetOnLoad: true,
            owner: this,
            webapi: {
                api: "SYNO.Core.TFTP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_fieldset",
                title: _T("ftp", "xfer_setting"),
                items: [{
                    xtype: "syno_checkbox",
                    name: "enable_log",
                    id: this.enableLogId = Ext.id(),
                    boxLabel: _T("ftp", "tftp_xferlog"),
                    listeners: {
                        check: {
                            fn: this.onLogCheckedHandler,
                            scope: this
                        }
                    }
                }, {
                    xtype: "syno_button",
                    indent: 1,
                    id: this.logBtnId = Ext.id(),
                    text: _T("log", "log_subtitle"),
                    handler: function() {
                        SYNO.SDS.AppLaunch("SYNO.SDS.LogCenter.Instance", {
                            fn: "SYNO.SDS.LogCenter.LogSearch",
                            logType: "fileTransfer",
                            protocol: "tftpxfer"
                        })
                    }
                }]
            }, {
                xtype: "syno_fieldset",
                title: _T("ftp", "privilege_setting"),
                hideMode: "offsets",
                items: [{
                    xtype: "syno_combobox",
                    name: "permission",
                    id: this.permissionId = Ext.id(),
                    fieldLabel: _T("ftp", "tftp_permission"),
                    forceSelection: true,
                    editable: false,
                    value: "r",
                    valueField: "value",
                    displayField: "display",
                    store: new SYNO.API.JsonStore({
                        fields: ["display", "value"],
                        data: [{
                            display: _T("common", "readonly"),
                            value: "r"
                        }, {
                            display: _T("common", "writeable"),
                            value: "rw"
                        }]
                    })
                }, {
                    xtype: "syno_displayfield",
                    value: _T("ftp", "tftp_allowed_client")
                }, {
                    xtype: "syno_radio",
                    indent: 1,
                    name: "allowclient",
                    inputValue: "default",
                    boxLabel: _T("ftp", "tftp_all_connection")
                }, {
                    xtype: "syno_radio",
                    indent: 1,
                    name: "allowclient",
                    inputValue: "manual",
                    boxLabel: _T("ftp", "tftp_allow_ip_range")
                }, {
                    xtype: "syno_compositefield",
                    indent: 2,
                    items: [{
                        xtype: "syno_displayfield",
                        value: _T("ftp", "ftp_port_from") + _T("common", "colon")
                    }, {
                        xtype: "syno_textfield",
                        name: "startip",
                        id: this.startIpId = Ext.id(),
                        allowBlank: false,
                        vtype: "ip"
                    }, {
                        xtype: "syno_displayfield",
                        value: _T("ftp", "ftp_port_to") + _T("common", "colon")
                    }, {
                        xtype: "syno_textfield",
                        name: "endip",
                        id: this.endIpId = Ext.id(),
                        allowBlank: false,
                        vtype: "ip"
                    }]
                }]
            }, {
                xtype: "syno_fieldset",
                title: _T("ftp", "ftp_timeout"),
                hideMode: "offsets",
                items: [{
                    xtype: "syno_compositefield",
                    items: [{
                        xtype: "syno_numberfield",
                        name: "timeout",
                        id: this.timeoutId = Ext.id(),
                        allowBlank: false,
                        maxValue: 255,
                        minValue: 1,
                        fieldLabel: _T("ftp", "ftp_timeout")
                    }, {
                        xtype: "syno_displayfield",
                        value: _T("time", "time_second") + " (1~255)"
                    }]
                }]
            }]
        })
    },
    cancelHandler: function() {
        this.fireEvent("confirm", null);
        this.close()
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            scope: this,
            compound: {
                params: [this.tftpGet, this.syslogGet, this.serviceGet]
            },
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    this.setAllValues(b)
                } else {
                    this.setStatusError()
                }
            }
        })
    },
    setAllValues: function(b) {
        var a = false;
        var c = {};
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(b.result, this.tftpGet, function(e, d) {
            if (!e.success) {
                SYNO.Debug("SYNO.SDS.AdminCenter.FileService.TFTPAdvancedSettingsDialog: request tftp fail");
                return
            }
            Ext.apply(c, e.data)
        }, this);
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(b.result, this.syslogGet, function(e, d) {
            if (!e.success) {
                SYNO.Debug("SYNO.SDS.AdminCenter.FileService.TFTPAdvancedSettingsDialog: request syslog fail");
                return
            }
            a = e.data.tftp
        }, this);
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(b.result, this.serviceGet, function(e, d) {
            if (!e.success) {
                SYNO.Debug("SYNO.SDS.AdminCenter.FileService.TFTPAdvancedSettingsDialog: request syslog fail");
                return
            }
            e.data.service.each(function(f) {
                if ("pgsql" == f.service_id) {
                    this.pgsqlEnabled = f.enable
                }
            }, this)
        }, this);
        if (this.pgsqlEnabled) {
            c.enable_log = a
        } else {
            c.enable_log = false
        }
        if (!c.enable_log) {
            Ext.getCmp(this.logBtnId).disable()
        }
        if (("0.0.0.0" === c.startip) && ("255.255.255.255" === c.endip)) {
            c.allowclient = "default"
        } else {
            c.allowclient = "manual"
        }
        this.form.setValues(c)
    },
    applyHandler: function() {
        if (!this.validateForm()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        var b = this.form.getValues();
        if ("default" === b.allowclient) {
            b.startip = "0.0.0.0";
            b.endip = "255.255.255.255"
        } else {
            b.startip = Ext.getCmp(this.startIpId).getValue();
            b.endip = Ext.getCmp(this.endIpId).getValue()
        }
        if (!this.form.isDirty()) {
            this.fireEvent("confirm", this, b);
            this.close();
            return
        }
        var a = [Ext.apply({
            params: b
        }, this.tftpSet)];
        if (this.pgsqlEnabled) {
            a.push(Ext.apply({
                params: {
                    tftp: b.enable_log
                }
            }, this.syslogSet))
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(e, d, c) {
                this.clearStatusBusy();
                if (!e || !d) {
                    this.setStatusError()
                } else {
                    if (d.has_fail) {
                        this.setStatusError({
                            text: SYNO.API.getErrorString(d)
                        })
                    } else {
                        this.fireEvent("confirm", this, d);
                        this.close()
                    }
                }
            }
        })
    },
    validateForm: function() {
        if (!this.form.isValid()) {
            return false
        }
        var b = this.form.findField("allowclient").getGroupValue();
        var e = this.form.findField("startip");
        var a = this.form.findField("endip");
        var d = e.getValue();
        var c = a.getValue();
        if ("manual" === b) {
            if (!this.form.findField("startip").isValid()) {
                this.form.findField("startip").markInvalid();
                return false
            }
            if (!this.form.findField("endip").isValid()) {
                this.form.findField("endip").markInvalid();
                return false
            }
        }
        if (SYNO.SDS.AdminCenter.FileService.checkIpInterval(d, c)) {
            this.form.findField("startip").markInvalid();
            this.form.findField("endip").markInvalid();
            return false
        } else {
            return true
        }
    },
    onLogCheckedHandler: function(f, c) {
        var b = this.panel.getForm();
        var d = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var a = ("yes" === this._D("usbstation")) ? true : false;
        var e;
        if (c && !this.pgsqlEnabled) {
            b.findField("enable_log").setValue(false);
            if (d && !a) {
                this.owner.getMsgBox().alert(this.title, _T("cms", "cms_no_volumes"));
                return
            }
            if (a) {
                e = _T("metadata", "metadata_warning_required")
            } else {
                e = _T("error", "volume_no_volumes")
            }
            this.findAppWindow().getMsgBox().confirm(this.title, e, function(g) {
                if ("yes" === g) {
                    if (a) {
                        this.close();
                        this.findAppWindow().startModule("SYNO.SDS.AdminCenter.SystemDatabase.Main")
                    } else {
                        SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                    }
                }
            }, this)
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService");
SYNO.SDS.AdminCenter.FileService.checkIpInterval = function(b, e) {
    if ("string" !== typeof b || "string" !== typeof e) {
        return true
    }
    var d = b.split(".");
    var a = e.split(".");
    for (var c = 0; c < 4; ++c) {
        if (parseInt(a[c], 10) > parseInt(d[c], 10)) {
            return false
        } else {
            if (parseInt(a[c], 10) < parseInt(d[c], 10)) {
                return true
            }
        }
    }
    return false
};
SYNO.SDS.AdminCenter.FileService.handleWebApiData = function(a, d, e, c) {
    for (var b = 0; b < a.length; b++) {
        if (true === SYNO.ux.Utils.checkApiConsistency(d, a[b])) {
            e.call(c || this, a[b], b)
        }
    }
};
SYNO.SDS.AdminCenter.FileService.writeForm = function(c, d, b) {
    var e = {};
    for (var a = 0; a < c.length; a++) {
        e[c[a].name] = d[c[a].mapping]
    }
    b.setValues(e)
};
SYNO.SDS.AdminCenter.FileService.readForm = function(c, b, d) {
    for (var a = 0; a < c.length; a++) {
        var e = b.findField(c[a].name);
        if (!e || e.disabled) {
            continue
        }
        d[c[a].mapping] = e.getValue()
    }
};
Ext.define("SYNO.SDS.AdminCenter.FileService.TFTPPXETab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.module = b.module;
        this.tftpGet = {
            api: "SYNO.Core.TFTP",
            method: "get",
            version: 1
        };
        this.tftpSet = {
            api: "SYNO.Core.TFTP",
            method: "set",
            version: 1
        };
        this.pxeGet = {
            api: "SYNO.Core.Network.DHCPServer.PXE",
            method: "list",
            version: 1
        };
        this.pxeSet = {
            api: "SYNO.Core.Network.DHCPServer.PXE",
            method: "set",
            version: 1
        };
        this.ifGet = {
            api: "SYNO.Core.Network.Interface",
            method: "list",
            version: 1
        };
        this.tftpFieldMap = [{
            name: "tftp_enable",
            mapping: "enable"
        }, {
            name: "tftp_root_path",
            mapping: "root_path"
        }];
        this.pxeFieldMap = [{
            name: "pxe_enable",
            mapping: "enable"
        }, {
            name: "pxe_bootloader",
            mapping: "bootloader"
        }, {
            name: "pxe_ifname",
            mapping: "ifname"
        }, {
            name: "pxe_dns",
            mapping: "dns"
        }, {
            name: "pxe_startip",
            mapping: "startip"
        }, {
            name: "pxe_endip",
            mapping: "endip"
        }, {
            name: "pxe_netmask",
            mapping: "netmask"
        }, {
            name: "pxe_gateway",
            mapping: "gateway"
        }];
        var a = this.fillConfig(b);
        this.callParent([a]);
        this.mon(this, "afterlayout", function(d, e) {
            var c, f;
            c = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "tftp_enable", ["tftp_root_path", this.advRootPathBtnId, this.advSettingBtnId]);
            f = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "pxe_enable", ["pxe_bootloader", this.bootloaderBtnId, "pxe_ifname", "pxe_dns", "pxe_startip", "pxe_endip", "pxe_netmask", "pxe_gateway"])
        }, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        return Ext.apply({
            trackResetOnLoad: true,
            title: _T("ftp", "tftp_title"),
            items: [{
                xtype: "syno_displayfield",
                value: _T("ftp", "tftp_desc")
            }, this.createTftpObj(), this.createPxeObj()]
        }, a)
    },
    beforeRequest: function(f) {
        var c = this.getForm();
        if (f !== "set") {
            return true
        }
        this.tftpChange = c.findField("tftp_enable").isDirty();
        this.pxeChange = c.findField("pxe_enable").isDirty();
        if (this.isPxeDisabled()) {
            return true
        }
        var e = c.findField("pxe_gateway").getValue();
        var b = c.findField("pxe_netmask").getValue();
        var d = c.findField("pxe_startip").getValue();
        var a = c.findField("pxe_endip").getValue();
        if (!SYNO.SDS.Utils.Network.GatewayMatchIP(e, d, b)) {
            c.findField("pxe_gateway").markInvalid();
            this.ownerCt.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        } else {
            if (!SYNO.SDS.Utils.Network.GatewayMatchIP(e, a, b)) {
                c.findField("pxe_gateway").markInvalid();
                this.ownerCt.setStatusError({
                    text: _T("common", "forminvalid"),
                    clear: true
                });
                return false
            } else {
                if (SYNO.SDS.AdminCenter.FileService.checkIpInterval(d, a)) {
                    c.findField("pxe_startip").markInvalid();
                    c.findField("pxe_endip").markInvalid();
                    this.ownerCt.setStatusError({
                        text: _T("common", "forminvalid"),
                        clear: true
                    });
                    return false
                }
            }
        }
        return true
    },
    processParams: function(d, c) {
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c, this.tftpGet, function(f, e) {
            c.splice(e + 1, 0, this.ifGet)
        }, this);
        if ("set" !== d) {
            return c
        }
        var b = this.getEnabledInterface();
        var a = false;
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c, this.tftpSet, function(f, e) {
            f.params = {};
            SYNO.SDS.AdminCenter.FileService.readForm(this.tftpFieldMap, this.getForm(), f.params)
        }, this);
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c, this.pxeSet, function(f, e) {
            f.params = {};
            SYNO.SDS.AdminCenter.FileService.readForm(this.pxeFieldMap, this.getForm(), f.params);
            if (this.isPxeDisabled()) {
                if (b) {
                    f.params.ifname = b.get("pxe_ifname")
                } else {
                    c.splice(e, 1)
                }
            }
            a = true
        }, this);
        if (!a && b) {
            SYNO.SDS.AdminCenter.FileService.handleWebApiData(c, this.tftpSet, function(f, e) {
                c.splice(e + 1, 0, Ext.apply({
                    params: {
                        enable: false,
                        ifname: b.get("pxe_ifname")
                    }
                }, this.pxeSet))
            }, this)
        }
        return c
    },
    processReturnData: function(d, c, b) {
        var a = {};
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c.result, this.tftpSet, function(f, e) {
            if (!f.success) {
                SYNO.Debug("SYNO.SDS.AdminCenter.FileService.TFTPPXETab: apply tftp fail");
                return
            }
            if (this.tftpChange) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.FTP.TFTP", !this.getForm().findField("tftp_enable").getValue())
            }
        }, this);
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c.result, this.pxeSet, function(f, e) {
            if (!f.success) {
                SYNO.Debug("SYNO.SDS.AdminCenter.FileService.TFTPPXETab: apply pxe fail");
                return
            }
            if (this.pxeChange) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.FTP.PXE", !this.getForm().findField("pxe_enable").getValue())
            }
        }, this);
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c.result, this.tftpGet, function(f, e) {
            if (!f.success) {
                SYNO.Debug("SYNO.SDS.AdminCenter.FileService.TFTPPXETab: request tftp fail");
                return
            }
            SYNO.SDS.AdminCenter.FileService.writeForm(this.tftpFieldMap, f.data, this.getForm());
            this.rootPath = this.getForm().findField("tftp_root_path").getValue()
        }, this);
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c.result, this.ifGet, function(f, e) {
            Ext.each(f.data, function(j, g) {
                var i = j.ifname;
                var h = j.type;
                a[i] = SYNO.SDS.Utils.Network.idToString.apply(this.module.appWin, [i, h])
            }, this)
        }, this);
        SYNO.SDS.AdminCenter.FileService.handleWebApiData(c.result, this.pxeGet, function(g, f) {
            if (!g.success) {
                SYNO.Debug("SYNO.SDS.AdminCenter.FileService.TFTPPXETab: request pxe fail");
                return
            }
            var h = this.getForm().findField("pxe_ifname");
            var i = h.getStore();
            Ext.each(g.data, function(k, j) {
                if (a[k.ifname]) {
                    k.ifdisplay = a[k.ifname]
                } else {
                    k.ifdisplay = k.ifname
                }
            }, this);
            i.loadData(g.data);
            if (1 > i.getTotalCount()) {
                Ext.getCmp(this.fieldset_id).setDisabled(true);
                return
            }
            Ext.getCmp(this.fieldset_id).setDisabled(false);
            var e = this.getEnabledInterface();
            if (e) {
                this.getForm().setValues({
                    pxe_enable: true,
                    pxe_ifname: e.id
                })
            } else {
                e = i.getAt(0);
                this.getForm().setValues({
                    pxe_enable: false,
                    pxe_ifname: e.id
                })
            }
            SYNO.SDS.AdminCenter.FileService.writeForm(this.pxeFieldMap, e.json, this.getForm())
        }, this)
    },
    createTftpObj: function() {
        return {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::tftp::tftp",
            collapsible: true,
            useGradient: false,
            title: "TFTP",
            webapi: {
                api: "SYNO.Core.TFTP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            defaults: {
                indent: 1
            },
            items: [{
                xtype: "syno_checkbox",
                name: "tftp_enable",
                indent: 0,
                boxLabel: _T("ftp", "tftp_enable"),
                listeners: {
                    check: {
                        fn: function(b, a) {
                            this.getForm().findField("pxe_enable").setDisabled(!a)
                        },
                        scope: this
                    }
                }
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("ftp", "tftp_root"),
                items: [{
                    xtype: "syno_textfield",
                    name: "tftp_root_path",
                    readOnly: true,
                    allowBlank: false
                }, {
                    xtype: "syno_button",
                    id: this.advRootPathBtnId = Ext.id(),
                    text: _T("common", "choose"),
                    handler: this.selectRootPath,
                    scope: this
                }]
            }, {
                xtype: "syno_button",
                id: this.advSettingBtnId = Ext.id(),
                text: _T("common", "adv_setting"),
                handler: function() {
                    var a = new SYNO.SDS.AdminCenter.FileService.TFTPAdvancedSettingsDialog({
                        owner: this.module.appWin
                    });
                    a.show()
                },
                scope: this
            }]
        }
    },
    createPxeObj: function() {
        var a = new SYNO.API.Store({
            reader: new Ext.data.JsonReader({
                root: "",
                idProperty: "ifname",
                fields: [{
                    name: "pxe_enable",
                    mapping: "enable"
                }, {
                    name: "pxe_bootloader",
                    mapping: "bootloader"
                }, {
                    name: "pxe_ifname",
                    mapping: "ifname"
                }, {
                    name: "pxe_ifdisplay",
                    mapping: "ifdisplay"
                }, {
                    name: "pxe_dns",
                    mapping: "dns"
                }, {
                    name: "pxe_startip",
                    mapping: "startip"
                }, {
                    name: "pxe_endip",
                    mapping: "endip"
                }, {
                    name: "pxe_netmask",
                    mapping: "netmask"
                }, {
                    name: "pxe_gateway",
                    mapping: "gateway"
                }]
            })
        });
        return {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.FileService.Main::tftp::pxe",
            collapsible: true,
            useGradient: false,
            id: this.fieldset_id = Ext.id(),
            disabled: true,
            title: "PXE",
            webapi: {
                api: "SYNO.Core.Network.DHCPServer.PXE",
                methods: {
                    get: "list",
                    set: "set"
                },
                version: 1
            },
            defaults: {
                indent: 1
            },
            items: [{
                xtype: "syno_checkbox",
                name: "pxe_enable",
                disabled: true,
                indent: 0,
                boxLabel: _T("ftp", "pxe_enable")
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("ftp", "pxe_bootloader"),
                items: [{
                    xtype: "syno_textfield",
                    name: "pxe_bootloader",
                    readOnly: true,
                    allowBlank: false
                }, {
                    xtype: "syno_button",
                    id: this.bootloaderBtnId = Ext.id(),
                    text: _T("common", "choose"),
                    handler: this.selectBootLoader,
                    scope: this,
                    listeners: {
                        enable: {
                            fn: function(b) {
                                if (!this.rootPath || this.isPxeDisabled()) {
                                    b.disable()
                                }
                            },
                            scope: this
                        }
                    }
                }]
            }, {
                xtype: "syno_combobox",
                name: "pxe_ifname",
                forceSelection: true,
                allowBlank: false,
                editable: false,
                fieldLabel: _T("ftp", "pxe_interface"),
                store: a,
                valueField: "pxe_ifname",
                displayField: "pxe_ifdisplay",
                listeners: {
                    select: {
                        fn: function(e, f, d) {
                            for (var c = 0; this.pxeFieldMap.length > c; c++) {
                                var g = this.pxeFieldMap[c].name;
                                var b = this.pxeFieldMap[c].mapping;
                                if (g !== "pxe_enable") {
                                    this.getForm().findField(g).setValue(f.json[b])
                                }
                            }
                        },
                        scope: this
                    }
                }
            }, {
                xtype: "syno_textfield",
                name: "pxe_dns",
                allowBlank: false,
                maxLength: 64,
                vtype: "ip",
                fieldLabel: _T("ftp", "pxe_dns")
            }, {
                xtype: "syno_textfield",
                name: "pxe_startip",
                allowBlank: false,
                maxLength: 64,
                vtype: "ip",
                fieldLabel: _T("ftp", "pxe_start_ip")
            }, {
                xtype: "syno_textfield",
                name: "pxe_endip",
                allowBlank: false,
                maxLength: 64,
                vtype: "ip",
                fieldLabel: _T("ftp", "pxe_end_ip")
            }, {
                xtype: "syno_textfield",
                name: "pxe_netmask",
                allowBlank: false,
                maxLength: 64,
                maskRe: /[.0-9]/,
                invalidText: _JSLIBSTR("vtype", "bad_mask"),
                fieldLabel: _T("ftp", "pxe_netmask"),
                validator: function(b) {
                    if (!Ext.form.VTypes.netmaskVal.test(b)) {
                        return false
                    }
                    if (4 != b.split(".").length) {
                        return false
                    }
                    return true
                }
            }, {
                xtype: "syno_textfield",
                name: "pxe_gateway",
                allowBlank: false,
                maxLength: 64,
                vtype: "ip",
                fieldLabel: _T("ftp", "pxe_gateway")
            }]
        }
    },
    selectRootPath: function() {
        var a = new SYNO.SDS.Utils.FileChooser.Chooser({
            title: _T("ftp", "tftp_root"),
            superuser: true,
            owner: this.module.appWin,
            usage: {
                type: "chooseDir"
            },
            treeFilter: function(c, b) {
                return !(b && "broken" === b.status)
            }
        });
        a.mon(a, "choose", function(d, c, b) {
            var e = c.path.substr(1);
            if (this.rootPath !== e) {
                this.rootPath = e;
                this.getForm().findField("tftp_root_path").setValue(e);
                Ext.getCmp(this.bootloaderBtnId).enable()
            }
            d.close()
        }, this);
        a.open()
    },
    selectBootLoader: function() {
        var a = new SYNO.SDS.Utils.FileChooser.Chooser({
            title: _T("ftp", "pxe_bootloader"),
            owner: this.module.appWin,
            usage: {
                type: "chooseFile",
                folder_path: "/" + this.getForm().findField("tftp_root_path").getValue()
            }
        });
        a.mon(a, "choose", function(d, c) {
            var b = c.path.lastIndexOf("/");
            var e = c.path.substr(b + 1);
            this.getForm().findField("pxe_bootloader").setValue(e);
            d.close()
        }, this);
        a.open()
    },
    getEnabledInterface: function() {
        var a = this.getForm().findField("pxe_ifname").getStore();
        var c = null;
        for (var b = 0; a.getTotalCount() > b; b++) {
            if (!a.getAt(b).get("pxe_enable")) {
                continue
            }
            c = a.getAt(b);
            break
        }
        return c
    },
    isPxeDisabled: function() {
        var a = this.getForm().findField("pxe_enable");
        return a.disabled || !a.getValue()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.FileService");
Ext.define("SYNO.SDS.AdminCenter.FileService.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.FileService.TabPanel({
            module: this
        })
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "win":
                return "AdminCenter/file_winmacnfs_desc.html";
            case "ftp":
                return "AdminCenter/file_ftp_desc.html";
            case "tftp":
                return "AdminCenter/file_ftp_tftp.html";
            case "webdav":
                return "AdminCenter/file_webdav.html";
            default:
                return "AdminCenter/file_desc.html"
        }
    },
    getPanel: function() {
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab);
            if (a.tab === "ftp" && a.launchAdvanceDialog === true) {
                this.panel.getComponent("ftp").onFtpAdvSettingBtnClick()
            }
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    deactivate: function() {
        var a = this.panel.getAllForms();
        for (var b = 0; b < a.length; b++) {
            if (a[b].isDirty()) {
                return false
            }
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.FileService.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.module = a.module;
        this.ftpTab = new SYNO.SDS.AdminCenter.FileService.FtpSftpTab({
            itemId: "ftp",
            module: this.module
        });
        this.webdavTab = new SYNO.SDS.AdminCenter.FileService.WebDAVTab({
            itemId: "webdav",
            module: this.module
        });
        var b;
        b = Ext.apply({
            applyDirtyOnly: true,
            loadDirtyOnly: true,
            items: [new SYNO.SDS.AdminCenter.FileService.WinMacNfsTab({
                itemId: "win",
                module: this.module
            }), this.ftpTab, new SYNO.SDS.AdminCenter.FileService.TFTPPXETab({
                itemId: "tftp",
                module: this.module
            }), this.webdavTab]
        }, a);
        this.callParent([b])
    },
    processParams: function(g, f) {
        if ("set" === g) {
            var b = {
                api: "SYNO.Core.BandwidthControl.Protocol",
                method: "set",
                version: 1
            };
            for (var c = 0; c < f.length; c++) {
                if (true === SYNO.ux.Utils.checkApiConsistency(b, f[c])) {
                    var e = Ext.apply({}, b);
                    var d = Ext.apply({}, b);
                    e.params = SYNO.SDS.BandwidthControl.reConstructApiKey(g, "FTP", f[c].params);
                    d.params = SYNO.SDS.BandwidthControl.reConstructApiKey(g, "WebDAV", f[c].params);
                    var a = [];
                    if (!Ext.isEmpty(e.params.policy)) {
                        a.push(e)
                    } else {
                        if (this.ftpTab.getForm().isDirty()) {
                            e.params.policy = "disabled";
                            a.push(e)
                        }
                    }
                    if (!Ext.isEmpty(d.params.policy)) {
                        a.push(d)
                    } else {
                        if (this.webdavTab.getForm().isDirty()) {
                            d.params.policy = "disabled";
                            a.push(d)
                        }
                    }
                    f.remove(f[c]);
                    f = a.concat(f);
                    break
                }
            }
        }
        return this.callParent(arguments)
    },
    onBeforeRequest: function(c) {
        if (false === this.callParent(arguments)) {
            return false
        }
        var b = this.items;
        for (var a = 0; a < b.length; a++) {
            if (!(b.items[a] instanceof SYNO.SDS.Utils.FormPanel)) {
                continue
            }
            if (Ext.isFunction(b.items[a].beforeRequest) && !b.items[a].beforeRequest(c)) {
                this.setActiveTab(a);
                return false
            }
        }
        return true
    },
    processReturnData: function(c, b, a) {
        if (true === b.has_fail) {
            this.errorHandling(b);
            return
        }
        this.callParent(arguments)
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (1903 == b.code || 1904 == b.code || 1951 == b.code) {
            this.ftpTab.errorHandling(b.code);
            this.setActiveTab("ftp");
            return
        }
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.module.appWin.getMsgBox().alert(this.title, a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.ShareGrid", {
    extend: "SYNO.ux.GridPanel",
    WEBAPI_PARAM_SHARE_TYPE: ["dec", "local", "usb", "sata"],
    WEBAPI_PARAM_ADDITIONAL: ["hidden", "encryption", "is_aclmode"],
    constructor: function(a) {
        var f = a.owner.newuser;
        this.owner = a.owner;
        this.showHomesWarning = true;
        var d = ["is_aclmode", "is_readonly", "is_writable", "is_deny", "name", "preview", "inherit", "is_custom", "share_path", "is_unite_permission", {
            name: "force_readonly_reason",
            defaultValue: undefined
        }];
        if ("yes" === this._D("support_s2s", "no")) {
            d.push("is_sync_share")
        }
        var c = new SYNO.API.JsonStore({
            autoDestroy: true,
            appWindow: a.appWin,
            api: "SYNO.Core.Share.Permission",
            method: (f) ? "list_by_group" : "list_by_user",
            version: 1,
            baseParams: {
                user_group_type: (f) ? "local_group" : a.owner.authType + "_user",
                share_type: this.WEBAPI_PARAM_SHARE_TYPE,
                additional: this.WEBAPI_PARAM_ADDITIONAL
            },
            listeners: {
                exception: {
                    scope: a.owner,
                    fn: SYNO.SDS.AdminCenter.User.UserDialog.prototype.onStoreException
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            },
            root: "shares",
            idProperty: "name",
            totalProperty: "total",
            fields: d
        });
        var k = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_readonly"),
            dataIndex: "is_readonly",
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultColumnWidth,
            align: "center",
            ownerGrid: this,
            isIgnore: function(m, l) {
                return (this.ownerGrid.isAdminGroupMember() && l.get("is_aclmode"))
            },
            renderer: function(n, m, l) {
                if (this.ownerGrid.isAdminGroupMember() && l.get("is_aclmode")) {
                    return '<div class="syno-ux-grid-enable-column-disabled">&nbsp;</div>'
                } else {
                    return SYNO.ux.EnableColumn.prototype.renderer(n, m, l)
                }
            }
        });
        var g = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_writable"),
            dataIndex: "is_writable",
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultColumnWidth,
            align: "center"
        });
        var j = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_none"),
            dataIndex: "is_deny",
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultColumnWidth,
            align: "center"
        });
        var e = a.hideCustomColumn;
        if (a.module.appWin.getOpenConfig("className") === "SYNO.SDS.CMS.Application") {
            e = e || (a.module.appWin._S("version") < 4475)
        }
        e = e || f || ("yes" === this._D("usbstation", "no"));
        var i = new SYNO.SDS.Share.CustomColumn({
            module: a.module,
            owner: a.owner,
            ownerGrid: this,
            dataIndex: "is_custom",
            hidden: e,
            applyCallback: function() {
                this.getStore().load({
                    params: {
                        name: this.owner.username
                    }
                })
            },
            applyTarget: this
        });
        var h = new Ext.grid.ColumnModel([new SYNO.SDS.Share.InfoColumn({
            dataIndex: "is_unite_permission",
            hidden: f
        }), {
            id: "name",
            header: _T("share", "share_name"),
            dataIndex: "name",
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultNameColumnWidth
        }, {
            header: _T("share", "share_preview"),
            id: "preview",
            dataIndex: "preview",
            align: "center",
            useHtmlEncodeRender: false,
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultColumnWidth
        }, new SYNO.SDS.AdminCenter.Share.Utils.PermissionColumn({
            header: _T("share", "share_inherit"),
            dataIndex: "inherit",
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultColumnWidth,
            hidden: this._S("diskless")
        }), j, g, k, i]);
        var b = {
            title: _T("share", "share_rights"),
            cm: h,
            ds: c,
            cls: "without-dirty-red-grid",
            plugins: [k, g, j],
            autoExpandColumn: "name",
            enableColLock: false,
            enableHdMenu: false,
            enableColumnMove: false,
            colRo: k,
            colRw: g,
            colNa: j,
            colCu: i,
            clicksToEdit: 1,
            loadMask: true,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            bbar: [_T("share", "share_privileges_priority")]
        };
        Ext.apply(b, a);
        this.callParent([b]);
        this.mon(this, "afterrender", this.defineShareGridBehaviors, this);
        this.mon(j, "click", function(l, m, p, n) {
            var o = m.getStore().getAt(p);
            if (this.showHomesWarning && o.id === "homes" && o.get("is_deny") === true) {
                this.appWin.getMsgBox().alert(this.title, _T("share", "warn_deny_rule_homes"));
                this.showHomesWarning = false
            }
        }, this)
    },
    initComponent: function() {
        this.callParent(arguments);
        this.mon(this, "headerclick", function(c, b, a) {
            this.getStore().suspendEvents(false)
        }, this)
    },
    defineShareGridBehaviors: function() {
        this.colRo.checkSelectAll(this.getStore());
        this.colRw.checkSelectAll(this.getStore());
        this.colNa.checkSelectAll(this.getStore());
        this.mon(this, "cellclick", this.onGridCellClick, this);
        this.mon(this, "headerclick", function(d, c, b) {
            var a = d.getColumnModel();
            var e = a.getColumnId(c);
            this.onGridHeaderClick.call(this, a.getColumnById(e))
        }, this);
        if (this.owner.authType === "local") {
            this.mon(this, "activate", function() {
                if (this.isAdminGroupMember()) {
                    var a = this.getStore();
                    a.suspendEvents(false);
                    a.each(function(b) {
                        if (b.get("is_aclmode")) {
                            this.restorePermission(b, "is_readonly")
                        }
                    }, this);
                    this.checkPreviewAll();
                    a.resumeEvents()
                }
                this.getView().refresh()
            }, this)
        }
    },
    onLoad: function(b, a, c) {
        b.suspendEvents(false);
        if (this.owner.newuser) {
            Ext.each(a, function(d) {
                d.set("inherit", SYNO.SDS.AdminCenter.Share.Utils.convertBoolPermissions(d));
                d.set("is_custom", false);
                d.set("is_deny", false);
                d.set("is_writable", false);
                d.set("is_readonly", false)
            }, this)
        }
        this.checkPreviewAll();
        b.commitChanges();
        b.resumeEvents();
        this.getView().refresh()
    },
    restorePermission: function(b, a) {
        var c = b.getChanges();
        if (c.hasOwnProperty(a)) {
            b.set(a, !c[a])
        }
    },
    onGridCellClick: function(c, i, d, h) {
        var a = c.getStore().getAt(i);
        var g = c.getColumnModel().getDataIndex(d);
        var f = function(e) {
            return (e === "is_readonly" || e === "is_writable" || e === "is_deny")
        };
        var b = function(j, e) {
            if ("is_readonly" !== j) {
                e.set("is_readonly", false);
                c.colRo.checkSelectAll(c.getStore())
            }
            if ("is_writable" !== j) {
                e.set("is_writable", false);
                c.colRw.checkSelectAll(c.getStore())
            }
            if ("is_deny" !== j) {
                e.set("is_deny", false);
                c.colNa.checkSelectAll(c.getStore())
            }
            if ("is_custom" !== j) {
                e.set("is_custom", false)
            }
        };
        if (f(g)) {
            if (a.get(g) === true) {
                b(g, a)
            } else {
                this.restorePermission(a, "is_custom")
            }
        }
        this.checkPreview(a)
    },
    onGridHeaderClick: function(a) {
        if (a.box_el) {
            if (a.box_el.hasClass("syno-ux-cb-checked")) {
                if (a.dataIndex !== "is_readonly") {
                    this.colRo.box_el.removeClass("syno-ux-cb-checked");
                    this.colRo.onSelectAll()
                }
                if (a.dataIndex !== "is_writable") {
                    this.colRw.box_el.removeClass("syno-ux-cb-checked");
                    this.colRw.onSelectAll()
                }
                if (a.dataIndex !== "is_deny") {
                    this.colNa.box_el.removeClass("syno-ux-cb-checked");
                    this.colNa.onSelectAll()
                }
                this.getStore().each(function(b) {
                    b.set("is_custom", false)
                }, this)
            } else {
                this.getStore().each(function(b) {
                    this.restorePermission(b, "is_custom")
                }, this)
            }
        }
        this.checkPreviewAll();
        this.getStore().resumeEvents();
        this.getView().refresh()
    },
    checkPreview: function(a) {
        a.set("preview", SYNO.SDS.AdminCenter.Share.Utils.colorizePermission(this.getFinalPermission(a)))
    },
    isChanged: function() {
        return (this.getStore().getModifiedRecords().length !== 0)
    },
    isAdminGroupMember: function() {
        if (Ext.isBoolean(this.owner.isAdminGroupMember)) {
            return this.owner.isAdminGroupMember
        }
        var a = null;
        this.owner.groupGrid.store.each(function(b) {
            if (b.get("name").toLowerCase() === "administrators") {
                a = b;
                return false
            }
        });
        return (a !== null && a.get("is_member") === true)
    },
    getFinalPermission: function(a) {
        if (a.data.inherit === "na") {
            return "na"
        } else {
            if (a.data.inherit === "cu") {
                if (a.data.is_deny) {
                    return "na"
                } else {
                    return "cu"
                }
            } else {
                if (a.data.inherit === "rw") {
                    if (a.data.is_deny) {
                        return "na"
                    } else {
                        if (a.data.is_custom) {
                            return "cu"
                        } else {
                            return "rw"
                        }
                    }
                } else {
                    if (a.data.is_deny) {
                        return "na"
                    } else {
                        if (a.data.is_custom) {
                            return "cu"
                        } else {
                            if (a.data.is_writable) {
                                return "rw"
                            } else {
                                if (a.data.inherit === "-" && !a.data.is_readonly) {
                                    return "na"
                                } else {
                                    return (this.isAdminGroupMember() && a.data.is_aclmode) ? "rw" : "ro"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    getOpenConfig: function() {
        return {
            userName: this.owner.username,
            userType: "user"
        }
    },
    getWebAPI: function(b) {
        var a = [];
        Ext.each(this.getStore().getModifiedRecords(), function(c) {
            a.push({
                name: c.data.name,
                is_readonly: c.data.is_readonly,
                is_writable: c.data.is_writable,
                is_deny: c.data.is_deny,
                is_custom: c.data.is_custom
            })
        });
        return (a.length === 0) ? [] : [{
            api: "SYNO.Core.Share.Permission",
            method: "set_by_user_group",
            version: 1,
            params: {
                name: b || this.owner.username,
                user_group_type: this.owner.authType + "_user",
                permissions: a
            }
        }]
    },
    checkPreviewAll: function() {
        this.getStore().each(function(a) {
            this.checkPreview(a)
        }, this)
    },
    getShareInfoForS2S: function() {
        var a = [];
        Ext.each(this.getStore().getModifiedRecords(), function(b) {
            a.push({
                name: b.data.name,
                is_sync_share: b.data.is_sync_share,
                permissions: [{
                    is_readonly: b.data.is_readonly,
                    is_deny: b.data.is_deny,
                    is_writable: b.data.is_writable,
                    is_custom: b.data.is_custom
                }]
            })
        });
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.GenPasswordDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.passwordChecker = b.passwordChecker;
        this.user_account = this.passwordChecker.getInfo("getUserAcc");
        this.user_fullname = this.passwordChecker.getInfo("getUserDesc");
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        var a = {
            title: _T("passwd", "passwd_generator"),
            width: 300,
            height: 150,
            resizable: false,
            buttons: [{
                text: _T("common", "commit"),
                scope: this,
                handler: this.apply
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.panel]
        };
        Ext.apply(a, b);
        this.callParent([a])
    },
    createPanel: function() {
        var c;
        var a;
        for (c = 0; c < 100; c++) {
            a = this.genPasswd();
            if (true === this.passwordChecker.isPasswordValid(a, this.user_account, this.user_fullname)) {
                break
            }
        }
        var b = {
            border: false,
            items: [{
                xtype: "syno_textfield",
                width: 200,
                hideLabel: true,
                value: a,
                name: "random_passwd"
            }]
        };
        SYNO.LayoutConfig.fill(b);
        return new Ext.form.FormPanel(b)
    },
    applyPasswd: function(a) {
        this.passwordChecker.setValue("getPasswd", a);
        this.passwordChecker.setValue("getPasswdConfirm", a)
    },
    apply: function() {
        var a = this.form.findField("random_passwd").getValue();
        this.applyPasswd(a);
        this.close()
    },
    genPasswd: function() {
        var b = [];
        var c = 6;
        var g = "abcdefghijklmnopqrstuvwxyz";
        var k = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        var e = "~`!@#$%^&*()-_+={[}]|\\:;\"'<,>.?/";
        var j = "1234567890";
        var l = g + k + e + j;
        var f = 0;
        var d, h;
        var a = function(n, m) {
            return n.substr(m, 1)
        };
        if (true === this.passwordChecker.passwordPolicy.mixed_case) {
            b.push(a(k, Math.floor(Math.random() * k.length)));
            b.push(a(g, Math.floor(Math.random() * g.length)))
        }
        if (true === this.passwordChecker.passwordPolicy.included_numeric_char) {
            b.push(a(j, Math.floor(Math.random() * j.length)))
        }
        if (true === this.passwordChecker.passwordPolicy.included_special_char) {
            b.push(a(e, Math.floor(Math.random() * e.length)))
        }
        if (true === this.passwordChecker.passwordPolicy.min_length_enable) {
            c = this.passwordChecker.passwordPolicy.min_length
        }
        for (f = b.length; f < c; f++) {
            b[f] = a(l, Math.floor(Math.random() * l.length))
        }
        for (f = c; f > 0; f--) {
            h = Math.floor(Math.random() * f);
            d = b[f - 1];
            b[f - 1] = b[h];
            b[h] = d
        }
        return b.join("")
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPrivileges.PrivilegeGrid", {
    extend: "SYNO.ux.GridPanel",
    type: "local",
    pageSize: 50,
    isLoaded: false,
    isAppLoaded: false,
    isAppPermStoreLoaded: false,
    editAction: null,
    privMethod: null,
    privFilter: null,
    findField: null,
    getTitle: function() {
        switch (this.type) {
            case "domain":
                return _T("app_privilege", "domain_user");
            case "local":
                return _T("app_privilege", "local_user");
            case "ldap":
                return _T("share", "ldap_user");
            default:
                return undefined
        }
    },
    constructor: function(b) {
        Ext.copyTo(this, b, "module,type");
        this.store = new SYNO.API.JsonStore({
            api: "SYNO.Core.AppPriv",
            method: "list",
            version: 1,
            baseParams: {
                offset: 0,
                limit: this.pageSize,
                user_type: this.type
            },
            appWindow: this.module.appWin,
            autoDestroy: true,
            root: "priv_setting",
            totalProperty: "total",
            fields: ["user_name", "accepted_app"],
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onListAppException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            }
        });
        this.editAction = new SYNO.ux.Button({
            disabled: true,
            text: _T("common", "alt_edit"),
            scope: this,
            handler: this.onEdit
        });
        this.findField = new SYNO.ux.TextFilter({
            emptyText: _T("user", "search_user"),
            iconStyle: "filter",
            enumAction: "list",
            queryAction: "list",
            store: this.getStore(),
            pageSize: this.pageSize
        });
        this.privMethod = new SYNO.ux.ComboBox({
            width: 200,
            valueField: "value",
            displayField: "display",
            store: new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["display", "value"],
                data: [
                    [_T("app_privilege", "has_privilege"), "include"],
                    [_T("app_privilege", "has_no_privilege"), "exclude"]
                ]
            }),
            triggerAction: "all",
            mode: "local",
            editable: false,
            value: "include",
            listeners: {
                scope: this.getStore(),
                select: this.getStore().load
            }
        });
        this.privFilter = new SYNO.ux.ComboBox({
            width: 200,
            valueField: "app_id",
            displayField: "name",
            style: "margin-left: 6px;",
            store: this.createAppStore(),
            triggerAction: "all",
            mode: "local",
            editable: false,
            value: "",
            listeners: {
                scope: this.getStore(),
                select: this.getStore().load
            }
        });
        var a = Ext.apply({
            title: this.getTitle(),
            header: false,
            border: false,
            ds: this.getStore(),
            cm: new Ext.grid.ColumnModel([{
                id: "name",
                header: _T("user", "user_account"),
                dataIndex: "user_name",
                width: 100
            }, {
                id: "privilege",
                header: _T("tree", "leaf_appprivilege"),
                dataIndex: "accepted_app",
                width: 200,
                scope: this,
                renderer: this.renderPrivileges
            }]),
            autoExpandColumn: "privilege",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    scope: this,
                    selectionchange: this.onSelectionChange
                }
            }),
            listeners: {
                scope: this,
                rowdblclick: this.onEdit
            },
            tbar: {
                items: [this.editAction, this.privMethod, this.privFilter, "->", this.findField]
            },
            bbar: new SYNO.ux.PagingToolbar({
                store: this.getStore(),
                pageSize: this.pageSize,
                displayInfo: true
            })
        }, b);
        this.callParent([a])
    },
    initEvents: function() {
        this.mon(this, "activate", this.onActivate, this)
    },
    createAppStore: function() {
        if (this.filter_store) {
            return this.filter_store
        }
        this.filter_store = new SYNO.API.JsonStore({
            api: "SYNO.Core.AppPriv.App",
            method: "list",
            version: 1,
            baseParams: {
                user_type: this.type,
                offset: 0,
                limit: -1
            },
            idProperty: "app_id",
            root: "application",
            appWindow: this.module.appWin,
            loaded: false,
            autoLoad: true,
            listeners: {
                scope: this,
                load: function(b, a) {
                    b.sort("name", "ASC");
                    b.insert(0, new Ext.data.Record({
                        name: _T("itunes", "itunes_any"),
                        app_id: ""
                    }));
                    if (!this.privFilter.store.loaded) {
                        this.privFilter.setValue("");
                        this.privFilter.store.loaded = true
                    }
                    SYNO.SDS.AdminCenter.AppPrivileges.Utils.setUserTypeApp(b.baseParams.user_type, a);
                    this.isAppLoaded = true;
                    this.clearAppBusyMask()
                }
            },
            autoDestroy: true,
            fields: ["name", "app_id"]
        });
        return this.filter_store
    },
    renderPrivileges: function(g, b, a, h, e, c) {
        var d = [];
        if (!Ext.isArray(g)) {
            return ""
        }
        var f = this.createAppStore();
        Ext.each(g, function(i) {
            if (i === "SYNO.Rsync" && this._D("maxdisks") === "0") {
                return
            }
            var j = f.getById(i);
            if (j && j.get("name")) {
                d.push(j.get("name"))
            }
        }, this);
        d.sort();
        return d.join(", ")
    },
    load: function() {
        this.getStore().load({
            callback: function(b, a, c) {
                if (c) {
                    this.isLoaded = true
                }
            },
            scope: this
        })
    },
    onActivate: function() {
        if (!this.isLoaded) {
            this.load()
        }
    },
    onListAppException: function(d, e, f, c, b, a) {
        this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(b));
        this.module.appWin.clearStatusBusy()
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy();
        Ext.apply(b.params, {
            filter_method: this.privMethod.getValue(),
            filter_priv: this.privFilter.getValue()
        })
    },
    onLoad: function(b, a, c) {
        this.isAppPermStoreLoaded = true;
        this.clearAppBusyMask()
    },
    clearAppBusyMask: function() {
        if (this.isAppLoaded && this.isAppPermStoreLoaded) {
            this.getView().refresh();
            this.module.appWin.clearStatusBusy()
        }
    },
    onSelectionChange: function() {
        var a = this.getSelectionModel().getSelections();
        this.editAction.setDisabled(!a.length)
    },
    onEdit: function() {
        var b, a = this.getSelectionModel().getSelections();
        if (!a.length) {
            return
        }
        b = new SYNO.SDS.AdminCenter.AppPrivileges.EditWindow({
            type: this.type,
            recs: a,
            owner: this.module.appWin,
            module: this.module
        });
        b.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPrivileges.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin
    },
    createPanel: function() {
        this.title = _T("tree", "leaf_appprivilege");
        var a, b = [];
        Ext.each(["local", "domain", "ldap"], function(c) {
            if (this.isSupport(c, this.appWin)) {
                b.push(this.createPrivGrid(c))
            }
        }, this);
        a = new SYNO.SDS.Utils.TabPanel({
            module: this,
            title: this.title,
            activeTab: 0,
            fbar: undefined,
            items: b
        });
        return a
    },
    getPanel: function() {
        if (!this.panel) {
            this.panel = this.createPanel()
        }
        return this.panel
    },
    getHelpParam: function() {
        return "AdminCenter/application_appprivilege.html"
    },
    activate: function() {
        this.getPanel().items.each(function(a) {
            if (a.findField && a.findField.rendered) {
                a.findField.reset()
            }
        }, this);
        this.checkTypeStatus();
        this.getPanel().doLayout();
        this.loadTypeStatus();
        return true
    },
    deactivate: function() {
        this.getPanel().items.each(function(a) {
            a.isLoaded = false
        });
        return true
    },
    loadTypeStatus: function() {
        this.appWin.setStatusBusy();
        this.appWin.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.Directory.Domain",
                    version: 1,
                    method: "get"
                }, {
                    api: "SYNO.Core.Directory.LDAP",
                    version: 1,
                    method: "get"
                }]
            },
            scope: this,
            callback: this.loadTypeStatusHandler
        })
    },
    loadTypeStatusHandler: function(h, e, f, d) {
        var a = {};
        var c;
        var b = false,
            g = false;
        if (this.appWin.isDestroyed) {
            return
        }
        this.appWin.clearStatusBusy();
        if (!h || e.has_fail) {
            this.appWin.getMsgBox().alert(this.title, _T("common", "error_system"));
            return
        }
        b = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.Domain", "get", "enable_domain");
        g = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.LDAP", "get", "enable_client");
        Ext.apply(a, {
            domain: b,
            ldap: g
        });
        this.isEnabled = function(i) {
            return ("local" === i) || !!(a[i])
        };
        for (c in a) {
            if (a[c] && !this.getPrivGridByType(c)) {
                this.getPanel().add(this.createPrivGrid(c))
            }
        }
        this.checkTypeStatus()
    },
    isSupport: function(b, a) {
        if ("local" === b) {
            return true
        } else {
            if ("domain" === b) {
                return ("yes" === a._D("supportdomain"))
            } else {
                if ("ldap" === b) {
                    return ("yes" === a._D("supportldap"))
                }
            }
        }
    },
    isEnabled: function(a) {
        if ("local" === a) {
            return true
        } else {
            return false
        }
    },
    checkTypeStatus: function() {
        this.getPanel().items.each(function(a) {
            if (this.isSupport(a.type, this.appWin)) {
                this.getPanel().unhideTabStripItem(a)
            } else {
                this.getPanel().hideTabStripItem(a)
            }
            if (this.isEnabled(a.type)) {
                this.getPanel().unhideTabStripItem(a);
                a.enable()
            } else {
                a.disable()
            }
        }, this);
        if (this.getPanel().layout.activeItem.disabled) {
            this.getPanel().layout.setActiveItem("local");
            this.getPanel().layout.activeItem.show()
        }
    },
    createPrivGrid: function(a) {
        return new SYNO.SDS.AdminCenter.AppPrivileges.PrivilegeGrid({
            module: this,
            itemId: a,
            type: a
        })
    },
    getPrivGridByType: function(a) {
        return this.getPanel().getComponent(a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPrivileges.EditWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.editUsers = [];
        Ext.each(b.recs, function(e) {
            this.editUsers.push(e.data.user_name)
        }, this);
        this.panel = this.initAppPrivilegeEditGrid({
            recs: b.recs
        });
        var d = "";
        if (1 === b.recs.length) {
            d = b.recs[0].data.user_name
        } else {
            var c = "";
            b.recs.each(function(e) {
                c += e.data.user_name + ", "
            });
            d = c.substr(0, c.length - 2)
        }
        var a = {
            title: Ext.util.Format.ellipsis(d, 50, true),
            layout: "fit",
            width: 480,
            height: 320,
            minWidth: 480,
            minHeight: 320,
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.onApplyClick
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.panel]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.panel.mon(this, "activate", function() {
            var g, f, e;
            g = SYNO.SDS.AdminCenter.AppPrivileges.Utils.getUserTypeApp(this.ownerCt.type);
            Ext.each(g, function(h) {
                f = 0;
                e = 0;
                Ext.each(b.recs, function(i) {
                    if (-1 == i.data.accepted_app.indexOf(h[1])) {
                        e++
                    } else {
                        f++
                    }
                });
                h.push((0 === f) ? false : ((0 === e) ? true : "gray"))
            });
            this.getStore().loadData(g)
        }, this.panel)
    },
    initAppPrivilegeEditGrid: function(c) {
        var b;
        var a = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["display", "value", "checked"]
        });
        b = new SYNO.ux.EnableColumn({
            id: "privilege",
            header: _T("app_privilege", "grant_privilege"),
            dataIndex: "checked",
            width: 150,
            align: "center"
        });
        return new SYNO.ux.GridPanel(Ext.apply({
            itemId: "grid",
            ds: a,
            plugins: b,
            cm: new Ext.grid.ColumnModel([{
                id: "name",
                header: _T("user", "user_account"),
                dataIndex: "display",
                width: 100
            }, b]),
            autoExpandColumn: "name",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            })
        }, c))
    },
    onApplyClick: function() {
        var a = this.panel.getStore().getModifiedRecords();
        var c = [],
            b = [];
        if (!a.length) {
            this.close();
            return
        }
        Ext.each(a, function(d) {
            if (d.data.checked) {
                c.push(d.data.value)
            } else {
                b.push(d.data.value)
            }
        });
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.AppPriv",
            version: 1,
            method: "set",
            params: {
                user_name: this.editUsers,
                accepted_app: c,
                rejected_app: b
            },
            scope: this,
            callback: this.onApplyCallback
        })
    },
    onApplyCallback: function(d, b, c, a) {
        this.clearStatusBusy();
        if (!d) {
            this.setStatusError();
            return
        }
        if (-1 !== this.editUsers.indexOf(this._S("user"))) {
            this.applyModifiedRecord(b, this.panel.getStore())
        }
        this.module.getPanel().items.each(function(e) {
            e.isLoaded = false
        });
        this.module.getPanel().layout.activeItem.load();
        this.close()
    },
    applyModifiedRecord: function(c, b) {
        var a = b.getModifiedRecords();
        Ext.each(a, function(f) {
            var e = f.data.value,
                d = f.data.checked;
            SYNO.SDS.StatusNotifier.setAppPrivilege(e, d)
        })
    }
});
SYNO.SDS.AdminCenter.AppPrivileges.Utils = {
    setApp: function(b, a) {
        a.each(function(c) {
            b.push([c.get("name"), c.get("app_id")])
        });
        b.sort(function(d, c) {
            if (d[0] === c[0]) {
                return 0
            } else {
                if (d[0] < c[0]) {
                    return -1
                } else {
                    return 1
                }
            }
        })
    },
    setUserTypeApp: function(b, a) {
        if ("local" === b) {
            this.localApp = [];
            this.setApp(this.localApp, a)
        } else {
            if ("domain" === b) {
                this.domainApp = [];
                this.setApp(this.domainApp, a)
            } else {
                if ("ldap" === b) {
                    this.ldapApp = [];
                    this.setApp(this.ldapApp, a)
                }
            }
        }
    },
    getApp: function(b, a) {
        a.each(function(d) {
            var c = [];
            Ext.copyTo(c, d, "0,1");
            b.push(c)
        })
    },
    getUserTypeApp: function(a) {
        var b = [];
        if ("local" === a) {
            this.getApp(b, this.localApp)
        } else {
            if ("domain" === a) {
                this.getApp(b, this.domainApp)
            } else {
                if ("ldap" === a) {
                    this.getApp(b, this.ldapApp)
                }
            }
        }
        return b
    }
};
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.EditAppPrivPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 20,
    constructor: function(b) {
        this.appRules = [];
        this.store = new Ext.data.JsonStore({
            autoDestroy: true,
            fields: ["name", "app_id", "supportIP"]
        });
        this.allowCol = new SYNO.ux.EnableColumn({
            header: _T("app_privilege", "allow_privilege"),
            dataIndex: "allow",
            disableSelectAll: false,
            width: 120,
            align: "center",
            id: "allow"
        });
        this.denyCol = new SYNO.ux.EnableColumn({
            header: _T("app_privilege", "deny_privilege"),
            dataIndex: "deny",
            disableSelectAll: false,
            width: 120,
            align: "center",
            id: "deny"
        });
        this.advCol = new SYNO.SDS.AdminCenter.AppRulePrivileges.CustomColumn({
            entity_type: b.entity_type,
            entity_name: b.entity_name,
            module: b.module,
            owner: b.owner,
            ownerGrid: this,
            dataIndex: "custom",
            disableSelectAll: true,
            width: 120,
            id: "custom",
            hidden: b.hide_custom
        });
        var c = function(d) {
            if (d === "allow") {
                return _T("app_privilege", "allow_privilege")
            } else {
                if (d === "deny") {
                    return _T("app_privilege", "deny_privilege")
                } else {
                    if (d === "custom") {
                        return _T("app_privilege", "grant_by_ip")
                    }
                }
            }
        };
        var a = Ext.apply({
            module: this,
            header: false,
            border: false,
            height: 404,
            width: 750,
            cls: "without-dirty-red-grid",
            ds: this.store,
            cm: new Ext.grid.ColumnModel({
                columns: [{
                    id: "name",
                    header: _T("common", "name"),
                    dataIndex: "name",
                    width: 100,
                    scope: this
                }, {
                    header: _T("share", "share_preview"),
                    id: "preview",
                    dataIndex: "preview",
                    align: "center",
                    hidden: !b.showPreview,
                    renderer: c
                }, {
                    header: _T("share", "share_inherit"),
                    id: "inherit",
                    dataIndex: "inherit",
                    align: "center",
                    hidden: !b.showPreview,
                    renderer: c
                }, this.allowCol, this.denyCol, this.advCol]
            }),
            plugins: [this.allowCol, this.denyCol],
            autoExpandColumn: "name",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            })
        }, b);
        this.callParent([a]);
        this.mon(this, "afterrender", this.definePrivGridBehaviors, this);
        this.mon(this, "activate", this.onLoadPrivilege, this, {
            single: true
        })
    },
    definePrivGridBehaviors: function() {
        this.mon(this, "cellclick", this.onGridCellClick, this);
        this.mon(this, "headerclick", function(d, c, b) {
            var a = d.getColumnModel();
            var e = a.getColumnId(c);
            this.onGridHeaderClick.call(this, a.getColumnById(e))
        }, this)
    },
    onLoadPrivilege: function() {
        this.onBeforeLoadApp();
        this.loadRules()
    },
    loadRules: function() {
        if (!this.entity_name) {
            this.isRuleReady = true;
            this.onRenderPriv();
            return
        }
        var a = [{
            api: "SYNO.Core.AppPriv.Rule",
            version: 1,
            method: "get",
            params: {
                entity_type: this.entity_type,
                entity_name: this.entity_name
            }
        }];
        if (this.showPreview) {
            var b;
            if ("user" === this.entity_type && this.entity_name) {
                b = {
                    username: this.entity_name,
                    include_user: false
                }
            }
            a = a.concat({
                api: "SYNO.Core.AppPriv.App",
                version: 2,
                method: "preview",
                params: b
            })
        }
        this.owner.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: a
            },
            scope: this,
            callback: function(h, f, g, d) {
                if (!h || f.has_fail) {
                    this.owner.clearStatusBusy();
                    this.owner.getMsgBox().alert(this.title, _T("common", "error_system"));
                    return
                }
                var c = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.AppPriv.Rule", "get");
                if (this.showPreview) {
                    var e = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.AppPriv.App", "preview");
                    this.onRenderInherit(e.applications)
                }
                this.isRuleReady = true;
                this.appRules = c.rules;
                this.onRenderPriv()
            }
        })
    },
    getAppRules: function() {
        return this.isRuleReady ? this.appRules : []
    },
    onGridCellClick: function(c, i, d, h) {
        var a = c.getStore().getAt(i);
        var g = c.getColumnModel().getDataIndex(d);
        var f = function(e) {
            return (e === "allow" || e === "deny")
        };
        var b = function(j, e) {
            if ("allow" !== j) {
                e.set("allow", false);
                c.allowCol.checkSelectAll(c.getStore())
            }
            if ("deny" !== j) {
                e.set("deny", false);
                c.denyCol.checkSelectAll(c.getStore())
            }
            if ("custom" !== j) {
                e.set("custom", false)
            }
        };
        if (f(g)) {
            if (a.get(g) === true) {
                b(g, a)
            } else {
                this.restorePermission(a, "custom")
            }
        }
        this.checkPreview(a)
    },
    restorePermission: function(b, a) {
        var c = b.getChanges();
        if (c.hasOwnProperty(a)) {
            b.set(a, !c[a])
        }
    },
    onGridHeaderClick: function(a) {
        if (a.box_el) {
            if (a.box_el.hasClass("syno-ux-cb-checked")) {
                if (a.dataIndex !== "allow") {
                    this.allowCol.box_el.removeClass("syno-ux-cb-checked");
                    this.allowCol.onSelectAll()
                }
                if (a.dataIndex !== "deny") {
                    this.denyCol.box_el.removeClass("syno-ux-cb-checked");
                    this.denyCol.onSelectAll()
                }
                this.getStore().each(function(b) {
                    b.set("custom", false)
                }, this)
            } else {
                this.getStore().each(function(b) {
                    this.restorePermission(b, "custom")
                }, this)
            }
        }
        this.checkPreviewAll()
    },
    onBeforeLoadApp: function() {
        this.owner.setStatusBusy();
        this.appReady = false;
        this.owner.sendWebAPI({
            api: "SYNO.Core.AppPriv.App",
            version: 2,
            method: "list",
            params: {
                offset: 0,
                limit: this.pageSize
            },
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    this.owner.getMsgBox().alert(this.title, _T("common", "error_system"));
                    return
                }
                this.onLoad(b)
            }
        })
    },
    onLoad: function(d) {
        var c = d.applications;
        var b;
        var a = [];
        for (b = 0; b < c.size(); b++) {
            var e = c[b];
            if (true === this.appFilter(e)) {
                a.push(e)
            }
        }
        a.sort(function(g, f) {
            if (g.name[0] === f.name[0]) {
                return 0
            } else {
                if (g.name[0] < f.name[0]) {
                    return -1
                } else {
                    return 1
                }
            }
        });
        this.store.loadData(a);
        this.appReady = true;
        this.onRenderPriv()
    },
    appFilter: function(a) {
        if (a.supportIP) {
            return true
        }
    },
    onRenderPriv: function() {
        if (this.appReady && this.isRuleReady) {
            this.owner.clearStatusBusy();
            this.renderPrivGrid()
        }
    },
    isChanged: function() {
        return (this.store.getModifiedRecords().length !== 0)
    },
    getWebAPI: function() {
        var d = [],
            g = [];
        var h = this.store.getModifiedRecords();
        var b = h.size();
        var c;
        var e = [];
        var j = function(i) {
            return (!i.get("allow") && !i.get("deny") && !i.get("custom"))
        };
        if (b === 0) {
            return e
        }
        for (c = 0; c < b; c++) {
            var f = h[c];
            var a = {
                entity_type: f.get("entity_type"),
                entity_name: this.newname ? this.newname : f.get("entity_name"),
                app_id: f.get("app_id")
            };
            if (j(f)) {
                d.push(a)
            } else {
                if (f.get("allow")) {
                    a.allow_ip = ["0.0.0.0"]
                } else {
                    a.deny_ip = ["0.0.0.0"]
                }
                g.push(a)
            }
        }
        if (d.size() > 0) {
            e.push({
                api: "SYNO.Core.AppPriv.Rule",
                version: 1,
                method: "delete",
                params: {
                    rules: d
                }
            })
        }
        if (g.size() > 0) {
            e.push({
                api: "SYNO.Core.AppPriv.Rule",
                version: 1,
                method: "set",
                params: {
                    rules: g
                }
            })
        }
        return e
    },
    onRenderInherit: function(f) {
        this.store.suspendEvents(false);
        var g = this.store.getCount();
        var e = f.length;
        var d, c;
        for (d = 0; d < g; d++) {
            var a = this.store.getAt(d);
            var b = a.json.app_id;
            a.set("inherit", null);
            for (c = 0; c < e; c++) {
                if (b === f[c].app_id) {
                    a.set("inherit", f[c].privilelge)
                }
            }
        }
        this.checkPreviewAll();
        this.store.commitChanges();
        this.store.resumeEvents();
        this.getView().refresh()
    },
    renderPrivGrid: function() {
        this.store.suspendEvents(false);
        var f = this.store.getCount();
        var g = this.appRules;
        var d, c;
        for (d = 0; d < f; d++) {
            var b = this.store.getAt(d);
            var a = b.json.app_id;
            b.set("entity_type", this.entity_type);
            b.set("entity_name", this.entity_name);
            b.set("app_id", a);
            b.set("allow", false);
            b.set("deny", false);
            b.set("custom", false);
            for (c = 0; c < g.size(); c++) {
                var e = g[c];
                if (e.app_id === a) {
                    if (e.allow_ip.size() === 1 && e.allow_ip[0] === "0.0.0.0" && e.deny_ip.size() === 0) {
                        b.set("allow", true)
                    } else {
                        if (e.allow_ip.size() === 0 && e.deny_ip.size() === 1 && e.deny_ip[0] === "0.0.0.0") {
                            b.set("deny", true)
                        } else {
                            b.set("custom", true)
                        }
                    }
                }
            }
        }
        this.allowCol.checkSelectAll(this.getStore());
        this.denyCol.checkSelectAll(this.getStore());
        this.checkPreviewAll();
        this.store.commitChanges();
        this.store.resumeEvents();
        this.getView().refresh()
    },
    getFinalPermission: function(a) {
        if (a.data.inherit == "deny") {
            return "deny"
        } else {
            if (a.data.inherit === "custom") {
                if (a.data.deny) {
                    return "deny"
                } else {
                    return "custom"
                }
            } else {
                if (a.data.inherit === "allow") {
                    if (a.data.deny) {
                        return "deny"
                    } else {
                        if (a.data.custom) {
                            return "custom"
                        } else {
                            return "allow"
                        }
                    }
                } else {
                    if (a.data.deny) {
                        return "deny"
                    } else {
                        if (a.data.custom) {
                            return "custom"
                        } else {
                            if (a.data.allow) {
                                return "allow"
                            }
                        }
                    }
                }
            }
        }
    },
    checkPreview: function(a) {
        a.set("preview", this.getFinalPermission(a))
    },
    checkPreviewAll: function() {
        this.getStore().each(function(a) {
            this.checkPreview(a)
        }, this)
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.DefaultPrivDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.gridPanel = new SYNO.SDS.AdminCenter.AppRulePrivileges.EditAppPrivPanel({
            entity_type: "everyone",
            entity_name: "everyone",
            module: b.module,
            owner: this,
            itemId: "privgrid"
        });
        var a = Ext.apply({
            width: 800,
            height: 470,
            minWidth: 550,
            minHeight: 370,
            title: _T("iscsitrg", "iscsitrg_masking_default"),
            layout: "fit",
            items: [this.gridPanel],
            buttons: [{
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.onSaveAppRulePriv
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    isChanged: function() {
        return this.gridPanel.isChanged()
    },
    onCancel: function() {
        if (this.isChanged()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        } else {
            this.close()
        }
    },
    onSaveAppRulePriv: function() {
        if (!this.isChanged()) {
            this.close();
            return
        }
        this.saveAppRulePriv()
    },
    saveAppRulePriv: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: this.gridPanel.getWebAPI()
            },
            scope: this,
            callback: this.onSaveAppRulePrivDone
        })
    },
    onSaveAppRulePrivDone: function(d, b, c, a) {
        this.clearStatusBusy();
        if (!d || b.has_fail) {
            this.getMsgBox().alert(this.title, _T("common", "error_system"));
            return
        }
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.QuotaGrid", {
    extend: "SYNO.ux.EditorGridPanel",
    constructor: function(c) {
        this.supportGroupQuota = (c.owner._S("version") > 5496);
        this.supportShareQuota = (c.owner._D("support_share_quota", "no") === "yes");
        this.showMask = false;
        this.hideUsedCapacity = c.hideUsedCapacity;
        var a = this.createStore();
        var d = this.createColModel();
        var b = Ext.apply({
            plugins: [d.getColumnById("quota_enabled")],
            autoExpandColumn: "name",
            enableHdMenu: false,
            enableColumnMove: false,
            clicksToEdit: 1,
            store: a,
            colModel: d,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            view: new SYNO.ux.FleXcroll.grid.TreeView({
                useArrows: true,
                staticTree: false
            }),
            listeners: {
                beforeedit: {
                    scope: this,
                    fn: function(f) {
                        var g = f.record;
                        if (g.get("status") === "crash" || !g.get("target")) {
                            f.cancel = true
                        }
                        if (!this.supportGroupQuota && !g.get("quota_enabled")) {
                            f.cancel = true
                        }
                    }
                },
                validateedit: {
                    scope: this,
                    fn: this.checkVolumeConstraint
                }
            }
        }, c);
        this.callParent([b]);
        this.mon(this, "activate", function(e) {
            if (e.showMask) {
                e.mask(_T("user", "edit_quota_latter"))
            } else {
                if (e.owner.shareGrid.isAdminGroupMember()) {
                    e.mask(String.format(_T("user", "edit_adminquota"), e.owner.userForm.findField("name").getValue()))
                }
            }
        });
        this.mon(this, "deactivate", function(e) {
            e.unmask()
        });
        if (!this.supportGroupQuota) {
            this.mon(this, "afteredit", function(f) {
                var g = f.record;
                if (g.get("quota_enabled") && f.field === "quota" && f.value === 0) {
                    g.set("quota_enabled", false)
                }
            });
            this.mon(this, "headerclick", this.onHeaderClick, this);
            this.mon(this, "cellclick", this.onCellClick, this, {
                delay: 100
            })
        }
    },
    convertToMB: function(b, a) {
        if (a === "TB") {
            return b * 1024 * 1024
        }
        if (a === "GB") {
            return b * 1024
        }
        return b
    },
    checkVolumeConstraint: function(d) {
        var c = 4096 * 1024;
        var g = d.record;
        var a = g.get("total");
        var b = null;
        var f = "";
        if (d.field === "quota") {
            b = this.convertToMB(d.value, g.get("unit"))
        } else {
            if (d.field === "unit") {
                b = this.convertToMB(g.get("quota"), d.value)
            } else {
                return false
            }
        }
        if (b >= a) {
            a /= 1024;
            f = String.format(_T("user", "user_quota_limit_max_vol"), g.get("volume"), a.toFixed(2));
            d.grid.owner.getMsgBox().alert(_T("user", "error_quota_set"), f);
            return false
        }
        if (g.get("limit_4T") && b >= c) {
            if ("TB" === g.get("unit")) {
                f = String.format(_JSLIBSTR("extlang", "maxnumber"), c / 1024 / 1024 - 1 + " TB")
            } else {
                if ("GB" === g.get("unit")) {
                    f = String.format(_JSLIBSTR("extlang", "maxnumber"), c / 1024 - 1 + " GB")
                } else {
                    f = String.format(_JSLIBSTR("extlang", "maxnumber"), c + " MB")
                }
            }
            d.grid.owner.getMsgBox().alert(_T("user", "error_quota_set"), f);
            return false
        }
        return true
    },
    onCellClick: function(b, g, a, d) {
        var f = b.getStore().getAt(g);
        var c = b.getColumnModel().getColumnAt(a).id;
        if (c !== "quota_enabled" || f.get("status") === "crash" || !f.get("target")) {
            return
        }
        if (f.get("quota_enabled")) {
            f.set("quota", 1);
            b.startEditing(g, a - 2)
        } else {
            f.set("quota", 0)
        }
    },
    onHeaderClick: function(b, a, f) {
        var c = f.getTarget("input", 1, false);
        var d = b.getColumnModel().getColumnAt(a).id;
        if (d !== "quota_enabled" || !c) {
            return
        }
        b.getStore().each(function(e) {
            if (!e.get("target")) {
                return true
            }
            if (c.hasClassName("syno-ux-cb-checked")) {
                if (e.get("quota") === 0) {
                    e.set("quota", 1)
                }
            } else {
                e.set("quota", 0)
            }
        })
    },
    createStore: function() {
        var b = "user_quota";
        var a = [{
            name: "name",
            mapping: "name"
        }, {
            name: "used",
            mapping: "used"
        }, {
            name: "preview",
            mapping: "preview"
        }, {
            name: "group_limit",
            mapping: "group_limit"
        }, {
            name: "quota",
            mapping: "quota"
        }, {
            name: "unit",
            mapping: "unit"
        }, {
            name: "quota_enabled",
            mapping: "quota_enabled"
        }, {
            name: "limit_4T",
            mapping: "limit_4T"
        }, {
            name: "status",
            mapping: "status"
        }, {
            name: "total",
            mapping: "total"
        }, {
            name: "volume",
            mapping: "volume"
        }, {
            name: "target",
            mapping: "target"
        }, {
            name: "display_name",
            mapping: "display_name"
        }];
        return new Ext.data.Store({
            listeners: {
                beforeload: {
                    scope: this,
                    fn: function() {
                        this.owner.setStatusBusy()
                    }
                },
                load: {
                    scope: this,
                    fn: function() {
                        this.owner.clearStatusBusy()
                    }
                },
                exception: {
                    scope: this,
                    fn: function(e, f, g, d, h, c) {
                        this.owner.clearStatusBusy();
                        SYNO.Debug("Store exception: ", e, f, g, d, h, c)
                    }
                }
            },
            reader: new SYNO.ux.data.TreeReader({
                root: b,
                fields: a
            }),
            idProperty: "name",
            autoDestroy: true,
            remoteSort: false
        })
    },
    createColModel: function() {
        var b = new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: (this.supportShareQuota) ? [
                ["TB", _T("common", "size_tb")],
                ["GB", _T("common", "size_gb")],
                ["MB", _T("common", "size_mb")]
            ] : [
                ["GB", _T("common", "size_gb")],
                ["MB", _T("common", "size_mb")]
            ]
        });
        var a = [{
            header: (this.supportShareQuota) ? _T("common", "volume_share") : _T("volume", "volume"),
            dataIndex: "display_name",
            align: "left",
            treeCol: this.supportShareQuota,
            renderer: function(e, c, d) {
                c.attr = 'ext:qtip="' + e + '"';
                return (d.get("status") === "normal") ? e : String.format('(<font class="red-status">{0}</font>)', e)
            }
        }, {
            header: _T("user", "acnt_used_cap"),
            dataIndex: "used",
            width: 195,
            hidden: this.hideUsedCapacity,
            renderer: function(e, c, d) {
                return (!this.hidden && d.get("target")) ? SYNO.SDS.Utils.CapacityRender(e, 2) : ""
            }
        }, {
            header: _T("user", "user_quota_preview"),
            hidden: !this.supportGroupQuota,
            renderer: function(e, c, d) {
                if (!d.get("target")) {
                    return ""
                }
                if (d.get("quota") !== 0) {
                    return String.format("{0} {1}", d.get("quota").toFixed(2), d.get("unit"))
                }
                if (d.get("group_limit") !== 0) {
                    return SYNO.SDS.Utils.CapacityRender(d.get("group_limit"), 2)
                }
                return _T("user", "user_quota_no_limit")
            }
        }, {
            header: _T("user", "group_quota_limit"),
            dataIndex: "group_limit",
            hidden: !this.supportGroupQuota,
            renderer: function(e, c, d) {
                if (!d.get("target")) {
                    return ""
                }
                return (d.get("group_limit") === 0) ? _T("user", "user_quota_no_limit") : SYNO.SDS.Utils.CapacityRender(e, 2)
            }
        }, {
            header: _T("user", "user_quota_capacity"),
            dataIndex: "quota",
            align: "right",
            editor: new SYNO.ux.NumberField({
                allowBlank: false,
                allowNegative: false,
                allowDecimals: false,
                validateOnBlur: true,
                selectOnFocus: true
            }),
            renderer: function(e, c, d) {
                return (d.get("target")) ? e : ""
            }
        }, {
            header: _T("user", "quota_unit"),
            dataIndex: "unit",
            editor: new SYNO.ux.ComboBox({
                store: b,
                lazyRender: true,
                mode: "local",
                displayField: "display",
                valueField: "value",
                triggerAction: "all",
                editable: false
            }),
            renderer: function(e, c, d) {
                return (d.get("target")) ? e : ""
            }
        }, new SYNO.ux.EnableColumn({
            header: _T("user", "enable_quota"),
            id: "quota_enabled",
            dataIndex: "quota_enabled",
            width: 195,
            hidden: this.supportGroupQuota,
            enableFastSelectAll: true,
            isIgnore: function(d, c) {
                return !(c.get("target"))
            },
            renderer: function(e, c, d) {
                return (d.get("target")) ? SYNO.ux.EnableColumn.prototype.renderer.apply(this, arguments) : ""
            }
        })];
        return new Ext.grid.ColumnModel({
            defaults: {
                width: 130,
                align: "center"
            },
            columns: a
        })
    },
    configLeafObj: function(a, b) {
        if (Ext.isDefined(a.quota)) {
            a.quota = Math.floor(a.quota);
            a.unit = "MB";
            if (a.quota % 1024 === 0) {
                a.quota /= 1024;
                a.unit = "GB"
            }
            if (a.quota % 1024 === 0) {
                a.quota /= 1024;
                a.unit = "TB"
            }
        } else {
            a.quota = 0;
            a.unit = "GB"
        }
        a.quota_enabled = (a.quota !== 0);
        if (!a.quota_enabled) {
            a.unit = "GB"
        }
        if (!Ext.isDefined(a.group_limit)) {
            a.group_limit = 0
        }
        a.status = (b.readonly) ? "crash" : "normal";
        a.volume = b.display_name;
        a.total = Math.floor(b.size_total_byte / 1024 / 1024);
        a.leaf = true;
        a.expanded = false
    },
    loadQuotaSettings: function(b, d) {
        var c = this;
        var a = {};
        Ext.each(d.volumes, function(e) {
            a[e.volume_path] = e
        });
        if (!Ext.isDefined(b.user_quota)) {
            b.user_quota = b.quota
        }
        Ext.each(b.user_quota, function(f) {
            var e = a[f.volume];
            if (f.support_share_quota) {
                f.children = f.shares;
                f.leaf = false;
                f.expanded = true;
                f.status = (e.readonly) ? "crash" : "normal";
                f.volume = e.display_name;
                f.total = Math.floor(e.size_total_byte / 1024 / 1024);
                f.display_name = e.display_name;
                Ext.each(f.children, function(g) {
                    c.configLeafObj(g, e);
                    g.target = "share";
                    g.limit_4T = false;
                    g.display_name = g.name
                })
            } else {
                c.configLeafObj(f, e);
                f.target = "volume";
                f.limit_4T = true;
                f.name = e.volume_path;
                f.display_name = e.display_name
            }
        });
        this.getStore().loadData(b)
    },
    isDirty: function() {
        return (this.getStore().getModifiedRecords().length !== 0)
    },
    getWebAPI: function(b) {
        var a = [];
        this.getStore().getModifiedRecords().each(function(d) {
            var c = parseInt(d.get("quota"), 10);
            if (d.get("target") === "share") {
                a.push({
                    share: d.get("name"),
                    quota: this.convertToMB(c, d.get("unit"))
                })
            } else {
                if (d.get("target") === "volume") {
                    a.push({
                        volume: d.get("name"),
                        quota: this.convertToMB(c, d.get("unit"))
                    })
                }
            }
        }, this);
        return (a.length === 0) ? [] : [{
            api: "SYNO.Core.Quota",
            method: "set",
            version: 1,
            params: {
                name: b,
                user_quota: a
            }
        }]
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.UserDialog", {
    extend: "SYNO.SDS.ModalWindow",
    specialAccounts: ["guest", "admin"],
    _defaultNameColumnWidth: 150,
    _defaultColumnWidth: 130,
    WEBAPI_PARAM_SHARE_TYPE: ["dec", "local", "usb", "sata"],
    WEBAPI_PARAM_ADDITIONAL: ["hidden", "encryption", "is_aclmode"],
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.username = b.username;
        this.passwordChecker = b.passwordChecker;
        this.authType = b.authType || "local";
        this.supportShareUserQuota = this._D("support_share_user_quota", "no") === "yes";
        this.isSupportAppPriv = this._S("version") > 4931;
        this.panel = this.createTabPanel(b);
        var a = {
            width: 910,
            height: 500,
            minWidth: 910,
            minHeight: 420,
            layout: "fit",
            buttons: [{
                text: _T("common", "alt_apply"),
                itemId: "apply",
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.panel]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.defineBehaviors();
        this.userFormPanel.mon(this.userForm.findField("name"), "blur", function() {
            if (this.isValid()) {
                this.clearInvalid()
            }
        }, this.userForm.findField("password"));
        this.userFormPanel.mon(this.userForm.findField("description"), "blur", function() {
            if (this.isValid()) {
                this.clearInvalid()
            }
        }, this.userForm.findField("password"))
    },
    onClose: function() {
        if (false === this.callParent(arguments)) {
            return false
        }
        if (this.isTabsDirty()) {
            this.getMsgBox().confirm(_T("user", "user_acnt_info"), _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.doClose()
                }
            }, this);
            return false
        }
        return true
    },
    createTabPanel: function(c) {
        this.userFormPanel = this.initUserForm();
        this.userForm = this.userFormPanel.getForm();
        this.groupGrid = this.initGroupGrid({
            owner: this,
            module: this.module,
            appWin: this
        });
        this.shareGrid = this.initShareGrid({
            owner: this,
            module: this.module,
            appWin: this
        });
        this.quotaGrid = this.initQuotaGrid({
            owner: this,
            module: this.module,
            appWin: this
        });
        this.bandwidthGrid = this.initBandwidthGrid({
            owner: this,
            module: this.module,
            preview: true
        });
        this.appPrivilegeGrid = this.initPrivilegeGrid({
            title: _T("user", "user_application"),
            owner: this,
            module: this.module,
            entity_type: "user",
            entity_name: this.username,
            isSupportAppPriv: this.isSupportAppPriv,
            showPreview: true,
            appFilter: function(d) {
                if (-1 < d.grant_type.indexOf(c.authType)) {
                    return true
                }
            }
        });
        var a = (c.authType === "local") ? [this.userFormPanel, this.groupGrid] : [];
        a.push(this.shareGrid);
        if (this._D("supportquota", "no") === "yes") {
            a.push(this.quotaGrid)
        }
        if (this.needShowAppPrivilege(this.username)) {
            a = a.concat([this.appPrivilegeGrid])
        }
        a = a.concat([this.bandwidthGrid]);
        var b = {
            activeTab: 0,
            plain: true,
            defaults: {
                height: 310
            },
            useDefaultBtn: false,
            items: a
        };
        return new SYNO.SDS.Utils.TabPanel(b)
    },
    initUserForm: function(d) {
        var a;
        var c = (undefined !== this.passwordChecker) && (this.passwordChecker.passwordPolicy.strong_password_enable && (this.passwordChecker.passwordPolicy.mixed_case || this.passwordChecker.passwordPolicy.included_numeric_char || this.passwordChecker.passwordPolicy.included_special_char || this.passwordChecker.passwordPolicy.min_length_enable));
        var b = {
            title: _T("user", "user_info"),
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("user", "user_account") + ' <font class="red-status">' + _T("common", "star") + "</font>",
                name: "name",
                allowBlank: false,
                blankText: _T("user", "error_noname"),
                validateOnBlur: true,
                validationDelay: 250,
                validationEvent: "keyup",
                maxLength: 64,
                width: 200,
                vtype: "username"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("user", "user_fullname"),
                maxLength: 64,
                width: 200,
                name: "description"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("user", "user_email"),
                name: "email",
                maxLength: 512,
                width: 200,
                vtype: "email",
                validator: function() {
                    if (true === this.ownerCt.getForm().findField("notify_by_email").getValue() && "" === this.getValue()) {
                        return _T("user", "empty_email")
                    }
                    return true
                }
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("user", "user_passwd") + (c ? ' <font class="red-status">' + _T("common", "star") + "</font>" : ""),
                width: 500,
                items: [{
                    xtype: "syno_textfield",
                    textType: "password",
                    maxLength: 127,
                    width: 200,
                    name: "password",
                    startValidate: false,
                    validator: (this.passwordChecker) ? this.passwordChecker.isStrongValidator.createDelegate(this.passwordChecker) : Ext.emptyFn
                }, {
                    xtype: "syno_button",
                    text: _T("passwd", "passwd_gen_title"),
                    hidden: (undefined !== this.passwordChecker) && (((false === this.passwordChecker.passwordPolicy.strong_password_enable) || ("admin" === this.username))),
                    scope: this,
                    handler: function() {
                        var e = new SYNO.SDS.AdminCenter.User.GenPasswordDialog({
                            owner: this,
                            passwordChecker: this.passwordChecker
                        });
                        e.open()
                    }
                }]
            }, {
                xtype: "syno_textfield",
                textType: "password_confirm",
                fieldLabel: _T("user", "user_repswd") + (c ? ' <font class="red-status">' + _T("common", "star") + "</font>" : ""),
                maxLength: 127,
                name: "confirmpassword",
                width: 200,
                confirmFor: "password",
                validator: function(g) {
                    var e = this.ownerCt.getForm().findField(this.confirmFor);
                    var f = e.getValue();
                    if ((g !== f) && (f !== "12345678" || g !== "87654321")) {
                        return _T("pppoe", "error_password")
                    }
                    return true
                }
            }, {
                xtype: "syno_checkbox",
                name: "notify_by_email",
                hidden: true,
                value: false,
                boxLabel: _T("user", "create_user_notification_mail"),
                listeners: {
                    check: function() {
                        var f = this.ownerCt.getForm().findField("email");
                        var e = this.ownerCt.getForm().findField("send_password");
                        if (this.checked) {
                            f.label.dom.innerHTML = _T("user", "user_email") + ' <font class="red-status">' + _T("common", "star") + "</font>:";
                            e.enable()
                        } else {
                            f.label.dom.innerHTML = _T("user", "user_email") + ":";
                            e.setValue(false);
                            e.disable()
                        }
                    }
                }
            }, {
                xtype: "syno_checkbox",
                name: "send_password",
                hidden: true,
                value: false,
                boxLabel: _T("user", "send_user_password")
            }, {
                xtype: "syno_checkbox",
                name: "cannot_chg_passwd",
                boxLabel: _T("user", "user_chpasswd_disallow")
            }, {
                xtype: "syno_checkbox",
                name: "disabled",
                boxLabel: _T("user", "user_account_disable")
            }, {
                xtype: "syno_radio",
                indent: 1,
                boxLabel: _T("user", "user_disable_immediately"),
                name: "disableimmediately",
                inputValue: "setdisableimmediately"
            }, {
                xtype: "syno_compositefield",
                name: "expirefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    width: 178,
                    indent: 1,
                    boxLabel: _T("user", "user_disable_date"),
                    name: "disableimmediately",
                    inputValue: "setdisabledate"
                }, {
                    xtype: "syno_datefield",
                    format: "Y/n/j",
                    allowBlank: false,
                    width: 120,
                    name: "expireddate",
                    maxValue: new Date(2037, 12, 31),
                    minValue: new Date(2003, 1, 1)
                }]
            }, {
                xtype: "syno_displayfield",
                value: ['<font class="red-status">' + _T("common", "star") + "</font> " + _T("firewall", "firewall_field_blank_alert")]
            }, {
                xtype: "syno_button",
                id: this.reset_otp_btn = Ext.id(),
                text: _T("user", "reset_user_otp"),
                scope: this,
                hidden: true,
                handler: this.resetUserOTP
            }]
        };
        Ext.apply(b, d);
        a = new SYNO.SDS.Utils.FormPanel(b);
        a.getForm().findField("send_password").disable();
        if (this.passwordChecker) {
            this.passwordChecker.initPasswordChecker({
                getForm: function() {
                    return a.getForm()
                },
                getUserAcc: "name",
                getUserDesc: "description",
                getPasswd: "password",
                getPasswdConfirm: "confirmpassword",
                getStartValidate: function() {
                    return this.getForm().findField("password").startValidate
                }
            })
        }
        return a
    },
    initGroupGrid: function(c) {
        var e = new SYNO.API.JsonStore({
            appWindow: c.appWin,
            autoDestroy: true,
            api: "SYNO.Core.Group",
            method: "list",
            version: 1,
            fields: [{
                name: "name",
                type: "string"
            }, {
                name: "description",
                type: "string"
            }, {
                name: "is_member",
                type: "boolean"
            }],
            root: "groups",
            id: "name",
            remoteSort: false,
            listeners: {
                exception: {
                    scope: c.owner,
                    fn: SYNO.SDS.AdminCenter.User.UserDialog.prototype.onStoreException
                }
            }
        });
        var d = new SYNO.ux.EnableColumn({
            enableFastSelectAll: true,
            header: _T("userwizard", "join_group"),
            dataIndex: "is_member",
            width: SYNO.SDS.AdminCenter.User.UserDialog.prototype._defaultColumnWidth,
            align: "center",
            username: c.owner.username,
            isIgnore: function(g, f) {
                if ("administrators" === f.get("name") && ("admin" === this.username || "guest" === this.username || c.appWin._S("user") === this.username)) {
                    return true
                } else {
                    if (f.get("name") == "users") {
                        return true
                    } else {
                        return false
                    }
                }
            }
        });
        var a = new Ext.grid.ColumnModel([{
            id: "name",
            header: _T("group", "grp_name"),
            dataIndex: "name",
            width: this._defaultNameColumnWidth + (this._defaultColumnWidth / 2)
        }, {
            header: _T("group", "grp_desc"),
            id: "description",
            dataIndex: "description",
            renderer: Ext.util.Format.htmlEncode,
            width: this._defaultColumnWidth * 3.5
        }, d]);
        var b = {
            title: _T("user", "user_groups"),
            cm: a,
            ds: e,
            plugins: [d],
            autoExpandColumn: "name",
            enableColLock: false,
            enableHdMenu: false,
            cls: "without-dirty-red-grid"
        };
        Ext.apply(b, c);
        return new SYNO.ux.GridPanel(b)
    },
    initPrivilegeGrid: function(a) {
        if (!a.isSupportAppPriv) {
            return new SYNO.SDS.AdminCenter.AppPrivileges.EditWindow.prototype.initAppPrivilegeEditGrid(a)
        } else {
            return new SYNO.SDS.AdminCenter.AppRulePrivileges.EditAppPrivPanel(a)
        }
    },
    initShareGrid: function(a) {
        return new SYNO.SDS.AdminCenter.User.ShareGrid(a)
    },
    initBandwidthGrid: function(b) {
        var a = function(n, m, o, p, l, k) {
            if ("scheduled" === o.get("policy")) {
                m.attr = 'style="color:#aaaaaa;"'
            }
            return n
        };
        var g = new SYNO.ux.NumberField({
            allowBlank: false,
            allowNegative: false,
            allowDecimals: false,
            validationEvent: "keyup",
            maxLength: 9,
            validateOnBlur: true
        });
        var i = [];
        i.push({
            header: _T("bandwidth", "bandwidth_protocol"),
            dataIndex: "protocol",
            renderer: SYNO.SDS.BandwidthControl.ProtocolTitle,
            align: "left"
        });
        if (true === b.preview) {
            i.push({
                header: _T("bandwidth", "bandwidth_preview"),
                dataIndex: "preview",
                align: "center",
                renderer: function(o, n, k, p, m, l) {
                    a(o, n, k, p, m, l);
                    return k.data.upload_result + "/" + k.data.download_result
                }
            })
        }
        i.push({
            header: _T("bandwidth", "bandwidth_up_rate") + " (KB/s)",
            dataIndex: "upload_limit_1",
            align: "center",
            editor: g,
            renderer: a
        });
        i.push({
            header: _T("bandwidth", "bandwidth_down_rate") + " (KB/s)",
            dataIndex: "download_limit_1",
            align: "center",
            editor: g,
            renderer: a
        });
        var c = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: [
                [_T("bandwidth", "mode_disable_user"), "disabled"],
                [_T("bandwidth", "mode_enable"), "enabled"],
                [_T("bandwidth", "mode_schedule"), "scheduled"]
            ],
            autoDestroy: true
        });
        i.push({
            header: _T("bandwidth", "mode"),
            dataIndex: "policy",
            align: "center",
            renderer: function(k) {
                if (k === "notexist" || k === "disabled" || k === false) {
                    return _T("bandwidth", "mode_disable_user")
                }
                if (k === "enabled" || k === true) {
                    return _T("bandwidth", "mode_enable")
                }
                if (k === "scheduled") {
                    return _T("bandwidth", "mode_schedule")
                }
                return k
            },
            editor: new SYNO.ux.ComboBox({
                name: "modeSelect",
                hiddenName: "modeSelect",
                typeAhead: true,
                triggerAction: "all",
                displayField: "display",
                valueField: "value",
                hideLabel: true,
                id: Ext.id(),
                editable: false,
                forceSelection: true,
                valueNotFoundText: _T("bandwidth", "mode_disable_user"),
                store: c,
                mode: "local"
            })
        });
        i.push({
            dataIndex: "schedule_plan",
            align: "center",
            hidden: true
        });
        i.push({
            dataIndex: "upload_limit_2",
            align: "center",
            hidden: true
        });
        i.push({
            dataIndex: "download_limit_2",
            align: "center",
            hidden: true
        });
        var h = new Ext.grid.ColumnModel(i);
        h.isCellEditable = function(l, n) {
            var m = e.getAt(n);
            var k = 4;
            if (b.preview === false) {
                k = 3
            }
            if ("scheduled" === m.get("policy") && l !== k) {
                return false
            }
            return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, l, n)
        };
        var e = new SYNO.API.JsonStore({
            api: "SYNO.Core.BandwidthControl",
            method: "get",
            version: 1,
            appWindow: this,
            baseParams: {
                name: "",
                owner_type: "local_user"
            },
            fields: ["upload_result", "download_result", "upload_limit_1", "download_limit_1", "policy", "protocol", "owner_type", "schedule_plan", "upload_limit_2", "download_limit_2"],
            root: "bandwidths",
            remoteSort: false,
            listeners: {
                exception: {
                    scope: b.owner,
                    fn: SYNO.SDS.AdminCenter.User.UserDialog.prototype.onStoreException
                }
            }
        });
        var f = new SYNO.ux.Toolbar();
        var j = new SYNO.ux.Button({
            name: "schedulePlanBtn",
            text: _T("bandwidth", "schedule_plan_user"),
            disabled: true,
            scope: this,
            handler: function(k, l) {
                var m;
                m = this.selModel.getSelected();
                if (typeof m === "undefined") {
                    return
                }
                if (typeof m.data.schedule_plan === "undefined" || m.data.schedule_plan === "") {
                    m.data.schedule_plan = "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                }
                if (typeof m.data.upload_limit_2 === "undefined" || m.data.upload_limit_2 === "") {
                    m.data.upload_limit_2 = 0
                }
                if (typeof m.data.download_limit_2 === "undefined" || m.data.download_limit_2 === "") {
                    m.data.download_limit_2 = 0
                }
                SYNO.SDS.BandwidthControl.SchedulePlanWinOpen.createDelegate(this, ["user", m, true])()
            }
        });
        f.add(j);
        var d = {
            title: _T("bandwidth", "bandwidth_tab_title"),
            cm: h,
            ds: e,
            tbar: f,
            itemId: "bandwidth",
            enableHdMenu: false,
            enableColumnMove: false,
            clicksToEdit: 1,
            selModel: this.selModel = new Ext.grid.RowSelectionModel({
                singleSelect: true,
                listeners: {
                    selectionchange: {
                        fn: function(k) {
                            if (k.getCount() > 0) {
                                j.enable(false)
                            } else {
                                j.disable(false)
                            }
                        },
                        scope: this
                    }
                }
            })
        };
        Ext.apply(d, b);
        return new SYNO.ux.EditorGridPanel(d)
    },
    initQuotaGrid: function(a) {
        return (this._D("supportquota", "no") === "yes") ? new SYNO.SDS.AdminCenter.User.QuotaGrid({
            title: _T("user", "user_quota_capacity"),
            owner: a.owner,
            module: a.owner,
            itemId: "quota"
        }) : {
            loadQuotaSettings: Ext.emptyFn,
            getWebAPI: function() {
                return []
            },
            isDirty: function() {
                return false
            }
        }
    },
    defineBehaviors: function() {
        if (this.authType !== "local") {
            return
        }
        var a, b;
        a = new SYNO.ux.Utils.EnableCheckGroup(this.userForm, "disabled", ["disableimmediately", "expireddate"]);
        b = new SYNO.ux.Utils.EnableRadioGroup(this.userForm, "disableimmediately", {
            setdisabledate: ["expireddate"],
            setdisableimmediately: []
        })
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", d, e, f, c, b, a);
        if (this.isAlertExist) {
            return
        }
        this.isAlertExist = true;
        SYNO.SDS.AdminCenter.User.Alert.call(this, _T("user", "failed_load_user"), function() {
            this.close();
            this.isAlertExist = false
        }, this)
    },
    loadSuccess: function(g, a) {
        this.clearStatusBusy();
        var j = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.User", "get").users[0];
        var k = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Share.Permission", "list_by_user");
        var f = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Storage.Volume", "list");
        var e = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Quota", "get");
        var c = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.AppPriv", "get");
        var h = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.AppPriv.App", "list");
        var d = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.BandwidthControl", "get");
        var i = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.OTP", "get");
        var m = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.FileServ.SMB", "get");
        var l = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Group.Member", "admin_check");
        if (Ext.isObject(l)) {
            this.isAdminGroupMember = l.users[0].is_admin
        }
        if (j.name === "guest" && m.enable_samba && m.enable_local_master_browser) {
            this.GuestWithLMB()
        }
        if (this.authType === "local") {
            if (this._S("user") === j.name || (this.owner.getOpenConfig("cms_self") === true && _S("user") === j.name)) {
                if (this._S("demo_mode")) {
                    this.userForm.findField("password").disable();
                    this.userForm.findField("confirmpassword").disable()
                }
                this.userForm.findField("disabled").disable();
                this.userForm.findField("cannot_chg_passwd").disable()
            }
            if (this._S("demo_mode") && j.name.toLowerCase() === "admin") {
                this.userForm.findField("password").disable();
                this.userForm.findField("confirmpassword").disable();
                this.userForm.findField("disabled").disable();
                this.userForm.findField("cannot_chg_passwd").disable()
            }
            this.userForm.setValues({
                password: "12345678",
                confirmpassword: "87654321"
            });
            this.userForm.findField("password").startValidate = true;
            if (j.expired === "normal") {
                j.disabled = false;
                j.disableimmediately = "setdisableimmediately"
            } else {
                if (j.expired === "now") {
                    j.disabled = true;
                    j.disableimmediately = "setdisableimmediately"
                } else {
                    j.disabled = true;
                    j.disableimmediately = "setdisabledate";
                    j.expireddate = j.expired
                }
            }
            this.userForm.setValues(j)
        } else {
            this.userForm.setValues({
                name: j.name
            })
        }
        this.quotaGrid.loadQuotaSettings(e, f);
        this.bandwidthGrid.getStore().loadData(d);
        if (!f.volumes || 0 >= f.volumes.length) {
            this.panel.hideTabStripItem("quota")
        }
        if (!d.bandwidths || 0 >= d.bandwidths.length) {
            this.panel.hideTabStripItem("bandwidth")
        }
        if (i.users[0].enable_otp === true) {
            Ext.getCmp(this.reset_otp_btn).show()
        }
        if (k.shares && k.shares.length > 0) {
            var b = this.shareGrid.getStore();
            b.loadData(k)
        }
        if (this.needShowAppPrivilege(this.username) && !this.isSupportAppPriv) {
            this.appPrivilegeGrid.getStore().loadData(this.loadAppPrivilege(h, c))
        }
    },
    loadAppPrivilege: function(a, c) {
        var b = [];
        Ext.each(a.application, function(d) {
            b.push([d.name, d.app_id])
        });
        Ext.each(b, function(d) {
            if (!c || !c.accepted_app) {
                d.push(true)
            } else {
                d.push((-1 === c.accepted_app.indexOf(d[1])) ? false : true)
            }
        });
        return b
    },
    needShowAppPrivilege: function(a) {
        return (a != "admin" && a != "guest")
    },
    loadDetail: function(b) {
        var a = [{
            api: "SYNO.Core.User",
            version: 1,
            method: "get",
            params: {
                name: b,
                additional: ["description", "email", "expired", "cannot_chg_passwd"]
            }
        }, {
            api: "SYNO.Core.Share.Permission",
            method: "list_by_user",
            version: 1,
            params: {
                name: b,
                user_group_type: this.authType + "_user",
                share_type: this.WEBAPI_PARAM_SHARE_TYPE,
                additional: this.WEBAPI_PARAM_ADDITIONAL
            }
        }, {
            api: "SYNO.Core.Storage.Volume",
            version: 1,
            method: "list",
            params: {
                offset: 0,
                limit: -1,
                location: "internal"
            }
        }, {
            api: "SYNO.Core.BandwidthControl",
            method: "get",
            version: 1,
            params: {
                name: b,
                owner_type: "local_user"
            }
        }, {
            api: "SYNO.Core.OTP",
            version: 1,
            method: "get",
            params: {
                name: b
            }
        }, {
            api: "SYNO.Core.FileServ.SMB",
            version: 1,
            method: "get"
        }];
        if (this._D("supportquota", "no") === "yes") {
            a.push({
                api: "SYNO.Core.Quota",
                version: 1,
                method: "get",
                params: {
                    name: b,
                    support_share_quota: this.supportShareUserQuota
                }
            })
        }
        if (this.needShowAppPrivilege(b) && !this.isSupportAppPriv) {
            a = a.concat([{
                api: "SYNO.Core.AppPriv",
                version: 1,
                method: "get",
                params: {
                    user_name: b
                }
            }, {
                api: "SYNO.Core.AppPriv.App",
                version: 1,
                method: "list",
                params: {
                    user_type: this.authType
                }
            }])
        }
        if (this.authType !== "local") {
            a.push({
                api: "SYNO.Core.Group.Member",
                method: "admin_check",
                version: 1,
                params: {
                    name: b
                }
            })
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            callback: function(e, d, c) {
                if (e && !d.has_fail) {
                    this.loadSuccess(d, c)
                } else {
                    this.clearStatusBusy();
                    SYNO.SDS.AdminCenter.User.Alert.call(this, _T("user", "failed_load_user"), this.close, this)
                }
            },
            scope: this
        })
    },
    onOpen: function() {
        this.setStatusBusy();
        this.loadInfo(this.username);
        this.callParent(arguments)
    },
    loadInfo: function(a) {
        if ("" !== a) {
            this.setTitle(a)
        }
        if ("no" === this._D("supportquota", "no")) {
            this.panel.hideTabStripItem("quota")
        }
        if (this.authType === "local") {
            this.groupGrid.getStore().load({
                params: {
                    name_only: false,
                    user: a,
                    type: "local"
                }
            })
        }
        if (this.checkSpecialAccout(a)) {
            this.userForm.findField("email").disable();
            this.userForm.findField("name").disable()
        }
        this.loadDetail(a)
    },
    GuestWithLMB: function() {
        this.userForm.findField("password").disable();
        this.userForm.findField("confirmpassword").disable();
        this.userForm.findField("disabled").disable()
    },
    resetUserOTP: function() {
        this.sendWebAPI({
            api: "SYNO.Core.OTP",
            version: 1,
            method: "reset",
            params: {
                name: this.username
            },
            callback: this.resetOTPdone,
            scope: this
        })
    },
    resetOTPdone: function(c, b, a) {
        if (!c) {
            SYNO.SDS.AdminCenter.User.Alert.call(this, _T("user", "reset_otp_failed"));
            return
        }
        SYNO.SDS.AdminCenter.User.Alert.call(this, _T("user", "reset_otp_success"));
        Ext.getCmp(this.reset_otp_btn).hide()
    },
    checkSpecialAccout: function(a) {
        for (var b = 0; b < this.specialAccounts.length; b++) {
            if (this.specialAccounts[b] == a) {
                return true
            }
        }
        return false
    },
    serializeInformationTab: function() {
        if (!this.userForm.isDirty()) {
            return []
        }
        var b = "normal";
        if (this.userForm.findField("disabled").getValue()) {
            if (this.userForm.findField("disableimmediately").getValue()) {
                b = "now"
            } else {
                if (this.userForm.findField("expireddate").getValue()) {
                    b = new Date(this.userForm.findField("expireddate").getValue()).dateFormat("Y/n/j")
                }
            }
        } else {
            b = "normal"
        }
        var a = {
            name: this.username || this.userForm.findField("name").getValue(),
            description: this.userForm.findField("description").getValue(),
            email: this.userForm.findField("email").getValue(),
            cannot_chg_passwd: this.userForm.findField("cannot_chg_passwd").getValue() ? true : false,
            expired: b
        };
        if (this.userForm.findField("password").getValue() === this.userForm.findField("confirmpassword").getValue()) {
            Ext.apply(a, {
                password: this.userForm.findField("password").getValue()
            })
        }
        var c = "set";
        if (this.newuser) {
            c = "create";
            Ext.apply(a, {
                notify_by_email: this.userForm.findField("notify_by_email").getValue() ? true : false,
                send_password: this.userForm.findField("send_password").getValue() ? true : false
            })
        } else {
            Ext.apply(a, {
                new_name: this.userForm.findField("name").getValue()
            })
        }
        return [{
            api: "SYNO.Core.User",
            method: c,
            version: 1,
            params: a
        }]
    },
    serializeGroupTab: function() {
        var d = this.groupGrid.getStore();
        var a = [];
        var c = "add";
        var b = this;
        d.getModifiedRecords().each(function(e) {
            if (e.get("name") === "users") {
                return
            }
            if ("administrators" === e.get("name") && ("admin" === b.userForm.findField("name").getValue() || "guest" === b.userForm.findField("name").getValue() || this._S("user") === b.userForm.findField("name").getValue())) {
                return
            }
            if (e.get("is_member")) {
                c = "add"
            } else {
                c = "remove"
            }
            a.push({
                api: "SYNO.Core.Group.Member",
                method: c,
                version: 1,
                params: {
                    group: e.get("name"),
                    name: b.userForm.findField("name").getValue()
                }
            })
        });
        return a
    },
    serializeShareTab: function() {
        return this.shareGrid.getWebAPI(this.userForm.findField("name").getValue())
    },
    serializeQuotaTab: function() {
        return this.quotaGrid.getWebAPI(this.userForm.findField("name").getValue())
    },
    serializeBandwidthTab: function() {
        var b = [];
        var a = this.bandwidthGrid.getStore();
        Ext.each(a.getModifiedRecords(), function(c) {
            c.data.name = this.userForm.findField("name").getValue();
            b.push(c.data)
        }, this);
        return [{
            api: "SYNO.Core.BandwidthControl",
            method: "set",
            version: 1,
            params: {
                bandwidths: b
            }
        }]
    },
    serializeAppPrivTab: function() {
        var b = this;
        var d = [];
        var a = [];
        var c = this.appPrivilegeGrid.getStore().data.items;
        if (c.size() === 0) {
            return []
        }
        Ext.each(c, function(e) {
            if (e.data.checked) {
                d.push(e.data.value)
            } else {
                a.push(e.data.value)
            }
        });
        return [{
            api: "SYNO.Core.AppPriv",
            method: "set",
            version: 1,
            params: {
                user_name: [b.userForm.findField("name").getValue()],
                accepted_app: d,
                rejected_app: a
            }
        }]
    },
    serializeAppRulePrivTab: function() {
        this.appPrivilegeGrid.newname = this.userForm.findField("name").getValue();
        return this.appPrivilegeGrid.getWebAPI()
    },
    serializeApplyData: function() {
        var a = [];
        if (this.authType === "local") {
            a = a.concat(this.serializeInformationTab());
            a = a.concat(this.serializeGroupTab())
        }
        a = a.concat(this.serializeShareTab());
        a = a.concat(this.serializeQuotaTab());
        a = a.concat(this.serializeBandwidthTab());
        if (!this.isSupportAppPriv) {
            a = a.concat(this.serializeAppPrivTab())
        } else {
            a = a.concat(this.serializeAppRulePrivTab())
        }
        return a
    },
    isTabsDirty: function() {
        if (this.ignoreDirty) {
            return false
        } else {
            if (this.userForm.isDirty() || this.groupGrid.getStore().getModifiedRecords().length || this.shareGrid.getStore().getModifiedRecords().length || this.quotaGrid.isDirty() || this.bandwidthGrid.getStore().getModifiedRecords().length || this.appPrivilegeGrid.getStore().getModifiedRecords().length) {
                return true
            } else {
                return false
            }
        }
    },
    onApply: function() {
        if (this.authType === "local") {
            if (!this.userForm.isValid()) {
                this.setStatusError({
                    text: _T("common", "forminvalid"),
                    clear: true
                });
                this.panel.setActiveTab(0);
                return false
            }
        }
        var a = this.shareGrid.getShareInfoForS2S();
        SYNO.SDS.Utils.S2S.confirmIfSyncShareAffected(false, a, {
            dialogTitle: this.title,
            dialogMsg: _T("s2s", "s2s_warn_share_change_priv"),
            dialogOwner: this,
            continueHandler: function() {
                this.setStatusBusy({
                    text: _T("common", "saving")
                });
                this.queryGlobalConf()
            },
            abortHandler: function() {
                this.shareGrid.getStore().rejectChanges()
            },
            scope: this
        })
    },
    queryGlobalConf: function() {
        var d = {
            api: "SYNO.Core.BandwidthControl.Protocol",
            method: "get",
            version: 1
        };
        var i = Ext.apply({
            params: {
                protocol: "FTP"
            }
        }, d);
        var h = Ext.apply({
            params: {
                protocol: "WebDAV"
            }
        }, d);
        var f = Ext.apply({
            params: {
                protocol: "FileStation"
            }
        }, d);
        var e = Ext.apply({
            params: {
                protocol: "NetworkBackup"
            }
        }, d);
        var b = {
            api: "SYNO.Core.FileServ.FTP",
            method: "get",
            version: 1
        };
        var j = {
            api: "SYNO.Core.FileServ.FTP.SFTP",
            method: "get",
            version: 1
        };
        var g = {
            api: "SYNO.Core.FileServ.WebDAV",
            method: "get",
            version: 1
        };
        var c = {
            api: "SYNO.Backup.Service.NetworkBackup",
            method: "get",
            version: 1
        };
        var a = [i, h, f, b, j, g];
        if ("no" === this._D("usbstation", "no")) {
            a.push(e, c)
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(m, l, k) {
                if (m) {
                    this.checkBandwidthSetting(l.result, k.compound)
                } else {
                    this.failureAlert()
                }
            }
        })
    },
    setGlobalConf: function(d) {
        var a = {
            api: "SYNO.Core.BandwidthControl.Protocol",
            method: "set",
            version: 1
        };
        var c = [];
        for (var b = 0; b < d.length; b++) {
            c.push(Ext.apply({
                params: {
                    protocol: d[b],
                    policy: "enabled"
                }
            }, a))
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: c
            },
            scope: this,
            callback: function(g, f, e) {
                if (g) {
                    this.applyUserData()
                } else {
                    this.failureAlert()
                }
            }
        })
    },
    getConfirmString: function(d, c) {
        var a = '{0}<div ext:qtip="{1}" class="blue-status">{1}<div>';
        var b = [];
        Ext.each(c, function(e) {
            b.push(SYNO.SDS.BandwidthControl.ProtocolTitle(e))
        });
        return String.format(a, d, b.join(", "))
    },
    checkBandwidthSetting: function(e, g) {
        var d = this.bandwidthGrid.getStore(),
            b = [],
            i = [],
            j = "",
            a = "";
        var c = false;
        var h = false;
        var f = false;
        Ext.each(e, function(k) {
            if (k.success) {
                if (k.api === "SYNO.Core.FileServ.FTP" && (k.data.enable_ftp || k.data.enable_ftps)) {
                    c = true
                } else {
                    if (k.api === "SYNO.Core.FileServ.FTP.SFTP" && k.data.enable) {
                        c = true
                    } else {
                        if (k.api === "SYNO.Core.FileServ.WebDAV" && (k.data.enable_http || k.data.enable_https)) {
                            h = true
                        } else {
                            if (k.api === "SYNO.Backup.Service.NetworkBackup" && k.data.enable) {
                                f = true
                            } else {
                                if (k.api === "SYNO.Core.BandwidthControl.Protocol" && k.data.policy === "disabled") {
                                    i.push(k.data.protocol)
                                }
                            }
                        }
                    }
                }
            }
        });
        if (!c) {
            i.remove("FTP")
        }
        if (!h) {
            i.remove("WebDAV")
        }
        if (!f) {
            i.remove("NetworkBackup")
        }
        d.each(function(k) {
            j = k.get("protocol");
            if (k.get("policy") !== "notexist" && k.get("policy") !== "disabled" && i.indexOf(j) !== -1) {
                b.push(j)
            }
        }, this);
        if (b.length > 0) {
            a = this.getConfirmString(_T("bandwidth", "bandwidth_global_conf_enable_desc"), b) || _T("bandwidth", "bandwidth_global_conf_enable_desc");
            this.getMsgBox().confirm(_T("bandwidth", "bandwidth_tab_title"), a, function(k) {
                if ("yes" === k) {
                    this.setGlobalConf(b)
                } else {
                    this.applyUserData()
                }
            }, this)
        } else {
            this.applyUserData()
        }
    },
    applyUserData: function() {
        if (!this.isTabsDirty()) {
            this.clearStatusBusy();
            this.close();
            return false
        }
        this.sendWebAPI({
            scope: this,
            compound: {
                stopwhenerror: false,
                params: this.serializeApplyData()
            },
            callback: this.applyDone
        })
    },
    applyDone: function(c, b, a) {
        var d = this.userForm.findField("name").getValue() || this.username;
        this.clearStatusBusy();
        if (!b.has_fail) {
            this.ignoreDirty = true;
            this.hide();
            this.fireEvent("userchange", d);
            this.close()
        } else {
            SYNO.SDS.AdminCenter.User.Alert.call(this, b.result);
            this.lastResult = false
        }
    },
    failureAlert: function(a, b) {
        this.clearStatusBusy();
        this.getMsgBox().alert(_T("tree", "leaf_user"), _T("common", "error_system"), function() {
            this.close()
        }, this)
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.UploadUserFileDialog", {
    extend: "SYNO.SDS.ModalWindow",
    ds: null,
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.panel = this.createPanel();
        var a = {
            layout: "fit",
            width: 700,
            height: 580,
            resizable: false,
            title: _T("user", "user_upload"),
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "apply",
                scope: this,
                disabled: true,
                handler: this.onSubmit
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.panel]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.DefineBehaviors()
    },
    createPanel: function() {
        this.grid = this.createPreviewGrid();
        var a;
        var b = {
            border: false,
            webapi: {
                api: "SYNO.Core.User",
                version: 1,
                methods: {
                    set: "parse_user_list"
                }
            },
            fileUpload: true,
            items: [{
                xtype: "syno_checkbox",
                name: "overwrite",
                boxLabel: _T("user", "user_check_overwrite")
            }, {
                xtype: "syno_checkbox",
                name: "new_user_mail",
                boxLabel: _T("user", "create_user_notification_mail"),
                listeners: {
                    check: function() {
                        var c = this.ownerCt.getForm().findField("send_password");
                        if (this.checked) {
                            c.enable()
                        } else {
                            c.disable()
                        }
                    }
                }
            }, {
                xtype: "syno_checkbox",
                name: "send_password",
                boxLabel: _T("user", "send_user_password")
            }, {
                xtype: "syno_filebutton",
                fieldLabel: _T("user", "user_file"),
                name: "filename",
                hiddenName: "filename",
                value: ""
            }, this.grid]
        };
        a = new SYNO.SDS.Utils.FormPanel(b);
        a.getForm().findField("send_password").disable();
        return a
    },
    createPreviewGrid: function() {
        var d = this;
        var g = new SYNO.API.JsonStore({
            root: "items",
            totalProperty: "total",
            fields: [{
                name: "name",
                mapping: "name"
            }, {
                name: "password",
                mapping: "password"
            }, {
                name: "description",
                mapping: "description"
            }, {
                name: "email",
                mapping: "email"
            }, {
                name: "quota",
                mapping: "quota"
            }, {
                name: "status",
                mapping: "status"
            }],
            listeners: {
                exception: {
                    scope: this,
                    fn: function(k, l, m, j, i, h) {
                        SYNO.Debug("Store exception: options:", k, l, m, j, i, h)
                    }
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            },
            sortInfo: {
                field: "status",
                direction: "DESC"
            }
        });
        this.ds = g;

        function c(k, i) {
            var h = Ext.util.Format.htmlDecode(k);
            var j = Ext.util.Format.htmlEncode(h);
            i.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j) + '"';
            return j
        }

        function a(j, h) {
            var i = "";
            switch (j) {
                case 1:
                    i = _T("user", "error_user_invalid");
                    break;
                case 2:
                    i = _T("user", "error_user_repeat");
                    break;
                case 3:
                    i = _T("user", "error_exist");
                    break;
                case 4:
                    i = _T("user", "error_nameused");
                    break;
                case 5:
                    i = _T("user", "error_pwd_maxlen");
                    break;
                case 6:
                    i = _T("user", "error_desc");
                    break;
                case 7:
                    i = _T("user", "error_badmail");
                    break;
                case 8:
                    i = _T("user", "error_quota_set");
                    break;
                case 9:
                    i = String.format(_T("user", "error_too_much_user"), d._D("maxaccounts"));
                    break;
                case 10:
                    i = _T("user", "user_overwrite");
                    break;
                default:
                    i = "";
                    break
            }
            h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(i) + '"';
            return "<font class='red-status'>" + i + "</font>"
        }

        function e(m, k) {
            if (m === "") {
                return _T("user", "user_quota_nolimit")
            }
            var l = "";
            var j;
            var h = m.split(",");
            for (j = 0; j < h.length; j++) {
                var n = h[j].split(":");
                l = l + "[" + _T("volume", "volume") + n[0] + ":" + n[1] + _T("common", "size_mb") + "]<br>"
            }
            k.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(l) + '"';
            return l
        }
        var f = [{
            header: _T("user", "user_account"),
            dataIndex: "name",
            width: 100,
            sortable: true,
            renderer: c
        }, {
            header: _T("user", "user_passwd"),
            dataIndex: "password",
            width: 75,
            sortable: true,
            renderer: c
        }, {
            header: _T("user", "user_fullname"),
            dataIndex: "description",
            id: "description",
            width: 100,
            sortable: true,
            renderer: c
        }, {
            header: _T("user", "user_email"),
            dataIndex: "email",
            width: 125,
            sortable: true,
            renderer: c
        }];
        if (!this._S("diskless")) {
            f.push({
                header: _T("user", "user_quota_capacity"),
                dataIndex: "quota",
                width: 100,
                sortable: true,
                renderer: e
            })
        }
        f.push({
            header: _T("user", "user_acnt_status"),
            dataIndex: "status",
            width: 150,
            sortable: true,
            renderer: a
        });
        var b = new Ext.grid.ColumnModel(f, true);
        return new SYNO.ux.GridPanel({
            ds: g,
            cm: b,
            cls: "without-dirty-red-grid",
            width: 650,
            height: 385,
            autoExpandColumn: "description",
            selModel: new Ext.grid.RowSelectionModel()
        })
    },
    onLoad: function() {
        var b = false;
        var c;
        for (c = 0; c < this.ds.getCount(); c++) {
            var d = this.ds.getAt(c);
            var a = parseInt(d.get("status"), 10);
            if (a !== 0 && a !== 10) {
                continue
            } else {
                b = true;
                break
            }
        }
        if (b) {
            this.btnUpload.enable()
        } else {
            this.btnUpload.disable()
        }
    },
    onOpen: function() {
        this.getMailSetting();
        this.callParent(arguments)
    },
    getMailSetting: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Mail.Conf",
            method: "get",
            version: 1,
            scope: this,
            callback: function(d, c, b) {
                if (this.isDestroyed) {
                    return
                }
                this.clearStatusBusy();
                if (!d) {
                    SYNO.SDS.AdminCenter.User.Alert.call(this, c.code);
                    return
                }
                if (c.send_welcome_mail) {
                    this.panel.getForm().findField("new_user_mail").setValue(true)
                }
                if (!c.enable_mail) {
                    var a = this.panel.getForm().findField("new_user_mail");
                    this.panel.mon(a, "check", this.validMail, this)
                }
            }
        });
        this.setStatusBusy()
    },
    validMail: function(a, b) {
        if (b) {
            this.getMsgBox().confirm(this.title, _T("notification", "mail_service_not_enable"), function(c) {
                if (c === "yes") {
                    this.module.appWin.startModule("SYNO.SDS.AdminCenter.Notification.Main");
                    this.close()
                } else {
                    a.setValue(false)
                }
            }, this)
        }
    },
    DefineBehaviors: function() {
        this.mon(this.panel.getForm(), "actioncomplete", this.onFormSuccess, this);
        this.mon(this.panel.getForm(), "actionfailed", this.onFormFailed, this);
        this.mon(this.panel.getForm().findField("overwrite"), "check", this.onOverwriteCheck, this);
        this.mon(this.panel.getForm().findField("filename").getEl(), "change", this.onImportFilePathChanged, this);
        this.btnUpload = this.getFooterToolbar().getComponent("apply")
    },
    onOverwriteCheck: function(e, d) {
        var b = false;
        if (this.ds.getCount() <= 0) {
            return
        }
        this.ds.suspendEvents(false);
        for (var c = 0; c < this.ds.getCount(); c++) {
            var f = this.ds.getAt(c);
            var a = parseInt(f.get("status"), 10);
            if (d) {
                if (a === 3) {
                    f.set("status", 10);
                    a = 10
                }
            } else {
                if (a === 10) {
                    f.set("status", 3);
                    a = 3
                }
            }
            if (a === 0 || a === 10) {
                b = true
            }
        }
        if (b) {
            this.btnUpload.enable()
        } else {
            this.btnUpload.disable()
        }
        this.ds.resumeEvents();
        this.grid.getView().refresh()
    },
    onImportFilePathChanged: function(b, a) {
        if (a && a.value) {
            this.setStatusBusy({
                text: _T("common", "loading")
            });
            this.panel.getForm().doAction("apply")
        }
    },
    onFormSuccess: function(a, b) {
        this.clearStatusBusy();
        if (b.result.success) {
            this.ds.loadData(b.result.data)
        }
    },
    onFormFailed: function(a, b) {
        this.clearStatusBusy();
        this.ds.removeAll();
        this.btnUpload.disable();
        this.getMsgBox().alert(_T("user", "user_upload"), SYNO.SDS.AdminCenter.User.Error2Msg(b.result.error.code))
    },
    prepareApplyParameter: function(a, b) {
        var c = [];
        this.ds.each(function(e) {
            var d = parseInt(e.get("status"), 10);
            if (d !== 0 && d !== 10) {
                return true
            }
            c.push({
                name: e.get("name"),
                password: e.get("password"),
                description: e.get("description"),
                email: e.get("email"),
                quota: e.get("quota"),
                overwrite: d === 10
            })
        });
        return c
    },
    startPolling: function() {
        this.pollingId = this.pollReg({
            webapi: {
                api: "SYNO.Core.User",
                method: "import_status",
                version: 1,
                params: {
                    task_id: this.taskId
                }
            },
            interval: 5,
            immediate: true,
            scope: this,
            status_callback: this.onPollRequestComplete
        })
    },
    stopPolling: function() {
        if (Ext.isDefined(this.pollingId)) {
            this.pollUnreg(this.pollingId);
            delete this.pollingId
        }
    },
    onPollRequestComplete: function(c, b, a) {
        if (!c) {
            this.stopPolling();
            this.clearStatusBusy();
            SYNO.SDS.AdminCenter.User.Alert.call(this, b.code, function() {
                if (3116 === b.code || 3117 === b.code) {
                    this.module.ds.reload();
                    this.close()
                }
            }, this);
            return
        }
        if (!b.finished) {
            return
        }
        this.sendWebAPI({
            webapi: {
                api: "SYNO.Core.User",
                version: 1,
                method: "import_stop",
                params: {
                    task_id: this.taskId
                },
                scope: this
            }
        });
        this.stopPolling();
        this.clearStatusBusy();
        this.module.appWin.getMsgBox().alert(_T("tree", "leaf_user"), _T("common", "setting_applied"));
        this.module.ds.reload();
        this.close()
    },
    onMainRequestComplete: function(c, b, a) {
        if (!c) {
            this.clearStatusBusy();
            SYNO.SDS.AdminCenter.User.Alert.call(this, b.code);
            return
        }
        this.taskId = b.task_id;
        this.startPolling()
    },
    onSubmit: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.User",
            version: 1,
            method: "import",
            scope: this,
            params: {
                users: this.prepareApplyParameter(),
                new_user_mail: this.panel.getForm().findField("new_user_mail").getValue(),
                send_password: this.panel.getForm().findField("send_password").getValue()
            },
            callback: this.onMainRequestComplete
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.CreateUserSummaryStep", {
    extend: "SYNO.SDS.Wizard.SummaryStep",
    constructor: function() {
        this.callParent(arguments)
    },
    activate: function() {
        this.genSummary.call(this.owner, this.getStore());
        this.getView().refresh()
    },
    genSummary: function(j) {
        var c = [];
        var g = [];
        var h = [];
        var b = [];
        var e = this.userForm.findField("name").getValue();
        var k = this.userForm.findField("description").getValue();
        var f = this.userForm.findField("email").getValue();
        var a = [];
        var d = [];
        j.removeAll(true);
        j.append(_T("user", "user_account"), e);
        j.append(_T("user", "user_fullname"), k);
        j.append(_T("user", "user_email"), f);
        var i = this.groupGrid.getStore();
        i.each(function(l) {
            if (l.data.is_member) {
                c.push(l.get("name"))
            }
            return true
        });
        j.append(_T("group", "group_list"), c.join(","));
        this.shareGrid.getStore().each(function(m) {
            var l = this.getFinalPermission(m);
            if ("rw" == l) {
                g.push(m.data.name)
            } else {
                if ("ro" == l) {
                    b.push(m.data.name)
                } else {
                    if ("na" == l) {
                        h.push(m.data.name)
                    }
                }
            }
        }, this.shareGrid);
        j.append(_T("common", "writeable"), g.join(", "));
        j.append(_T("common", "readonly"), b.join(", "));
        j.append(_T("share", "share_add_deny"), h.join(", "));
        if (this._D("supportquota", "no") === "yes") {
            this.quotaGrid.getStore().each(function(m) {
                if (m.get("target")) {
                    var l = "";
                    if (m.get("quota") !== 0) {
                        l = String.format("{0} {1}", m.get("quota"), m.get("unit"))
                    } else {
                        if (m.get("group_limit") !== 0) {
                            l = SYNO.SDS.Utils.CapacityRender(m.get("group_limit"), 2)
                        }
                    }
                    if (l !== "") {
                        j.append(m.get((m.get("target") === "share") ? "name" : "volume"), l)
                    }
                }
            })
        }
        if (!this.isSupportAppPriv) {
            this.appPrivilegeGrid.getStore().each(function(l) {
                if (l.get("checked")) {
                    a.push(l.get("display"))
                }
            })
        } else {
            this.appPrivilegeGrid.getStore().each(function(l) {
                if (l.get("allow")) {
                    a.push(l.get("name"))
                }
            })
        }
        j.append(_T("tree", "leaf_appprivilege"), a.join(", "));
        this.bandwidthGrid.getStore().each(function(l) {
            if ("notexist" !== l.get("policy")) {
                d.push(SYNO.SDS.BandwidthControl.ProtocolTitle(l.get("protocol")) + "(" + l.get("upload_limit_1") + "/" + l.get("download_limit_1") + ")")
            }
        });
        j.append(_T("bandwidth", "bandwidth_settings"), d.join(", "))
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.CreateUserWizardDialog", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.passwordChecker = b.passwordChecker;
        this.newuser = true;
        this.usernameValidating = false;
        this.newusermail = false;
        this.isAlertExist = false;
        this.authType = "local";
        this.isSupportAppPriv = this._S("version") > 4931;
        var a = Ext.apply({
            title: _T("userwizard", "wizard_title"),
            resizable: false,
            width: 800,
            height: 535,
            steps: []
        }, b);
        this.userFormPanel = SYNO.SDS.AdminCenter.User.UserDialog.prototype.initUserForm.call(this, {
            headline: _T("userwizard", "userinfo_title"),
            description: _T("userwizard", "userinfo_descr"),
            title: "",
            itemId: "user",
            nextId: ["group"],
            owner: this,
            passwordChecker: this.passwordChecker,
            module: this.module,
            getNext: function() {
                if (this.getForm().isValid()) {
                    this.owner.validUserName(true)
                } else {
                    SYNO.Debug("form invalid", this.getForm())
                }
                return false
            }
        });
        this.groupGrid = SYNO.SDS.AdminCenter.User.UserDialog.prototype.initGroupGrid({
            headline: _T("userwizard", "grpinfo_title"),
            description: _T("group", "group_instruct1"),
            title: "",
            itemId: "group",
            nextId: "share",
            appWin: this,
            owner: this,
            module: this.module,
            getNext: function() {
                var c = [];
                this.getStore().each(function(d) {
                    if (d.get("is_member") === true) {
                        c.push(d.get("name"))
                    }
                });
                if (this.owner.isSupportAppPriv) {
                    this.owner.sendWebAPI({
                        api: "SYNO.Core.AppPriv.App",
                        version: 2,
                        method: "preview",
                        params: {
                            groups: c,
                            include_everyone: true
                        },
                        scope: this.owner.appPrivilegeGrid,
                        callback: function(f, e, d) {
                            if (!f) {
                                return
                            }
                            this.onRenderInherit(e.applications)
                        }
                    })
                }
                if (this.owner._D("supportquota", "no") === "yes") {
                    this.owner.sendQuotaRequest(c)
                }
                this.owner.goNext(this.nextId);
                this.owner.getButton("next").disable();
                this.owner.shareGrid.getStore().load({
                    params: {
                        name: c
                    },
                    callback: function() {
                        this.owner.getButton("next").enable()
                    },
                    scope: this
                });
                return false
            }
        });
        this.shareGrid = SYNO.SDS.AdminCenter.User.UserDialog.prototype.initShareGrid({
            headline: _T("userwizard", "shareinfo_title"),
            description: _T("userwizard", "shareinfo_descr"),
            title: "",
            itemId: "share",
            nextId: "no" === this._D("supportquota", "no") ? ["appprivilege"] : ["quota"],
            appWin: this,
            owner: this,
            module: this.module
        });
        this.quotaGrid = (this._D("supportquota", "no") === "yes") ? new SYNO.SDS.AdminCenter.User.QuotaGrid({
            headline: _T("confbackup", "user_quota_desc"),
            description: _T("userwizard", "quotainfo_descr"),
            title: "",
            itemId: "quota",
            nextId: "appprivilege",
            appWin: this,
            owner: this,
            module: this.module,
            hideUsedCapacity: true
        }) : {
            loadQuotaSettings: Ext.emptyFn,
            getWebAPI: function() {
                return []
            }
        };
        this.appPrivilegeGrid = SYNO.SDS.AdminCenter.User.UserDialog.prototype.initPrivilegeGrid({
            headline: _T("userwizard", "user_asign_app_privilege"),
            description: _T("userwizard", "user_app_privilege_descr"),
            title: "",
            itemId: "appprivilege",
            nextId: "bandwidth",
            owner: this,
            module: this.module,
            entity_type: "user",
            hide_custom: true,
            isSupportAppPriv: this.isSupportAppPriv,
            showPreview: true,
            appFilter: function(c) {
                if (-1 < c.grant_type.indexOf(this.owner.authType)) {
                    return true
                }
            }
        });
        this.bandwidthGrid = SYNO.SDS.AdminCenter.User.UserDialog.prototype.initBandwidthGrid.createDelegate(this, [{
            headline: _T("bandwidth", "bandwidth_user_create_headline"),
            description: _T("bandwidth", "bandwidth_user_create_description"),
            title: "",
            itemId: "bandwidth",
            nextId: "summary",
            owner: this,
            preview: false,
            module: this.module
        }])();
        this.summaryGrid = new SYNO.SDS.AdminCenter.User.CreateUserSummaryStep({
            headline: _T("userwizard", "summary_title"),
            description: _T("wizcommon", "summary_descr"),
            itemId: "summary",
            nextId: null,
            owner: this,
            module: this.module,
            getNext: function() {
                this.owner.onApply();
                return false
            }
        });
        this.userForm = this.userFormPanel.getForm();
        a.steps.push(this.userFormPanel);
        a.steps.push(this.groupGrid);
        a.steps.push(this.shareGrid);
        a.steps.push(this.quotaGrid);
        a.steps.push(this.appPrivilegeGrid);
        a.steps.push(this.bandwidthGrid);
        a.steps.push(this.summaryGrid);
        this.callParent([a]);
        this.userForm.findField("password").startValidate = true;
        this.userFormPanel.mon(this.userForm.findField("name"), "blur", function() {
            if (this.isValid()) {
                this.clearInvalid()
            }
        }, this.userForm.findField("password"));
        this.userFormPanel.mon(this.userForm.findField("description"), "blur", function() {
            if (this.isValid()) {
                this.clearInvalid()
            }
        }, this.userForm.findField("password"));
        this.userFormPanel.mon(this.userForm.findField("notify_by_email"), "check", function() {
            if (this.isValid()) {
                this.clearInvalid()
            }
        }, this.userForm.findField("email"))
    },
    sendQuotaRequest: function(a) {
        var d = this._D("support_share_user_quota", "no") === "yes";
        var b = {
            api: "SYNO.Core.Storage.Volume",
            version: 1,
            method: "list",
            params: {
                offset: 0,
                limit: -1,
                location: "internal"
            }
        };
        var c = {
            api: "SYNO.Core.Quota",
            version: 1,
            params: {
                support_share_quota: d
            }
        };
        if (this._S("version") > 5496) {
            c.method = "inspect";
            c.params.groups = a
        } else {
            c.method = "get";
            c.params.name = ""
        }
        this.quotaGrid.showMask = false;
        this.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [b, c]
            },
            scope: this,
            callback: function(g, f, e) {
                if (f.has_fail) {
                    this.quotaGrid.showMask = true;
                    return
                }
                this.quotaGrid.loadQuotaSettings(SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Quota", c.method), SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Storage.Volume", "list"))
            }
        })
    },
    InitTask: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.AppPriv.App",
                    version: 1,
                    method: "list"
                }, {
                    api: "SYNO.Core.Notification.Mail.Conf",
                    version: 1,
                    method: "get"
                }, {
                    api: "SYNO.Core.AppPriv",
                    version: 1,
                    method: "get",
                    params: {}
                }]
            },
            scope: this,
            callback: function(h, d, a) {
                if (this.isDestroyed) {
                    return
                }
                this.clearStatusBusy();
                if (!d.has_fail) {
                    var g = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.AppPriv.App", "list");
                    var c = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.AppPriv", "get");
                    var f = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.Notification.Mail.Conf", "get", "send_welcome_mail");
                    var i = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.Notification.Mail.Conf", "get", "enable_mail");
                    if (f) {
                        this.newusermail = f;
                        this.userForm.findField("notify_by_email").setValue(this.newusermail)
                    }
                    if (!i) {
                        var e = this.userForm.findField("notify_by_email");
                        this.userFormPanel.mon(e, "check", this.validMail, this)
                    }
                    g.accepted_app = g.application;
                    if (!this.isSupportAppPriv) {
                        var b = SYNO.SDS.AdminCenter.User.UserDialog.prototype.loadAppPrivilege(g, c);
                        this.appPrivilegeGrid.getStore().loadData(b)
                    }
                } else {
                    SYNO.SDS.AdminCenter.User.Alert.call(this, d.result)
                }
            }
        })
    },
    onOpen: function() {
        this.InitTask();
        SYNO.SDS.AdminCenter.User.CreateUserWizardDialog.superclass.onOpen.call(this);
        this.userForm.findField("disabled").hide();
        this.userForm.findField("expirefield").hide();
        this.userForm.findField("disableimmediately").hide();
        this.userForm.findField("expireddate").hide();
        this.userForm.findField("notify_by_email").show();
        this.userForm.findField("send_password").show();
        this.userForm.findField("disabled").disable();
        this.userForm.findField("expirefield").disable();
        this.userForm.findField("disableimmediately").disable();
        this.userForm.findField("expireddate").disable();
        this.getButton("next").disable();
        this.userFormPanel.mon(this.userForm.findField("name"), "valid", this.validUserName, this);
        this.groupGrid.getStore().load({
            params: {
                user: "",
                name_only: false
            },
            callback: function(b, a, c) {
                if (c) {
                    this.groupGrid.getStore().getAt(this.groupGrid.getStore().find("name", "users")).set("is_member", true)
                } else {
                    SYNO.SDS.AdminCenter.User.Alert.call(this, _T("user", "failed_load_user"));
                    this.close()
                }
            },
            scope: this
        });
        this.bandwidthGrid.getStore().load()
    },
    onApply: function() {
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            scope: this,
            compound: {
                stopwhenerror: false,
                params: SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeApplyData.call(this)
            },
            callback: this.applyDone
        })
    },
    serializeInformationTab: function() {
        return SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeInformationTab.call(this)
    },
    serializeQuotaTab: function() {
        return SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeQuotaTab.call(this)
    },
    serializeGroupTab: function() {
        return SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeGroupTab.call(this)
    },
    serializeShareTab: function() {
        return SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeShareTab.call(this)
    },
    serializeAppPrivTab: function() {
        return SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeAppPrivTab.call(this)
    },
    serializeAppRulePrivTab: function() {
        var b = this.userForm.findField("name");
        var a = b.getValue();
        this.appPrivilegeGrid.newname = a;
        return SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeAppRulePrivTab.call(this)
    },
    serializeBandwidthTab: function() {
        return SYNO.SDS.AdminCenter.User.UserDialog.prototype.serializeBandwidthTab.call(this)
    },
    validMail: function(a, b) {
        if (b) {
            this.getMsgBox().confirm(this.title, _T("notification", "mail_service_not_enable"), function(c) {
                if (c === "yes") {
                    this.module.appWin.startModule("SYNO.SDS.AdminCenter.Notification.Main");
                    this.close()
                } else {
                    a.setValue(false)
                }
            }, this)
        }
    },
    validUserName: function(a) {
        var b = this.userForm.findField("name");
        var c = b.getValue();
        if (c.toUpperCase() === "MAILER-DAEMON" || c.toUpperCase() === "POSTMASTER" || c.toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
            this.getButton("next").disable();
            b.markInvalid(_T("common", "reservedname"));
            return
        }
        this.sendWebAPI({
            api: "SYNO.Core.User",
            method: "get",
            version: 1,
            params: {
                action: "get",
                name: c
            },
            callback: function(f, e, d) {
                if (!f) {
                    this.getButton("next").enable();
                    if (a === true) {
                        this.goNext(this.userFormPanel.nextId[0])
                    }
                } else {
                    this.getButton("next").disable();
                    b.markInvalid(_T("user", "error_nameused"))
                }
            },
            scope: this
        })
    },
    applyDone: function(c, b, a) {
        if (this.isDestroyed) {
            return
        }
        this.clearStatusBusy();
        if (!c) {
            SYNO.SDS.AdminCenter.User.Alert.call(this);
            return
        }
        if (b.has_fail) {
            SYNO.SDS.AdminCenter.User.Alert.call(this, b.result);
            return
        }
        this.module.ds.load();
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.DeleteDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.module = a.module;
        this.ownerGrid = a.ownerGrid;
        this.homesExist = a.homesExist;
        this.names = [];
        this.formPanel = this.createFormPanel();
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            width: 420,
            height: this.homesExist ? 300 : 200,
            minWidth: 400,
            minHeight: 200,
            dsmStyle: "v5",
            title: _T("user", "user_delete"),
            layout: "fit",
            items: this.formPanel,
            buttons: [{
                itemId: "apply",
                text: _T("common", "delete"),
                btnStyle: "red",
                disabled: this.homesExist ? true : false,
                scope: this,
                handler: this.applySetting
            }, {
                itemId: "cancel",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(b, a);
        return b
    },
    createFormPanel: function() {
        var a = {
            trackResetOnLoad: true,
            autoScroll: true,
            items: [{
                xtype: "syno_displayfield",
                name: "message"
            }, {
                xtype: "syno_displayfield",
                name: "username"
            }]
        };
        if (this.homesExist) {
            a.items.push({
                xtype: "syno_checkbox",
                name: "",
                boxLabel: String.format('<span class="red-status">{0}</span>', _T("user", "user_delete_confirm")),
                listeners: {
                    check: {
                        scope: this,
                        fn: this.onCheckboxCheck
                    }
                }
            })
        }
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    loadUserName: function(b) {
        var a = this.formPanel.getForm();
        var d = a.findField("message");
        var c = a.findField("username");
        if (this.homesExist) {
            d.setValue(String.format("<b>{0}</b>", _T("user", "user_rm_home_warning") + _T("user", "user_cfrmrmv")))
        } else {
            d.setValue(String.format("<b>{0}</b>", _T("user", "user_cfrmrmv")))
        }
        c.setValue(String.format('<div style="padding: 5px;">{0}</div>', b.join(", ")));
        this.names = b
    },
    applySetting: function() {
        this.applyDeleteUser();
        this.close()
    },
    applyDeleteUser: function() {
        this.appWin.setStatusBusy({
            text: _T("user", "deleting_user")
        });
        this.appWin.sendWebAPI({
            api: "SYNO.Core.User",
            version: 1,
            method: "delete",
            params: {
                name: this.names
            },
            timeout: 600000,
            scope: this,
            callback: this.applyDeleteUserDone
        })
    },
    applyDeleteUserDone: function(c, b, a) {
        if (!c) {
            SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, b.code)
        }
        this.appWin.clearStatusBusy();
        if (this.ownerGrid.findField) {
            this.ownerGrid.findField.reset()
        }
        this.ownerGrid.getStore().load({
            params: {
                start: 0,
                limit: this.ownerGrid.pageSize
            }
        })
    },
    onCheckboxCheck: function(b, a) {
        this.getFooterToolbar().getComponent("apply").setDisabled(!a)
    }
});
SYNO.SDS.AdminCenter.User.UserHomePollingPrefix = "userhome";
Ext.define("SYNO.SDS.AdminCenter.User.OptionTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    default_min_length: 6,
    default_max_length: 127,
    itemId: "option_tab",
    moveShareMsg: String.format('<div style="text-align: center;"> {0} </div>', _T("share", "share_move_progress")),
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.volumeAbnormal = false;
        this.shareMovePollTask = null;
        this.domain = b.domain || false;
        this.authType = b.authType || "local";
        this.passwordChecker = b.passwordChecker;
        this.form = this.getForm();
        this.homeinfo = {};
        this.ds = null;
        this.homePollingId = undefined;
        this.enable_mail = true;
        Ext.QuickTips.init();
        var c = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["value", "display"],
            data: []
        });
        var d = _T("user", "user_home_enable");
        if ("domain" === this.authType) {
            d = _T("domain", "domain_user_home_enable")
        } else {
            if ("ldap" === this.authType) {
                d = _T("ldap", "ldap_user_home_enable")
            }
        }
        var a = Ext.apply({
            title: _T("common", "advanced"),
            border: false,
            trackResetOnLoad: true,
            useDefaultBtn: true,
            items: [{
                xtype: "syno_fieldset",
                stateId: "SYNO.SDS.AdminCenter.User.Main::advance::password",
                title: _T("passwd", "passwd_strength_title"),
                collapsible: true,
                webapi: {
                    api: "SYNO.Core.User.PasswordPolicy",
                    version: 1,
                    methods: {
                        get: "get",
                        set: "set"
                    }
                },
                items: [{
                    xtype: "syno_checkbox",
                    name: "enable_reset_passwd_by_email",
                    boxLabel: _T("passwd", "forget_pass_enable"),
                    listeners: {
                        check: function(f, e) {
                            if (e && !this.enable_mail) {
                                this.confirmMailService(f)
                            }
                        },
                        scope: this
                    }
                }, {
                    xtype: "syno_checkbox",
                    name: "strong_password_enable",
                    boxLabel: _T("passwd", "passwd_strength_enforce")
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    name: "exclude_username",
                    boxLabel: _T("passwd", "exclude_username")
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    name: "mixed_case",
                    boxLabel: _T("passwd", "mixed_case")
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    name: "included_numeric_char",
                    boxLabel: _T("passwd", "included_numeric_char")
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    name: "included_special_char",
                    boxLabel: _T("passwd", "included_special_char")
                }, {
                    indent: 1,
                    xtype: "syno_compositefield",
                    hideLabel: true,
                    items: [{
                        xtype: "syno_checkbox",
                        name: "min_length_enable",
                        width: 280,
                        boxLabel: _T("passwd", "min_length_enable")
                    }, {
                        xtype: "syno_numberfield",
                        minValue: this.default_min_length,
                        maxValue: this.default_max_length,
                        width: 100,
                        name: "min_length",
                        value: this.default_min_length
                    }]
                }]
            }, this.getOTPEnforceConfig(), {
                xtype: "syno_fieldset",
                stateId: "SYNO.SDS.AdminCenter.User.Main::advance::home",
                webapi: {
                    api: "SYNO.Core.User.Home",
                    version: 1,
                    methods: {
                        get: "get",
                        set: "set"
                    },
                    params: {
                        get: {
                            additional: ["personal_photo_enable", "cloudstation_enable"]
                        }
                    }
                },
                title: _T("user", "user_home_set"),
                collapsible: true,
                items: [{
                    xtype: "syno_checkbox",
                    name: "enable",
                    boxLabel: d,
                    listeners: {
                        check: function(g, f) {
                            if (f && this._D("usbstation")) {
                                var e = this.getForm().findField("location").getStore();
                                if (e.getCount() === 0) {
                                    this.owner.getMsgBox().alert(this.title, String.format(_T("service", "no_ext4_external_devices"), _T("helptoc", "user_home")));
                                    g.setValue(false);
                                    return false
                                }
                            }
                        },
                        scope: this
                    }
                }, {
                    xtype: "syno_displayfield",
                    indent: 1,
                    name: "error_msg",
                    hidden: true
                }, {
                    xtype: "syno_displayfield",
                    indent: 1,
                    name: "location_desc",
                    fieldLabel: _T("volume", "volume_share_position"),
                    hideLabel: (this.domain) ? false : true,
                    hidden: (this.domain) ? false : true,
                    hideParent: true
                }, {
                    xtype: "syno_combobox",
                    indent: 1,
                    width: 250,
                    id: this.volume_home_id = Ext.id(),
                    fieldLabel: _T("volume", "volume_share_position"),
                    name: "location",
                    store: c,
                    disabled: (this.domain) ? true : false,
                    hidden: (this.domain) ? true : false,
                    hideLabel: (this.domain) ? true : false,
                    displayField: "display",
                    valueField: "value",
                    triggerAction: "all",
                    editable: false,
                    grow: true,
                    tpl: '<tpl for="."><div ext:qtip="{display}" class="x-combo-list-item">{display}</div></tpl>'
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    name: "enable_recycle_bin",
                    boxLabel: _T("share", "share_enable_recycle_bin"),
                    value: "0"
                }, {
                    xtype: "syno_button",
                    indent: 2,
                    width: "auto",
                    id: this.cleanBinBtnId = Ext.id(),
                    text: _T("share", "share_clean_recycle_bin"),
                    scope: this,
                    handler: this.onCleanBinBtnClick
                }]
            }]
        }, b);
        this.callParent([a]);
        this.on("afterlayout", this.defineBehaviors, this, {
            single: true
        });
        this.mon(this, "activate", this.activate, this)
    },
    confirmMailService: function(a) {
        this.owner.getMsgBox().confirm(this.title, _T("notification", "mail_service_not_enable"), function(b) {
            if (b === "yes") {
                this.getForm().reset();
                this.module.appWin.startModule("SYNO.SDS.AdminCenter.Notification.Main")
            } else {
                if (a) {
                    a.setValue(false)
                }
            }
        }, this)
    },
    getOTPEnforceConfig: function() {
        if (Ext.isEmpty(this.getKnownAPI("SYNO.Core.OTP.EnforcePolicy"))) {
            return []
        }
        this.supportOTPEnforce = true;
        var a = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.User.Main::advance::otp_enforce",
            title: _T("personal_settings", "otp_settings"),
            collapsible: true,
            webapi: {
                api: "SYNO.Core.OTP.EnforcePolicy",
                version: 1,
                methods: {
                    get: "get",
                    set: "set"
                }
            },
            items: [{
                xtype: "syno_checkbox",
                name: "enable_otp_enforcement",
                boxLabel: _T("otp_enforcement", "enforce_option_desc"),
                listeners: {
                    check: function(c, b) {
                        if (b) {
                            this.form.setValues({
                                otp_enforce_option: "admin"
                            });
                            this.getOTPSetting()
                        }
                    },
                    scope: this
                }
            }, {
                xtype: "syno_radio",
                indent: 1,
                boxLabel: _T("common", "admin_group_user"),
                name: "otp_enforce_option",
                inputValue: "admin"
            }, {
                xtype: "syno_radio",
                indent: 1,
                boxLabel: _WFT("mount", "everyone"),
                name: "otp_enforce_option",
                inputValue: "user"
            }]
        };
        return a
    },
    getOTPSetting: function() {
        this.sendWebAPI({
            api: "SYNO.Core.OTP",
            version: 2,
            method: "get_one",
            callback: function(d, c, b, a) {
                if (d) {
                    this.otp_set = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.OTP", "get_one", "otp_set")
                }
                this.checkTrigger()
            },
            scope: this
        })
    },
    checkTrigger: function() {
        if (this.otp_set === false && !this.IsAllowRelay()) {
            this.launchOTPWizard()
        } else {
            if (!this.enable_mail) {
                this.confirmMailService()
            }
        }
    },
    launchOTPWizard: function() {
        var a = {
            owner: this._appWindow,
            module: this,
            needCheckSMTP: false,
            triggerCheckbox: this.getForm().findField("enable_otp_enforcement")
        };
        this.OTPwizard = new SYNO.SDS.App.PersonalSettings.OTPWizard(a);
        this.OTPwizard.onOpen()
    },
    processReturnData: function(e, w, h) {
        var u = "";
        var c = "";
        var j = true;
        var g = false;
        if (w.has_fail) {
            var v = this.checkError(w);
            var i = v.hasError;
            j = v.hasWebVolume;
            if (i) {
                this.owner.getMsgBox().alert(this.title, v.errMsg);
                return false
            }
        }
        var n = SYNO.API.Util.GetValByAPI(w, "SYNO.Core.User.PasswordPolicy", "get");
        var m = SYNO.API.Util.GetValByAPI(w, "SYNO.Core.OTP.EnforcePolicy", "get");
        var o = SYNO.API.Util.GetValByAPI(w, "SYNO.Core.User.Home", "get");
        var s = SYNO.API.Util.GetValByAPI(w, "SYNO.Core.User.Home", "set");
        var f = SYNO.API.Util.GetValByAPI(w, "SYNO.Core.Storage.Volume", "list");
        var q = SYNO.API.Util.GetValByAPI(w, "SYNO.Core.FileServ.FTP.Security", "get");
        var t = SYNO.API.Util.GetValByAPI(w, "SYNO.S2S.Server.Pair", "list");
        var d;
        if (j) {
            d = SYNO.API.Util.GetValByAPI(w, "SYNO.Core.Web.HTTP", "get")
        }
        if (n.strong_password) {
            SYNO.SDS.AdminCenter.User.applyPasswordPolicy(this.passwordChecker, n.strong_password)
        }
        if (m && m.otp_enforce_option) {
            var p = m.otp_enforce_option;
            if (p === "none") {
                this.form.setValues({
                    enable_otp_enforcement: false,
                    otp_enforce_option: "admin"
                })
            } else {
                this.form.setValues({
                    enable_otp_enforcement: true,
                    otp_enforce_option: p
                })
            }
        }
        this.form.setValues({
            enable_reset_passwd_by_email: n.enable_reset_passwd_by_email
        });
        if (Object.keys(n.strong_password).length > 0) {
            this.form.setValues({
                strong_password_enable: true
            });
            this.form.setValues(n.strong_password)
        }
        if (t && t.clients) {
            Ext.each(t.clients, function(x) {
                Ext.each(x.additional.sync_shares, function(y) {
                    if (y === "homes") {
                        g = true;
                        return false
                    }
                });
                if (g) {
                    return false
                }
            })
        }
        if (this.successHandler) {
            Ext.each(w.result, function(x) {
                if (x.api === "SYNO.Core.User.Home" && x.method === "get") {
                    x.data = {}
                }
            })
        } else {
            Ext.apply(this.homeinfo, o);
            if (o.additional) {
                Ext.apply(this.homeinfo, o.additional)
            }
            u = o.location;
            Ext.apply(this.homeinfo, f);
            SYNO.SDS.AdminCenter.User.CreateVolumeMap(f);
            this.homeinfo.userhome_in_s2s = g;
            var b = f.map[u];
            var l = false;
            this.volumeAbnormal = false;
            Ext.each(f.volumes, function(x) {
                if (!x.readonly) {
                    l = true;
                    return false
                }
            });
            if (!l) {
                c = '<font class="red-status">' + _T("volume", "volume_share_volumeno") + "</font>";
                this.form.findField("enable").disable();
                this.volumeAbnormal = true
            } else {
                if (!b) {} else {
                    if (b.readonly) {
                        c = '<font class="red-status">' + _T("user", "home_volume_crash") + "</font>";
                        this.volumeAbnormal = true
                    }
                }
            }
            if (this.volumeAbnormal) {
                this.form.findField("enable").disable();
                this.form.findField("error_msg").setValue(c);
                this.form.findField("error_msg").originalValue = c;
                this.form.findField("error_msg").setVisible(true);
                return
            } else {
                this.form.findField("enable").enable();
                this.form.findField("error_msg").setVisible(false)
            }
            var k = this.getForm().findField("location").getStore();
            if (f.volumes && f.total) {
                k.removeAll();
                Ext.each(f.volumes, function(x) {
                    if (x.readonly) {
                        return true
                    }
                    if ("yes" === this._D("usbstation") && "ext4" !== x.fs_type) {
                        return true
                    }
                    k.loadData([
                        [x.volume_path, SYNO.SDS.Utils.StorageUtils.VolumeNameSizeRenderer(x)]
                    ], true)
                }, this)
            }
            k.sort("value", "ASC");
            this.form.setValues(o);
            var a = this.form.findField("location");
            if (f.volumes.length !== 0 && k.getCount() !== 0) {
                if (!a.getValue() && k.getRange(0, 0)[0].get("value")) {
                    this.form.setValues({
                        location: k.getRange(0, 0)[0].get("value")
                    })
                }
            }
        }
        this.homeinfo.chroot = q.user_chroot;
        if (j) {
            this.homeinfo.enable_userdir = d.enable_userdir
        } else {
            this.homeinfo.enable_userdir = false
        }
        if (e === "get") {
            return
        }
        if (this.successHandler) {
            this.successHandler(s.task_id);
            this.successHandler = null
        }
        var r = (true === this.form.findField("enable").getValue()) ? "create" : "delete";
        SYNO.SDS.StatusNotifier.fireEvent("sharefolderchanged", r)
    },
    checkError: function(d) {
        var a = false;
        var c = true;
        var b = _JSLIBSTR("uicommon", "error_system");
        Ext.each(d.result, function(e) {
            if (!e.success) {
                if (e.api === "SYNO.Core.Web.HTTP" && e.error.code === 3550) {
                    c = false;
                    return true
                }
                if (e.api === "SYNO.S2S.Server.Pair" && (e.error.code === 703 || e.error.code === 707)) {
                    return true
                }
                if (e.api === "SYNO.Core.User.Home" && e.method === "get" && e.error.code === 3113) {
                    return true
                }
                if (e.api === "SYNO.Core.User.Home" && e.method === "set") {
                    b = SYNO.API.Erros.core[e.error.code] || _JSLIBSTR("uicommon", "error_system")
                }
                a = true
            }
        });
        return {
            hasError: a,
            hasWebVolume: c,
            errMsg: b
        }
    },
    onApiSuccess: function(c, b, a) {
        b.has_fail = this.checkError(b).hasError;
        this.callParent(arguments)
    },
    processParams: function(f, e) {
        for (var c = 0; c < e.length; c++) {
            var b = e[c];
            if (b.api === "SYNO.Core.User.PasswordPolicy" && b.method === "set") {
                var d = ["exclude_username", "included_numeric_char", "included_special_char", "min_length_enable", "min_length", "mixed_case"];
                b.params.strong_password = {};
                if (b.params.strong_password_enable) {
                    for (var a = 0; a < d.length; a++) {
                        b.params.strong_password[d[a]] = b.params[d[a]];
                        delete b.params[d[a]]
                    }
                }
                delete b.params.strong_password_enable
            } else {
                if (b.api === "SYNO.Core.User.Home" && b.method === "set") {
                    if (false === b.params.enable && "" === this.homeinfo.remote_location) {
                        if (this.homeinfo.enable_domain) {
                            b.params.enable_domain = false
                        }
                        if (this.homeinfo.enable_ldap) {
                            b.params.enable_ldap = false
                        }
                    }
                }
            }
            if (b.api === "SYNO.Core.OTP.EnforcePolicy" && b.method === "set") {
                if (false === b.params.enable_otp_enforcement) {
                    b.params.otp_enforce_option = "none"
                }
            }
        }
        e = e.concat([{
            api: "SYNO.Core.Storage.Volume",
            version: 1,
            method: "list",
            params: {
                offset: 0,
                limit: -1,
                location: (this._D("usbstation", "no") === "yes") ? "external" : "internal"
            }
        }, {
            api: "SYNO.Core.FileServ.FTP.Security",
            version: 1,
            method: "get",
            params: {}
        }, {
            api: "SYNO.Core.Web.HTTP",
            version: 1,
            method: "get"
        }, {
            api: "SYNO.S2S.Server.Pair",
            version: 1,
            method: "list",
            params: {
                additional: ["sync_shares"]
            }
        }]);
        return e
    },
    onBeforeRequest: function(a) {
        return this.callParent(arguments)
    },
    onCleanBinBtnClick: function(b, a) {
        var e, d;
        if (this._S("demo_mode")) {
            this.owner.getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        if (this.cleanBinBtnType === 1) {
            e = "stop";
            d = _T("share", "share_recycle_bin_clean_abort_warn")
        } else {
            e = "start";
            d = _T("share", "share_userhome_recycle_bin_clean_warn")
        }
        var c = {
            yes: {
                text: Ext.MessageBox.buttonText.yes,
                btnStyle: "red"
            },
            no: {
                text: Ext.MessageBox.buttonText.no
            }
        };
        this.owner.getMsgBox().confirm(_T("share", "share_clean_recycle_bin"), d, function(f) {
            if (f === "yes") {
                Ext.getCmp(this.cleanBinBtnId).disable();
                this.sendWebAPI({
                    api: "SYNO.Core.RecycleBin.User",
                    method: e,
                    version: 1,
                    callback: this.setStatusCleanRecycle,
                    scope: this
                })
            }
        }, this, c)
    },
    setStatusCleanRecycle: function(d, c, b) {
        if (!d) {
            this.startPollRecycleStatus()
        } else {
            var a = Ext.getCmp(this.cleanBinBtnId);
            if (!c.is_cleaning) {
                this.cleanBinBtnType = 0;
                a.setText(_T("share", "share_clean_recycle_bin"));
                a.enable();
                this.stopPollRecycleStatus()
            } else {
                this.cleanBinBtnType = 1;
                a.setText(_T("share", "share_clean_recycle_bin_abort"));
                a.enable();
                this.startPollRecycleStatus()
            }
        }
    },
    updateStatusCleanRecycle: function(d, c, b) {
        if (d) {
            var a = Ext.getCmp(this.cleanBinBtnId);
            if (!c.is_cleaning) {
                this.cleanBinBtnType = 0;
                a.setText(_T("share", "share_clean_recycle_bin"));
                a.enable();
                this.stopPollRecycleStatus()
            } else {
                this.cleanBinBtnType = 1;
                a.setText(_T("share", "share_clean_recycle_bin_abort"));
                a.enable()
            }
        }
    },
    startPollRecycleStatus: function() {
        if (!this.PollTaskRecycleBinId) {
            this.PollTaskRecycleBinId = this.pollReg({
                interval: 5,
                immediate: true,
                webapi: {
                    api: "SYNO.Core.RecycleBin.User",
                    method: "get",
                    version: 1
                },
                scope: this,
                status_callback: this.updateStatusCleanRecycle
            })
        }
    },
    stopPollRecycleStatus: function() {
        if (this.PollTaskRecycleBinId) {
            this.pollUnreg(this.PollTaskRecycleBinId);
            this.PollTaskRecycleBinId = null
        }
    },
    getMailSetting: function() {
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.Notification.Mail.Conf",
                    version: 1,
                    method: "get"
                }]
            },
            scope: this,
            callback: function(d, c, b, a) {
                if (!c.has_fail) {
                    this.enable_mail = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.Notification.Mail.Conf", "get", "enable_mail")
                }
            }
        })
    },
    activate: function() {
        this.restartHomePolling();
        this.getMailSetting()
    },
    deactivate: function() {
        this.stopPollRecycleStatus();
        this.stopHomePolling();
        return !this.getForm().isDirty()
    },
    defineBehaviors: function() {
        var a, d, c, b;
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "min_length_enable", ["min_length"]);
        d = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "strong_password_enable", ["exclude_username", "included_numeric_char", "included_special_char", "min_length_enable", "min_length", "mixed_case"]);
        c = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "enable", ["location", "enable_recycle_bin"]);
        if (this.supportOTPEnforce) {
            b = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_otp_enforcement", ["otp_enforce_option"])
        }
        this.loadHomeInfo()
    },
    loadHomeInfo: function() {},
    updateFields: function(a) {},
    isHomeEnableChanged: function(a) {
        if (a === this.homeinfo.enable) {
            return false
        } else {
            return true
        }
    },
    isValidSubmitData: function(b, a) {
        if (this.homeinfo.chroot && !a && !this.domain) {
            this.owner.getMsgBox().confirm(_T("user", "user_home_set"), _T("user", "user_chroot_warning"), function(c, d) {
                if (c == "yes") {
                    this.submitHomeChange(false)
                } else {
                    this.form.findField("enable").setValue(true)
                }
            }, this);
            return false
        }
        return true
    },
    doSubmit: function() {
        var b = this.form.findField("location").getValue();
        var a = this.form.findField("enable").getValue();
        if (!this.isValidSubmitData(b, a)) {
            return false
        }
        if (a && (b != this.homeinfo.location) && this.homeinfo.location !== "") {
            this.owner.getMsgBox().confirm(_T("user", "user_home_set"), _T("volume", "volume_change_all_warning"), function(c, d) {
                if (c == "yes") {
                    this.submitHomeChange(true)
                }
            }, this)
        } else {
            this.submitHomeChange(false)
        }
    },
    applyHandler: function() {
        var a = this.form.findField("enable").getValue();
        if (this.form.findField("strong_password_enable").getValue() && !this.hasRule()) {
            this.owner.getMsgBox().alert(this.title, _T("passwd", "invalid_rule"));
            return false
        }
        if ((this.homeinfo.cloudstation_enable || this.homeinfo.enable_userdir || this.homeinfo.personal_photo_enable) && this.isHomeEnableChanged(a) && !a) {
            if (this.domain) {
                this.doSubmit()
            } else {
                var b = [];
                if (this.homeinfo.enable_userdir) {
                    b.push(_T("service", "service_web_localuser"))
                }
                if (this.homeinfo.personal_photo_enable) {
                    b.push(_T("service", "service_photo_personal_title"))
                }
                if (this.homeinfo.cloudstation_enable) {
                    b.push(_T("service", "service_cloudstation_title"))
                }
                this.owner.getMsgBox().minWidth = 400;
                this.owner.getMsgBox().confirm(_T("user", "user_home_set"), String.format(_T("service", "service_app_uhconflict"), b.join(", ")), function(c, d) {
                    if (c == "yes") {
                        SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.PersonalPhotoStation", true);
                        this.doSubmit()
                    } else {
                        this.form.findField("enable").setValue(true)
                    }
                }, this)
            }
        } else {
            this.doSubmit()
        }
    },
    submitHomeChange: function(b) {
        var d = {};
        var c = this.form.findField("location").getValue();
        var a = this.form.findField("enable").getValue();
        d.command = "set_home";
        if (this.domain) {
            if (a) {
                d.homeEnable = 1;
                if ("domain" === this.authType) {
                    d.includeDomainUser = 1;
                    d.includeLdapUser = this.homeinfo.enable_ldap
                } else {
                    if ("ldap" === this.authType) {
                        d.includeLdapUser = 1;
                        d.includeDomainUser = this.homeinfo.enable_domain
                    }
                }
            } else {
                if ("domain" === this.authType) {
                    d.includeDomainUser = 0;
                    d.includeLdapUser = this.homeinfo.enable_ldap
                } else {
                    if ("ldap" === this.authType) {
                        d.includeLdapUser = 0;
                        d.includeDomainUser = this.homeinfo.enable_domain
                    }
                }
                if (this.homeinfo.enable) {
                    d.homeEnable = 1
                } else {
                    if (!d.includeLdapUser && !d.includeDomainUser) {
                        d.homeEnable = 0
                    } else {
                        d.homeEnable = 0
                    }
                }
            }
        } else {
            if (a) {
                d.homeEnable = 1
            } else {
                d.homeEnable = 0
            }
        }
        if (!this.domain) {
            d.enable_recycle_bin = this.form.findField("enable_recycle_bin").getValue() ? 1 : 0
        }
        d.vol_id = c;
        d.action = "apply";
        if (b) {
            this.successHandler = this.startHomePolling
        }
        SYNO.SDS.Utils.S2S.confirmIfSyncShareAffected(false, a ? {
            name: "homes",
            is_sync_share: this.homeinfo.userhome_in_s2s,
            no_check_permission: true
        } : null, {
            dialogTitle: this.title,
            dialogMsg: _T("s2s", "s2s_warn_homes_enable"),
            dialogOwner: this.owner,
            continueHandler: function() {
                this.applyForm()
            },
            abortHandler: function() {
                this.form.findField("enable").setValue(false)
            },
            scope: this
        })
    },
    showMoveShareProgress: function() {
        this.owner.getMsgBox().show({
            title: "",
            width: 300,
            msg: this.moveShareMsg,
            progress: true,
            progressText: "0 %",
            closable: false
        })
    },
    updateMoveShareProgress: function(a) {
        var b = "";
        if (a > 99) {
            b = "100 %"
        } else {
            b = String.format("{0} %", Math.round(a * 100) / 100)
        }
        this.owner.getMsgBox().updateProgress(a / 100, b, this.moveShareMsg)
    },
    startHomePolling: function(a) {
        var b = this;
        this.showMoveShareProgress();
        this.homePollingId = this.pollReg({
            webapi: {
                api: "SYNO.Core.User.Home",
                method: "status",
                version: 1,
                params: {
                    task_id: a
                }
            },
            interval: 3,
            immediate: true,
            status_callback: function(f, c, e, d) {
                if (!f || !c.success) {
                    b.owner.getMsgBox().alert(_T("tree", "leaf_notification"), SYNO.SDS.AdminCenter.User.Error2Msg(c.error.code));
                    b.stopHomePolling(true);
                    return
                }
                if (!c.finish) {
                    b.updateMoveShareProgress(c.data.percent);
                    return
                }
                b.owner.getMsgBox().hide();
                b.stopHomePolling(true);
                b.loadForm()
            }
        })
    },
    stopHomePolling: function(a) {
        this.pollUnreg(this.homePollingId);
        this.homePollingId = undefined;
        if (!a) {
            return
        }
        this.sendWebAPI({
            api: "SYNO.Core.User.Home",
            method: "stop",
            version: 1,
            callback: function(d, c, b) {
                if (!d) {
                    SYNO.SDS.AdminCenter.User.Alert(this.owner);
                    return
                }
            },
            scope: this
        })
    },
    isHomePolling: function() {
        return this.homePollingId
    },
    restartHomePolling: function() {
        var a = this;
        if (this.isHomePolling()) {
            return
        }
        var b = function(c, d) {
            if (d >= c.length) {
                return
            }
            a.sendWebAPI({
                api: "SYNO.Core.User.Home",
                method: "status",
                version: 1,
                params: {
                    task_id: c[d]
                },
                scope: a,
                callback: function(h, g, f, e) {
                    if (h && !g.finish) {
                        a.startHomePolling(f.task_id);
                        return
                    }
                    b(c, d + 1)
                }
            })
        };
        this.owner.pollList({
            task_id_prefix: SYNO.SDS.AdminCenter.User.UserHomePollingPrefix,
            extra_group_tasks: ["admin"],
            scope: this,
            callback: function(f, e, d, c) {
                if (f && Ext.isArray(e.admin)) {
                    b(e.admin, 0)
                }
            }
        })
    },
    hasRule: function() {
        var b = this;
        var a = false;
        Ext.each(["exclude_username", "mixed_case", "included_numeric_char", "included_special_char", "min_length_enable"], function(c) {
            if (b.getForm().findField(c).getValue()) {
                a = true;
                return false
            }
        });
        return a
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.User");
SYNO.SDS.AdminCenter.User.applyPasswordPolicy = function(b, a) {
    if (Object.keys(a).length > 0) {
        a.strong_password_enable = true;
        b.passwordPolicy = Ext.apply({}, a)
    } else {
        a.strong_password_enable = false;
        b.passwordPolicy = Ext.apply({}, a)
    }
};
SYNO.SDS.AdminCenter.User.Error2Msg = function(a) {
    return SYNO.API.getErrorString(a)
};
SYNO.SDS.AdminCenter.User.CreateVolumeMap = function(a) {
    a.map = {};
    Ext.each(a.volumes, function(b) {
        a.map[b.volume_path] = b
    })
};
SYNO.SDS.AdminCenter.User.Alert = function(b, g, c) {
    var f = _T("tree", "leaf_user");
    var e = _T("common", "error_system");
    var d = -1;
    if (!b) {} else {
        if (typeof b === "string") {
            e = b
        } else {
            if (typeof b === "number") {
                d = b;
                e = SYNO.SDS.AdminCenter.User.Error2Msg(d)
            } else {
                if (b instanceof Array) {
                    for (var a = 0; a < b.size(); a++) {
                        if (!b[a].success) {
                            d = b[a].error.code;
                            e = SYNO.SDS.AdminCenter.User.Error2Msg(d);
                            break
                        }
                    }
                }
            }
        }
    }
    switch (d) {
        case 3110:
            e = String.format(e, this._D("maxaccounts"))
    }
    this.getMsgBox().alert(f, e, g, c)
};
SYNO.SDS.AdminCenter.User.CMS_USER = "SynologyCMS";
Ext.define("SYNO.SDS.AdminCenter.User.UserListGrid", {
    extend: "SYNO.ux.GridPanel",
    itemId: "user_tab",
    constructor: function(b) {
        this.authType = b.authType || "local";
        this.pageSize = this.isLocal() ? -1 : SYNO.SDS.AdminCenter.USER_PAGING_SIZE;
        this.isFirstLoad = true;
        Ext.copyTo(this, b, ["owner", "module", "authType", "domain", "appWin", "passwordChecker"]);
        var c = this.createStore();
        this.module.ds = c;
        var a = {
            module: this,
            title: _T("tree", "leaf_user"),
            header: false,
            border: false,
            height: 404,
            width: 750,
            ds: c,
            cm: this.createColumnModel(),
            autoExpandColumn: "descr",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: (this.authType !== "local")
            }),
            tbar: this.configTopToolbar(b),
            bbar: this.createBBar()
        };
        if (this.isLocal()) {
            a.view = new SYNO.ux.FleXcroll.grid.BufferView({
                trackResetOnLoad: false,
                rowHeight: 27,
                scrollDelay: false,
                cacheSize: 50
            })
        }
        Ext.apply(a, b);
        this.callParent([a]);
        this.defineBehaviors()
    },
    isLocal: function() {
        return (this.authType === "local")
    },
    defineBehaviors: function() {
        this.mon(this, "rowdblclick", function(b, c, a) {
            this.editHandler()
        }, this);
        this.mon(this.getSelectionModel(), "selectionchange", this.setButtonState, this, {
            buffer: 50
        });
        this.mon(this, "rowcontextmenu", this.onRowContextMenu, this);
        this.canPressDelete = true;
        if (this.authType === "local") {
            this.mon(this, "keydown", function(a) {
                if (a.getKey() == a.DELETE && this.canPressDelete) {
                    this.deleteHandler()
                }
            }, this)
        }
        this.forget_password = {}
    },
    activate: function() {
        if (this.authType === "domain") {
            this.store.baseParams.domain_name = this.module.currDomain
        }
        this.getStore().load()
    },
    deactivate: function() {
        if (this.updateButton) {
            this.updateButton.stopPolling();
            this.getEl().unmask()
        }
        return true
    },
    refreshGrid: function() {
        if (this.getStore() && !this.isDestroyed) {
            this.getStore().load();
            this.doLayout();
            this.setButtonState()
        }
    },
    configTopToolbar: function(c) {
        this.actionMenu = new SYNO.ux.Menu({
            items: [{
                text: _T("common", "alt_edit"),
                itemId: "edit",
                scope: this,
                handler: this.editHandler
            }, {
                text: _T("user", "reset_user_otp"),
                itemId: "reset_otp",
                disabled: true,
                scope: this,
                handler: this.resetUserOTP
            }]
        });
        this.actionEdit = new Ext.Action((this.authType === "local") ? {
            text: _T("common", "alt_edit"),
            itemId: "edit",
            scope: this,
            handler: this.editHandler
        } : {
            text: _T("common", "action"),
            itemId: "edit",
            menu: this.actionMenu,
            listeners: {
                click: this.updateAction,
                scope: this
            }
        });
        this.actionDel = new Ext.Action({
            text: _T("common", "delete"),
            itemId: "delete",
            scope: this,
            handler: this.deleteHandler
        });
        var a = new SYNO.ux.Button(this.actionEdit);
        var b = new SYNO.ux.Button(this.actionDel);
        if (this.isLocal()) {
            this.findField = new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                localFilter: true,
                localFilterField: ["name", "description", "email"],
                blOr: true,
                emptyText: _T("user", "search_user"),
                store: this.module.ds
            })
        } else {
            this.findField = new SYNO.ux.TextFilter({
                iconStyle: "filter",
                queryAction: "list",
                enumAction: "list",
                queryParam: "substr",
                itemId: "search",
                emptyText: _T("user", "search_user"),
                store: this.module.ds,
                pageSize: this.pageSize
            })
        }
        if (this.authType === "ldap") {
            return {
                items: [a, c.homeButton, "->", this.findField]
            }
        } else {
            if (this.authType === "domain") {
                c.updateButton.grid = this;
                c.domainFilter.grid = this;
                return {
                    items: [a, c.homeButton, c.updateButton, "->", {
                        xtype: "syno_displayfield",
                        itemId: "filterName",
                        value: _T("helptoc", "directory_service_domain") + ": "
                    }, c.domainFilter, this.findField]
                }
            } else {
                return {
                    items: [new SYNO.ux.SplitButton({
                        text: _T("common", "create"),
                        handler: this.createHandler,
                        scope: this,
                        itemId: "create_users",
                        menu: {
                            items: [{
                                text: _T("user", "newuser_dlgtitle"),
                                scope: this,
                                handler: this.createHandler
                            }, {
                                text: _T("user", "user_file_icon"),
                                scope: this,
                                handler: this._S("demo_mode") ? function() {
                                    SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _JSLIBSTR("uicommon", "error_demo"))
                                } : this.launchUserFileDialog
                            }]
                        }
                    }), a, b, "->", this.findField]
                }
            }
        }
    },
    createStore: function() {
        var a = {
            api: "SYNO.Core.User",
            method: "list",
            version: 1,
            appWindow: this.appWin,
            baseParams: {
                type: this.authType,
                offset: 0,
                limit: this.pageSize,
                additional: ["email", "description", "expired"]
            },
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onStoreException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: (this.authType === "local") ? this.onLoad : this.loadOTP
                }
            },
            root: "users",
            totalProperty: "total",
            id: "name",
            fields: [{
                name: "name",
                sortType: "asNaturalUCString"
            }, "description", "email", "expired"],
            remoteSort: !this.isLocal(),
            defaultSortable: true,
            scope: this
        };
        if (this.isLocal()) {
            a.sortInfo = {
                field: "name",
                direction: "asc"
            }
        }
        return new SYNO.API.JsonStore(a)
    },
    createColumnModel: function() {
        var a = function(e) {
            if ("domain" == this.authType) {
                return "-"
            }
            if ("normal" == e) {
                return _T("user", "user_acnt_normal")
            }
            if ("now" == e) {
                return '<span class="red-status">' + _T("user", "user_acnt_disabled") + "</span>"
            }
            var d = new Date();
            d.setHours(0, 0, 0, 0);
            var c = new Date(e);
            if (c < d) {
                return '<span class="orange-status">' + _T("user", "user_acnt_expired") + "</span>"
            }
            if ("expired" == e) {}
            if (e) {
                return '<span class="green-status">' + _T("user", "user_acnt_expired_date") + e + "</span>"
            }
            return _T("user", "user_acnt_unknow_status")
        };
        var b = [{
            header: _T("user", "user_account") + "<span id='" + Ext.id() + "'></span>",
            dataIndex: "name",
            width: 200
        }, {
            id: "descr",
            header: ("domain" === this.authType) ? _T("service", "service_ddns_fullname") : _T("user", "user_fullname"),
            dataIndex: "description",
            width: 200,
            renderer: function(e, d) {
                var c = Ext.util.Format.htmlEncode(e);
                d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                return c
            }
        }, {
            header: _T("user", "user_acnt_status"),
            dataIndex: "expired",
            id: "disabled",
            align: "center",
            width: 150,
            scope: this,
            renderer: a
        }];
        if (this.authType === "local") {
            b.splice(2, 0, {
                header: _T("user", "user_email"),
                dataIndex: "email",
                width: 200
            })
        }
        return new Ext.grid.ColumnModel({
            defaults: {
                sortable: this.isLocal()
            },
            columns: b
        })
    },
    createBBar: function() {
        if (this.isLocal()) {
            return new SYNO.ux.PageLessToolbar({
                store: this.module.ds,
                displayInfo: true
            })
        } else {
            return new SYNO.ux.PagingToolbar({
                store: this.module.ds,
                pageSize: this.pageSize,
                displayButtons: true,
                displayInfo: true
            })
        }
    },
    onBeforeLoad: function(a, b) {
        if (this.authType === "domain") {
            this.domainFilter.setValue(this.module.currDomain)
        }
        this.appWin.setStatusBusy()
    },
    loadOTP: function(b, a, c) {
        var d = [];
        Ext.each(a, function(e) {
            d.push(e.data.name)
        }, this);
        this.enableOTP = {};
        this.sendWebAPI({
            api: "SYNO.Core.OTP",
            version: 1,
            method: "get",
            params: {
                name: d
            },
            scope: this,
            callback: function(g, f, e) {
                if (!g) {
                    SYNO.Debug("Failed to load OTP settings");
                    SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("user", "failed_load_user"));
                    return
                }
                Ext.each(f.users, function(h) {
                    this.enableOTP[h.name] = h.enable_otp
                }, this);
                this.onLoad(b, a, c)
            }
        })
    },
    onLoad: function(b, a, d) {
        this.appWin.clearStatusBusy();
        this.isFirstLoad = false;
        this.setButtonState();
        if (this.authType !== "local") {
            return
        }
        if (this.focusUserName) {
            var c = this.getStore().indexOfId(this.focusUserName);
            this.getSelectionModel().selectRow(c);
            (function() {
                this.getView().focusRow(c)
            }).defer(100, this);
            this.focusUserName = null
        }
        if (this.module.launchUserDialogOnLoad) {
            this.launchUserDialog(this.module.launchUserDialogOnLoad);
            this.module.launchUserDialogOnLoad = ""
        }
    },
    onStoreException: function(e, f, g, d, c, a) {
        var b = this.module.getPanel();
        var h;
        SYNO.Debug("Store exception: options:", e, f, g, d, c, a);
        this.appWin.clearStatusBusy();
        if (!c.code) {
            this.appWin.setStatusError();
            return
        }
        if (c.code === 3105) {
            this.getEl().mask(_T("directory_service", "warr_db_not_ready"), "syno-ux-mask-info");
            if (!this.updateButton.pollingId) {
                this.updateButton.restartPolling()
            }
            return
        }
        h = c.code;
        if (b.userTab && "list" === d.params.action && b.userTab.getTopToolbar().getComponent("search").getValue()) {
            b.userTab.getTopToolbar().getComponent("search").reset()
        }
        SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("user", "failed_load_user"))
    },
    deselectUsers: function(d) {
        var b = this.getSelectionModel();
        for (var a = 0; a < d.length; a++) {
            var c = this.getStore().indexOfId(d[a]);
            if (c != -1) {
                b.deselectRow(c)
            }
        }
    },
    createHandler: function() {
        var a = this._D("maxaccounts");
        if (a <= this.store.getTotalCount()) {
            SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, String.format(_T("user", "error_toomanyur"), a));
            return
        }
        var b = new SYNO.SDS.AdminCenter.User.CreateUserWizardDialog({
            owner: this.module.appWin,
            module: this.module,
            passwordChecker: this.passwordChecker
        });
        b.open()
    },
    editHandler: function() {
        var a = this.getSelectionModel().getSelected();
        if (!a) {
            SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("user", "error_rmvempty"));
            return
        }
        if (a.get("name").toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
            return
        }
        this.launchUserDialog(a.get("name"))
    },
    loadHomeInfoAndDelete: function() {
        this.appWin.setStatusBusy();
        this.appWin.sendWebAPI({
            api: "SYNO.Core.User.Home",
            version: 1,
            method: "get",
            callback: function(c, b, a) {
                if (this.isDestroyed) {
                    return
                }
                this.appWin.clearStatusBusy();
                if (!c) {
                    SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, b.code);
                    return
                }
                this.launchUserDeletionDialog(b.enable)
            },
            scope: this
        })
    },
    selectReservedUser: function(b) {
        var a = false;
        Ext.each(b.getSelections(), function(c) {
            if (c.id.toUpperCase() === SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
                a = true;
                return false
            }
        });
        return b.isIdSelected("admin") || a || b.isIdSelected("guest")
    },
    deleteHandler: function() {
        var a = this.getSelectionModel();
        if (this.selectReservedUser(a)) {
            this.appWin.getMsgBox().alert(_T("tree", "leaf_user"), _T("user", "error_rmvdef"), function() {
                this.deselectUsers(["admin", SYNO.SDS.AdminCenter.User.CMS_USER, "guest"])
            }, this);
            return
        }
        if (a.isIdSelected(this._S("user"))) {
            this.appWin.getMsgBox().alert(_T("tree", "leaf_user"), _T("user", "error_rmvcur"), function() {
                this.deselectUsers([this._S("user")])
            }, this);
            return
        }
        this.canPressDelete = false;
        this.loadHomeInfoAndDelete()
    },
    setButtonState: function() {
        var b = this.getSelectionModel();
        var a = b.getCount();
        if (this.authType === "local") {
            if (a > 1) {
                this.actionDel.enable()
            } else {
                if (a == 1 && !this.selectReservedUser(b)) {
                    this.actionDel.enable()
                } else {
                    this.actionDel.disable()
                }
            }
        }
        if (1 == a && b.getSelections()[0].id.toUpperCase() !== SYNO.SDS.AdminCenter.User.CMS_USER.toUpperCase()) {
            this.actionEdit.enable()
        } else {
            this.actionEdit.disable()
        }
    },
    onRowContextMenu: function(c, f, a) {
        var b = [];
        var e = this.getSelectionModel();
        e.suspendEvents(false);
        e.selectRow(f, e.isSelected(f));
        this.setButtonState();
        e.resumeEvents();
        b.push(this.actionEdit);
        if (this.authType === "local") {
            b.push(this.actionDel)
        }
        if (b.length === 0) {
            return
        }
        var d = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        d.showAt(a.getXY());
        a.preventDefault()
    },
    launchUserDialog: function(b) {
        var a = new SYNO.SDS.AdminCenter.User.UserDialog({
            owner: this.appWin,
            module: this.module,
            ownerGrid: this,
            username: b,
            authType: this.authType || "local",
            passwordChecker: this.passwordChecker
        });
        a.open();
        this.mon(a, "userchange", function(c) {
            this.focusUserName = c;
            this.getStore().load()
        }, this)
    },
    launchUserDeletionDialog: function(e) {
        var a = this.getSelectionModel().getSelections();
        var d = [];
        var b = 0;
        var c = null;
        if (a.length === 0) {
            SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("user", "error_rmvempty"));
            return
        }
        for (b = 0; b < a.length; b++) {
            d.push(a[b].get("name"))
        }
        c = new SYNO.SDS.AdminCenter.User.DeleteDialog({
            owner: this.owner,
            module: this.module,
            appWin: this.appWin,
            ownerGrid: this,
            homesExist: e
        });
        this.mon(c, "close", function() {
            this.canPressDelete = true
        }, this);
        c.loadUserName(d);
        c.show()
    },
    launchUserFileDialog: function() {
        var a = new SYNO.SDS.AdminCenter.User.UploadUserFileDialog({
            owner: this.appWin,
            module: this.module,
            passwordChecker: this.passwordChecker
        });
        a.open()
    },
    updateAction: function() {
        var a = this.getSelectionModel().getSelected();
        if (a && this.enableOTP[a.data.name]) {
            this.actionMenu.get("reset_otp").enable()
        } else {
            this.actionMenu.get("reset_otp").disable()
        }
    },
    resetUserOTP: function() {
        var a = this.getSelectionModel().getSelected().data.name;
        this.sendWebAPI({
            api: "SYNO.Core.OTP",
            method: "reset",
            version: "1",
            params: {
                name: a
            },
            scope: this,
            callback: function(c) {
                var b = (c) ? _T("user", "reset_otp_success") : _T("user", "reset_otp_failed");
                if (c) {
                    this.enableOTP[a] = false
                }
                SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, b)
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.module = a.module;
        this.panel = this.createPanel();
        this.launchUserDialogOnLoad = "";
        this.callParent([a])
    },
    activate: function(a) {
        this.panel = this.getPanel();
        this.panel.activate();
        this.panel.loadAllForm();
        if (!a) {
            return
        }
        if (a.tab) {
            switch (a.tab) {
                case "option_tab":
                    this.panel.setActiveTab("option_tab");
                    break
            }
        } else {
            if (a.userHomeDialog) {
                this.panel.setActiveTab("option_tab")
            } else {
                if (a.userEditDialog && a.user) {
                    if (this.panel.passwordChecker && this.panel.passwordChecker.passwordPolicy) {
                        this.panel.launchUserDialog(a.user)
                    } else {
                        this.launchUserDialogOnLoad = a.user
                    }
                }
            }
        }
    },
    deactivate: function() {
        return this.getPanel().deactivate()
    },
    getPanel: function() {
        return this.panel
    },
    getHelpParam: function() {
        var a = "AdminCenter/file_user_desc.html";
        return a
    },
    createPanel: function() {
        return new SYNO.SDS.AdminCenter.User.TabPanel({
            module: this,
            appWin: this.appWin
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.User.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        Ext.copyTo(this, a, ["module", "appWin"]);
        this.passwordChecker = new SYNO.SDS.Utils.CheckStrongPassword();
        var b = Ext.apply({
            activeTab: 0,
            useDefaultBtn: false,
            items: [this.userTab = new SYNO.SDS.AdminCenter.User.UserListGrid({
                owner: this.appWin,
                module: this.module,
                appWin: this.appWin,
                passwordChecker: this.passwordChecker
            }), this.optionTab = new SYNO.SDS.AdminCenter.User.OptionTab({
                owner: this.appWin,
                module: this.module,
                passwordChecker: this.passwordChecker
            })]
        }, a);
        this.callParent([b])
    },
    activate: function() {
        this.appWin.sendWebAPI({
            api: "SYNO.Core.User.PasswordPolicy",
            version: 1,
            method: "get",
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, b.code);
                    return
                }
                SYNO.SDS.AdminCenter.User.applyPasswordPolicy(this.passwordChecker, b.strong_password)
            }
        });
        this.userTab.activate();
        this.callParent(arguments)
    },
    deactivate: function() {
        return this.userTab.deactivate() && this.optionTab.deactivate()
    },
    launchUserDialog: function(a) {
        this.userTab.launchUserDialog(a)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Group");
SYNO.SDS.AdminCenter.Group.GetErrMsg = function(b, a) {
    if (b === 3209) {
        return String.format(SYNO.API.Erros.core[b], a._D("maxgroups"))
    }
    return SYNO.API.Erros.core[b]
};
SYNO.SDS.AdminCenter.Group.Alert = function(b, a) {
    return this.getMsgBox().alert(_T("tree", "leaf_group"), SYNO.SDS.AdminCenter.Group.GetErrMsg(b, a))
};
Ext.define("SYNO.SDS.AdminCenter.Group.GroupShareGrid", {
    extend: SYNO.ux.GridPanel,
    WEBAPI_PARAM_SHARE_TYPE: ["dec", "local", "usb", "sata"],
    WEBAPI_PARAM_ADDITIONAL: ["hidden", "encryption", "is_aclmode"],
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.authType = b.authType;
        this.showHomesWarning = true;
        this.colRo = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_readonly"),
            dataIndex: "is_readonly",
            width: 120,
            align: "center",
            ownerGrid: this,
            isIgnore: function(e, d) {
                return (this.ownerGrid.owner.isAdminGroup && d.get("is_aclmode"))
            },
            renderer: function(f, e, d) {
                if (this.ownerGrid.owner.isAdminGroup && d.get("is_aclmode")) {
                    return '<div class="syno-ux-grid-enable-column-disabled">&nbsp;</div>'
                } else {
                    return SYNO.ux.EnableColumn.prototype.renderer(f, e, d)
                }
            }
        });
        this.colRw = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_writable"),
            dataIndex: "is_writable",
            width: 120,
            align: "center"
        });
        this.colNa = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_none"),
            dataIndex: "is_deny",
            width: 120,
            align: "center"
        });
        var c = b.hideCustomColumn;
        if (b.module.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application") {
            c = c || (b.module.findAppWindow()._S("version") < 4475)
        }
        c = c || b.newGroup || ("yes" === this.module._D("usbstation", "no"));
        this.colCu = new SYNO.SDS.Share.CustomColumn({
            module: this.module,
            owner: this.owner,
            ownerGrid: this,
            dataIndex: "is_custom",
            hidden: c,
            applyCallback: function() {
                this.loadInfo(this.owner.groupName)
            },
            applyTarget: this
        });
        var a = {
            title: _T("tree", "leaf_group"),
            store: this.createStore(),
            header: false,
            height: 350,
            cls: "without-dirty-red-grid",
            stripeRows: true,
            enableColumnMove: false,
            enableHdMenu: false,
            autoExpandColumn: "name",
            colModel: new Ext.grid.ColumnModel({
                columns: [new SYNO.SDS.Share.InfoColumn({
                    dataIndex: "is_unite_permission",
                    hidden: b.newGroup || false
                }), {
                    id: "name",
                    header: _T("share", "share_name"),
                    dataIndex: "name",
                    width: 200
                }, new SYNO.SDS.AdminCenter.Share.Utils.PermissionColumn({
                    header: _T("share", "share_inherit"),
                    hidden: b.newGroup,
                    convert: SYNO.SDS.AdminCenter.Share.Utils.convertBoolPermissions
                }), this.colNa, this.colRw, this.colRo, this.colCu]
            }),
            plugins: [this.colRo, this.colRw, this.colNa],
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            bbar: [_T("share", "share_privileges_priority")]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.mon(this, "afterrender", this.defineShareGridBehaviors, this);
        this.mon(this, "afterlayout", function(d, e) {
            d.getView().updateScroller()
        }, this);
        this.mon(this.colNa, "click", function(d, f, i, g) {
            var h = f.getStore().getAt(i);
            if (this.showHomesWarning && h.id === "homes" && h.get("is_deny") === true) {
                this.owner.getMsgBox().alert(this.title, _T("share", "warn_deny_rule_homes"));
                this.showHomesWarning = false
            }
        }, this)
    },
    createStore: function() {
        var a = ["is_aclmode", "name", "permission", "is_writable", "is_readonly", "is_deny", "is_custom", "share_path", "is_unite_permission", {
            name: "force_readonly_reason",
            defaultValue: undefined
        }];
        if ("yes" === this.module._D("support_s2s", "no")) {
            a.push("is_sync_share")
        }
        return new SYNO.API.JsonStore({
            autoDestroy: true,
            appWindow: this.owner,
            api: "SYNO.Core.Share.Permission",
            method: "list_by_group",
            version: 1,
            baseParams: {
                user_group_type: this.authType + "_group",
                share_type: this.WEBAPI_PARAM_SHARE_TYPE,
                additional: this.WEBAPI_PARAM_ADDITIONAL
            },
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onStoreException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            },
            root: "shares",
            idProperty: "name",
            totalProperty: "total",
            fields: a
        })
    },
    onBeforeLoad: function(a, b) {
        this.owner.setStatusBusy()
    },
    onLoad: function(b, a, d) {
        this.owner.clearStatusBusy();
        this.loadedPrivList = [];
        for (var c = 0; c < a.length; ++c) {
            this.loadedPrivList.push({
                name: a[c].data.name,
                is_readonly: a[c].data.is_readonly,
                is_writable: a[c].data.is_writable,
                is_deny: a[c].data.is_deny,
                is_custom: a[c].data.is_custom
            })
        }
    },
    onStoreException: function(d, e, f, c, b, a) {
        this.owner.clearStatusBusy();
        SYNO.Debug("Store exception: options:", d, e, f, c, b, a);
        if (this.owner.isAlertExist) {
            return
        }
        this.owner.isAlertExist = true;
        var g = SYNO.SDS.AdminCenter.Group.GetErrMsg((b.code) ? b.code : 3299, this.module);
        this.owner.getMsgBox().alert(_T("tree", "leaf_group"), g, function() {
            this.close();
            this.isAlertExist = false
        }, this.owner)
    },
    loadInfo: function(a) {
        this.getStore().load({
            params: {
                name: (a) ? a.toString() : ""
            }
        })
    },
    initComponent: function() {
        this.callParent(arguments);
        this.mon(this, "headerclick", function(c, b, a) {
            this.getStore().suspendEvents(false)
        }, this)
    },
    defineShareGridBehaviors: function() {
        this.colRo.checkSelectAll(this.getStore());
        this.colRw.checkSelectAll(this.getStore());
        this.colNa.checkSelectAll(this.getStore());
        this.mon(this, "cellclick", this.onGridCellClick, this);
        this.mon(this, "headerclick", function(d, c, b) {
            var a = d.getColumnModel();
            var e = a.getColumnId(c);
            this.onGridHeaderClick.call(this, a.getColumnById(e))
        }, this)
    },
    onGridHeaderClick: function(a) {
        if (a.box_el) {
            if (a.box_el.hasClass("syno-ux-cb-checked")) {
                if (a.dataIndex !== "is_readonly") {
                    this.colRo.box_el.removeClass("syno-ux-cb-checked");
                    this.colRo.onSelectAll()
                }
                if (a.dataIndex !== "is_writable") {
                    this.colRw.box_el.removeClass("syno-ux-cb-checked");
                    this.colRw.onSelectAll()
                }
                if (a.dataIndex !== "is_deny") {
                    this.colNa.box_el.removeClass("syno-ux-cb-checked");
                    this.colNa.onSelectAll()
                }
                this.getStore().each(function(b) {
                    b.set("is_custom", false)
                }, this)
            } else {
                this.getStore().each(function(b) {
                    var c = b.getChanges();
                    if (c.hasOwnProperty("is_custom")) {
                        b.set("is_custom", !c.is_custom)
                    }
                }, this)
            }
        }
        this.getStore().resumeEvents();
        this.getView().refresh()
    },
    onGridCellClick: function(c, i, d, h) {
        var a = c.getStore().getAt(i);
        var g = c.getColumnModel().getDataIndex(d);
        var f = function(e) {
            return (e === "is_readonly" || e === "is_writable" || e === "is_deny")
        };
        var b = function(k, e, j) {
            if ("is_readonly" !== k) {
                e.set("is_readonly", false);
                j.colRo.checkSelectAll(j.getStore())
            }
            if ("is_writable" !== k) {
                e.set("is_writable", false);
                j.colRw.checkSelectAll(j.getStore())
            }
            if ("is_deny" !== k) {
                e.set("is_deny", false);
                j.colNa.checkSelectAll(j.getStore())
            }
            if ("is_custom" !== k) {
                e.set("is_custom", false)
            }
        };
        if (f(g)) {
            if (a.get(g) === true) {
                b(g, a, c)
            } else {
                if (a.getChanges().hasOwnProperty("is_custom")) {
                    a.set("is_custom", !a.getChanges().is_custom)
                }
            }
        }
    },
    isChanged: function() {
        return (this.getChangedRecords().length !== 0)
    },
    isRecordPrivChanged: function(a) {
        for (var b = 0; b < this.loadedPrivList.length; ++b) {
            if (this.loadedPrivList[b].name == a.data.name) {
                if (this.loadedPrivList[b].is_readonly != a.data.is_readonly || this.loadedPrivList[b].is_writable != a.data.is_writable || this.loadedPrivList[b].is_deny != a.data.is_deny) {
                    return true
                }
                break
            }
        }
        return false
    },
    getChangedRecords: function() {
        var a = [];
        Ext.each(this.getStore().getModifiedRecords(), function(b) {
            if (this.isRecordPrivChanged(b)) {
                a.push(b)
            }
        }, this);
        return a
    },
    getFinalPermission: function(a) {
        if (a.data.is_deny) {
            return "na"
        } else {
            if (a.data.is_writable || (this.owner.isAdminGroup && a.data.is_aclmode)) {
                return "rw"
            } else {
                if (a.data.is_readonly) {
                    return "ro"
                }
            }
        }
        return ""
    },
    getOpenConfig: function() {
        return {
            userName: this.owner.groupName,
            userType: "group"
        }
    },
    getWebAPI: function(b) {
        var a = [];
        Ext.each(this.getChangedRecords(), function(c) {
            a.push({
                name: c.data.name,
                is_readonly: c.data.is_readonly,
                is_writable: c.data.is_writable,
                is_deny: c.data.is_deny,
                is_custom: c.data.is_custom
            })
        });
        return (a.lentgh === 0) ? [] : [{
            api: "SYNO.Core.Share.Permission",
            method: "set_by_user_group",
            version: 1,
            params: {
                name: b || this.owner.groupName,
                user_group_type: this.authType + "_group",
                permissions: a
            }
        }]
    },
    getShareInfoForS2S: function() {
        var a = [];
        Ext.each(this.getChangedRecords(), function(b) {
            a.push({
                name: b.data.name,
                is_sync_share: b.data.is_sync_share,
                permissions: [{
                    is_readonly: b.data.is_readonly,
                    is_deny: b.data.is_deny,
                    is_writable: b.data.is_writable,
                    is_custom: b.data.is_custom
                }]
            })
        });
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Group.QuotaGrid", {
    extend: "SYNO.ux.EditorGridPanel",
    constructor: function(c) {
        this.supportShareQuota = (c.module._D("support_share_quota", "no") === "yes");
        var a = this.createStore();
        var d = this.createColModel();
        var b = Ext.apply({
            plugins: [d.getColumnById("quota_enabled")],
            autoExpandColumn: "name",
            enableHdMenu: false,
            enableColumnMove: false,
            clicksToEdit: 1,
            store: a,
            colModel: d,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            view: new SYNO.ux.FleXcroll.grid.TreeView({
                useArrows: true,
                staticTree: false
            }),
            listeners: {
                beforeedit: function(f) {
                    var g = f.record;
                    if (!g.get("quota_enabled") || g.get("status") === "crash" || !g.get("target")) {
                        f.cancel = true
                    }
                },
                cellclick: {
                    delay: 100,
                    scope: this,
                    fn: this.onCellClick
                },
                headerclick: {
                    scope: this,
                    fn: this.onHeaderClick
                },
                validateedit: {
                    scope: this,
                    fn: this.checkVolumeConstraint
                }
            }
        }, c);
        this.callParent([b])
    },
    convertToMB: function(b, a) {
        if (a === "TB") {
            return b * 1024 * 1024
        }
        if (a === "GB") {
            return b * 1024
        }
        return b
    },
    checkVolumeConstraint: function(d) {
        var c = 4096 * 1024;
        var g = d.record;
        var a = g.get("total");
        var b = null;
        var f = "";
        if (d.field === "quota") {
            b = this.convertToMB(d.value, g.get("unit"))
        } else {
            if (d.field === "unit") {
                b = this.convertToMB(g.get("quota"), d.value)
            } else {
                return false
            }
        }
        if (b >= a) {
            a /= 1024;
            f = String.format(_T("user", "user_quota_limit_max_vol"), g.get("volume"), a.toFixed(2));
            d.grid.owner.getMsgBox().alert(_T("user", "error_quota_set"), f);
            return false
        }
        if (g.get("limit_4T") && b >= c) {
            if ("TB" === g.get("unit")) {
                f = String.format(_JSLIBSTR("extlang", "maxnumber"), c / 1024 / 1024 - 1 + " TB")
            } else {
                if ("GB" === g.get("unit")) {
                    f = String.format(_JSLIBSTR("extlang", "maxnumber"), c / 1024 - 1 + " GB")
                } else {
                    f = String.format(_JSLIBSTR("extlang", "maxnumber"), c + " MB")
                }
            }
            d.grid.owner.getMsgBox().alert(_T("user", "error_quota_set"), f);
            return false
        }
        return true
    },
    onCellClick: function(b, g, a, d) {
        var f = b.getStore().getAt(g);
        var c = b.getColumnModel().getColumnAt(a).id;
        if (c !== "quota_enabled" || f.get("status") === "crash" || !f.get("target")) {
            return
        }
        if (f.get("quota_enabled")) {
            f.set("quota", 1);
            b.startEditing(g, a - 2)
        } else {
            f.set("quota", 0)
        }
    },
    onHeaderClick: function(b, a, f) {
        var c = f.getTarget("input", 1, false);
        var d = b.getColumnModel().getColumnAt(a).id;
        if (d !== "quota_enabled" || !c) {
            return
        }
        b.getStore().each(function(e) {
            if (!e.get("target")) {
                return true
            }
            if (c.hasClassName("syno-ux-cb-checked")) {
                e.set("quota", 0)
            } else {
                if (e.get("quota") === 0) {
                    e.set("quota", 1)
                }
            }
        })
    },
    createStore: function() {
        var b = "group_quota";
        var a = [{
            name: "name",
            mapping: "name"
        }, {
            name: "quota",
            mapping: "quota"
        }, {
            name: "unit",
            mapping: "unit"
        }, {
            name: "quota_enabled",
            mapping: "quota_enabled"
        }, {
            name: "limit_4T",
            mapping: "limit_4T"
        }, {
            name: "status",
            mapping: "status"
        }, {
            name: "total",
            mapping: "total"
        }, {
            name: "volume",
            mapping: "volume"
        }, {
            name: "target",
            mapping: "target"
        }, {
            name: "display_name",
            mapping: "display_name"
        }];
        return new Ext.data.Store({
            listeners: {
                beforeload: {
                    scope: this,
                    fn: function() {
                        this.owner.setStatusBusy()
                    }
                },
                load: {
                    scope: this,
                    fn: function() {
                        this.owner.clearStatusBusy()
                    }
                },
                exception: {
                    scope: this,
                    fn: function(e, f, g, d, h, c) {
                        this.owner.clearStatusBusy();
                        SYNO.Debug("Store exception: ", e, f, g, d, h, c)
                    }
                }
            },
            reader: new SYNO.ux.data.TreeReader({
                root: b,
                fields: a
            }),
            idProperty: "name",
            autoDestroy: true,
            remoteSort: false
        })
    },
    createColModel: function() {
        var b = new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: (this.supportShareQuota) ? [
                ["TB", _T("common", "size_tb")],
                ["GB", _T("common", "size_gb")],
                ["MB", _T("common", "size_mb")]
            ] : [
                ["GB", _T("common", "size_gb")],
                ["MB", _T("common", "size_mb")]
            ]
        });
        var a = [{
            header: (this.supportShareQuota) ? _T("common", "volume_share") : _T("volume", "volume"),
            dataIndex: "display_name",
            align: "left",
            treeCol: this.supportShareQuota,
            renderer: function(e, c, d) {
                c.attr = 'ext:qtip="' + e + '"';
                return (d.get("status") === "normal") ? e : String.format('(<font class="red-status">{0}</font>)', e)
            }
        }, {
            header: _T("user", "user_quota_capacity"),
            dataIndex: "quota",
            align: "right",
            editor: new SYNO.ux.NumberField({
                allowBlank: false,
                allowNegative: false,
                allowDecimals: false,
                validateOnBlur: true,
                selectOnFocus: true,
                vtype: "number"
            }),
            renderer: function(e, c, d) {
                return (d.get("target")) ? e : ""
            }
        }, {
            header: _T("user", "quota_unit"),
            dataIndex: "unit",
            editor: new SYNO.ux.ComboBox({
                store: b,
                lazyRender: true,
                mode: "local",
                displayField: "display",
                valueField: "value",
                triggerAction: "all",
                editable: false
            }),
            renderer: function(e, c, d) {
                return (d.get("target")) ? e : ""
            }
        }, new SYNO.ux.EnableColumn({
            header: _T("user", "enable_quota"),
            id: "quota_enabled",
            dataIndex: "quota_enabled",
            width: 195,
            enableFastSelectAll: true,
            isIgnore: function(d, c) {
                return !(c.get("target"))
            },
            renderer: function(e, c, d) {
                return (d.get("target")) ? SYNO.ux.EnableColumn.prototype.renderer.apply(this, arguments) : ""
            }
        })];
        return new Ext.grid.ColumnModel({
            defaults: {
                width: 130,
                align: "center"
            },
            columns: a
        })
    },
    configLeafObj: function(a, b) {
        a.quota = Math.floor(a.quota);
        a.unit = "MB";
        if (a.quota % 1024 === 0) {
            a.quota /= 1024;
            a.unit = "GB"
        }
        if (a.quota % 1024 === 0) {
            a.quota /= 1024;
            a.unit = "TB"
        }
        a.quota_enabled = (a.quota !== 0);
        if (!a.quota_enabled) {
            a.unit = "GB"
        }
        a.status = (b.readonly) ? "crash" : "normal";
        a.volume = b.display_name;
        a.total = Math.floor(b.size_total_byte / 1024 / 1024);
        a.leaf = true;
        a.expanded = false
    },
    loadQuotaSettings: function(b, e, d) {
        var c = this;
        var a = {};
        Ext.each(e.volumes, function(f) {
            a[f.volume_path] = f
        });
        Ext.each(b.group_quota, function(g) {
            var f = a[g.volume];
            if (g.support_share_quota) {
                g.children = g.shares;
                g.leaf = false;
                g.expanded = true;
                g.status = (f.readonly) ? "crash" : "normal";
                g.volume = f.display_name;
                g.total = Math.floor(f.size_total_byte / 1024 / 1024);
                g.display_name = f.display_name;
                Ext.each(g.children, function(h) {
                    c.configLeafObj(h, f);
                    h.target = "share";
                    h.limit_4T = false;
                    h.display_name = h.name
                })
            } else {
                c.configLeafObj(g, f);
                g.target = "volume";
                g.limit_4T = true;
                g.name = f.volume_path;
                g.display_name = f.display_name
            }
        });
        this.getStore().loadData(b);
        if (Ext.isObject(d) && d.is_admin) {
            this.mon(this, "activate", function(f) {
                f.mask(String.format(_T("user", "edit_adminquota"), d.name))
            });
            this.mon(this, "deactivate", function(f) {
                f.unmask()
            })
        }
    },
    initForCreation: function() {
        this.owner.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.Quota",
                    method: "get",
                    version: 1,
                    params: {
                        name: "",
                        subject_type: "group",
                        support_share_quota: (this._D("support_share_user_quota", "no") === "yes")
                    }
                }, {
                    api: "SYNO.Core.Storage.Volume",
                    version: 1,
                    method: "list",
                    params: {
                        offset: 0,
                        limit: -1,
                        location: "internal"
                    }
                }]
            },
            scope: this,
            callback: function(c, b, a) {
                if (this.isDestroyed) {
                    return
                }
                this.owner.clearStatusBusy();
                if (b.has_fail) {
                    SYNO.SDS.AdminCenter.Group.Alert.call(this.owner, SYNO.API.Util.GetFirstError(b) || 3299);
                    return
                }
                this.loadQuotaSettings(SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Quota", "get"), SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Storage.Volume", "list"))
            }
        })
    },
    isDirty: function() {
        return (this.getStore().getModifiedRecords().length !== 0)
    },
    getWebAPI: function(b) {
        var a = [];
        this.getStore().getModifiedRecords().each(function(d) {
            var c = (d.get("quota_enabled")) ? parseInt(d.get("quota"), 10) : 0;
            if (d.get("target") === "share") {
                a.push({
                    share: d.get("name"),
                    quota: this.convertToMB(c, d.get("unit"))
                })
            } else {
                if (d.get("target") === "volume") {
                    a.push({
                        volume: d.get("name"),
                        quota: this.convertToMB(c, d.get("unit"))
                    })
                }
            }
        }, this);
        return (a.length === 0) ? [] : [{
            api: "SYNO.Core.Quota",
            method: "set",
            version: 1,
            params: {
                name: b,
                group_quota: a
            }
        }]
    }
});
Ext.define("SYNO.SDS.AdminCenter.Group.GroupDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(e) {
        this.defaultColumnWidth = 100;
        this.isAlertExist = false;
        this.authType = e.authType || "local";
        var a = this.createFormPanel(e);
        this.groupForm = a.getForm();
        this.groupGrid = new SYNO.SDS.AdminCenter.Group.GroupShareGrid({
            title: _T("share", "share_rights"),
            owner: this,
            module: e.module,
            itemId: "share",
            authType: this.authType
        });
        var d = (e.module._D("supportquota", "no") === "yes" && e.module._S("version") > 5496);
        this.quotaGrid = (d) ? new SYNO.SDS.AdminCenter.Group.QuotaGrid({
            title: _T("user", "user_quota_capacity"),
            owner: this,
            module: e.module,
            itemId: "quota"
        }) : {
            loadQuotaSettings: Ext.emptyFn,
            isDirty: function() {
                return false
            },
            getWebAPI: function() {
                return []
            }
        };
        this.bandwidthGrid = this.initBandwidthGrid({
            owner: this,
            module: e.module
        });
        var b = [];
        if (this.authType === "local") {
            b.push(a)
        }
        b.push(this.groupGrid);
        if (d) {
            b.push(this.quotaGrid)
        }
        this.isSupportAppPriv = (e.module._S("version") > 4931);
        if (this.isSupportAppPriv) {
            this.appPrivilegeGrid = this.initPrivilegeGrid({
                title: _T("user", "user_application"),
                owner: this,
                module: e.module,
                entity_type: "group",
                appFilter: function(f) {
                    if (f.supportIP && -1 < f.grant_type.indexOf(this.owner.authType)) {
                        return true
                    }
                }
            });
            b.push(this.appPrivilegeGrid)
        }
        b.push(this.bandwidthGrid);
        var c = Ext.apply({
            width: 770,
            height: 400,
            title: "",
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                itemId: "tabs",
                plain: true,
                activeTab: 0,
                deferredRender: false,
                items: b
            }],
            buttons: [{
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.queryGlobalConf
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.cancelCallback
            }]
        }, e);
        this.callParent([c])
    },
    createFormPanel: function(b) {
        var a = Ext.apply({
            title: _T("group", "group_basicinfo"),
            webapi: {
                api: "SYNO.Core.Group",
                methods: {
                    set: "set"
                },
                version: 1
            },
            trackResetOnLoad: true,
            itemId: "info",
            labelWidth: 150,
            items: [{
                xtype: "syno_textfield",
                name: "name",
                maxlength: 32,
                fieldLabel: _T("group", "group_name") + ' <font class="red-status">' + _T("common", "star") + "</font>",
                allowBlank: false,
                validationEvent: "keyup",
                blankText: _T("group", "error_noname"),
                vtype: "groupname"
            }, {
                xtype: "syno_textfield",
                name: "description",
                maxlength: 64,
                fieldLabel: _T("group", "group_desc")
            }, {
                xtype: "hidden",
                name: "new_name"
            }, {
                xtype: "syno_displayfield",
                value: ['<font class="red-status">' + _T("common", "star") + "</font> " + _T("firewall", "firewall_field_blank_alert")]
            }],
            listeners: {
                actioncomplete: {
                    scope: this,
                    fn: this.onActionComplete
                },
                actionfailed: {
                    scope: this,
                    fn: this.onActionFailed
                }
            }
        }, b);
        return new SYNO.ux.FormPanel(a)
    },
    initPrivilegeGrid: function(a) {
        return new SYNO.SDS.AdminCenter.AppRulePrivileges.EditAppPrivPanel(a)
    },
    initBandwidthGrid: function(b) {
        var a = function(n, m, o, p, l, k) {
            if ("scheduled" === o.get("policy")) {
                m.attr = 'style="color:#aaaaaa;"'
            }
            return n
        };
        var g = new SYNO.ux.NumberField({
            allowBlank: false,
            allowNegative: false,
            allowDecimals: false,
            validationEvent: "keyup",
            maxLength: 9,
            validateOnBlur: true
        });
        var c = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: [
                [_T("bandwidth", "mode_disable"), "disabled"],
                [_T("bandwidth", "mode_enable"), "enabled"],
                [_T("bandwidth", "mode_schedule"), "scheduled"]
            ],
            autoDestroy: true
        });
        var i = {
            header: _T("bandwidth", "mode"),
            dataIndex: "policy",
            align: "center",
            renderer: function(k) {
                if (k === "disabled" || k === "notexist" || k === false) {
                    return _T("bandwidth", "mode_disable")
                }
                if (k === "enabled" || k === true) {
                    return _T("bandwidth", "mode_enable")
                }
                if (k === "scheduled") {
                    return _T("bandwidth", "mode_schedule")
                }
                return k
            },
            editor: new SYNO.ux.ComboBox({
                name: "modeSelect",
                hiddenName: "modeSelect",
                typeAhead: true,
                triggerAction: "all",
                displayField: "display",
                valueField: "value",
                hideLabel: true,
                id: Ext.id(),
                editable: false,
                forceSelection: true,
                valueNotFoundText: _T("bandwidth", "mode_disable"),
                store: c,
                mode: "local"
            })
        };
        var h = new Ext.grid.ColumnModel([{
            header: _T("bandwidth", "bandwidth_protocol"),
            width: this.defaultColumnWidth,
            dataIndex: "protocol",
            renderer: SYNO.SDS.BandwidthControl.ProtocolTitle,
            align: "left"
        }, {
            header: _T("bandwidth", "bandwidth_up_rate") + " (KB/s)",
            dataIndex: "upload_limit_1",
            align: "center",
            editor: g,
            renderer: a
        }, {
            header: _T("bandwidth", "bandwidth_down_rate") + " (KB/s)",
            dataIndex: "download_limit_1",
            align: "center",
            editor: g,
            renderer: a
        }, i, {
            dataIndex: "schedule_plan",
            align: "center",
            hidden: true
        }, {
            dataIndex: "upload_limit_2",
            align: "center",
            hidden: true
        }, {
            dataIndex: "download_limit_2",
            align: "center",
            hidden: true
        }]);
        h.isCellEditable = function(k, m) {
            var l = e.getAt(m);
            if ("scheduled" === l.get("policy") && 3 !== k) {
                return false
            }
            return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, k, m)
        };
        var e = new SYNO.API.JsonStore({
            api: "SYNO.Core.BandwidthControl",
            method: "get",
            version: 1,
            appWindow: this,
            baseParams: {
                name: "",
                owner_type: "local_group"
            },
            fields: ["upload_limit_1", "download_limit_1", "policy", "protocol", "owner_type", "schedule_plan", "upload_limit_2", "download_limit_2"],
            root: "bandwidths",
            sortInfo: {
                field: "protocol",
                direction: "ASC"
            },
            remoteSort: false,
            listeners: {
                exception: {
                    scope: b.owner,
                    fn: SYNO.SDS.AdminCenter.Group.GroupDialog.prototype.onStoreException
                }
            }
        });
        var f = new SYNO.ux.Toolbar();
        var j = new SYNO.ux.Button({
            name: "schedulePlanBtn",
            text: _T("bandwidth", "schedule_plan_group"),
            disabled: true,
            scope: this,
            handler: function(k, l) {
                var m = this.selModel.getSelected();
                if (typeof m === "undefined") {
                    return
                }
                if (typeof m.data.schedule_plan === "undefined" || m.data.schedule_plan === "") {
                    m.data.schedule_plan = "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                }
                if (typeof m.data.upload_limit_2 === "undefined" || m.data.upload_limit_2 === "") {
                    m.data.upload_limit_2 = 0
                }
                if (typeof m.data.download_limit_2 === "undefined" || m.data.download_limit_2 === "") {
                    m.data.download_limit_2 = 0
                }
                SYNO.SDS.BandwidthControl.SchedulePlanWinOpen.createDelegate(this, ["user", m, false])()
            }
        });
        f.add(j);
        var d = {
            title: _T("bandwidth", "bandwidth_tab_title"),
            cm: h,
            ds: e,
            tbar: f,
            enableHdMenu: false,
            enableColumnMove: false,
            clicksToEdit: 1,
            selModel: this.selModel = new Ext.grid.RowSelectionModel({
                singleSelect: true,
                listeners: {
                    selectionchange: {
                        fn: function(k) {
                            if (k.getCount() > 0) {
                                j.enable(false)
                            } else {
                                j.disable(false)
                            }
                        },
                        scope: this
                    }
                }
            })
        };
        Ext.apply(d, b);
        return new SYNO.ux.EditorGridPanel(d)
    },
    onActionComplete: function(a, b) {},
    onActionFailed: function(a, b) {},
    queryGlobalConf: function() {
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        var d = {
            api: "SYNO.Core.BandwidthControl.Protocol",
            method: "get",
            version: 1
        };
        var i = Ext.apply({
            params: {
                protocol: "FTP"
            }
        }, d);
        var h = Ext.apply({
            params: {
                protocol: "WebDAV"
            }
        }, d);
        var f = Ext.apply({
            params: {
                protocol: "FileStation"
            }
        }, d);
        var e = Ext.apply({
            params: {
                protocol: "NetworkBackup"
            }
        }, d);
        var b = {
            api: "SYNO.Core.FileServ.FTP",
            method: "get",
            version: 1
        };
        var j = {
            api: "SYNO.Core.FileServ.FTP.SFTP",
            method: "get",
            version: 1
        };
        var g = {
            api: "SYNO.Core.FileServ.WebDAV",
            method: "get",
            version: 1
        };
        var c = {
            api: "SYNO.Backup.Service.NetworkBackup",
            method: "get",
            version: 1
        };
        var a = [i, h, f, b, j, g];
        if ("no" === this._D("usbstation", "no")) {
            a.push(e, c)
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(m, l, k) {
                if (m) {
                    this.checkGlobalProtocol(l.result, k.compound)
                } else {
                    this.onActionFailed()
                }
            }
        })
    },
    setGlobalConf: function(d) {
        var a = {
            api: "SYNO.Core.BandwidthControl.Protocol",
            method: "set",
            version: 1
        };
        var c = [];
        for (var b = 0; b < d.length; b++) {
            c.push(Ext.apply({
                params: {
                    protocol: d[b],
                    policy: "enabled"
                }
            }, a))
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: c
            },
            scope: this,
            callback: function(g, f, e) {
                if (g) {
                    this.applySetting()
                } else {
                    this.onActionFailed()
                }
            }
        })
    },
    getConfirmString: function(d, c) {
        var a = '{0}<div ext:qtip="{1}" class="blue-status">{1}<div>';
        var b = [];
        Ext.each(c, function(e) {
            b.push(SYNO.SDS.BandwidthControl.ProtocolTitle(e))
        });
        return String.format(a, d, b.join(", "))
    },
    checkGlobalProtocol: function(e, g) {
        var d = this.bandwidthGrid.getStore(),
            b = [],
            i = [],
            j = "",
            a = "";
        var c = false;
        var h = false;
        var f = false;
        Ext.each(e, function(k) {
            if (k.success) {
                if (k.api === "SYNO.Core.FileServ.FTP" && (k.data.enable_ftp || k.data.enable_ftps)) {
                    c = true
                } else {
                    if (k.api === "SYNO.Core.FileServ.FTP.SFTP" && k.data.enable) {
                        c = true
                    } else {
                        if (k.api === "SYNO.Core.FileServ.WebDAV" && (k.data.enable_http || k.data.enable_https)) {
                            h = true
                        } else {
                            if (k.api === "SYNO.Backup.Service.NetworkBackup" && k.data.enable) {
                                f = true
                            } else {
                                if (k.api === "SYNO.Core.BandwidthControl.Protocol" && k.data.policy === "disabled") {
                                    i.push(k.data.protocol)
                                }
                            }
                        }
                    }
                }
            }
        });
        if (!c) {
            i.remove("FTP")
        }
        if (!h) {
            i.remove("WebDAV")
        }
        if (!f) {
            i.remove("NetworkBackup")
        }
        d.each(function(k) {
            j = k.get("protocol");
            if (k.get("policy") !== "notexist" && k.get("policy") !== "disabled" && i.indexOf(j) !== -1) {
                b.push(j)
            }
        }, this);
        if (b.length > 0) {
            a = this.getConfirmString(_T("bandwidth", "bandwidth_global_conf_enable_desc"), b) || _T("bandwidth", "bandwidth_global_conf_enable_desc");
            this.getMsgBox().confirm(_T("bandwidth", "bandwidth_tab_title"), a, function(k) {
                if ("yes" === k) {
                    this.setGlobalConf(b)
                } else {
                    this.applySetting()
                }
            }, this)
        } else {
            this.applySetting()
        }
    },
    createApiArray: function() {
        var d = {};
        var a = this.groupForm.getFieldValues(true);
        d.name = this.groupName;
        if (a.name) {
            d.new_name = a.name
        }
        if (a.description) {
            d.description = a.description
        }
        var c = [];
        Ext.each(this.bandwidthGrid.getStore().getModifiedRecords(), function(e) {
            e.data.name = d.new_name || d.name;
            c.push(e.data)
        }, this);
        var b = [];
        if (this.authType === "local" && this.groupForm.isDirty()) {
            b.push({
                api: "SYNO.Core.Group",
                method: "set",
                version: 1,
                params: d
            })
        }
        b = b.concat(this.groupGrid.getWebAPI(d.new_name || d.name));
        b = b.concat(this.quotaGrid.getWebAPI(d.new_name || d.name));
        b.push({
            api: "SYNO.Core.BandwidthControl",
            method: "set",
            version: 1,
            params: {
                bandwidths: c
            }
        });
        if (this.isSupportAppPriv) {
            b = b.concat(this.getAppRulePrivApi())
        }
        return b
    },
    getAppRulePrivApi: function() {
        this.appPrivilegeGrid.newname = this.groupForm.findField("name").getValue();
        return this.appPrivilegeGrid.getWebAPI()
    },
    applySetting: function() {
        if (this.authType === "local" && !this.groupForm.isValid()) {
            SYNO.SDS.AdminCenter.Group.Alert.call(this, 3208, this.module);
            this.getComponent("tabs").setActiveTab(0);
            this.clearStatusBusy();
            return
        }
        var c = (this.groupGrid.getChangedRecords().length !== 0) || this.quotaGrid.isDirty();
        var a = this.bandwidthGrid.getStore().getModifiedRecords().length;
        if (!this.groupForm.isDirty() && !c && a === 0 && (!this.isSupportAppPriv || !this.appPrivilegeGrid.isChanged())) {
            this.close();
            return
        }
        var b = this.groupGrid.getShareInfoForS2S();
        SYNO.SDS.Utils.S2S.confirmIfSyncShareAffected(false, b, {
            dialogTitle: this.title,
            dialogMsg: _T("s2s", "s2s_warn_share_change_priv"),
            dialogOwner: this,
            continueHandler: function() {
                this.sendWebAPI({
                    params: {},
                    compound: {
                        stopwhenerror: false,
                        params: this.createApiArray()
                    },
                    scope: this,
                    callback: this.applyDone
                })
            },
            abortHandler: function() {
                this.clearStatusBusy();
                this.groupGrid.getStore().rejectChanges()
            },
            scope: this
        })
    },
    applyDone: function(e, d, c, a) {
        this.clearStatusBusy();
        if (d.has_fail) {
            var b = SYNO.API.Util.GetFirstError(d);
            SYNO.SDS.AdminCenter.Group.Alert.call(this, (b) ? b.code : 3299, this.module)
        } else {
            this.lastResult = true;
            if (this.authType === "local") {
                this.groupName = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.Group", "set", "name")
            }
            this.close()
        }
    },
    loadSuccess: function(a) {
        var c = SYNO.API.Util.GetValByAPI(a, "SYNO.Core.Group", "admin_check").groups[0];
        this.isAdminGroup = c.is_admin;
        this.quotaGrid.loadQuotaSettings(SYNO.API.Util.GetValByAPI(a, "SYNO.Core.Quota", "get"), SYNO.API.Util.GetValByAPI(a, "SYNO.Core.Storage.Volume", "list"), c);
        var b = SYNO.API.Util.GetValByAPI(a, "SYNO.Core.BandwidthControl", "get");
        if (b && b.bandwidths && b.bandwidths.length > 0) {
            this.bandwidthGrid.getStore().loadData(b)
        }
    },
    load: function(c, b) {
        this.setTitle(c);
        this.groupForm.findField("name").setDisabled(c === "users" || "administrators" === c || "http" === c);
        this.bandwidthGrid.setDisabled(c === "http");
        this.groupName = c;
        this.lastResult = false;
        if (this.isSupportAppPriv) {
            this.appPrivilegeGrid.entity_name = c
        }
        var a = [{
            api: "SYNO.Core.Group",
            method: "admin_check",
            version: 1,
            params: {
                name: c
            }
        }, {
            api: "SYNO.Core.BandwidthControl",
            method: "get",
            version: 1,
            params: {
                name: c,
                owner_type: "local_group"
            }
        }];
        if (this._D("supportquota", "no") === "yes" && this._S("version") > 5496) {
            a = a.concat([{
                api: "SYNO.Core.Quota",
                method: "get",
                version: 1,
                params: {
                    name: c,
                    subject_type: "group",
                    support_share_quota: (this._D("support_share_user_quota", "no") === "yes")
                }
            }, {
                api: "SYNO.Core.Storage.Volume",
                version: 1,
                method: "list",
                params: {
                    offset: 0,
                    limit: -1,
                    location: "internal"
                }
            }])
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(g, f, e) {
                if (g && !f.has_fail) {
                    this.loadSuccess(f);
                    return
                }
                var d = SYNO.API.Util.GetFirstError(f);
                this.getMsgBox().alert(this.title, SYNO.API.Erros.core[d.code] || _T("common", "error_system"));
                this.close()
            }
        });
        this.groupForm.setValues({
            name: c,
            description: b
        });
        this.groupGrid.loadInfo(this.groupName);
        this.show()
    },
    getResult: function() {
        var a = {};
        a.success = this.lastResult;
        a.group = this.groupName;
        return a
    },
    cancelCallback: function() {
        if (this.groupForm.isDirty() || this.quotaGrid.isDirty() || (this.groupGrid.getChangedRecords().length !== 0 || (this.isSupportAppPriv && this.appPrivilegeGrid.isChanged()))) {
            this.getMsgBox().confirm(_T("user", "user_acnt_info"), _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.doClose()
                }
            }, this)
        } else {
            this.doClose()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Group.MemberDialog", {
    extend: "SYNO.SDS.ModalWindow",
    pageSize: 50,
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.store = this.createStore(b);
        this.grid = this.createGridPanel();
        var a = this.fillConfig(b);
        this.callParent([a])
    },
    fillConfig: function(a) {
        return Ext.apply({
            width: 570,
            height: 350,
            title: _T("group", "group_members"),
            layout: "fit",
            items: [this.grid],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_finish"),
                btnStyle: "blue",
                scope: this,
                handler: function() {
                    this.close()
                }
            }],
            listeners: {
                close: {
                    scope: this,
                    fn: function(b) {
                        this.store.removeAll()
                    }
                }
            }
        }, a)
    },
    createGridPanel: function() {
        this.actionRemove = this.createActionRemove();
        var a = {
            itemId: "grid",
            border: false,
            store: this.store,
            enableHdMenu: false,
            columns: [{
                header: _T("user", "user_account"),
                dataIndex: "name",
                width: 200
            }, {
                id: "description",
                header: _T("user", "user_fullname"),
                dataIndex: "description",
                width: 150,
                renderer: Ext.util.Format.htmlEncode
            }],
            autoExpandColumn: "description",
            selModel: new Ext.grid.RowSelectionModel({
                single: true,
                listeners: {
                    selectionchange: {
                        scope: this,
                        fn: function(c) {
                            var b = c.getCount();
                            this.actionRemove.setDisabled((b === 0))
                        }
                    }
                }
            }),
            listeners: {
                rowcontextmenu: {
                    scope: this,
                    fn: function(c, f, b) {
                        var d = new Ext.menu.Menu({
                            autoDestroy: true,
                            items: [this.actionRemove]
                        });
                        var e = c.getSelectionModel();
                        e.selectRow(f, e.isSelected(f));
                        d.showAt(b.getXY());
                        b.preventDefault()
                    }
                }
            },
            tbar: {
                items: [{
                    xtype: "syno_button",
                    text: _T("common", "add"),
                    itemId: "add",
                    scope: this,
                    handler: this.addMembers
                }, new SYNO.ux.Button(this.actionRemove)]
            },
            bbar: new SYNO.ux.PagingToolbar({
                store: this.store,
                displayInfo: true,
                emptyMsg: _T("group", "group_nombrs"),
                pageSize: this.pageSize
            })
        };
        return new SYNO.ux.GridPanel(a)
    },
    createActionRemove: function() {
        return new Ext.Action({
            text: _T("group", "remove_member"),
            itemId: "remove",
            scope: this,
            handler: this.removeMembers
        })
    },
    createStore: function(a) {
        return new SYNO.API.JsonStore({
            autoDestroy: true,
            appWindow: a.owner,
            api: "SYNO.Core.Group.Member",
            method: "list",
            version: 1,
            baseParams: {
                offset: 0,
                limit: this.pageSize,
                ingroup: true
            },
            idProperty: "name",
            totalProperty: "total",
            root: "users",
            fields: ["name", "description"],
            listeners: {
                exception: this.onStoreException,
                beforeload: this.onBeforeLoad,
                load: this.onLoad,
                scope: this
            }
        })
    },
    addMembers: function() {
        var b = this.groupName;
        var a = new SYNO.SDS.UserChooser({
            owner: this,
            module: this.module,
            localOnly: true,
            singleSelect: false,
            setStoreConfig: function() {
                return {
                    api: "SYNO.Core.Group.Member",
                    method: "list",
                    version: "1",
                    root: "users",
                    id: "uid",
                    idProperty: "name",
                    totalProperty: "total"
                }
            },
            setApiParams: function() {
                return {
                    group: b,
                    ingroup: false
                }
            }
        });
        this.mon(a, "close", this.afterUserChooser, this);
        a.chooseUsers()
    },
    afterUserChooser: function(b) {
        var a = b.getRecords();
        var c = [];
        if (a.length > 0) {
            Ext.each(a, function(d) {
                c.push(d.get("name"));
                return true
            });
            this.applyAddMembers(c)
        }
        this.mun(b, "close", this.afterUserChooser, this)
    },
    applyAddMembers: function(a) {
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Group.Member",
            method: "add",
            version: 1,
            params: {
                group: this.groupName,
                name: a
            },
            scope: this,
            callback: this.afterAddMembers
        })
    },
    afterAddMembers: function(c, b, a) {
        this.clearStatusBusy();
        if (c) {
            var d = 0;
            this.store.load({
                params: {
                    offset: d,
                    limit: this.pageSize,
                    ingroup: true
                }
            })
        } else {
            SYNO.SDS.AdminCenter.Group.Alert.call(this, b.code)
        }
    },
    deselectUsers: function(c) {
        var a = this.getComponent("grid");
        var b = a.getSelectionModel();
        Ext.each(c, function(d) {
            var e = a.getStore().indexOfId(d);
            if (e != -1) {
                b.deselectRow(e)
            }
        })
    },
    removeMembers: function() {
        var b = this.grid.getSelectionModel();
        var a = this.grid.getSelectionModel().getSelections();
        var d = this.getMsgBox();
        var c = [];
        if ("administrators" === this.groupName) {
            if (b.isIdSelected("admin")) {
                this.getMsgBox().alert(_T("tree", "leaf_user"), _T("user", "error_rmvdef"), function() {
                    this.deselectUsers(["admin"])
                }, this);
                return
            }
            if (b.isIdSelected("SynologyCMS")) {
                this.getMsgBox().alert(_T("tree", "leaf_user"), _T("user", "error_rmvdef"), function() {
                    this.deselectUsers(["SynologyCMS"])
                }, this);
                return
            }
            if (b.isIdSelected(this._S("user"))) {
                this.getMsgBox().alert(_T("tree", "leaf_user"), _T("group", "error_rmmember_cur"), function() {
                    this.deselectUsers([this._S("user")])
                }, this);
                return
            }
        }
        Ext.each(a, function(g, f, e) {
            c.push(g.get("name"))
        }, this);
        d.confirmDelete(_T("tree", "leaf_group"), String.format(_T("group", "cfrm_remove_users") + "<br>{1}", this.groupName, c.join(", ")), function(e) {
            if (e === "yes") {
                this.position = this.grid.getBottomToolbar().cursor + this.store.indexOf(a[0]);
                this.applyRemoveMembers(c)
            }
        }, this)
    },
    applyRemoveMembers: function(a) {
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Group.Member",
            method: "remove",
            version: 1,
            params: {
                group: this.groupName,
                name: a
            },
            scope: this,
            callback: this.afterRemoveMembers
        })
    },
    afterRemoveMembers: function(c, b, a) {
        this.clearStatusBusy();
        if (c) {
            var d = Math.floor(this.position / this.pageSize) * this.pageSize;
            if (d >= this.totalNum - a.name.length) {
                d -= this.pageSize;
                if (d < 0) {
                    d = 0
                }
            }
            this.store.load({
                params: {
                    offset: d,
                    limit: this.pageSize,
                    ingroup: true
                }
            })
        } else {
            SYNO.SDS.AdminCenter.Group.Alert.call(this, b.code)
        }
    },
    onStoreException: function(d, e, f, c, b, a) {
        this.clearStatusBusy();
        var g = SYNO.SDS.AdminCenter.Group.GetErrMsg((b.code) ? b.code : 3299);
        this.owner.getMsgBox().alert(this.title, g, this.close, this.owner)
    },
    onBeforeLoad: function(a, b) {
        this.setStatusBusy()
    },
    onLoad: function(c, b, d) {
        this.clearStatusBusy();
        this.totalNum = c.totalLength;
        if (this.focusMembers && this.focusMembers.length) {
            var a = c.indexOfId(this.focusMembers[0]);
            if (a !== -1) {
                this.grid.getSelectionModel().selectRow(a);
                (function() {
                    this.grid.getView().focusRow(a)
                }).defer(100, this)
            }
        }
        if (c.getCount() > 0) {
            this.grid.getSelectionModel().selectFirstRow()
        } else {
            this.grid.getTopToolbar().getComponent("remove").disable()
        }
    },
    load: function(a) {
        this.setTitle(a);
        this.store.baseParams.group = a;
        this.store.load();
        this.groupName = a;
        this.show()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Group.CreateGroupSummaryStep", {
    extend: "SYNO.SDS.Wizard.SummaryStep",
    activate: function() {
        var e = this.owner;
        var i = this.getStore();
        var g = [];
        var h = [];
        var c = [];
        var a = [];
        var d = [];
        var f = e.groupForm.findField("name").getValue();
        var b = e.groupForm.findField("description").getValue();
        i.removeAll(true);
        i.append(_T("group", "group_name"), f);
        i.append(_T("group", "group_desc"), b);
        e.groupGrid.getStore().each(function(k) {
            var j = this.getFinalPermission(k);
            if ("rw" == j) {
                g.push(k.data.name)
            } else {
                if ("ro" == j) {
                    c.push(k.data.name)
                } else {
                    if ("na" == j) {
                        h.push(k.data.name)
                    }
                }
            }
        }, e.groupGrid);
        i.append(_T("common", "writeable"), g.join(", "));
        i.append(_T("common", "readonly"), c.join(", "));
        i.append(_T("share", "share_add_deny"), h.join(", "));
        if (this.owner.isSupportQuota) {
            this.owner.quotaGrid.getStore().each(function(k) {
                if (k.get("target") && k.get("quota_enabled")) {
                    var j = String.format("{0} {1}", k.get("quota"), k.get("unit"));
                    i.append(k.get((k.get("target") === "share") ? "name" : "volume"), j)
                }
            })
        }
        if (this.owner.isSupportAppPriv) {
            this.owner.appPrivilegeGrid.getStore().each(function(j) {
                if (j.get("allow")) {
                    a.push(j.get("name"))
                }
            });
            i.append(_T("tree", "leaf_appprivilege"), a.join(", "))
        }
        e.bandwidthGrid.getStore().each(function(j) {
            if ("notexist" !== j.get("policy")) {
                d.push(SYNO.SDS.BandwidthControl.ProtocolTitle(j.get("protocol")) + "(" + j.get("upload_limit_1") + "/" + j.get("download_limit_1") + ")")
            }
        });
        i.append(_T("bandwidth", "bandwidth_settings"), d.join(", "));
        this.getView().refresh()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Group.CreateGroupWizardDialog", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(b) {
        this.isAlertExist = false;
        this.owner = b.owner;
        this.module = b.module;
        this.isSupportAppPriv = (this._S("version") > 4931);
        var a = Ext.apply({
            title: _T("group", "group_wizard_title"),
            width: 600,
            height: 500,
            steps: []
        }, b);
        this.groupFormPanel = SYNO.SDS.AdminCenter.Group.GroupDialog.prototype.createFormPanel.call(this, {
            headline: _T("group", "group_basicinfo"),
            description: _T("group", "groupinfo_descr"),
            title: "",
            itemId: "group",
            nextId: "share",
            owner: this,
            module: this.module,
            getNext: function() {
                if (this.getForm().isValid()) {
                    this.owner.validGroupName(true)
                } else {
                    SYNO.Debug("form invalid", this.getForm())
                }
                return false
            }
        });
        this.isSupportQuota = (this._D("supportquota", "no") === "yes" && this._S("version") > 5496);
        this.groupGrid = new SYNO.SDS.AdminCenter.Group.GroupShareGrid({
            headline: _T("group", "group_shareinfo_title"),
            description: _T("group", "group_shareinfo_descr"),
            title: "",
            itemId: "share",
            nextId: (this.isSupportQuota) ? "quota" : ((this.isSupportAppPriv) ? "appprivilege" : "bandwidth"),
            owner: this,
            module: this.module,
            authType: "local",
            newGroup: true,
            getNext: function() {
                return this.nextId
            }
        });
        this.quotaGrid = (this.isSupportQuota) ? new SYNO.SDS.AdminCenter.Group.QuotaGrid({
            headline: _T("confbackup", "user_quota_desc"),
            description: _T("userwizard", "quotainfo_descr"),
            title: "",
            owner: this,
            module: this.module,
            itemId: "quota",
            nextId: (this.isSupportAppPriv) ? "appprivilege" : "bandwidth",
            getNext: function() {
                return this.nextId
            }
        }) : {
            initForCreation: Ext.emptyFn,
            getWebAPI: function() {
                return []
            }
        };
        if (this.isSupportAppPriv) {
            this.appPrivilegeGrid = SYNO.SDS.AdminCenter.Group.GroupDialog.prototype.initPrivilegeGrid({
                headline: _T("userwizard", "user_asign_app_privilege"),
                description: _T("userwizard", "user_app_privilege_descr"),
                title: "",
                itemId: "appprivilege",
                nextId: "bandwidth",
                owner: this,
                module: this.module,
                entity_type: "group",
                hide_custom: true,
                appFilter: function(c) {
                    if (c.supportIP && -1 < c.grant_type.indexOf("local")) {
                        return true
                    }
                }
            })
        }
        this.bandwidthGrid = SYNO.SDS.AdminCenter.Group.GroupDialog.prototype.initBandwidthGrid.createDelegate(this, [{
            headline: _T("bandwidth", "bandwidth_group_create_headline"),
            description: _T("bandwidth", "bandwidth_group_create_description"),
            title: "",
            itemId: "bandwidth",
            nextId: "summary",
            owner: this,
            module: this.module,
            getNext: function() {
                return this.nextId
            }
        }])();
        this.summaryGrid = new SYNO.SDS.AdminCenter.Group.CreateGroupSummaryStep({
            headline: _T("group", "group_summary_title"),
            description: _T("wizcommon", "summary_descr"),
            itemId: "summary",
            nextId: null,
            owner: this,
            module: this.module,
            getNext: function() {
                this.owner.onApply();
                return false
            }
        });
        this.groupForm = this.groupFormPanel.getForm();
        a.steps.push(this.groupFormPanel);
        a.steps.push(this.groupGrid);
        if (this.isSupportQuota) {
            a.steps.push(this.quotaGrid)
        }
        if (this.isSupportAppPriv) {
            a.steps.push(this.appPrivilegeGrid)
        }
        a.steps.push(this.bandwidthGrid);
        a.steps.push(this.summaryGrid);
        this.callParent([a])
    },
    onOpen: function() {
        this.callParent(arguments);
        this.getButton("next").disable();
        this.groupFormPanel.mon(this.groupForm.findField("name"), "valid", this.validGroupName, this);
        this.groupGrid.loadInfo();
        this.quotaGrid.initForCreation();
        this.bandwidthGrid.getStore().load()
    },
    getAppRulePrivApi: function() {
        var a = this.groupForm.findField("name").getValue();
        this.appPrivilegeGrid.newname = a;
        return SYNO.SDS.AdminCenter.Group.GroupDialog.prototype.getAppRulePrivApi.call(this)
    },
    onApply: function() {
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        var b = [];
        var e = {
            name: this.groupForm.findField("name").getValue()
        };
        var c = this.groupForm.findField("description").getValue();
        if (c) {
            e.description = c
        }
        b.push({
            api: "SYNO.Core.Group",
            method: "create",
            version: 1,
            params: e
        });
        var a = [];
        Ext.each(this.groupGrid.getChangedRecords(), function(f) {
            a.push({
                name: f.data.name,
                is_readonly: f.data.is_readonly,
                is_writable: f.data.is_writable,
                is_deny: f.data.is_deny
            })
        });
        if (a.length > 0) {
            b.push({
                api: "SYNO.Core.Share.Permission",
                method: "set_by_user_group",
                version: 1,
                params: {
                    name: e.name,
                    user_group_type: "local_group",
                    permissions: a
                }
            })
        }
        b = b.concat(this.quotaGrid.getWebAPI(e.name));
        var d = [];
        this.bandwidthGrid.getStore().each(function(f) {
            f.data.name = this.groupForm.findField("name").getValue();
            d.push(f.data)
        }, this);
        b.push({
            api: "SYNO.Core.BandwidthControl",
            method: "set",
            version: 1,
            params: {
                bandwidths: d
            }
        });
        if (this.isSupportAppPriv) {
            b = b.concat(this.getAppRulePrivApi())
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: b
            },
            scope: this,
            callback: this.applyDone
        })
    },
    applyDone: function(e, d, c, a) {
        if (this.isDestroyed) {
            return
        }
        this.clearStatusBusy();
        if (d.has_fail) {
            var b = SYNO.API.Util.GetFirstError(d);
            SYNO.SDS.AdminCenter.Group.Alert.call(this, (b) ? b.code : 3299, this.owner)
        } else {
            this.module.store.reload();
            this.close()
        }
    },
    validGroupName: function(b) {
        var a = this.groupForm.findField("name").getValue();
        this.sendWebAPI({
            api: "SYNO.Core.Group",
            method: "get",
            version: 1,
            params: {
                name: a,
                go_next: (b === true)
            },
            scope: this,
            callback: function(g, e, d, c) {
                var f = this.groupForm.findField("name");
                if (!g) {
                    this.getButton("next").disable()
                } else {
                    if (e.groups.length === 0) {
                        this.getButton("next").enable();
                        if (d.go_next === true) {
                            this.goNext(this.groupFormPanel.nextId)
                        }
                    } else {
                        this.getButton("next").disable();
                        f.markInvalid(_T("group", "error_nameused"))
                    }
                }
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Group.GridPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.authType = b.authType || "local";
        this.pageSize = this.isLocal() ? -1 : SYNO.SDS.AdminCenter.GROUP_PAGING_SIZE;
        this.store = this.createStore(b);
        this.selModel = this.createSelectionModel();
        var a = Ext.apply({
            title: _T("tree", "leaf_group"),
            store: this.store,
            tbar: this.configTopToolbar(b),
            bbar: this.createBBar(),
            header: false,
            border: false,
            height: 404,
            stripeRows: true,
            autoExpandColumn: "description",
            enableHdMenu: false,
            enableColumnMove: false,
            colModel: new Ext.grid.ColumnModel({
                defaults: {
                    sortable: this.isLocal()
                },
                columns: [{
                    header: _T("group", "grp_name"),
                    dataIndex: "name",
                    width: 250
                }, {
                    id: "description",
                    header: _T("group", "grp_desc"),
                    dataIndex: "description",
                    width: 200,
                    renderer: function(e, d) {
                        var c = Ext.util.Format.htmlEncode(e);
                        d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                        return c
                    }
                }]
            }),
            selModel: this.selModel,
            listeners: {
                rowcontextmenu: {
                    scope: this,
                    fn: this.onRowContextMenu
                },
                rowdblclick: {
                    scope: this,
                    fn: this.onRowDblClick
                },
                deactivate: function() {
                    if (this.updateButton) {
                        this.updateButton.stopPolling();
                        this.getEl().unmask()
                    }
                },
                activate: function() {
                    if (this.authType === "domain") {
                        this.store.baseParams.domain_name = this.module.currDomain
                    }
                    this.store.load()
                }
            }
        }, b);
        if (this.isLocal()) {
            a.view = new SYNO.ux.FleXcroll.grid.BufferView({
                trackResetOnLoad: false,
                rowHeight: 27,
                scrollDelay: false,
                cacheSize: 50
            })
        }
        this.callParent([a]);
        this.toolbar = this.getTopToolbar();
        if (this.authType === "local") {
            this.mon(this, "keydown", function(c) {
                if (c.getKey() == c.DELETE) {
                    this.deleteHandler()
                }
            }, this)
        }
    },
    createStore: function(b) {
        var a = {
            autoDestroy: true,
            appWindow: b.module.owner,
            api: "SYNO.Core.Group",
            method: "list",
            version: 1,
            remoteSort: !this.isLocal(),
            defaultSortable: true,
            baseParams: {
                offset: 0,
                limit: this.pageSize,
                name_only: (this.authType !== "local"),
                type: this.authType
            },
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onStoreException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            },
            root: "groups",
            idProperty: "name",
            totalProperty: "total",
            fields: [{
                name: "name",
                sortType: "asNaturalUCString"
            }, "description"]
        };
        if (this.isLocal()) {
            a.sortInfo = {
                field: "name",
                direction: "asc"
            }
        }
        return new SYNO.API.JsonStore(a)
    },
    createSelectionModel: function() {
        return new Ext.grid.RowSelectionModel({
            singleSelect: (this.authType !== "local"),
            listeners: {
                scope: this,
                selectionchange: function(a) {
                    this.onSelectionChange.defer(100, this, [a])
                }
            }
        })
    },
    createBBar: function() {
        if (this.isLocal()) {
            return new SYNO.ux.PageLessToolbar({
                store: this.store,
                displayInfo: true
            })
        } else {
            return new SYNO.ux.PagingToolbar({
                store: this.store,
                pageSize: this.pageSize,
                displayButtons: true,
                displayInfo: true
            })
        }
    },
    createActionEdit: function() {
        return new Ext.Action({
            text: _T("common", "alt_edit"),
            itemId: "edit",
            scope: this,
            handler: this.editHandler
        })
    },
    createActionDelete: function() {
        return new Ext.Action({
            text: _T("common", "delete"),
            itemId: "delete",
            scope: this,
            handler: this.deleteHandler
        })
    },
    createActionMember: function() {
        return new Ext.Action({
            text: _T("group", "group_membertitle"),
            itemId: "member",
            scope: this,
            handler: this.memberHandler
        })
    },
    configTopToolbar: function(b) {
        var a = this.createActionEdit();
        var d = this.createActionDelete();
        var e = this.createActionMember();
        this.actionGroup = {
            edit: a,
            "delete": d,
            member: e
        };
        var c;
        if (this.isLocal()) {
            c = new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                emptyText: _T("group", "search_group"),
                store: this.store,
                localFilter: true,
                localFilterField: ["name", "description"],
                blOr: true
            })
        } else {
            c = new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                emptyText: _T("group", "search_group"),
                store: this.store,
                queryParam: "substr",
                pageSize: this.pageSize
            })
        }
        if (this.authType === "ldap") {
            return {
                items: [new SYNO.ux.Button(a), "->", c]
            }
        } else {
            if (this.authType === "domain") {
                b.updateButton.grid = this;
                b.domainFilter.grid = this;
                return {
                    items: [new SYNO.ux.Button(a), b.updateButton, "->", {
                        xtype: "syno_displayfield",
                        itemId: "filterName",
                        value: _T("helptoc", "directory_service_domain") + ": "
                    }, b.domainFilter, c]
                }
            } else {
                return {
                    items: [{
                        xtype: "syno_button",
                        text: _T("common", "create"),
                        itemId: "create_grp",
                        scope: this,
                        handler: this.createHandler
                    }, new SYNO.ux.Button(a), new SYNO.ux.Button(d), new SYNO.ux.Button(e), "->", c]
                }
            }
        }
    },
    isLocal: function() {
        return (this.authType === "local")
    },
    createHandler: function() {
        if (this._D("maxgroups") <= this.store.getTotalCount()) {
            SYNO.SDS.AdminCenter.Group.Alert.call(this.findAppWindow(), 3209, this);
            return
        }
        var a = new SYNO.SDS.AdminCenter.Group.CreateGroupWizardDialog({
            owner: this.module.owner,
            module: this
        });
        a.open()
    },
    editHandler: function() {
        var a = this.getFirstSelection();
        if (!a) {
            return
        }
        this.position = this.getBottomToolbar().cursor + this.store.indexOf(a);
        this.launchGroupDialog(a.get("name"), a.get("description"))
    },
    deleteHandler: function() {
        var c = this.getSelectionModel();
        if (true === c.isIdSelected("users") || true === c.isIdSelected("administrators") || true === c.isIdSelected("http")) {
            this.module.owner.getMsgBox().alert(_T("tree", "leaf_group"), _T("group", "error_rmvdef"), function() {
                var d = this.store.indexOfId("users");
                if (d !== -1) {
                    c.deselectRow(d)
                }
                d = this.store.indexOfId("administrators");
                if (d !== -1) {
                    c.deselectRow(d)
                }
                d = this.store.indexOfId("http");
                if (d !== -1) {
                    c.deselectRow(d)
                }
            }, this);
            return
        }
        var a = c.getSelections();
        if (a.length === 0) {
            this.module.owner.getMsgBox().alert(_T("tree", "leaf_group"), _T("group", "error_rmvempty"));
            return
        }
        var b = [];
        Ext.each(a, function(f, d, e) {
            b.push(f.get("name"))
        }, this);
        this.module.owner.getMsgBox().confirmDelete(_T("tree", "leaf_group"), _T("group", "group_cfrmrmv") + "<br>" + b.join(", "), function(d) {
            if (d === "yes") {
                this.position = this.getBottomToolbar().cursor + this.store.indexOf(a[0]);
                this.applyDeleteGroup(b)
            }
        }, this)
    },
    memberHandler: function() {
        var a = this.getFirstSelection();
        if (!a) {
            return
        }
        this.launchMemberDialog(a.get("name"))
    },
    getFirstSelection: function() {
        var a = this.getSelectionModel().getSelected();
        if (!a) {
            this.module.owner.getMsgBox().alert(_T("tree", "leaf_group"), _T("group", "error_rmvempty"));
            return null
        }
        return a
    },
    clearSearch: function() {
        var a = this.toolbar.getComponent("search");
        a.reset()
    },
    applyDeleteGroup: function(a) {
        this.module.owner.setStatusBusy({
            text: _T("group", "deleting_group")
        });
        this.module.owner.sendWebAPI({
            api: "SYNO.Core.Group",
            method: "delete",
            version: 1,
            params: {
                name: a
            },
            scope: this,
            callback: this.applyDeleteGroupDone
        })
    },
    applyDeleteGroupDone: function(d, c, b, a) {
        this.module.owner.clearStatusBusy();
        var e = 0;
        if (d) {
            if (!this.isLocal()) {
                e = Math.floor(this.position / this.pageSize) * this.pageSize;
                if (e >= this.totalNum - b.name.length) {
                    e -= this.pageSize;
                    if (e < 0) {
                        e = 0
                    }
                }
            }
        } else {
            SYNO.SDS.AdminCenter.Group.Alert.call(this, c.code);
            if (c.code && c.code === 3202) {
                return
            }
        }
        this.store.load({
            params: {
                offset: e,
                limit: this.pageSize,
                type: this.authType
            }
        })
    },
    onSelectionChange: function(c) {
        var a = c.getCount();
        var b = this.actionGroup;
        if (a === 0) {
            Ext.iterate(b, function(d, e, f) {
                e.disable()
            }, this)
        } else {
            b["delete"].enable();
            if (a > 1) {
                b.edit.disable();
                b.member.disable()
            } else {
                b.edit.enable();
                if (c.isIdSelected("users")) {
                    b.member.disable()
                } else {
                    b.member.enable()
                }
            }
        }
    },
    onRowContextMenu: function(c, f, a) {
        var b = [];
        if (this.authType === "local") {
            Ext.iterate(this.actionGroup, function(g, h, i) {
                b.push(h)
            }, this)
        } else {
            b.push(this.actionGroup.edit)
        }
        var d = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        var e = c.getSelectionModel();
        e.selectRow(f, e.isSelected(f));
        d.showAt(a.getXY());
        a.preventDefault()
    },
    onRowDblClick: function(c, d, b) {
        var a = this.store.getAt(d);
        if (!a) {
            return
        }
        this.position = this.getBottomToolbar().cursor + this.store.indexOf(a);
        this.launchGroupDialog(a.get("name"), a.get("description"))
    },
    onStoreException: function(d, e, f, c, b, a) {
        this.module.owner.clearStatusBusy();
        SYNO.Debug("Store exception: options:", c);
        if (c.params.substr) {
            this.clearSearch()
        }
        if (b.code === 3203) {
            this.getEl().mask(_T("directory_service", "warr_db_not_ready"), "syno-ux-mask-info");
            if (!this.updateButton.pollingId) {
                this.updateButton.restartPolling()
            }
            return
        }
        var g = SYNO.SDS.AdminCenter.Group.GetErrMsg((b.code) ? b.code : 3299);
        this.module.owner.getMsgBox().alert(this.title, g, function() {}, this)
    },
    onBeforeLoad: function(a, b) {
        if (this.authType === "domain") {
            this.domainFilter.setValue(this.module.currDomain)
        }
        this.module.owner.setStatusBusy()
    },
    onLoad: function(c, b, d) {
        this.onSelectionChange(this.selModel);
        this.module.owner.clearStatusBusy();
        this.totalNum = c.totalLength;
        if (this.focusGroup) {
            var a = c.indexOfId(this.focusGroup);
            if (a !== -1) {
                this.getSelectionModel().selectRow(a);
                (function() {
                    this.getView().focusRow(a)
                }).defer(100, this)
            }
        }
    },
    onGroupDialogClose: function(b) {
        var a = b.getResult();
        if (a.success === true) {
            var c = 0;
            if (!this.isLocal()) {
                c = Math.floor(this.position / this.pageSize) * this.pageSize
            }
            this.focusGroup = a.group;
            this.store.load({
                params: {
                    offset: c,
                    limit: this.pageSize,
                    type: this.authType
                }
            })
        }
    },
    launchGroupDialog: function(c, b) {
        var a = new SYNO.SDS.AdminCenter.Group.GroupDialog({
            owner: this.module.owner,
            module: this,
            authType: this.authType,
            newGroup: false
        });
        a.mon(a, "close", this.onGroupDialogClose, this);
        a.load(c, b)
    },
    launchMemberDialog: function(b) {
        var a = new SYNO.SDS.AdminCenter.Group.MemberDialog({
            owner: this.module.owner,
            module: this
        });
        a.load(b)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Group.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.owner = a.appWin;
        this.callParent([a]);
        this.panel = new SYNO.SDS.AdminCenter.Group.GridPanel({
            module: this
        })
    },
    getPanel: function() {
        return this.panel
    },
    getHelpParam: function() {
        return "AdminCenter/file_group_desc.html"
    },
    activate: function() {
        return true
    },
    deactivate: function() {
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Domain.OptionsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.form = this.configForm();
        this.data = {};
        var b = Ext.apply({
            title: _T("network", "domain_options"),
            autoDestroy: true,
            width: 500,
            autoHeight: true,
            layout: "fit",
            border: false,
            items: [this.form],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "commit"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b])
    },
    onOpen: function(a) {
        this.callParent(arguments);
        this.load()
    },
    configForm: function() {
        var a = {
            border: false,
            itemId: "formpanel",
            trackResetOnLoad: true,
            labelWidth: 340,
            height: 165,
            width: 200,
            synodefaults: {
                autoHeight: true,
                width: 200
            },
            items: [{
                xtype: "syno_checkbox",
                name: "enable_sync_time",
                boxLabel: _T("network", "domain_options_sync_time_enable"),
                value: false
            }, {
                xtype: "syno_checkbox",
                name: "enable_server_signing",
                boxLabel: _T("domain", "enable_domain_server_signing")
            }, {
                xtype: "syno_checkbox",
                name: "enable_rpc_enum_usergroup",
                boxLabel: _T("domain", "enable_rpc_enum_usergroup")
            }, {
                xtype: "syno_checkbox",
                name: "disable_domain_admins",
                boxLabel: _T("domain", "disable_admin")
            }, {
                indent: 1,
                xtype: "syno_numberfield",
                name: "domain_nested_group",
                fieldLabel: _T("domain", "domain_nested_group"),
                maxlength: 2,
                minValue: 1,
                width: 80,
                allowBlank: false
            }]
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    load: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.Directory.Domain.Conf",
                    method: "get",
                    version: 1
                }]
            },
            callback: this.loadDataCB,
            scope: this
        })
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.getMsgBox().alert(_T("network", "wnds_domain"), a)
    },
    loadDataCB: function(a, d, c) {
        this.clearStatusBusy();
        if (true === d.isTimeout) {
            this.getMsgBox().alert(_T("network", "wnds_domain"), _T("network", "domain_join_err"));
            return
        } else {
            if (true === d.has_fail) {
                this.errorHandling(d);
                return
            }
        }
        var b = this.form.getForm();
        b.setValues(d.result[0].data)
    },
    applyDataCB: function(c, b, a) {
        this.clearStatusBusy();
        if (true === b.isTimeout) {
            this.getMsgBox().alert(_T("network", "wnds_domain"), _T("network", "domain_join_err"));
            return
        } else {
            if (true === b.has_fail) {
                this.errorHandling(b);
                return
            } else {
                this.close()
            }
        }
    },
    apply: function() {
        var b = this.form.getForm();
        if (!b.isDirty()) {
            this.close();
            return
        }
        if (!b.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        var a = b.getValues();
        this.setStatusBusy();
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.Directory.Domain.Conf",
                    method: "set",
                    version: 1,
                    params: a
                }]
            },
            callback: this.applyDataCB,
            scope: this
        })
    }
});
Ext.ns("SYNO.SDS.AdminCenter.DirectoryService.Domain");
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Domain.CheckItemsMenu", {
    extend: "Ext.form.TriggerField",
    overCls: "syno-ux-triggerfield-hover",
    triggerClass: "syno-ux-triggerfield-trigger",
    constructor: function(a) {
        this.IFRecords = [];
        this.owner = a.owner;
        this.parentForm = a.parentForm;
        this.loadNetIF();
        this.callParent([a]);
        this.mon(this, "afterrender", function() {
            this.onLoad()
        }, this);
        this.addClass("syno-ux-triggerfield")
    },
    loadNetIF: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Network.Interface",
            method: "list",
            version: 1,
            callback: this.loadNetIFCB,
            scope: this
        })
    },
    loadNetIFCB: function(c, b, a) {
        if (true !== c) {
            this.setMenu();
            return
        }
        this.IFRecords = [];
        b.each(function(e) {
            var d = {};
            if (0 === e.ifname.indexOf("eth") || 0 === e.ifname.indexOf("bond") || 0 === e.ifname.indexOf("wlan")) {
                d.name = e.ifname;
                d.display = SYNO.SDS.Utils.Network.idToString.apply(this, [e.ifname, e.type]);
                this.IFRecords.push(d)
            }
        }, this);
        this.setMenu()
    },
    setMenu: function() {
        var a = [{
            text: _T("domain", "all_interface"),
            name: "all_interface"
        }, "-"];
        Ext.each(this.IFRecords, function(b) {
            a.push(new Ext.menu.CheckItem({
                name: b.name,
                text: b.display,
                checked: false
            }))
        });
        if (this.menu) {
            delete this.menu
        }
        this.menu = new Ext.menu.Menu({
            cls: "syno-ux-menu",
            autoDestroy: true,
            items: a
        });
        this.menu.mon(this.menu, "hide", this.onHide, this);
        this.menu.mon(this.menu, "click", this.onItemClick, this);
        this.setInterface(["all"])
    },
    onTriggerClick: function() {
        if (!this.disabled) {
            this.menu.show(this.el)
        }
    },
    onLoad: function() {
        this.setDisplayText()
    },
    onItemClick: function(c, a, b) {
        if ("all_interface" == a.name) {
            this.setInterface(["all"])
        } else {
            this.setDisplayText()
        }
    },
    setInterface: function(c) {
        var b = 0;
        if (!this.menu || !this.menu.items || !c) {
            return
        }
        var a = this.menu.items.items;
        if (-1 != c.indexOf("all")) {
            for (b = 2; b < a.length; ++b) {
                if ("menucheckitem" != a[b].getXType()) {
                    continue
                }
                a[b].setChecked(true)
            }
        } else {
            for (b = 2; b < a.length; ++b) {
                if ("menucheckitem" != a[b].getXType()) {
                    continue
                }
                a[b].setChecked(-1 != c.indexOf(a[b].name))
            }
        }
        this.setDisplayText()
    },
    setValue: function(a) {
        if (!(a instanceof Array)) {
            return
        }
        this.setInterface(a)
    },
    getValue: function() {
        var a = true;
        var d = [];
        var b = [];
        if (undefined === this.menu || undefined === this.menu.items) {
            return d
        }
        b = this.menu.items.items;
        for (var c = 2; c < b.length; ++c) {
            if ("menucheckitem" != b[c].getXType()) {
                continue
            }
            if (b[c].checked) {
                d.push(b[c].name)
            } else {
                a = false
            }
        }
        if (a) {
            d = ["all"]
        }
        return d
    },
    setDisplayText: function() {
        var a = true;
        var d = [];
        var b = [];
        if (!this.menu || !this.menu.items) {
            return
        }
        b = this.menu.items.items;
        for (var c = 2; c < b.length; ++c) {
            if ("menucheckitem" != b[c].getXType()) {
                continue
            }
            if (b[c].checked) {
                d.push(b[c].text)
            } else {
                a = false
            }
        }
        if (a) {
            d = _T("domain", "all_interface")
        } else {
            d = d.join(",")
        }
        SYNO.SDS.AdminCenter.DirectoryService.Domain.CheckItemsMenu.superclass.setValue.call(this, d)
    },
    onRender: function(b, a) {
        this.callParent(arguments);
        if (this.label) {
            this.label.addClass("syno-ux-item-label")
        }
        if (this.trigger) {
            this.trigger.addListener("mouseover", this.onMouseover, this);
            this.trigger.addListener("mouseout", this.onMouseout, this)
        }
        this.mon(this.el, {
            scope: this,
            mouseover: this.onMouseover,
            mouseout: this.onMouseout
        });
        SYNO.ux.Utils.setFormItemIndent(this);
        SYNO.ux.Utils.setFormFieldWidth(this);
        if (!this.hiddenName) {
            return
        }
        this.hiddenField = this.el.insertSibling({
            tag: "input",
            type: "hidden",
            name: this.hiddenName,
            id: (this.hiddenId || this.hiddenName)
        }, "before", true);
        this.hiddenField.value = this.hiddenValue !== undefined ? this.hiddenValue : this.value !== undefined ? this.value : "";
        this.el.dom.removeAttribute("name")
    },
    onHide: function() {
        if (this.isAfterItemClickInvoked) {
            this.menu.show(this.el, "tl-bl?")
        }
        this.isAfterItemClickInvoked = false
    },
    onMouseover: function() {
        this.addClass("syno-ux-triggerfield-hover");
        this.trigger.addClass("x-form-trigger-over")
    },
    onMouseout: function() {
        this.removeClass("syno-ux-triggerfield-hover");
        this.trigger.removeClass("x-form-trigger-over")
    },
    markInvalid: function(a) {
        this.callParent(arguments);
        this.trigger.addClass("syno-ux-trigger-invalid")
    },
    clearInvalid: function() {
        this.callParent(arguments);
        this.trigger.removeClass("syno-ux-trigger-invalid")
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Domain.UserPassDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.applySuccessed = false;
        this.formPanel = this.createFormPanel();
        var b = {
            width: 450,
            height: 450,
            minWidth: 300,
            minHeight: 250,
            title: _T("network", "wnds_domain"),
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                plain: true,
                activeTab: 0,
                items: [this.formPanel]
            }],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "ok"),
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "close"),
                scope: this,
                handler: this.onCancel
            }],
            keys: [{
                key: Ext.EventObject.ENTER,
                scope: this,
                handler: this.onApply
            }]
        };
        Ext.apply(b, a);
        this.callParent([b])
    },
    createFormPanel: function() {
        var c = ["list-style: decimal;", String.format("padding-left: {0};", Ext.isIE7 ? "25px" : "20px")].join("");
        var a = {
            title: _T("network", "domain_setting"),
            labelWidth: 100,
            fieldWidth: 250,
            items: [{
                xtype: "syno_displayfield",
                value: _T("network", "domain_setting_desc")
            }, {
                xtype: "syno_textfield",
                name: "username",
                fieldLabel: _T("user", "user_account"),
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                name: "password",
                textType: "password",
                fieldLabel: _T("user", "user_passwd")
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("common", "note"),
                html: ['<ol style="' + c + '">', "<li>", _T("network", "time_change"), "</li>", "<li>", _T("network", "dns_change"), "</li>", "<li>", '<span class="red-status">', _T("network", "service_restart_warning"), "</span>", "</li>", "</ol>"].join("")
            }]
        };
        SYNO.LayoutConfig.fill(a);
        var b = new SYNO.SDS.Utils.FormPanel(a);
        return b
    },
    isValid: function() {
        return this.formPanel.getForm().isValid()
    },
    isDirty: function() {
        return this.formPanel.getForm().isDirty()
    },
    onApply: function() {
        if (!this.isDirty()) {
            return false
        }
        if (!this.isValid()) {
            return false
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.callback.call(this.scope)
    },
    onCancel: function() {
        if (!this.isDirty()) {
            this.close();
            return true
        }
        this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
            if ("yes" === a) {
                this.close()
            }
        }, this)
    },
    bindToServerHandler: function(d, c, b) {
        var a = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.Directory.Domain", "set");
        this.clearStatusBusy();
        if (true === c.isTimeout) {
            this.getMsgBox().alert(this.title, _T("network", "domain_join_err"));
            return
        } else {
            if (true === c.has_fail) {
                this.errorHandling(c);
                return
            }
        }
        if (a && "NT4" === a.domain_type) {
            this.module.appWin.getMsgBox().alert(this.title, _T("network", "domain_join_nt4"))
        }
        this.applySuccessed = true;
        this.close()
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        if (2616 == b.code) {
            this.getMsgBox().confirm(this.title, a, function(d) {
                if ("yes" === d) {
                    if (this.module.panel && Ext.isFunction(this.module.panel.resetAllForm)) {
                        this.module.panel.resetAllForm()
                    }
                    this.close();
                    this.module.appWin.startModule("SYNO.SDS.AdminCenter.FileService.Main", {
                        tab: "win"
                    })
                }
            }, this)
        } else {
            this.getMsgBox().alert(_T("network", "wnds_domain"), a)
        }
        return true
    },
    getData: function() {
        return this.formPanel.getForm().getValues()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.DirectoryService");
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.DomainTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            this.enableDomainCheckGroup = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_domain", ["domain_name", "dns", "domain_type", "manage_mode", "enable_advance_option", "update_period", this.domainOptionsBtnId]);
            this.enableAdvanceOptionCheckGroup = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_advance_option", ["kdc", "netbios_name", "fqdn_name", "register_nics", "update_period"])
        }, this, {
            single: true
        })
    },
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("network", "wnds_domain"),
            trackResetOnLoad: true,
            hideMode: "offsets",
            fieldWidth: SYNO.SDS.AdminCenter.DirectoryService.Domain.FIELDWIDTH,
            labelWidth: SYNO.SDS.AdminCenter.DirectoryService.Domain.LABELWIDTH,
            items: this.configItems(),
            webapi: {
                api: "SYNO.Core.Directory.Domain",
                methods: {
                    get: "get"
                },
                version: 1,
                params: {
                    get: {
                        additional: true
                    }
                }
            }
        }, a);
        return b
    },
    createUpdateComposite: function() {
        var b, a = [],
            e = [],
            h = [],
            c = [1, 2, 3, 6, 12],
            d = {},
            g = {},
            f = {};
        a = [
            [_T("time", "ntpdate_daily"), 0],
            [_T("time", "ntpdate_weekly"), 1],
            [_T("time", "ntpdate_monthly"), 2],
            [_T("service", "service_disable"), 3]
        ];
        d = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: a
        });
        for (b = 0; b < 24; ++b) {
            e.push([String.leftPad(String(b), 2, "0"), b])
        }
        g = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: e
        });
        for (b = 0; b < c.size(); b++) {
            h.push([String.format(_T("schedule", "every_x_hours"), c[b]), c[b]])
        }
        f = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: h
        });
        this.itemUpdateComposite = {
            xtype: "syno_compositefield",
            indent: 2,
            name: "update_period",
            fieldLabel: _T("directory_service", "domain_update_period"),
            items: [{
                xtype: "syno_combobox",
                store: d,
                value: 0,
                displayField: "display",
                valueField: "value",
                name: "schedule_type",
                triggerAction: "all",
                width: 130,
                mode: "local",
                editable: false,
                listeners: {
                    select: {
                        scope: this,
                        fn: this.onSceduleTypeSelect
                    }
                }
            }, {
                xtype: "syno_datefield",
                fieldLabel: "",
                name: "date",
                width: 120,
                format: "Y/n/j",
                value: new Date(),
                hidden: true,
                hideLabel: true,
                editable: false,
                maxValue: "2037/12/31",
                minValue: "2005/1/1"
            }, {
                xtype: "syno_schedulefield",
                name: "week_name",
                fieldLabel: "",
                value: "0",
                hidden: true,
                hideLabel: true,
                editable: false,
                width: 175
            }, {
                xtype: "syno_combobox",
                store: f,
                value: 1,
                displayField: "display",
                valueField: "value",
                name: "repeat_hour",
                triggerAction: "all",
                hidden: true,
                width: 240,
                mode: "local",
                editable: false
            }, {
                xtype: "syno_displayfield",
                style: "text-align:right",
                value: _T("time", "time_hour") + ":",
                hidden: true,
                width: 50,
                name: "hour_label"
            }, {
                xtype: "syno_combobox",
                store: g,
                displayField: "display",
                value: 0,
                name: "hour",
                hidden: true,
                valueField: "value",
                triggerAction: "all",
                mode: "local",
                width: 60,
                editable: false
            }]
        }
    },
    multiIPValidator: function(c) {
        var a = 0;
        var b = null;
        if ("" === c) {
            return true
        }
        b = c.split(/,+/);
        for (a = 0; a < b.length; a++) {
            if (!Ext.form.VTypes.ip(b[a])) {
                return _JSLIBSTR("vtype", "bad_ip")
            }
        }
        return true
    },
    dcIPValidator: function(c) {
        var a = 0;
        var b = null;
        if ("" === c) {
            return true
        }
        if (!/^[-,.*:0-9A-Za-z]*$/.test(c)) {
            return false
        }
        b = c.split(/,+/);
        for (a = 0; a < b.length; a++) {
            if (-1 !== b[a].indexOf("*") && !("*" === b[a] && a === b.length - 1)) {
                return _JSLIBSTR("vtype", "bad_ip")
            }
        }
        return true
    },
    configItems: function() {
        var a = new SYNO.SDS.AdminCenter.DirectoryService.Domain.CheckItemsMenu({
            name: "register_nics",
            fieldLabel: _T("domain", "dns_register_nic"),
            indent: 2,
            allowBlank: false,
            editable: false,
            parentForm: this,
            owner: this
        });
        var b = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: [
                [_T("directory_service", "trust_domain_mode"), 0],
                [_T("directory_service", "domain_ou_mode"), 1]
            ]
        });
        this.createUpdateComposite();
        return [{
            xtype: "syno_checkbox",
            boxLabel: _T("directory_service", "enable_domain"),
            name: "enable_domain"
        }, {
            xtype: "syno_textfield",
            indent: 1,
            style: "text-transform: uppercase;",
            name: "domain_name",
            fieldLabel: _T("network", "wnds_domain"),
            maxlength: 255,
            validationEvent: "keyup",
            allowBlank: false,
            vtype: "winDomainName"
        }, {
            xtype: "syno_textfield",
            indent: 1,
            name: "dns",
            maxlength: 64,
            fieldLabel: _T("network", "domain_option_dns"),
            maskRe: /[,.:0-9A-Fa-f]/,
            validator: this.multiIPValidator
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            itemId: "domain_type",
            hidden: false,
            hideLabel: false,
            fieldLabel: _T("network", "domain_type")
        }, {
            xtype: "syno_combobox",
            store: b,
            name: "manage_mode",
            fieldLabel: _T("directory_service", "domain_manage_mode"),
            indent: 1,
            value: 0,
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            hidden: false,
            mode: "local",
            resizable: true,
            editable: false
        }, {
            xtype: "syno_checkbox",
            indent: 1,
            name: "enable_advance_option",
            boxLabel: _T("network", "domain_advanced_option_desc")
        }, {
            xtype: "syno_textfield",
            indent: 2,
            name: "kdc",
            maxlength: 255,
            style: "text-transform: uppercase;",
            fieldLabel: _T("network", "domain_kdc_ip"),
            maskRe: /[-,.*:0-9A-Za-z]/,
            validator: this.dcIPValidator
        }, {
            xtype: "syno_textfield",
            indent: 2,
            style: "text-transform: uppercase;",
            name: "netbios_name",
            vtype: "workgroup",
            fieldLabel: _T("network", "domain_option_dc_netbios"),
            validator: function(c) {
                if (Ext.form.VTypes.workgroup(c)) {
                    return true
                }
                return _JSLIBSTR("vtype", "bad_field")
            }
        }, {
            xtype: "syno_textfield",
            indent: 2,
            style: "text-transform: uppercase;",
            name: "fqdn_name",
            fieldLabel: _T("network", "domain_option_dc_fqdn"),
            vtype: "winDomainName",
            maxlength: 250
        }, a, this.itemUpdateComposite, {
            xtype: "syno_button",
            indent: 1,
            width: "auto",
            id: this.domainOptionsBtnId = Ext.id(),
            name: "domain_options",
            text: _T("network", "domain_options"),
            scope: this,
            handler: this.onDomainOptionsBtnClick
        }]
    },
    dailySet: function() {
        var a = this.getForm();
        a.findField("repeat_hour").setVisible(true);
        a.findField("hour_label").setVisible(false);
        a.findField("hour").setVisible(false);
        a.findField("week_name").setVisible(false);
        a.findField("week_name").getVisibilityEl().setVisible(false);
        a.findField("date").setVisible(false)
    },
    weeklySet: function() {
        var a = this.getForm();
        a.findField("repeat_hour").setVisible(false);
        a.findField("hour_label").setVisible(true);
        a.findField("hour").setVisible(true);
        a.findField("week_name").setVisible(true);
        a.findField("week_name").getVisibilityEl().setVisible(true);
        a.findField("date").setVisible(false)
    },
    monthlySet: function() {
        var a = this.getForm();
        a.findField("repeat_hour").setVisible(false);
        a.findField("hour_label").setVisible(true);
        a.findField("hour").setVisible(true);
        a.findField("week_name").setVisible(false);
        a.findField("week_name").getVisibilityEl().setVisible(false);
        a.findField("date").setVisible(true)
    },
    disableSet: function() {
        var a = this.getForm();
        a.findField("repeat_hour").setVisible(false);
        a.findField("hour_label").setVisible(false);
        a.findField("hour").setVisible(false);
        a.findField("week_name").setVisible(false);
        a.findField("week_name").getVisibilityEl().setVisible(false);
        a.findField("date").setVisible(false)
    },
    onSceduleTypeSelect: function() {
        var a = this.getForm().findField("schedule_type").getValue();
        if (0 === a) {
            this.dailySet()
        } else {
            if (1 === a) {
                this.weeklySet()
            } else {
                if (2 === a) {
                    this.monthlySet()
                } else {
                    if (3 === a) {
                        this.disableSet()
                    }
                }
            }
        }
        this.doLayout();
        return true
    },
    onPeriodSelect: function() {
        var a = 0,
            b = this.getForm(),
            c = {
                date_type: 0,
                week_name: "0,1,2,3,4,5,6",
                date: new Date(),
                hour: 0,
                min: 0,
                repeat_hour: 0,
                last_work_hour: 0
            };
        a = b.findField("schedule_type").getValue();
        if (3 == a || false === b.findField("enable_advance_option").getValue() || false === b.findField("enable_domain").getValue()) {
            c = {
                date_type: 2
            }
        } else {
            if (0 === a) {
                c.date_type = 0;
                c.repeat_hour = b.findField("repeat_hour").getValue();
                c.week_name = "0,1,2,3,4,5,6";
                c.hour = 0;
                c.last_work_hour = 23
            } else {
                if (1 === a) {
                    c.date_type = 0;
                    c.repeat_hour = 0;
                    c.week_name = b.findField("week_name").getValue();
                    c.hour = b.findField("hour").getValue();
                    c.last_work_hour = c.hour
                } else {
                    if (2 === a) {
                        c.date_type = 1;
                        c.repeat_hour = 0;
                        c.repeat = 1;
                        c.week_name = "0,1,2,3,4,5,6";
                        c.hour = b.findField("hour").getValue();
                        c.date = b.findField("date").getValue().format("Y/n/j");
                        c.last_work_hour = c.hour
                    }
                }
            }
        }
        return c
    },
    onDomainOptionsBtnClick: function() {
        var a = new SYNO.SDS.AdminCenter.DirectoryService.Domain.OptionsDialog({
            module: this.module,
            owner: this.module.appWin
        });
        a.open()
    },
    getDomainSettingData: function() {
        var c = this.getForm().getValues();
        var b = ["domain_name", "username", "password", "dns"];
        Ext.each(b, function(f, d, e) {
            var g = c[f];
            if (g) {
                c[f] = g
            } else {
                c[f] = ""
            }
        }, this);
        var a = ["domain_name", "netbios_name", "fqdn_name"];
        Ext.each(a, function(f, d, e) {
            var g = c[f];
            if (g) {
                c[f] = c[f].toUpperCase()
            } else {
                c[f] = ""
            }
        }, this);
        return c
    },
    onBeforeRequest: function(b) {
        if (true === this.owner.checkLDAPEnable()) {
            return true
        }
        if ("set" != b) {
            return true
        }
        var a = this.getForm();
        if (false === a.isDirty()) {
            return false
        }
        if (false === a.isValid()) {
            this.module.panel.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (this.owner.isComputingNode && !this.confirmSetDomain) {
            this.module.appWin.getMsgBox().confirm(this.title, String.format(_T("domain", "in_gluster_domain_msg"), "Domain"), function(c) {
                if ("yes" === c) {
                    this.confirmSetDomain = true;
                    this.owner.applyAllForm();
                    this.confirmSetDomain = false
                }
            }, this);
            return false
        }
        if (false === a.findField("enable_domain").getValue()) {
            this.module.panel.setStatusBusy({
                text: _T("common", "saving")
            });
            this.sendDomainAPI()
        } else {
            this.dialog = new SYNO.SDS.AdminCenter.DirectoryService.Domain.UserPassDialog({
                module: this.module,
                owner: this.module.appWin,
                scope: this,
                callback: this.sendDomainAPI
            });
            this.mon(this.dialog, "beforeclose", this.afterUserPassDialog, this);
            this.dialog.open()
        }
        return false
    },
    decoratorSetAPIAdvanceDomainData: function(b) {
        if (undefined !== b.advance_domain_conf) {
            return b
        }
        var c = {
            enable_advance_option: b.enable_advance_option ? b.enable_advance_option : false,
            fqdn_name: b.fqdn_name ? b.fqdn_name : "",
            kdc: b.kdc ? b.kdc : "",
            netbios_name: b.netbios_name ? b.netbios_name : "",
            register_nics: b.register_nics ? b.register_nics : []
        };
        b.advance_domain_conf = c;
        var a = ["enable_advance_option", "fqdn_name", "kdc", "netbios_name", "register_nics"];
        Ext.each(a, function(f, d, e) {
            delete b[f]
        }, this);
        return b
    },
    decoratorSetAPIDomainData: function(a) {
        Ext.apply(a, {
            username: a.username ? a.username : "",
            password: a.password ? a.password : "",
            dns: a.dns ? a.dns : ""
        });
        return a
    },
    getDomainApiParam: function() {
        var c = {};
        Ext.apply(c, this.getDomainSettingData());
        if (this.dialog) {
            Ext.apply(c, this.dialog.getData())
        } else {
            Ext.apply(c, {
                username: "",
                password: ""
            })
        }
        c = this.decoratorSetAPIAdvanceDomainData(c);
        var b = ["date_type", "date", "hour", "last_work_hour", "min", "next_trigger_time", "repeat", "repeat_hour", "week_name", "schedule_type"];
        Ext.each(b, function(f, d, e) {
            delete c[f]
        }, this);
        var a = {
            api: "SYNO.Core.Directory.Domain",
            method: "set",
            version: 1,
            params: c
        };
        return a
    },
    getScheduleApiParam: function() {
        var b = this.onPeriodSelect();
        var a = {
            api: "SYNO.Core.Directory.Domain.Schedule",
            method: "set",
            version: 1,
            params: b
        };
        return a
    },
    sendDomainAPI: function() {
        var a = [];
        if (true === this.getForm().findField("enable_domain").getValue()) {
            a.push(this.getDomainApiParam());
            a.push(this.getScheduleApiParam())
        } else {
            a.push(this.getScheduleApiParam());
            a.push(this.getDomainApiParam())
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: true,
                params: a
            },
            timeout: 360000,
            scope: this.dialog ? this.dialog : this,
            callback: this.dialog ? this.dialog.bindToServerHandler : this.bindToServerHandler
        })
    },
    bindToServerHandler: function(c, b, a) {
        this.owner.clearStatusBusy();
        if (true === b.isTimeout) {
            this.module.appWin.getMsgBox().alert(this.title, _T("network", "domain_join_err"));
            return
        } else {
            if (true === b.has_fail) {
                this.errorHandling(b);
                return
            } else {
                this.owner.loadAllForm()
            }
        }
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        if (2616 == b.code) {
            this.module.appWin.getMsgBox().confirm(this.title, a, function(d) {
                if ("yes" === d) {
                    if (this.module.panel && Ext.isFunction(this.module.panel.resetAllForm)) {
                        this.module.panel.resetAllForm()
                    }
                    this.findAppWindow().startModule("SYNO.SDS.AdminCenter.FileService.Main", {
                        tab: "win"
                    })
                }
            }, this)
        } else {
            this.module.appWin.getMsgBox().alert(_T("network", "wnds_domain"), a)
        }
        return
    },
    updateScheduleLoadData: function(e) {
        var d = this.getForm(),
            c = 0,
            b = 3,
            a = {};
        a = e;
        c = a.date_type;
        if (1 === c) {
            b = 2;
            a.repeat_hour = 1;
            a.week_name = "0"
        } else {
            if ((0 === c) && a.repeat_hour) {
                b = 0;
                a.hour = 0;
                a.week_name = "0";
                a.date = new Date().format("Y/n/j")
            } else {
                if (0 === c) {
                    b = 1;
                    a.repeat_hour = 1;
                    a.date = new Date().format("Y/n/j")
                } else {
                    if (2 === c) {
                        b = 3
                    }
                }
            }
        }
        d.setValues(Ext.apply(a, {
            schedule_type: b
        }));
        this.onSceduleTypeSelect()
    },
    processReturnData: function(c, b, a) {
        this.processDomainReturnData(b, a);
        this.processDomainSceduleReturnData(b, a)
    },
    processDomainSceduleReturnData: function(c, b) {
        var a = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.Directory.Domain.Schedule", "get");
        if (undefined === a) {
            SYNO.Debug("Error");
            return
        }
        this.getForm().setValues(a);
        this.updateScheduleLoadData(a);
        return
    },
    processDomainReturnData: function(c, b) {
        var a = SYNO.API.Util.GetValByAPI(c, this.webapi.api, this.webapi.methods.get);
        if (undefined === a) {
            SYNO.Debug("Error");
            return
        }
        this.getForm().setValues(this.decoratorDomainValueFromAPI(a))
    },
    decoratorDomainValueFromAPI: function(a) {
        if ("AD" === a.domain_type || "NT4" === a.domain_type) {
            a.domain_type = a.domain_type + " " + _T("network", "wnds_domain")
        } else {
            a.domain_type = "--"
        }
        if (undefined === a.advance_domain_conf) {
            return a
        }
        Ext.apply(a, a.advance_domain_conf);
        delete a.advance_domain_conf;
        return a
    },
    appendDomainScheduleGetApi: function(b) {
        var a = {
            api: "SYNO.Core.Directory.Domain.Schedule",
            method: "get",
            version: 1
        };
        return b.concat(a)
    },
    processParams: function(b, a) {
        if ("get" == b) {
            a = this.appendDomainScheduleGetApi(a);
            return a
        } else {
            if ("set" == b) {
                return a
            }
        }
    },
    afterUserPassDialog: function(a) {
        var b = a.applySuccessed;
        this.mun(a, "beforeclose", this.afterUserPassDialog, this);
        this.dialog = undefined;
        if (true === b) {
            this.owner.loadAllForm()
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.DirectoryService.Util");
SYNO.SDS.AdminCenter.DirectoryService.Util.DirectoryServiceDataGetCB = function(f, e, d) {
    var c, b = _T("common", "commfail");
    if (true === e.isTimeout) {
        b = _T("network", "domain_join_err");
        return {
            error: b
        }
    } else {
        if (true === e.has_fail) {
            if (SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.Domain", "get_domain_list", "code")) {} else {
                c = SYNO.API.Util.GetFirstError(e);
                if (SYNO.API.Erros.core[c.code]) {
                    b = SYNO.API.Erros.core[c.code]
                }
                return {
                    error: b
                }
            }
        }
    }
    var a = {};
    a.enable_domain = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.Domain", "get", "enable_domain");
    a.domain_list = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.Domain", "get_domain_list", "domain_list");
    a.enable_ldap = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.LDAP", "get", "enable_client");
    return a
};
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Util.ArrayReader", {
    extend: "Ext.data.JsonReader",
    constructor: function(a) {
        this.createArrayElement = a.createArrayElement || null;
        this.callParent([a])
    },
    extractData: function(a, b) {
        var c = [];
        a.each(function(f, d, e) {
            if (Ext.isFunction(this.createArrayElement)) {
                c.push(this.createArrayElement(f))
            } else {
                c.push({
                    item: f
                })
            }
        }, this);
        return SYNO.SDS.AdminCenter.DirectoryService.Util.ArrayReader.superclass.extractData.call(this, c, b)
    }
});
SYNO.SDS.AdminCenter.DirectoryService.Util.GetErrMsg = function(a) {
    return SYNO.API.Erros.core[a] || _T("common", "error_system")
};
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Util.HomeDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.panel = this.createFormPanel(b);
        var a = Ext.apply({
            title: _T("user", "user_home_set"),
            width: 500,
            height: 250,
            resizable: false,
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "alt_apply"),
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    createFormPanel: function(a) {
        var b = a.location.display_name + " (" + _T("volume", "volume_freesize") + ": " + Math.floor((a.location.size_free_byte / 1024 / 1024 / 1024) * 100) / 100 + " GB)";
        return new SYNO.ux.FormPanel({
            items: [{
                xtype: "syno_checkbox",
                name: "home_enable",
                boxLabel: _T(a.authType, a.authType + "_user_home_enable"),
                checked: a.enableness
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                name: "home_volume_desc",
                fieldLabel: _T("volume", "volume_share_position"),
                hideParent: true,
                value: b
            }, {
                xtype: "syno_displayfield",
                name: "home_notice",
                value: '<font class="red-status">' + _T("domain", "domain_user_home_notice") + "</font>"
            }]
        })
    },
    onApply: function() {
        var b = this.panel.getForm();
        var a = b.findField("home_enable").getValue();
        var c = (a) ? {
            enable: true,
            location: this.location.volume_path
        } : {};
        if (!b.isDirty()) {
            this.close();
            return
        }
        if (this.authType === "ldap") {
            c.enable_ldap = a
        } else {
            if (this.authType === "domain") {
                c.enable_domain = a
            } else {
                c.enable = a
            }
        }
        SYNO.SDS.Utils.S2S.confirmIfSyncShareAffected(false, a ? {
            name: "homes",
            is_sync_share: this.userhome_in_s2s,
            no_check_permission: true
        } : null, {
            dialogTitle: this.title,
            dialogMsg: _T("s2s", "s2s_warn_homes_enable"),
            dialogOwner: this.owner,
            continueHandler: function() {
                this.setStatusBusy({
                    text: _T("common", "saving")
                });
                this.sendWebAPI({
                    api: "SYNO.Core.User.Home",
                    version: 1,
                    method: "set",
                    params: c,
                    scope: this,
                    callback: this.applyDone
                })
            },
            abortHandler: Ext.EmptyFn,
            scope: this
        })
    },
    onCancel: function() {
        if (!this.panel.getForm().isDirty()) {
            this.close();
            return
        }
        this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
            if (a === "yes") {
                this.close()
            }
        }, this)
    },
    applyDone: function(d, c, b, a) {
        this.clearStatusBusy();
        if (d) {
            this.close();
            return
        }
        SYNO.SDS.AdminCenter.User.Alert.call(this, c.code)
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Util.HomeButton", {
    extend: "SYNO.ux.Button",
    constructor: function(b) {
        var a = Ext.apply({
            text: _T("user", "user_home_set"),
            scope: this,
            handler: this.homeHandler
        }, b);
        this.callParent([a])
    },
    homeHandler: function() {
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.User.Home",
                    method: "get",
                    version: 1
                }, {
                    api: "SYNO.Core.Storage.Volume",
                    method: "list",
                    version: 1,
                    params: {
                        offset: 0,
                        limit: -1,
                        location: "internal"
                    }
                }, {
                    api: "SYNO.S2S.Server.Pair",
                    version: 1,
                    method: "list",
                    params: {
                        additional: ["sync_shares"]
                    }
                }]
            },
            scope: this,
            callback: this.launchHomeDialog
        })
    },
    launchHomeDialog: function(k, d, b) {
        if (!k || d.has_fail) {
            var i = [];
            Ext.each(d.result, function(l) {
                if (l.error && l.error.code) {
                    if (l.api === "SYNO.S2S.Server.Pair" && (l.error.code === 703 || l.error.code === 707)) {
                        return true
                    }
                    i.push(l.error.code)
                }
            }, this);
            if (i.length > 0) {
                SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, i[0] || 3199);
                return
            }
        }
        if (SYNO.API.Util.GetValByAPI(d, "SYNO.Core.Storage.Volume", "list", "total") === 0) {
            if (this.appWin.getOpenConfig("className") === "SYNO.SDS.CMS.Application") {
                SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("cms", "cms_no_volumes"))
            } else {
                SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("volume", "volume_share_volumeno"), function() {
                    SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                })
            }
            return
        }
        var f = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.User.Home", "get");
        var g = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.Storage.Volume", "list", "volumes");
        var c = SYNO.API.Util.GetValByAPI(d, "SYNO.S2S.Server.Pair", "list");
        var a = false;
        var h = null;
        var j = false;
        if (this.authType === "ldap") {
            a = f.enable_ldap
        } else {
            if (this.authType === "domain") {
                a = f.enable_domain
            } else {
                a = f.enable
            }
        }
        Ext.each(g, function(l) {
            if (l.volume_path === f.location) {
                h = l
            }
        });
        if (h === null) {
            h = g[0]
        }
        if (h.readonly) {
            SYNO.SDS.AdminCenter.User.Alert.call(this.appWin, _T("user", "home_volume_crash"));
            return
        }
        if (c && c.clients) {
            Ext.each(c.clients, function(l) {
                Ext.each(l.additional.sync_shares, function(m) {
                    if (m === "homes") {
                        j = true;
                        return false
                    }
                });
                if (j) {
                    return false
                }
            })
        }
        var e = new SYNO.SDS.AdminCenter.DirectoryService.Util.HomeDialog({
            owner: this.appWin,
            module: this.module,
            authType: this.authType,
            enableness: a,
            location: h,
            userhome_in_s2s: j
        });
        e.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.LDAP.BindDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var a = Ext.apply({
            title: _T("ldap", "bind_title"),
            layout: "fit",
            autoDestroy: true,
            width: 650,
            height: 300,
            minWidth: 650,
            minHeight: 300,
            border: false,
            items: [{
                xtype: "syno_tabpanel",
                plain: true,
                activeTab: 0,
                itemId: "tab",
                items: [{
                    title: _T("ldap", "auth_title"),
                    xtype: "form",
                    itemId: "auth",
                    labelWidth: 300,
                    trackResetOnLoad: true,
                    items: [{
                        xtype: "syno_displayfield",
                        value: _T("ldap", "bind_auth_desciption")
                    }, {
                        xtype: "syno_textfield",
                        fieldLabel: _T("ldap", "bind_account"),
                        name: "bind_dn",
                        allowBlank: false,
                        regex: /^[^\s].*[^\s]$/
                    }, {
                        xtype: "syno_textfield",
                        textType: "password",
                        fieldLabel: _T("user", "user_passwd"),
                        allowBlank: false,
                        name: "bind_pw"
                    }]
                }]
            }],
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _T("common", "commit"),
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }],
            keys: [{
                key: Ext.EventObject.ENTER,
                scope: this,
                handler: this.onApply
            }]
        }, b);
        this.callParent([a])
    },
    getForms: function() {
        return [this.getComponent("tab").getComponent("auth").getForm()]
    },
    getData: function() {
        var a = Ext.apply({}, this.data);
        Ext.each(this.getForms(), function(b) {
            if (b.isDirty()) {
                Ext.apply(a, b.getValues())
            }
        });
        return a
    },
    isValid: function() {
        var a = true;
        Ext.each(this.getForms(), function(b) {
            if (!b.isValid()) {
                a = false
            }
        });
        return a
    },
    isDirty: function() {
        var a = false;
        Ext.each(this.getForms(), function(b) {
            if (b.isDirty()) {
                a = true
            }
        });
        return a
    },
    onOpen: function() {
        this.callParent(arguments);
        if (this.data) {
            Ext.each(this.getForms(), function(a) {
                a.setValues(this.data);
                a.clearInvalid()
            }, this)
        }
    },
    onApply: function() {
        if (!this.isValid()) {
            return false
        }
        this.bindToServer()
    },
    onCancel: function() {
        if (!this.isDirty()) {
            this.close();
            return true
        }
        this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
            if ("yes" === a) {
                this.close()
            }
        }, this)
    },
    bindToServer: function() {
        var b = this.getData();
        var a = [];
        if (b.profile) {
            a.push({
                api: "SYNO.Core.Directory.LDAP.Profile",
                method: "set",
                version: 1,
                params: {
                    name: b.profile
                }
            })
        }
        a.push({
            api: "SYNO.Core.Directory.LDAP",
            method: "set",
            version: 1,
            params: b
        });
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: this.bindToServerHandler
        })
    },
    bindToServerHandler: function(g, d, c, a) {
        this.clearStatusBusy();
        if (g && !d.has_fail) {
            if (this.callback) {
                this.callback.call(this.scope || this.module, g, d, c)
            }
            var f = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.Directory.LDAP", "set");
            if (f.is_syno_server && SYNO.API.Util.GetReqByAPI(a, "SYNO.Core.Directory.LDAP", "set", "enable_idmap")) {
                this.scope.err_msg = _T("ldap_error", "ldap_idmap_enable_warning")
            }
            this.close();
            return
        }
        var b = SYNO.API.Util.GetFirstError(d);
        var e = SYNO.SDS.AdminCenter.DirectoryService.Util.GetErrMsg((b) ? b.code : 2799);
        if (_T("ldap_error", "ldap_no_such_object") === e) {
            e = String.format(e, _T("ldap", "base_dn") + " (" + this.getData().base_dn + ")")
        }
        if (2719 === b.code) {
            if (this.callback) {
                this.callback.call(this.scope || this.module, true, d, c)
            }
            this.scope.err_msg = e;
            this.close()
        } else {
            this.getMsgBox().alert(this.title, e)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.LDAP.ProfileDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.store = new Ext.data.GroupingStore({
            reader: new Ext.data.JsonReader({
                root: "rules",
                fields: ["category", "attribute", "target"]
            }),
            groupField: "category"
        });
        this.store.loadData(b.data);
        this.panel = this.createPanel(this.store);
        var a = Ext.apply({
            title: _T("ldap", "profile_title"),
            autoDestroy: true,
            width: 400,
            height: 440,
            minWidth: 400,
            minHeight: 440,
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "commit"),
                disabled: b.owner._S("demo_mode"),
                tooltip: b.owner._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    createPanel: function(a) {
        var b = [{
            header: _T("ldap", "profile_origin"),
            dataIndex: "attribute",
            sortable: false
        }, {
            header: _T("ldap", "profile_target"),
            dataIndex: "target",
            sortable: false,
            id: "target",
            editor: new Ext.form.TextField(),
            renderer: "htmlEncode"
        }, {
            header: _T("ldap", "profile_map"),
            dataIndex: "category",
            sortable: false,
            hidden: true
        }];
        return new SYNO.ux.EditorGridPanel({
            clickToEdit: 1,
            autoExpandColumn: "target",
            enableHdMenu: false,
            enableColumnMove: false,
            stripeRows: true,
            store: a,
            columns: b,
            view: new SYNO.SDS.Utils.GroupingView({
                forceFit: true,
                showGroupName: false,
                enableGroupingMenu: false
            })
        })
    },
    hasModification: function() {
        return (0 !== this.store.getModifiedRecords().length)
    },
    onCancel: function() {
        if (!this.hasModification()) {
            this.close();
            return true
        }
        this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
            if ("yes" === a) {
                this.close()
            }
        }, this)
    },
    onApply: function() {
        if (!this.hasModification()) {
            this.close();
            return true
        }
        this.setStatusBusy();
        var a = [];
        this.store.each(function(b) {
            a.push(b.data)
        }, this);
        this.sendWebAPI({
            api: "SYNO.Core.Directory.LDAP.Profile",
            method: "set",
            version: 1,
            params: {
                rules: a
            },
            callback: this.afterApplyDone,
            scope: this
        })
    },
    afterApplyDone: function(c, b, a) {
        this.clearStatusBusy();
        if (c) {
            if (this.applyCallback) {
                this.applyCallback.call(this.applyTarget || this, this.hasModification())
            }
            this.close();
            return true
        }
        this.getMsgBox().alert(this.title, _T("error", "save"))
    },
    applyCallback: function(a) {}
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.LDAPTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.canCIFSSetSAMorPAM = b.owner._S("version") > 5534;
        this.err_msg = null;
        var a = Ext.apply({
            title: _T("ldap", "client_title"),
            trackResetOnLoad: true,
            hideMode: "offsets",
            webapi: {
                api: "SYNO.Core.Directory.LDAP",
                methods: {
                    get: "get"
                },
                version: 1
            },
            labelWidth: 250,
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("ldap", "enable_ldap_client"),
                name: "enable_client"
            }, {
                fieldLabel: _T("ldap", "ldap_server"),
                xtype: "syno_textfield",
                indent: 1,
                allowBlank: false,
                vtype: "iporhostname",
                name: "host"
            }, {
                xtype: "syno_combobox",
                indent: 1,
                fieldLabel: _T("ldap", "security_type"),
                forceSelection: true,
                store: new Ext.data.JsonStore({
                    fields: ["display", "value"],
                    data: [{
                        display: _T("ldap", "no_ssl"),
                        value: "no"
                    }, {
                        display: _T("ldap", "with_ssl"),
                        value: "ssl"
                    }, {
                        display: _T("ldap", "with_tls"),
                        value: "start_tls"
                    }]
                }),
                name: "encryption",
                value: "no",
                editable: false,
                valueField: "value",
                displayField: "display"
            }, {
                xtype: "syno_combobox",
                indent: 1,
                fieldLabel: _T("ldap", "base_dn"),
                allowBlank: false,
                name: "base_dn",
                store: new SYNO.API.Store({
                    autoDestroy: true,
                    appWindow: b.module.owner,
                    api: "SYNO.Core.Directory.LDAP.BaseDN",
                    method: "list",
                    version: 1,
                    reader: new SYNO.SDS.AdminCenter.DirectoryService.Util.ArrayReader({
                        root: "base_dn",
                        fields: ["item"]
                    }),
                    listeners: {
                        exception: this.onLoadBaseDNException,
                        beforeload: this.onBeforeLoadBaseDN,
                        load: this.onLoadBaseDN,
                        scope: this
                    }
                }),
                mode: "remote",
                forceSelection: false,
                selectOnFocus: false,
                editable: true,
                valueField: "item",
                displayField: "item"
            }, {
                xtype: "syno_compositefield",
                synotype: "indent",
                indent: 1,
                fieldLabel: _T("ldap", "profile_title"),
                items: [{
                    xtype: "syno_combobox",
                    name: "profile",
                    store: new SYNO.API.Store({
                        autoDestroy: true,
                        appWindow: b.module.owner,
                        api: "SYNO.Core.Directory.LDAP.Profile",
                        method: "list",
                        version: 1,
                        reader: new SYNO.SDS.AdminCenter.DirectoryService.Util.ArrayReader({
                            root: "profiles",
                            fields: ["value", "display"],
                            createArrayElement: function(c) {
                                return {
                                    value: c,
                                    display: _T("ldap", "profile_" + c) || c
                                }
                            }
                        })
                    }),
                    mode: "remote",
                    allowBlank: false,
                    editable: false,
                    valueField: "value",
                    displayField: "display"
                }, {
                    synotype: "indent_no_label",
                    xtype: "syno_button",
                    width: "auto",
                    id: this.btnProfileAdvance = Ext.id(),
                    text: _T("ldap", "profile_advance"),
                    scope: this,
                    handler: this.onProfileBtnClick
                }]
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("ldap", "smb_support"),
                name: "enable_cifs",
                hidden: this.canCIFSSetSAMorPAM,
                value: true
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("ldap", "smb_support_pam"),
                hidden: !this.canCIFSSetSAMorPAM,
                listeners: {
                    enable: function(c) {
                        if (this.is_syno_server) {
                            c.disable()
                        }
                    },
                    scope: this
                },
                name: "enable_cifs_pam"
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("ldap", "idmap_support"),
                disabled: true,
                listeners: {
                    enable: function(c) {
                        if (this.getForm().findField("enable_client").originalValue) {
                            c.disable()
                        }
                    },
                    scope: this
                },
                name: "enable_idmap"
            }, {
                xtype: "hidden",
                name: "bind_dn"
            }, {
                xtype: "hidden",
                name: "bind_pw"
            }, {
                synotype: "indent",
                indent: 1,
                xtype: "syno_displayfield",
                fieldLabel: _T("tunnel", "tunnel_status"),
                value: "--",
                name: "client_status",
                isDirty: function() {
                    return false
                }
            }]
        }, b);
        this.callParent([a])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            this.enableGroup = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "enable_client", ["host", "base_dn", "encryption", "enable_cifs", "enable_cifs_pam", "enable_idmap", "profile", this.btnProfileAdvance]);
            SYNO.SDS.Utils.AddTip(this.getForm().findField("enable_cifs").getEl(), _T("ldap", "smb_support_tips"));
            SYNO.SDS.Utils.AddTip(this.getForm().findField("enable_cifs_pam").getEl(), _T("ldap", "smb_support_pam_tips"));
            SYNO.SDS.Utils.AddTip(this.getForm().findField("enable_idmap").getEl(), _T("ldap", "idmap_support_tips"))
        }, this, {
            single: true
        });
        this.mon(this, "activate", function() {
            if (this.module.getPanel().checkDomainEnable()) {
                this.getForm().getEl().parent().mask(_T("domain", "domain_ldap_conflict"), "syno-ux-mask-info")
            } else {
                this.getForm().getEl().parent().unmask()
            }
        })
    },
    onBeforeRequest: function(d) {
        if (true === this.owner.checkDomainEnable() || "set" != d) {
            return true
        }
        var b = this.getForm();
        var c = b.getValues();
        if (!b.isDirty()) {
            return false
        }
        if (!b.isValid()) {
            this.module.panel.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (!Ext.isDefined(c.enable_idmap)) {
            c.enable_idmap = b.findField("enable_idmap").getValue()
        }
        if ("start_tls" === c.encryption && "domino" === c.profile) {
            this.module.panel.clearStatusBusy();
            this.module.panel.setStatusError({
                text: _T("ldap", "domino_not_support_tls"),
                clear: true
            });
            return false
        }
        if (this.owner.isComputingNode && !this.confirmSetLDAP) {
            this.module.appWin.getMsgBox().confirm(this.title, String.format(_T("domain", "in_gluster_domain_msg"), "LDAP"), function(e) {
                if ("yes" === e) {
                    this.confirmSetLDAP = true;
                    this.owner.applyAllForm();
                    this.confirmSetLDAP = false
                }
            }, this);
            return false
        }
        if (b.findField("profile").isDirty()) {
            c.profile = b.findField("profile").getValue()
        }
        if (c.enable_client) {
            if (this.canCIFSSetSAMorPAM) {
                c.enable_cifs = true
            }
            var a = new SYNO.SDS.AdminCenter.DirectoryService.LDAP.BindDialog({
                data: c,
                module: this.module,
                owner: this.module.appWin,
                callback: this.afterApplyDone,
                scope: this
            });
            a.open()
        } else {
            this.module.panel.setStatusBusy({
                text: _T("common", "saving")
            });
            this.sendWebAPI({
                api: "SYNO.Core.Directory.LDAP",
                method: "set",
                version: 1,
                params: {
                    enable_client: false
                },
                callback: this.afterApplyDone,
                scope: this
            })
        }
        return false
    },
    afterApplyDone: function(c, b, a) {
        this.module.panel.clearStatusBusy();
        if (c) {
            this.owner.loadAllForm()
        } else {
            if (a.enable_client === false) {
                this.module.appWin.getMsgBox().alert(this.title, _T("error", "save"))
            }
        }
    },
    updateConnectionStatus: function(e) {
        var d = this.getForm();
        var g = function(h) {
            d.items.items.each(function(i) {
                if (h) {
                    i.enable()
                } else {
                    i.disable()
                }
            })
        };
        var f = function(i, h) {
            return String.format('<font class="{1}-status">{0}</font>', i, h || "black")
        };
        var a, c;
        g(true);
        this.is_syno_server = false;
        if (e.code || (e.error && e.error === 2704)) {
            g(false);
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "error_occupied"));
            a = "--"
        } else {
            if (e.enable_client === true) {
                c = e.error || 2799;
                a = f(SYNO.SDS.AdminCenter.DirectoryService.Util.GetErrMsg(c), (c === 2702) ? "green" : "red");
                if (e.is_syno_server === true) {
                    this.is_syno_server = true;
                    a += " (" + _T("ldap", "syno_server") + ")"
                }
                if (c == 2707) {
                    this.owner.getComponent("ldap_user").disable();
                    this.owner.getComponent("ldap_group").disable()
                }
            } else {
                a = f(_T("common", "disabled"))
            }
        }
        d.setValues({
            client_status: a
        });
        var b = d.findField("profile");
        if (b.getStore().getCount() === 0) {
            b.getStore().loadData({
                profiles: [b.getValue()]
            });
            b.reset()
        }
        if (this.err_msg) {
            this.module.appWin.getMsgBox().alert(this.title, this.err_msg);
            this.err_msg = null
        }
    },
    onBeforeLoadBaseDN: function(b, c) {
        var d = this.getForm();
        var a = d.findField("base_dn");
        if (!d.findField("host").isValid()) {
            a.store.removeAll();
            this.module.panel.setStatusError({
                text: _T("ldap", "set_host_first"),
                clear: true
            });
            delete a.lastQuery;
            return false
        }
        c.params.host = d.findField("host").getValue();
        c.params.encryption = d.findField("encryption").getValue();
        this.module.panel.setStatusBusy()
    },
    onLoadBaseDNException: function(d, e, f, c, b, a) {
        var g = this.getForm().findField("base_dn");
        this.module.appWin.getMsgBox().alert(_T("ldap", "base_dn"), SYNO.SDS.AdminCenter.DirectoryService.Util.GetErrMsg(b.code));
        delete g.lastQuery;
        g.setValue("");
        this.module.panel.clearStatusBusy()
    },
    onLoadBaseDN: function() {
        var a = this.getForm().findField("base_dn");
        this.module.panel.clearStatusBusy();
        delete a.lastQuery
    },
    onProfileBtnClick: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Directory.LDAP.Profile",
            method: "get",
            version: 1,
            params: {
                name: this.getForm().findField("profile").getValue()
            },
            callback: this.afterLoadProfile,
            scope: this
        })
    },
    afterLoadProfile: function(d, c, b) {
        if (!d) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.SDS.AdminCenter.DirectoryService.Util.GetErrMsg(c.code));
            return
        }
        var a = new SYNO.SDS.AdminCenter.DirectoryService.LDAP.ProfileDialog({
            module: this.module,
            owner: this.module.appWin,
            data: c,
            applyCallback: this.resetProfile,
            applyTarget: this
        });
        a.open()
    },
    resetProfile: function(b) {
        var a = this.getForm();
        if (b) {
            a.setValues({
                profile: "customized"
            })
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.SSOTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    ValidURL: function(b) {
        var c = /((^https?):\/\/([\-\w]+\.)*\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
        var a = b.replace(/https?:\/\/\[/i, "").replace(/\].*$/, "");
        if (false === c.test(b) && false === Ext.form.VTypes.v6ipVal.test(a)) {
            return Ext.form.VTypes.urlText
        }
        return true
    },
    constructor: function(b) {
        this.err_msg = null;
        var a = Ext.apply({
            title: _T("sso", "title"),
            trackResetOnLoad: true,
            hideMode: "offsets",
            webapi: {
                api: "SYNO.Core.Directory.SSO",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("sso", "enable"),
                name: "enable_sso"
            }, {
                fieldLabel: _T("sso", "server"),
                xtype: "syno_textfield",
                name: "host",
                indent: 1,
                allowBlank: false,
                validator: this.ValidURL,
                listeners: {
                    blur: function() {
                        this.setValue(this.getValue().replace(/\/$/, ""))
                    }
                },
                emptyText: "http://nas.example.com:5000",
                width: 257
            }, {
                xtype: "syno_textfield",
                name: "appid",
                hidden: true
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                name: "display_appid",
                width: 257,
                fieldLabel: _T("sso", "app_id"),
                value: ""
            }]
        }, b);
        this.callParent([a])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            this.enableGroup = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "enable_sso", ["host", "appid", "display_appid"])
        }, this, {
            single: true
        });
        var a = this.owner.buttons.find(function(b) {
            return b.text && b.text === _T("common", "commit")
        });
        this.mon(a, "click", this.onApplyBtnClick, this);
        this.appidLink = this.getForm().findField("display_appid");
        this.mon(this, "activate", function() {
            if (!this.module.getPanel().checkDomainEnable() && !this.module.getPanel().checkLDAPEnable()) {
                this.getForm().getEl().parent().mask(_T("sso", "ldap_domain_disabled"), "syno-ux-mask-info")
            } else {
                this.getForm().getEl().parent().unmask()
            }
            this.appidLink.getEl().addListener("click", this.openRegistryDialog, this)
        });
        this.mon(this, "deactivate", function() {
            this.appidLink.getEl().removeListener("click", this.openRegistryDialog, this)
        })
    },
    onApplyBtnClick: function() {
        var a = this.getForm();
        if (false === this.module.getPanel().getItem("ldap").getForm().findField("enable_client").getValue() && false === this.module.getPanel().getItem("domain").getForm().findField("enable_domain").getValue()) {
            a.findField("enable_sso").setValue(false)
        }
        if (!a.isDirty()) {
            if (this.module.panel.getActiveTab() === this) {
                this.module.panel.setStatusError({
                    text: _T("error", "nochange_subject"),
                    clear: true
                })
            }
            return
        }
        if (!a.isValid()) {
            if (this.isVisible()) {
                this.module.panel.setStatusError({
                    text: _T("common", "forminvalid"),
                    clear: true
                })
            }
            return
        }
        if (this.isVisible()) {
            this.module.panel.setStatusBusy({
                text: _T("common", "saving")
            })
        }
        this.sendWebAPI({
            api: "SYNO.Core.Directory.SSO",
            method: "set",
            version: 1,
            params: a.getValues(),
            callback: this.isVisible() ? this.afterApplyDone : Ext.emptyFn,
            scope: this
        })
    },
    onBeforeRequest: function(a) {
        return true
    },
    afterApplyDone: function(c, b, a) {
        this.module.panel.clearStatusBusy();
        if (c) {
            this.getForm().setValues(b);
            this.checkPossibleLoadJSError();
            this.module.panel.setStatusOK()
        }
    },
    processReturnData: function(f, d, c) {
        this.callParent(arguments);
        if (!d.result) {
            return
        }
        for (var a = 0, b = d.result.length; a < b; a++) {
            var e = d.result[a];
            if ("SYNO.Core.Directory.SSO" !== e.api || "get" !== e.method) {
                continue
            }
            this.setAppID(e.data.appid)
        }
    },
    checkPossibleLoadJSError: function() {
        var b = this.form.findField("enable_sso").getValue(),
            a = this.form.findField("host").getValue().match(/^https/) !== null;
        if (!b) {
            return
        }
        if (a) {
            this.alert("", _T("sso", "warn_invalid_cert"))
        } else {
            this.sendWebAPI({
                api: "SYNO.Core.Web.DSM",
                method: "get",
                version: 1,
                scope: this,
                callback: function(e, d, c) {
                    if (e) {
                        if (d.enable_https) {
                            this.alert("", _T("sso", "warn_insecure"))
                        }
                    }
                }
            })
        }
    },
    openRegistryDialog: function() {
        if (this.appidLink.disabled) {
            return
        }
        var a = this.form.findField("host");
        if ("" === a.getValue()) {
            return a.focus()
        }
        var b = new SYNO.SDS.AdminCenter.DirectoryService.SSOAutoRegister({
            owner: this.module.appWin,
            ssoform: this.form,
            ssotab: this
        });
        b.open()
    },
    setAppID: function(b) {
        var a = this.getForm().findField("appid");
        if (b !== undefined && b.length > 0) {
            this.appidLink.setValue('<a class="link-font" href="javascript: void(0)">' + b + "</a>");
            a.setValue(b)
        } else {
            this.appidLink.setValue('<a class="link-font" href="javascript: void(0)">' + _T("service", "service_ddns_register_btn") + "</a>");
            a.setValue("")
        }
        this.appidLink.originalValue = this.appidLink.getValue();
        a.originalValue = a.getValue()
    },
    alert: function(b, a) {
        if (this.module.appWin.el.hasClass("active-win")) {
            this.module.appWin.getMsgBox().alert(b, a)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.SSOAutoRegister", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.ssoform = a.ssoform;
        this.owner = a.owner;
        var d = location.protocol + "//" + location.host + location.pathname;
        if (this.owner.IsAllowRelay()) {
            var b = this.owner.openConfig.cms_ds_data;
            d = (0 !== b.https_port) ? "https" : "http";
            d += "://" + b.host + ":";
            d += (0 !== b.https_port) ? b.https_port : b.http_port;
            d += location.pathname
        }
        var c = Ext.apply({
            dsmStyle: "v5",
            useStatusBar: true,
            title: _T("sso", "auto_registery"),
            width: 534,
            height: 379,
            minWidth: 511,
            minHeight: 267,
            layout: "fit",
            items: [{
                xtype: "syno_formpanel",
                itemId: "AutoRegisterFormPanel",
                border: false,
                trackResetOnLoad: true,
                defaults: {
                    allowBlank: false,
                    width: 280
                },
                items: [{
                    xtype: "syno_displayfield",
                    fieldLabel: _T("sso", "server"),
                    value: this.ssoform.findField("host").getValue()
                }, {
                    xtype: "syno_textfield",
                    name: "host",
                    hidden: true,
                    value: this.ssoform.findField("host").getValue()
                }, {
                    xtype: "syno_compositefield",
                    width: 500,
                    hideLabel: true,
                    fieldLabel: false,
                    items: [{
                        xtype: "syno_radio",
                        name: "type",
                        boxLabel: _T("sso", "app_id"),
                        width: 181,
                        inputValue: "manual",
                        checked: true
                    }, {
                        xtype: "syno_textfield",
                        width: 280,
                        name: "appid",
                        allowBlank: false,
                        value: this.ssoform.findField("appid").getValue()
                    }]
                }, {
                    xtype: "syno_radio",
                    boxLabel: _T("sso", "auto_registry"),
                    name: "type",
                    inputValue: "automatic"
                }, {
                    xtype: "syno_textfield",
                    indent: 1,
                    name: "username",
                    fieldLabel: _T("sso", "server_admin")
                }, {
                    xtype: "syno_textfield",
                    indent: 1,
                    textType: "password",
                    name: "password",
                    fieldLabel: _T("common", "password")
                }, {
                    xtype: "syno_textfield",
                    indent: 1,
                    name: "app_name",
                    fieldLabel: _T("sso", "app_name")
                }, {
                    xtype: "syno_textfield",
                    indent: 1,
                    name: "redirect_uri",
                    fieldLabel: _T("sso", "redirect_uri"),
                    validator: a.ssoform.owner.activeTab.ValidURL,
                    value: d
                }]
            }],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onClickSave
            }, {
                xtype: "syno_button",
                text: _T("common", "close"),
                scope: this,
                handler: this.onClickClose
            }]
        }, a);
        this.callParent([c]);
        this.formPanel = this.getComponent("AutoRegisterFormPanel");
        this.formPanel.mon(this.formPanel, "afterlayout", function(f, g) {
            var e;
            e = new SYNO.ux.Utils.EnableRadioGroup(f.getForm(), "type", {
                manual: ["appid"],
                automatic: ["username", "password", "app_name", "redirect_uri"]
            })
        }, this, {
            single: true
        })
    },
    getFormConfig: function() {
        return {
            items: [{
                xtype: "syno_textfield",
                name: "company_name",
                fieldLabel: "%COMPANY_NAME%",
                allowBlank: false,
                maxlength: 512
            }]
        }
    },
    onClickClose: function() {
        if (this.formPanel.getForm().isDirty()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    onClickSave: function() {
        var b = this.formPanel.getForm();
        if (!b.isValid()) {
            return
        }
        var c = this.formPanel.form.getValues();
        var a = c.type;
        delete c.type;
        if ("manual" === a) {
            c.enable_sso = true;
            this.setStatusBusy({
                text: _T("common", "saving")
            });
            this.sendWebAPI({
                api: "SYNO.Core.Directory.SSO",
                method: "set",
                version: 1,
                params: c,
                scope: this,
                callback: function(f, e, d) {
                    this.clearStatusBusy();
                    if (f && e && e.appid) {
                        this.ssoform.setValues({
                            enable_sso: true,
                            host: d.host
                        });
                        this.ssotab.setAppID(e.appid);
                        this.close()
                    } else {
                        this.showErrorMsg(e.code, e.errors)
                    }
                }
            })
        } else {
            this.setStatusBusy({
                text: _T("common", "saving")
            });
            this.sendWebAPI({
                api: "SYNO.Core.Directory.SSO",
                method: "register",
                version: 1,
                params: this.formPanel.form.getValues(),
                encryption: ["password"],
                scope: this,
                callback: function(f, e, d) {
                    this.clearStatusBusy();
                    if (f && e && e.app_id) {
                        this.ssoform.setValues({
                            enable_sso: true,
                            host: d.host
                        });
                        this.ssotab.setAppID(e.app_id);
                        this.close()
                    } else {
                        this.showErrorMsg(e.code, e.errors)
                    }
                }
            })
        }
    },
    showErrorMsg: function(a, c) {
        var b = _T("common", "error_system");
        switch (a) {
            case 6401:
                b = _T("login", "error_cantlogin");
                break;
            case 6402:
                b = _T("sso", "err_registry_failed");
                break;
            case 6403:
                b = _T("sso", "err_connect_sso_failed");
                break
        }
        this.setStatusError({
            text: b,
            clear: true
        })
    }
});
Ext.ns("SYNO.SDS.AdminCenter.DirectoryService.Domain.Util");
SYNO.SDS.AdminCenter.DirectoryService.Domain.LABELWIDTH = 260;
SYNO.SDS.AdminCenter.DirectoryService.Domain.FIELDWIDTH = 430;
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Domain.Util.Filter", {
    extend: "SYNO.ux.ComboBox",
    constructor: function(b) {
        var a = Ext.apply({
            width: 100,
            hideLabel: false,
            valueField: "value",
            displayField: "domain",
            store: {
                xtype: "arraystore",
                autoDestroy: true,
                fields: ["domain", "value", "comment"]
            },
            resizable: true,
            mode: "local",
            triggerAction: "all",
            editable: false,
            value: "",
            tpl: '<tpl for="."><div ext:qtip="{comment}" class="x-combo-list-item">{domain}</div></tpl>',
            forceSelection: true,
            listeners: {
                select: this.onSelect
            }
        }, b);
        this.callParent([a])
    },
    updateList: function(a) {
        var c = [];
        var b = true;
        Ext.each(a, function(d) {
            if (typeof d === "object") {
                c.push(d);
                if (d[1] && d[1] === this.getValue()) {
                    b = false
                }
            } else {
                c.push([d, d, d]);
                if (d === this.getValue()) {
                    b = false
                }
            }
        }, this);
        this.getStore().loadData(c);
        if (b) {
            this.setValue(c[0][1] || "");
            this.module.currDomain = c[0][1] || ""
        }
    },
    onSelect: function(a, c) {
        var d = "";
        var b = this.grid.getStore();
        if (this.grid && a.data && a.data.value) {
            d = a.data.value
        }
        this.module.currDomain = d;
        b.baseParams.domain_name = this.module.currDomain;
        b.load({
            params: {
                offset: 0
            }
        });
        this.collapse()
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Domain.Util.UpdateButton", {
    extend: "SYNO.ux.Button",
    constructor: function(b) {
        this.pollingId = undefined;
        var a = Ext.apply({
            text: _T("directory_service", "update_all_domain"),
            scope: this,
            handler: this.updateAll
        }, b);
        this.callParent([a])
    },
    updateAll: function() {
        if (!this.grid) {
            return
        }
        this.grid.getEl().mask(_T("directory_service", "warr_db_not_ready"), "syno-ux-mask-info");
        this.appWin.sendWebAPI({
            api: "SYNO.Core.Directory.Domain",
            method: "update_start",
            version: 1,
            params: {
                domain_name: "@all"
            },
            scope: this,
            callback: this.startPolling
        })
    },
    restartPolling: function() {
        if (this.pollingId) {
            return
        }
        var a = this;
        var b = function(c, d) {
            if (d >= c.length) {
                a.updateAll();
                return
            }
            a.sendWebAPI({
                api: "SYNO.Core.Directory.Domain",
                method: "update_status",
                version: 1,
                params: {
                    task_id: c[d]
                },
                scope: a,
                callback: function(h, g, f, e) {
                    if (h && g.status === "updating") {
                        a.startPolling(true, {
                            task_id: f.task_id
                        });
                        return
                    }
                    b(c, d + 1)
                }
            })
        };
        this.appWin.pollList({
            task_id_prefix: "DomainUpdate",
            extra_group_tasks: ["admin"],
            scope: this,
            callback: function(f, e, d, c) {
                if (f) {
                    if (Ext.isArray(e.admin)) {
                        b(e.admin, 0)
                    } else {
                        if (null === e.admin) {
                            a.updateAll()
                        }
                    }
                }
            }
        })
    },
    startPolling: function(d, c, b, a) {
        if (!this.grid) {
            return
        }
        if (!d) {
            SYNO.Debug("Failed to start update.");
            return
        }
        this.pollingId = this.appWin.pollReg({
            webapi: {
                api: "SYNO.Core.Directory.Domain",
                method: "update_status",
                version: 1,
                params: {
                    task_id: c.task_id
                }
            },
            interval: 5,
            immediate: true,
            scope: this,
            status_callback: function(h, g, f, e) {
                if (h && g.status === "finish") {
                    this.stopPolling();
                    this.grid.getEl().unmask();
                    this.grid.getStore().load()
                }
            }
        })
    },
    stopPolling: function() {
        if (this.pollingId) {
            this.appWin.pollUnreg(this.pollingId);
            this.pollingId = undefined
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.DirectoryService");
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.owner = a.appWin;
        this.appWin = a.appWin;
        this.callParent([a]);
        this.panel = new SYNO.SDS.AdminCenter.DirectoryService.TabPanel({
            module: this
        })
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "domain":
                return "AdminCenter/file_directory_service_domain.html";
            case "ldap":
                return "AdminCenter/file_directory_service_ldap.html";
            case "domain_user":
            case "domain_group":
            case "ldap_user":
            case "ldap_group":
                return "AdminCenter/file_directory_service_user_group.html";
            case "sso":
                return "AdminCenter/file_directory_service_sso.html";
            default:
                return "AdminCenter/file_directory_service_desc.html"
        }
    },
    getPanel: function() {
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.panel.resetAllForm();
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    deactivate: function() {
        var a = this.panel.getComponent("sso");
        if (this.panel.getComponent("domain").getForm().isDirty() || this.panel.getComponent("ldap").getForm().isDirty() || (a && a.getForm().isDirty())) {
            return false
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.DirectoryService.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    initEvents: function() {
        this.callParent(arguments);
        this.mon(SYNO.SDS.StatusNotifier, "SYNO.SDS.LDAP.AppInstance", this.LDAPChangeState, this);
        this.mon(this.getComponent("domain"), "activate", function() {
            if (this.checkLDAPEnable()) {
                this.getComponent("domain").getForm().getEl().parent().mask(_T("ldap", "ldap_domain_conflict"), "syno-ux-mask-info")
            } else {
                this.getComponent("domain").getForm().getEl().parent().unmask()
            }
        }, this);
        this.mon(this.getComponent("domain_user"), "activate", function() {
            this.getComponent("domain_user").activate()
        }, this);
        this.mon(this.getComponent("ldap_user"), "activate", function() {
            this.getComponent("ldap_user").activate()
        }, this)
    },
    constructor: function(a) {
        this.domainRunning = false;
        this.LDAPRunning = false;
        this.module = a.module;
        var b;
        b = Ext.apply({
            activeTab: 0,
            items: []
        }, a);
        this.callParent([b])
    },
    initComponent: function() {
        if ("yes" === this.module.owner._D("supportdomain", "no")) {
            this.items.push(new SYNO.SDS.AdminCenter.DirectoryService.DomainTab({
                module: this.module,
                owner: this,
                itemId: "domain"
            }))
        }
        this.items.push(new SYNO.SDS.AdminCenter.DirectoryService.LDAPTab({
            module: this.module,
            owner: this,
            itemId: "ldap"
        }));
        if ("yes" === this.module.owner._D("supportdomain", "no")) {
            this.items.push(new SYNO.SDS.AdminCenter.User.UserListGrid({
                title: _T("share", "share_domain_user"),
                appWin: this.module.owner,
                owner: this.module.owner,
                module: this.module,
                itemId: "domain_user",
                authType: "domain",
                homeButton: new SYNO.SDS.AdminCenter.DirectoryService.Util.HomeButton({
                    module: this.module,
                    appWin: this.module.owner,
                    authType: "domain"
                }),
                updateButton: new SYNO.SDS.AdminCenter.DirectoryService.Domain.Util.UpdateButton({
                    module: this.module,
                    appWin: this.module.owner
                }),
                domainFilter: new SYNO.SDS.AdminCenter.DirectoryService.Domain.Util.Filter({
                    module: this.module
                })
            }), new SYNO.SDS.AdminCenter.Group.GridPanel({
                title: _T("share", "share_domain_group"),
                module: this.module,
                itemId: "domain_group",
                authType: "domain",
                updateButton: new SYNO.SDS.AdminCenter.DirectoryService.Domain.Util.UpdateButton({
                    module: this.module,
                    appWin: this.module.owner
                }),
                domainFilter: new SYNO.SDS.AdminCenter.DirectoryService.Domain.Util.Filter({
                    module: this.module
                })
            }))
        }
        this.items.push(new SYNO.SDS.AdminCenter.User.UserListGrid({
            title: _T("share", "ldap_user"),
            appWin: this.module.owner,
            owner: this.module.owner,
            module: this.module,
            itemId: "ldap_user",
            authType: "ldap",
            homeButton: new SYNO.SDS.AdminCenter.DirectoryService.Util.HomeButton({
                module: this.module,
                appWin: this.module.owner,
                authType: "ldap"
            })
        }), new SYNO.SDS.AdminCenter.Group.GridPanel({
            title: _T("share", "ldap_group"),
            module: this.module,
            itemId: "ldap_group",
            authType: "ldap"
        }));
        var a = this.module.owner.openConfig.dsm_version;
        if ("5.0" !== a && "5.1" !== a) {
            this.items.push(new SYNO.SDS.AdminCenter.DirectoryService.SSOTab({
                module: this.module,
                owner: this,
                itemId: "sso"
            }))
        }
        this.callParent(arguments)
    },
    loadAllForm: function() {
        this.hideTabStripItem("ldap_user");
        this.hideTabStripItem("ldap_group");
        if ("yes" === this.module.owner._D("supportdomain", "no")) {
            this.hideTabStripItem("domain_user");
            this.hideTabStripItem("domain_group")
        }
        this.callParent([{
            timeout: 360000
        }])
    },
    processParams: function(c, b) {
        var a = {
            api: "SYNO.Core.Directory.Domain",
            method: "get_domain_list",
            version: 1
        };
        b = this.callParent(arguments);
        if (this._S("version") > 4946) {
            a.version = 2
        }
        b = b.concat([a, {
            api: "SYNO.Core.Directory.Domain",
            method: "test_dc",
            version: 1
        }]);
        if (!Ext.isEmpty(this.getKnownAPI("SYNO.GlusterfsMgmt.Service"))) {
            b = b.concat([{
                api: "SYNO.GlusterfsMgmt.Service",
                method: "get",
                version: 1
            }])
        }
        return b
    },
    processReturnData: function(i, e, c) {
        var b = SYNO.SDS.AdminCenter.DirectoryService.Util.DirectoryServiceDataGetCB(i, e, c);
        if (b.error) {
            this.module.appWin.getMsgBox().alert(this.title, b.error);
            return
        }
        this.callParent(arguments);
        var d = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.Domain", "test_dc", "test_join_success");
        var h = [];
        if ("yes" === this.module.owner._D("supportdomain", "no") && undefined !== b.domain_list) {
            h = b.domain_list
        }
        var g = b.enable_domain ? true : false;
        var f = b.enable_ldap ? true : false;
        this.updateTabs(f, g);
        this.getComponent("ldap").updateConnectionStatus(SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.LDAP", "get"));
        if ("yes" === this.module.owner._D("supportdomain", "no")) {
            if (true === g) {
                if (true === d) {
                    this.getComponent("domain_user").domainFilter.updateList(h);
                    this.getComponent("domain_group").domainFilter.updateList(h)
                } else {
                    var a = this.getComponent("domain").getForm();
                    a.findField("domain_name").markInvalid(_T("network", "error_testjoin"))
                }
                if (true === d && 0 !== h.length) {
                    this.getComponent("domain_user").enable();
                    this.getComponent("domain_group").enable()
                } else {
                    this.getComponent("domain_user").disable();
                    this.getComponent("domain_group").disable()
                }
                if (1 === SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Directory.Domain", "get", "manage_mode")) {
                    this.getComponent("domain_user").getTopToolbar().getComponent("filterName").setValue(_T("directory_service", "organizational_unit") + ": ");
                    this.getComponent("domain_group").getTopToolbar().getComponent("filterName").setValue(_T("directory_service", "organizational_unit") + ": ")
                } else {
                    this.getComponent("domain_user").getTopToolbar().getComponent("filterName").setValue(_T("helptoc", "directory_service_domain") + ": ");
                    this.getComponent("domain_group").getTopToolbar().getComponent("filterName").setValue(_T("helptoc", "directory_service_domain") + ": ")
                }
            }
        }
        this.isComputingNode = 0 < (SYNO.API.Util.GetValByAPI(e, "SYNO.GlusterfsMgmt.Service", "get", "role") & 2)
    },
    LDAPChangeState: function(c) {
        var b = this.getComponent("ldap").getForm();
        var a = b.getValues().host;
        if (!this.isVisible()) {
            return true
        }
        if ("client_binded" === c) {
            this.load()
        } else {
            if ("server_disabled" === c) {
                if ("127.0.0.1" === a || "localhost" === a) {
                    this.load()
                }
            }
        }
    },
    updateTabs: function(a, b) {
        this.ldapRunning = a;
        this.domainRunning = b;
        this.hideTabStripItem("ldap_user");
        this.hideTabStripItem("ldap_group");
        this.hideTabStripItem("domain_user");
        this.hideTabStripItem("domain_group");
        this.setActiveTab("ldap");
        if (a) {
            this.unhideTabStripItem("ldap_user");
            this.unhideTabStripItem("ldap_group")
        }
        if ("yes" === this.module.owner._D("supportdomain", "no")) {
            if (b) {
                this.setActiveTab("domain");
                this.unhideTabStripItem("domain_user");
                this.unhideTabStripItem("domain_group")
            }
            if (!a && !b) {
                this.setActiveTab("domain")
            }
        }
    },
    checkDomainEnable: function() {
        if ("yes" !== this.module.owner._D("supportdomain", "no")) {
            return false
        }
        if (this.domainRunning || this.getComponent("domain").getForm().findField("enable_domain").getValue()) {
            return true
        }
        return false
    },
    checkLDAPEnable: function() {
        if (this.ldapRunning || this.getComponent("ldap").getForm().findField("enable_client").getValue()) {
            return true
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.AdvancedForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.externalSetAPI = {
            api: "SYNO.Core.Web.DSM.External",
            method: "set",
            version: 1
        };
        this.externalGetAPI = {
            api: "SYNO.Core.Web.DSM.External",
            method: "get",
            version: 1
        }
    },
    fillConfig: function(a) {
        var b = {
            title: _T("common", "advanced"),
            autoFlexcroll: true,
            trackResetOnLoad: true,
            webapi: {
                api: "SYNO.Core.Web.DSM.External",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [this.getExternalAccessObj()]
        };
        Ext.apply(b, a);
        return b
    },
    getExternalAccessObj: function() {
        return this.getExternalAccessItems()
    },
    getExternalAccessItems: function() {
        return [{
            xtype: "syno_displayfield",
            value: _T("dsmoption", "external_port_desc_1")
        }, {
            xtype: "syno_textfield",
            name: "hostname",
            vtype: "iporhostname",
            maxLength: 255,
            width: 300,
            allowBlank: true,
            fieldLabel: _T("dsmoption", "external_dns_or_ip")
        }, {
            xtype: "syno_numberfield",
            vtype: "port",
            validator: this.validateExternalPort.createDelegate(this, [false], true),
            fieldLabel: _T("dsmoption", "external_port_dsm") + " (HTTP)",
            width: 300,
            allowBlank: true,
            name: "http_port"
        }, {
            xtype: "syno_numberfield",
            vtype: "port",
            validator: this.validateExternalPort.createDelegate(this, [true], true),
            fieldLabel: _T("dsmoption", "external_port_dsm") + " (HTTPS)",
            width: 300,
            allowBlank: true,
            name: "https_port"
        }]
    },
    validateExternalPort: function(a, c) {
        if (Ext.isEmpty(a)) {
            return true
        }
        var b = this.getForm().findField(c ? "http_port" : "https_port");
        if (!Ext.isDefined(b)) {
            return true
        }
        return (parseInt(a, 10) === b.getValue()) ? _T("app_port_alias", "err_port_dup") : true
    },
    processReturnData: function(c, b, a) {
        Ext.each(b.result, function(d) {
            if (SYNO.ux.Utils.checkApiConsistency(d, this.externalGetAPI) && Ext.isObject(d.data)) {
                if (!Ext.isDefined(d.data.http_port)) {
                    d.data.http_port = ""
                }
                if (!Ext.isDefined(d.data.https_port)) {
                    d.data.https_port = ""
                }
            }
        }, this);
        this.callParent(arguments)
    },
    processParams: function(b, a) {
        if ("get" === b) {
            return this.callParent(arguments)
        }
        this.ownerCt.restartHttpd = false;
        Ext.each(a, function(c) {
            if (SYNO.ux.Utils.checkApiConsistency(c, this.externalSetAPI)) {
                c.params.http_port = this.processPortParam(c.params.http_port);
                c.params.https_port = this.processPortParam(c.params.https_port)
            }
        }, this);
        return a
    },
    processPortParam: function(a) {
        return Ext.isNumber(a) ? a : null
    },
    getHelpParam: function() {
        return "AdminCenter/connection_public_access_advanced.html"
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.Utils", {
    statics: {
        PortValidator: function(a) {
            return function(b) {
                if (SYNO.SDS.Utils.isReservedPort(a, b, b)) {
                    return _T("ftp", "ftp_port_in_used")
                } else {
                    if (SYNO.SDS.Utils.isBrowserReservedPort(b, b)) {
                        return _T("common", "err_browser_reserved_ports")
                    } else {
                        return true
                    }
                }
            }
        },
        onClickCertificate: function(b) {
            var a = Ext.getCmp(b);
            if (a) {
                a.findAppWindow().startModule("SYNO.SDS.AdminCenter.Security.Main", {
                    tab: "CertificateTab"
                })
            }
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.PortRange", {
    extend: "Object",
    constructor: function(d, b) {
        var c = [d, b];
        if (undefined === b) {
            if ("string" === typeof d) {
                c = d.split("-");
                if (2 !== c.length) {
                    c = [d, d]
                }
            } else {
                c = [d, d]
            }
        }
        this.min = parseInt(c[0], 10);
        this.max = parseInt(c[1], 10)
    },
    isValid: function() {
        return 0 < this.min && this.min <= this.max && this.max < 65536
    },
    toString: function() {
        if (this.min === this.max) {
            return this.min + ""
        } else {
            return this.min + "-" + this.max
        }
    },
    getCount: function() {
        if (!this.isValid()) {
            return NaN
        }
        return this.max - this.min + 1
    },
    compare: function(a) {
        if (this.min === a.min) {
            return this.max - a.max
        } else {
            return this.min - a.min
        }
    }
});
SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.PortRange.comparator = function(d, c) {
    return d.compare(c)
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.Ports", {
    extend: "Object",
    constructor: function(d) {
        var a = null;
        var c = null;
        this.ports = [];
        this.isValid = true;
        if ("string" !== typeof d) {
            return
        }
        a = d.split(",");
        for (var b = 0; b < a.length; b++) {
            c = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.PortRange(a[b]);
            if (c.isValid()) {
                this.ports.push(c)
            } else {
                this.isValid = false
            }
        }
    },
    toString: function() {
        return this.ports.join(",")
    },
    equalFormat: function(b) {
        if (this.ports.length !== b.ports.length || false === this.isValid || false === b.isValid) {
            return false
        }
        for (var a = 0; a < this.ports.length; a++) {
            if (this.ports[a].getCount() !== b.ports[a].getCount()) {
                return false
            }
        }
        return true
    },
    isConflict: function() {
        var e = null;
        var b = [];
        var d, a, c;
        e = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.Ports(this.toString()).ports;
        if (0 >= e.length) {
            return b
        }
        e.sort(SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.PortRange.comparator);
        for (a = 1, d = e[0].max; a < e.length; a++) {
            if (d >= e[a].min) {
                c = (d < e[a].max ? d : e[a].max);
                b.push(new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.PortRange(e[a].min, c))
            }
            d = (d < e[a].max ? e[a].max : d)
        }
        return b
    }
});
SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.Conflict = function(a) {
    return new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.Ports(a).isConflict()
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.AddRuleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.isSupportChangePort = b.isSupportChangePort;
        this.parentForm = b.parentForm;
        var a = Ext.apply({
            title: ("create" === this.mode) ? _T("routerconf", "routerconf_portfwd_opt_title") : _T("routerconf", "routerconf_test_rule_edit"),
            autoDestroy: true,
            width: 450,
            height: 290,
            layout: "fit",
            border: false,
            items: [this.configForm({
                border: false,
                itemId: "formpanel"
            })],
            buttons: [{
                disabled: this.parentForm._S("demo_mode"),
                tooltip: this.parentForm._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: ("create" === this.mode) ? _T("common", "create") : _T("common", "alt_apply"),
                scope: this,
                handler: this.onAddRule
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            trackResetOnLoad: true,
            synodefaults: {
                width: 200
            },
            headline: _T("routerconf", "routerconf_customport_title"),
            description: _T("routerconf", "routerconf_port_hint"),
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("routerconf", "routerconf_header_service"),
                maxlength: 256,
                allowBlank: false,
                name: "service"
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("routerconf", "routerconf_header_protocol"),
                name: "protocol",
                store: [
                    ["tcp", "TCP"],
                    ["udp", "UDP"]
                ],
                value: "tcp"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("port_fwd", "port_fwd_target_ip"),
                vtype: "v4ip",
                maxlength: 15,
                name: "targetIP"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("port_fwd", "port_fwd_target_port"),
                name: "targetPort",
                allowBlank: false,
                vtype: this.isSupportChangePort ? "port" : "portfwd",
                listeners: {
                    blur: function(c) {
                        var b = c.ownerCt.getComponent("sourcePort");
                        if (!this.isSupportChangePort) {
                            b.setValue(c.getValue())
                        } else {
                            if ("" === b.getValue() && c.isValid()) {
                                b.setValue(c.getValue())
                            }
                        }
                    },
                    scope: this
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("port_fwd", "port_fwd_source_port"),
                name: "sourcePort",
                itemId: "sourcePort",
                hiddenName: "sourcePort",
                allowBlank: false,
                vtype: "portfwd",
                scope: this,
                validator: this.isSourcePortValid,
                disabled: !this.isSupportChangePort
            }]
        }, a))
    },
    isSourcePortValid: function(a) {
        if (!Ext.isString(a)) {
            return _T("routerconf", "routerconf_port_value_invalid")
        }
        if (15 < a.replace(/-/g, ",").split(",").length) {
            return String.format(_T("port_fwd", "port_fwd_field_exceed_multiports"), "15")
        }
        return true
    },
    getForm: function() {
        return this.getComponent("formpanel").getForm()
    },
    loadUsedPorts: function() {
        return Ext.apply({}, this.parentForm.getStore().getUsedPortStrings(this.editRec))
    },
    onAddRule: function() {
        var g = this.getForm();
        var d = function(j) {
            var i = g.findField(j);
            return i ? i.getValue() : undefined
        };
        if (!g.isDirty()) {
            this.close();
            return true
        }
        if (!g.isValid()) {
            return false
        }
        var e = this.loadUsedPorts();
        var f = d("protocol");
        var h = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.Ports(d("sourcePort"));
        var a = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.Ports(d("targetPort"));
        if (!h.isValid || !a.isValid) {
            return this.reportFailure({
                text: _T("routerconf", "routerconf_port_value_invalid"),
                clear: true
            })
        }
        if (!this.isSupportChangePort && !h.equalFormat(a)) {
            return this.reportFailure({
                text: _T("routerconf", "routerconf_port_count_invalid"),
                clear: true
            })
        }
        e[f] += "," + h.toString();
        if (this.parentForm.getStore().isConflict(e, this.reportFailure, this)) {
            return false
        }
        if (!(this.isTargetIpTouchable(d("targetIP")))) {
            return this.reportFailure({
                text: _T("port_fwd", "port_fwd_ip_err"),
                clear: true
            })
        }
        if ("edit" === this.mode) {
            var c = this.parentForm.getStore().getById(this.editRec.id);
            c.set("service", d("service"));
            c.set("sourcePort", h.toString());
            c.set("targetPort", a.toString());
            c.set("targetIP", d("targetIP"));
            c.set("protocol", f)
        } else {
            var b = this.parentForm.getStore();
            b.add(new b.recordType({
                id: b.getCount() + 1,
                enabled: true,
                service: d("service"),
                sourcePort: h.toString(),
                targetPort: a.toString(),
                targetIP: d("targetIP"),
                protocol: f
            }))
        }
        this.close();
        return true
    },
    onCancel: function() {
        if (this.getForm().isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    reportFailure: function(a) {
        this.setStatusError(a);
        return false
    },
    onOpen: function() {
        this.setStatusBusy();
        if ("edit" === this.mode) {
            this.editRec = this.parentForm.getSelectionModel().getSelected();
            this.getForm().setValues(this.editRec.data)
        }
        this.clearStatusBusy();
        this.callParent([arguments])
    },
    isTargetIpTouchable: function(a) {
        var b = false;
        Ext.each(this.parentForm.local_lan, function(c) {
            if (SYNO.SDS.Utils.Network.GatewayMatchIP(a, c.ip, c.mask)) {
                b = true;
                return false
            }
        });
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RuleStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        if (!Ext.isDefined(b.module)) {
            throw Error("module is undefined")
        }
        var a = Ext.apply({
            api: "SYNO.Core.Network.Router.PortForward",
            appWindow: b.appWin,
            method: "get",
            version: 1,
            autoDestroy: true,
            root: "rules",
            fields: ["id", "enabled", "service", "protocol", "sourcePort", "targetIP", "targetPort"],
            listeners: {
                exception: this.onStoreException,
                beforeload: this.onBeforeLoad,
                load: this.onAfterLoad,
                add: this.onRuleChanged,
                update: this.onRuleChanged,
                remove: this.onRuleChanged,
                scope: this
            }
        }, b);
        this.callParent([a])
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", c);
        this.module.appWin.unmask();
        this.module.appWin.setStatusError()
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy()
    },
    onAfterLoad: function(b, a, c) {
        this.module.appWin.clearStatusBusy();
        this.isRuleChanged = false;
        this.commitChanges()
    },
    onRuleChanged: function(b, c, a) {
        this.isRuleChanged = true;
        this.grid.checkOnRuleChanged();
        this.grid.getView().onLayout()
    },
    getUsedPortStrings: function(a) {
        var d;
        var c = -1;
        var b = {
            tcp: "",
            udp: ""
        };
        if (a) {
            c = this.indexOfId(a.id)
        }
        for (d = 0; d < this.getCount(); d++) {
            var e;
            if (a && c === d) {
                continue
            }
            e = this.getAt(d);
            if (!e.get("enabled")) {
                continue
            }
            b[e.get("protocol")] += "," + e.get("sourcePort")
        }
        return b
    },
    isConflict: function(g, b, c) {
        var f, e = [];
        var d = {
            tcp: "TCP",
            udp: "UDP"
        };
        var a = {
            alert: true,
            text: "",
            clear: true
        };
        Ext.iterate(g, function(h, i) {
            f = SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RouterConf.Conflict(i);
            if (f.length) {
                e.push(d[h] + ":" + f.join(","))
            }
        });
        if (e.length === 0) {
            return false
        }
        a.text = String.format(_T("routerconf", "routerconf_port_conflict"), e.join(" "));
        if (Ext.isFunction(b)) {
            b.call(c || this, a)
        } else {
            this.reportFailure(a)
        }
        return true
    },
    getRules: function() {
        var e = [];
        var c = 0,
            b = 0;
        var a = ["enabled", "sourcePort", "targetIP", "targetPort", "protocol", "service"];
        var d = null;
        for (c = 0; c < this.getCount(); c++) {
            d = {
                id: c
            };
            for (b = 0; b < a.length; b++) {
                d[a[b]] = this.getAt(c).get(a[b])
            }
            e.push(d)
        }
        return e
    },
    isDirty: function() {
        return this.isRuleChanged || this.getModifiedRecords().length > 0
    },
    clearDirty: function() {
        this.commitChanges();
        this.isRuleChanged = false
    },
    reportFailure: function(a) {
        if (a.alert) {
            this.module.appWin.getMsgBox().alert(this.module.getPanel().title, a.text)
        } else {
            this.module.appWin.setStatusError(a)
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.DMZDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var c;
        this.parentForm = b.parentForm;
        var a = Ext.apply({
            title: _T("dmz", "dmz_setting"),
            autoDestroy: true,
            width: 450,
            height: 215,
            layout: "fit",
            border: false,
            items: [this.configForm({
                border: false,
                itemId: "formpanel"
            })],
            buttons: [{
                disabled: this.parentForm._S("demo_mode"),
                tooltip: this.parentForm._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "alt_apply"),
                scope: this,
                handler: this.onAddDMZ
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a]);
        c = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "dmz_switch", ["dmz_ip"])
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            trackResetOnLoad: true,
            synodefaults: {
                width: 200
            },
            headline: _T("dmz", "dmz_setting"),
            items: [{
                xtype: "syno_displayfield",
                value: '<font class="red-status">' + _T("dmz", "dmz_hint") + "</font>"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("dmz", "dmz_switch"),
                maxlength: 256,
                name: "dmz_switch"
            }, {
                xtype: "syno_textfield",
                indent: 1,
                fieldLabel: _T("dmz", "dmz_host_ip"),
                allowBlank: false,
                maxlength: 32,
                name: "dmz_ip",
                validator: this.checkValidDmzIp.createDelegate(this)
            }]
        }, a))
    },
    getForm: function() {
        return this.getComponent("formpanel").getForm()
    },
    checkValidDmzIp: function(b) {
        var a = _T("dmz", "dmz_host_ip_err");
        Ext.each(this.parentForm.local_lan, function(c) {
            if (SYNO.SDS.Utils.Network.GatewayMatchIP(b, c.ip, c.mask)) {
                a = true;
                return false
            }
        });
        return a
    },
    onOpen: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.DMZ",
            method: "get",
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (!c) {
                    return
                }
                if (b) {
                    this.getForm().setValues({
                        dmz_switch: b.enable,
                        dmz_ip: b.ip
                    })
                }
            }
        });
        this.callParent([arguments])
    },
    onAddDMZ: function() {
        if (!this.getForm().isValid()) {
            return
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.DMZ",
            method: "set",
            params: {
                enable: this.getForm().findField("dmz_switch").getValue(),
                ip: this.getForm().findField("dmz_ip").getValue()
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (!c) {
                    this.setStatusError({
                        text: _T("dmz", "dmz_err")
                    })
                } else {
                    this.close()
                }
            }
        });
        return true
    },
    onCancel: function() {
        if (this.getForm().isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RuleGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.appWin = b.module.appWin;
        this.local_lan = [];
        var c = this.createColumnModel();
        var a = Ext.apply({
            width: 600,
            height: 300,
            frame: false,
            border: false,
            title: _T("tree", "leaf_routerconf"),
            cm: c,
            plugins: c.config[0],
            autoExpandColumn: "service",
            enableHdMenu: false,
            loadMask: false,
            cls: "without-dirty-red-grid",
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: this.checkOnSelectionChanged,
                    scope: this
                }
            }),
            store: new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RuleStore({
                module: this.module,
                appWin: this.appWin,
                grid: this
            }),
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "create"),
                handler: this.onCreateRule,
                scope: this,
                itemId: "create"
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_edit"),
                handler: this.onCreateRule,
                scope: this,
                itemId: "edit"
            }, {
                xtype: "syno_button",
                text: _T("common", "delete"),
                handler: this.onDeleteRule,
                scope: this,
                itemId: "del"
            }, {
                xtype: "syno_button",
                text: _T("common", "save"),
                handler: this.onSave,
                scope: this,
                itemId: "save"
            }, {
                xtype: "syno_button",
                text: _T("dmz", "dmz_setting"),
                handler: this.onCreateDMZ,
                scope: this,
                itemId: "dmz"
            }],
            listeners: {
                scope: this,
                activate: this.onActivate,
                deactivate: this.onDeactivate
            }
        }, b);
        this.callParent([a])
    },
    createColumnModel: (function() {
        var d = {
            tcp: _T("routerconf", "routerconf_protocol_tcp"),
            udp: _T("routerconf", "routerconf_protocol_udp")
        };
        var c = {
            qtip: function(f, e) {
                e.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                return f
            },
            protocol: function(f, e) {
                if (f in d) {
                    return d[f]
                } else {
                    return "-"
                }
            }
        };
        var b = new SYNO.ux.EnableColumn({
            header: _T("routerconf", "routerconf_header_enabled"),
            dataIndex: "enabled",
            width: 80,
            align: "center",
            commitChanges: false
        });
        var a = [b, {
            header: _T("routerconf", "routerconf_header_service"),
            id: "service",
            dataIndex: "service",
            width: 150,
            align: "left",
            renderer: c.qtip
        }, {
            header: _T("port_fwd", "port_fwd_source_port"),
            dataIndex: "sourcePort",
            width: 120,
            align: "left",
            renderer: c.qtip
        }, {
            header: _T("port_fwd", "port_fwd_target_port"),
            dataIndex: "targetPort",
            width: 120,
            align: "left",
            renderer: c.qtip
        }, {
            header: _T("port_fwd", "port_fwd_target_ip"),
            dataIndex: "targetIP",
            width: 150,
            align: "left",
            renderer: c.qtip
        }, {
            header: _T("routerconf", "routerconf_header_protocol"),
            dataIndex: "protocol",
            width: 60,
            align: "center",
            renderer: c.protocol
        }];
        return function() {
            return new Ext.grid.ColumnModel(a)
        }
    }()),
    initEvents: function() {
        this.callParent([arguments]);
        this.mon(this.getStore(), "update", this.checkOnRuleChanged, this);
        this.mon(this, "rowdblclick", this.onRowDblClick, this)
    },
    getHelpParam: function() {
        return "AdminCenter/connection_routerconf.html"
    },
    getButton: function(a) {
        var b = this.getTopToolbar();
        return b.getComponent(a)
    },
    enableButton: function(d, a) {
        var b = this.getButton(d);
        var c;
        if (!Ext.isObject(b)) {
            SYNO.Debug("enableButton failed: no button object of ", d);
            return
        }
        c = a ? b.enable() : b.disable()
    },
    disableAllButton: function() {
        Ext.each(["create", "edit", "del", "save"], function(a) {
            this.getButton(a).disable()
        }, this)
    },
    isDirty: function() {
        return this.getStore().isDirty()
    },
    clearDirty: function() {
        this.getStore().clearDirty()
    },
    checkOnRuleChanged: function() {
        this.getButton("create").enable();
        this.enableButton("save", this.isDirty());
        if ("router" !== this._S("net_topology")) {
            this.disable();
            this.getEl().mask("Could not set port forwarding in " + this._S("net_topology") + " mode.", "syno-ux-mask-info")
        }
    },
    checkOnSelectionChanged: function(a) {
        if (0 < a.getCount()) {
            this.enableButton("del", true);
            this.enableButton("edit", true)
        } else {
            this.enableButton("del", false);
            this.enableButton("edit", false)
        }
    },
    onActivate: function() {
        if (this.isDirty()) {
            return
        }
        this.disableAllButton();
        this.module.appWin.setStatusBusy();
        this.createPollingTask();
        this.getStore().load({
            callback: function() {
                this.module.appWin.clearStatusBusy();
                this.checkOnRuleChanged()
            },
            scope: this
        })
    },
    onDeactivate: function() {
        this.getSelectionModel().clearSelections();
        this.deletePollingTask();
        this.el.unmask();
        this.getView().el.unmask();
        return true
    },
    onRowDblClick: function() {
        var b = "edit";
        var a = {
            itemId: b
        };
        this.onCreateRule(a)
    },
    onCreateRule: function(a, b) {
        var c = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.AddRuleDialog({
            module: this.module,
            owner: this.module.appWin,
            mode: a.itemId,
            isSupportChangePort: true,
            parentForm: this
        });
        c.open()
    },
    onDeleteRule: function() {
        var b = this.getSelectionModel().getSelections();
        var a = this.getStore();
        var c = 0;
        for (c = 0; c < b.length; c++) {
            a.remove(b[c])
        }
    },
    onSave: function() {
        if (this.getStore().isConflict(this.getStore().getUsedPortStrings())) {
            SYNO.Debug("conflict");
            return false
        }
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.getSelectionModel().clearSelections();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.PortForward",
            method: "set",
            params: {
                rules: JSON.parse(JSON.stringify(this.getStore().getRules()))
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    this.module.appWin.clearStatusBusy();
                    return
                }
                this.clearDirty();
                this.disableAllButton();
                this.getStore().load();
                this.checkOnRuleChanged();
                this.module.appWin.clearStatusBusy()
            }
        })
    },
    onCreateDMZ: function() {
        var a = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.DMZDialog({
            module: this.module,
            owner: this.module.appWin,
            parentForm: this
        });
        a.open()
    },
    createPollingTask: function() {
        if (this.pollId) {
            return
        }
        this.pollId = this.pollReg({
            webapi: {
                api: "SYNO.Core.Network.Router.LocalLan",
                version: 1,
                method: "get"
            },
            interval: 5,
            immediate: true,
            scope: this,
            status_callback: function(b, a) {
                if (!b) {
                    SYNO.Debug("Failed on getting local lan");
                    return
                }
                this.local_lan = a.local_lan
            }
        })
    },
    deletePollingTask: function() {
        if (!this.pollId) {
            return
        }
        this.pollUnreg(this.pollId);
        this.pollId = null
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SetupStatusUpdater", {
    extend: "Object",
    regReset: function() {
        this.detectStatusConfDone = false
    },
    constructor: function(a) {
        this.setupStatusHandler = null;
        this.scope = null;
        if (!a.owner || !a.setupStatusHandler || !a.scope) {
            throw Error("SetupStatusUpdater constructor failed")
        }
        this.owner = a.owner;
        this.module = a.module;
        this.setupStatusHandler = a.setupStatusHandler;
        this.scope = a.scope;
        this.detectStatusConfDone = false
    },
    getDetectStatusConf: function(a) {
        return {
            interval: 1,
            immediate: false,
            webapi: {
                api: "SYNO.Core.PortForwarding",
                version: 1,
                method: "detect_status",
                params: {
                    task_id: a
                }
            },
            status_callback: function(e, c, d, b) {
                if (!e) {
                    this.detecStatusErrorHandler(c);
                    return
                }
                if (!c.percentage || !c.status) {
                    throw Error("webapi shall return processing and status")
                }
                this.detectStatusConfDone = true;
                if (this.isAllDone()) {
                    this.setupStatusHandler.call(this.scope, b, e, c)
                }
            },
            scope: this
        }
    },
    isAllDone: function() {
        if (!this.detectStatusConfDone) {
            return false
        }
        return true
    },
    Start: function(a) {
        this.Stop();
        this.regReset();
        this.detectStatusConf = this.getDetectStatusConf(a);
        this.detectStatusPollId = this.owner.pollReg(this.detectStatusConf)
    },
    isStop: function() {
        return !this.detectStatusPollId
    },
    Stop: function() {
        this.owner.pollUnreg(this.detectStatusPollId);
        this.detectStatusPollId = null;
        this.regReset()
    },
    detecStatusErrorHandler: function(b) {
        var a = "";
        this.Stop();
        if (!b || !b.code) {
            SYNO.Debug("detecStatusErrorHandler failed");
            a = _T("common", "error_system")
        } else {
            a = SYNO.API.getErrorString(b.code)
        }
        this.module.getMsgBox().alert(this.title, a);
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.closeOrFireFailEvent.call(this.scope, true);
        return
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RouterWizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.strDetectTaskId = null;
        this.pollDetectRegId = null;
        this.setup_status_updater = null;
        var a = Ext.apply({
            title: _T("routerconf", "routerconf_setup_router"),
            autoDestroy: true,
            width: 610,
            height: 540,
            layout: "fit",
            border: false,
            dsmStyle: "v5",
            steps: [new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.EmptyStep({
                itemId: "emptyform",
                owner: this,
                nextId: ["upnpform", "natpmpform", "portfwform", "uradioform", "radioform"]
            }), new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RadioStep({
                itemId: "uradioform",
                nextId: ["upnpform", "portfwform"]
            }), new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.UPnPStep({
                itemId: "upnpform",
                owner: this,
                nextId: null
            }), new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortFWStep({
                itemId: "portfwform",
                owner: this,
                nextId: null
            }), new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RadioStep({
                itemId: "radioform",
                nextId: ["testform", "portfwform"]
            }), new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.NatpmpStep({
                itemId: "natpmpform",
                owner: this,
                nextId: null
            }), new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.TestStep({
                itemId: "testform",
                owner: this,
                nextId: ["upnpform", "portfwform"]
            })]
        }, b);
        this.callParent([a])
    },
    onOpen: function(a) {
        this.callParent(arguments);
        if (Ext.isDefined(a)) {
            this.callback = a.callback;
            this.cbscope = a.scope
        } else {
            this.callback = Ext.emptyFn;
            this.cbscope = this
        }
    },
    reportFailure: function(b) {
        var a = b || {};
        var c = a.msg || _T("common", "loadsetting_fail");
        c += "<br><br>" + _T("common", "reload_res") + "?";
        this.getMsgBox().confirm(this.title, c, function(e, d, f) {
            if ("yes" === e && Ext.isFunction(a.yesfn)) {
                a.yesfn.apply(a.scope || this, a.args || [])
            } else {
                if ("no" === e && Ext.isFunction(a.nofn)) {
                    a.nofn.apply(a.scope || this, a.args || [])
                }
            }
        }, this);
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.EmptyStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(b) {
        if (!b.owner) {
            throw Error("EmptyStep constructor failed")
        }
        this.owner = b.owner;
        this.hasDetected = false;
        this.detectResult = {};
        this.obj = null;
        this.hasWarning = false;
        this.hasError = false;
        this.hasNote = false;
        var a = this.configForm({
            module: this.owner,
            headline: _T("routerconf", "detect_router"),
            description: _T("routerconf", "routerconf_setup_router")
        }, b);
        Ext.apply(a, b);
        this.callParent([a])
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            trackResetOnLoad: true,
            synodefaults: {
                width: 200
            },
            items: [{
                xtype: "syno_displayfield",
                value: _T("confbackup", "bkp_export_prepare")
            }, {
                xtype: "listview",
                itemId: "test_list",
                hideHeaders: true,
                trackOver: false,
                columns: [{
                    width: 0.04,
                    header: _T("pkgmgr", "pkgmgr_pkg_status"),
                    dataIndex: "field1",
                    align: "center"
                }, {
                    header: _T("status", "header_item"),
                    dataIndex: "field2"
                }],
                draggable: false,
                enableColumnMove: false,
                overClass: "",
                cls: "syno-portforwarding-listitem",
                store: [
                    ["", ""]
                ]
            }, {
                xtype: "syno_displayfield",
                value: ""
            }, {
                xtype: "syno_displayfield",
                value: ""
            }, {
                xtype: "syno_displayfield",
                name: "gateway_setting_warning",
                value: ""
            }, {
                xtype: "syno_displayfield",
                name: "get_hops_warnings",
                value: ""
            }, {
                xtype: "syno_displayfield",
                name: "detect_result"
            }]
        }, a))
    },
    activate: function() {
        this.owner.setStatusBusy();
        this.loadForm()
    },
    loadForm: function() {
        if (this._S("demo_mode")) {
            this.owner.goNext("portfwform", false);
            return
        }
        if (!this.hasDetected) {
            this.sendDetectWebAPI()
        } else {
            this.setupStatusHandler(this.detectResult.opt, this.detectResult.success, this.detectResult.resp)
        }
    },
    renderStatus: function(a) {
        var b = {
            processing: '<div class="x-status-loading">&nbsp;</div>',
            unknown: "-",
            success: '<div class="x-status-success">&nbsp;</div>',
            warning: '<div class="x-status-warning">&nbsp;</div>',
            failed: '<div class="x-status-fail">&nbsp;</div>',
            stop: "-",
            initial: ""
        };
        if (a in b) {
            return b[a]
        } else {
            return "-"
        }
    },
    sendDetectWebAPI: function() {
        var a = this;
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.detect.call(this, {
            success_callback: function(d, c, b) {
                a.strDetectTaskId = c.task_id;
                a.setupStatusUpdate()
            }
        })
    },
    setupStatusUpdate: function() {
        if (!this.setup_status_updater) {
            var b = this.owner;
            var a = b.owner;
            this.setup_status_updater = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SetupStatusUpdater({
                owner: b,
                module: a ? a : b,
                setupStatusHandler: this.setupStatusHandler,
                scope: this
            })
        }
        if (this.setup_status_updater.isStop()) {
            this.setup_status_updater.Start(this.strDetectTaskId)
        }
    },
    renderItems: function(b) {
        var a = {
            check_interface_enable_step: _T("routerconf", "check_network_interface_enabled"),
            check_gateway_setting_step: _T("routerconf", "check_gateway_setting"),
            check_connect_wan_step: _T("routerconf", "check_connect_to_wan"),
            check_dns_setting_step: _T("routerconf", "check_dns_setting"),
            check_hops_lan2wan_step: _T("routerconf", "check_lan2wan_gateway_hops"),
            detect_router_step: _T("routerconf", "detect_router")
        };
        if (b in a) {
            return a[b]
        } else {
            return "-"
        }
    },
    callHelp: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.HelpBrowser.Application", {
            topic: "SYNO.SDS.AdminCenter.Application:AdminCenter/connection_routerconf.html"
        }, false)
    },
    replaceStringParamToCallHelp: function(a) {
        var b = String.format(a, '<a href="javascript: void(0)" onclick="SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.EmptyStep.prototype.callHelp()">', "</a>");
        return b
    },
    getRenderedErrorString: function(b) {
        var a = this.replaceStringParamToCallHelp(b);
        a = '<span class="red-status">' + _T("error", "error_error") + ": " + a + "</span>";
        return a
    },
    getRenderedWarningString: function(b) {
        var a = this.replaceStringParamToCallHelp(b);
        a = '<span class="orange-status">' + _T("log", "warn_level") + ": " + a + "</span>";
        return a
    },
    getRenderedNoteString: function(b) {
        var a = '<span class="green-status">' + _T("common", "note") + "</span>";
        a = a + ": " + b;
        return a
    },
    getRenderedSuccessString: function(a) {
        var b = '<span class="green-status">' + _T("report", "status_success") + ": " + a + "</span>";
        return b
    },
    setErrorString: function(b) {
        var a = this.getRenderedErrorString(b);
        this.getForm().findField("detect_result").setValue(a);
        this.hasError = true
    },
    renderCheckNetworkInterfaceStatus: function(a, d) {
        var c = "";
        var b = "";
        if (!d.progress.check_interface_enable_step.network_interface) {
            SYNO.Debug("resp.progress.check_interface_enable_step.network_interface is empty");
            return
        }
        b = SYNO.SDS.Utils.Network.idToString.call(this, d.progress.check_interface_enable_step.network_interface, "");
        c = this.renderItems("check_interface_enable_step");
        if (d.progress.check_interface_enable_step.network_interface) {
            c = c + ', <span class="green-status">' + b + "</span>"
        }
        a.push([this.renderStatus(d.progress.check_interface_enable_step.status), c]);
        if (d.progress.check_interface_enable_step.status == "failed") {
            this.setErrorString(_T("routerconf", "warn_interface_not_enabled"))
        }
    },
    renderCheckGatewaySettingStatus: function(b, d) {
        var c = "";
        var a = "";
        c = this.renderItems("check_gateway_setting_step");
        if (d.progress.check_gateway_setting_step.gateway_ip) {
            c = c + ', <span class="green-status">' + d.progress.check_gateway_setting_step.gateway_ip + "</span>"
        }
        b.push([this.renderStatus(d.progress.check_gateway_setting_step.status), c]);
        if (d.progress.check_gateway_setting_step.status == "warning") {
            a = this.getRenderedWarningString(_T("routerconf", "gateway_setting_not_exist"));
            this.getForm().findField("gateway_setting_warning").setValue(a);
            this.hasWarning = true
        }
    },
    renderCheckConnectWANStatus: function(a, b) {
        a.push([this.renderStatus(b.progress.check_connect_wan_step.status), this.renderItems("check_connect_wan_step")]);
        if (b.progress.check_connect_wan_step.status == "failed") {
            this.setErrorString(_T("routerconf", "network_not_connect_to_wan"))
        }
    },
    renderCheckHopsLAN2WAN: function(b, c) {
        var a = "";
        b.push([this.renderStatus(c.progress.check_hops_lan2wan_step.status), this.renderItems("check_hops_lan2wan_step")]);
        if (c.progress.check_hops_lan2wan_step.status == "warning" && c.progress.check_hops_lan2wan_step.warning_type == "get_hops_fail") {
            a = this.getRenderedWarningString(_T("routerconf", "cant_get_lan2wan_gateway_hops"));
            this.getForm().findField("get_hops_warnings").setValue(a);
            this.hasWarning = true
        } else {
            if (c.progress.check_hops_lan2wan_step.status == "warning" && c.progress.check_hops_lan2wan_step.warning_type == "hops_over_one") {
                a = this.getRenderedWarningString(_T("routerconf", "lan2wan_gateway_hops_over_one"));
                this.getForm().findField("get_hops_warnings").setValue(a);
                this.hasWarning = true
            }
        }
    },
    renderCheckDNSSetting: function(a, b) {
        a.push([this.renderStatus(b.progress.check_dns_setting_step.status), this.renderItems("check_dns_setting_step")]);
        if (b.progress.check_dns_setting_step.status == "failed") {
            this.setErrorString(_T("routerconf", "dns_setting_cant_resolve_public_FQDN"))
        }
    },
    renderDetectRouter: function(b, c) {
        var a = "";
        b.push([this.renderStatus(c.progress.detect_router_step.status), this.renderItems("detect_router_step")]);
        if (c.status == "success") {
            if (c.support_upnp && c.support_natpmp) {
                if ((c.support_upnp == "unknown") || (c.support_change_port === "unknown")) {
                    a = this.getRenderedNoteString(_T("routerconf", "detect_router_fail_not_in_db"));
                    this.getForm().findField("detect_result").setValue(a);
                    this.hasNote = true
                } else {
                    if (c.support_upnp == "no" && c.support_natpmp == "no") {
                        if (!c.router_brand && !c.router_model && !c.router_version) {
                            a = this.getRenderedNoteString(_T("routerconf", "detect_router_fail_no_resp"));
                            this.getForm().findField("detect_result").setValue(a);
                            this.hasNote = true
                        } else {
                            a = this.getRenderedNoteString(_T("routerconf", "detect_router_fail_not_support"));
                            this.getForm().findField("detect_result").setValue(a);
                            this.hasNote = true
                        }
                    } else {
                        if (c.support_upnp == "yes" || c.support_natpmp == "yes") {
                            if (this.isAutoJumpToNextStep(c)) {
                                a = this.getRenderedSuccessString(_T("routerconf", "detect_router_success"));
                                this.getForm().findField("detect_result").setValue(a)
                            }
                        } else {
                            SYNO.Debug("renderDetectRouter, impossible here");
                            this.hasError = true
                        }
                    }
                }
            }
        }
    },
    setDisable: function() {
        var a = this.owner.getButton("back");
        if (a) {
            a.disable()
        }
        this.owner.getButton("next").disable();
        this.owner.getButton("cancel").disable();
        this.owner.tools.close.setDisplayed(false)
    },
    setEnable: function() {
        var a = this.owner.getButton("back");
        if (a) {
            a.enable()
        }
        if (this.isAbleToEnableNextButton()) {
            this.owner.getButton("next").enable()
        }
        this.owner.getButton("cancel").enable();
        this.owner.tools.close.setDisplayed(true)
    },
    setupStatusHandler: function(b, f, e) {
        var c, d, g;
        var a = [];
        this.owner.clearStatusBusy();
        this.setDisable();
        if (!e) {
            SYNO.Debug("resp is empty");
            return
        }
        if (!e.progress) {
            SYNO.Debug("resp.progress is empty");
            return
        }
        this.renderCheckNetworkInterfaceStatus(a, e);
        this.renderCheckGatewaySettingStatus(a, e);
        this.renderCheckConnectWANStatus(a, e);
        this.renderCheckHopsLAN2WAN(a, e);
        this.renderCheckDNSSetting(a, e);
        this.renderDetectRouter(a, e);
        this.getComponent("test_list").getStore().loadData(a, false);
        c = e;
        d = "";
        if ("success" === c.status) {
            if (this.hasError) {
                this.setDisable();
                this.owner.getButton("cancel").enable()
            } else {
                this.setEnable()
            }
            this.setup_status_updater.Stop();
            this.obj = c;
            if (!this.hasDetected) {
                this.hasDetected = true;
                this.detectResult.opt = b;
                this.detectResult.success = f;
                this.detectResult.resp = e
            }
            this.owner.getStep("upnpform").getForm().setValues(c);
            if (!c.upnp_pfpath) {
                SYNO.SDS.Utils.DisplayField(this.owner.getStep("upnpform").getForm(), "router_protocol", false);
                SYNO.SDS.Utils.DisplayField(this.owner.getStep("upnpform").getForm(), "router_port", false);
                SYNO.SDS.Utils.DisplayField(this.owner.getStep("upnpform").getForm(), "router_use_custom", false);
                SYNO.SDS.Utils.DisplayField(this.owner.getStep("upnpform").getForm(), "router_account", false);
                SYNO.SDS.Utils.DisplayField(this.owner.getStep("upnpform").getForm(), "router_password", false);
                SYNO.SDS.Utils.DisplayField(this.owner.getStep("upnpform").getForm(), "router_password_confirm", false)
            }
            this.owner.getStep("natpmpform").getForm().setValues(c);
            this.owner.getStep("radioform").getForm().setValues(c);
            this.owner.getStep("uradioform").getForm().setValues(c);
            this.owner.getStep("portfwform").getForm().setValues(c);
            g = _T("routerconf", "routerconf_upnp_firewall_warning2");
            if (true === this.firewall_enabled) {
                this.owner.getMsgBox().confirm(_T("common", "note"), g, function(h) {
                    if ("yes" === h) {
                        if (this.isAutoJumpToNextStep(c)) {
                            this.nextStep(c)
                        }
                    } else {
                        if (this.isAutoJumpToNextStep(c)) {
                            this.nextStep(c)
                        }
                    }
                }, this)
            } else {
                if (this.isAutoJumpToNextStep(c)) {
                    this.nextStep(c)
                }
            }
            return
        } else {}
        return
    },
    isAbleToEnableNextButton: function() {
        if (this.hasError) {
            return false
        } else {
            return true
        }
    },
    isAutoJumpToNextStep: function(a) {
        if (this.hasWarning || this.hasError || this.hasNote) {
            return false
        }
        if ("yes" === a.support_natpmp || "yes" === a.support_upnp) {
            return true
        } else {
            return false
        }
    },
    nextStep: function(b) {
        var a;
        this.owner.clearStatusBusy();
        if ("yes" === b.support_natpmp) {
            a = "natpmpform"
        } else {
            if (("unknown" === b.support_change_port) || ("unknown" === b.support_upnp)) {
                a = "radioform"
            } else {
                if ("yes" === b.support_upnp) {
                    a = "upnpform"
                } else {
                    if ("yes" === b.support_change_port) {
                        a = "uradioform"
                    } else {
                        a = "portfwform"
                    }
                }
            }
        }
        if (0 === this.owner.stepStack.size()) {
            this.owner.getButton("back").hide()
        }
        this.owner.goNext(a, true)
    },
    onCancel: function() {
        if (this.owner.getStep(this.layout.activeItem.itemId).form.isDirty()) {
            this.owner.getMsgBox().confirm(this.owner.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.owner.close()
                }
            }, this);
            return
        }
        this.owner.close()
    },
    ajaxErrorHandler: function(a) {
        this.owner.getMsgBox().alert(this.title, a)
    },
    getNext: function() {
        this.nextStep(this.obj);
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RadioStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(b) {
        var a = Ext.apply({
            trackResetOnLoad: true,
            headline: _T("ezinternet", "ezinternet_router_conf_title"),
            description: _T("routerconf", "routerconf_portmapping_method"),
            labelWidth: 200,
            synodefaults: {
                width: 200
            },
            border: false,
            items: this.configForm()
        }, b);
        this.callParent([a])
    },
    configForm: function(a) {
        return [{
            xtype: "syno_radio",
            indent: 1,
            boxLabel: _T("routerconf", "routerconf_upnp"),
            name: "portmapping_type",
            inputValue: 0,
            checked: true,
            scope: this
        }, {
            xtype: "syno_displayfield",
            indent: 2,
            value: _T("routerconf", "routerconf_test_upnp_router")
        }, {
            xtype: "syno_displayfield",
            fieldLabel: _T("routerconf", "routerconf_brand"),
            name: "router_brand",
            indent: 2,
            width: 360,
            value: ""
        }, {
            xtype: "syno_displayfield",
            fieldLabel: _T("routerconf", "routerconf_model"),
            name: "router_model",
            indent: 2,
            width: 360,
            value: ""
        }, {
            xtype: "syno_displayfield",
            fieldLabel: _T("routerconf", "routerconf_version"),
            name: "router_version",
            indent: 2,
            width: 360
        }, {
            xtype: "syno_radio",
            indent: 1,
            boxLabel: _T("routerconf", "routerconf_portforward"),
            name: "portmapping_type",
            inputValue: 1,
            scope: this
        }, {
            xtype: "syno_displayfield",
            indent: 2,
            value: _T("routerconf", "routerconf_portforward_long")
        }]
    },
    checkState: function() {
        SYNO.SDS.Wizard.Step.prototype.checkState.call(this)
    },
    getNext: function() {
        var a = this.getForm().getValues().portmapping_type;
        return this.nextId[a]
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortFWStep", {
    extend: "SYNO.ux.FormPanel",
    initEvents: function() {
        var a;
        this.callParent(arguments);
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortFWStep.superclass.initEvents.apply(this, arguments);
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "router_use_custom", ["router_account", "router_password", "router_password_confirm"])
    },
    constructor: function(b) {
        if (!b.owner) {
            SYNO.Debug("PortFWStep constructor failed, due to no owner")
        }
        this.owner = b.owner;
        var a = this.configForm({
            headline: _T("ezinternet", "ezinternet_port_fwd_title"),
            description: _T("routerconf", "routerconf_setup_router_desc"),
            autoFlexcroll: false,
            labelWidth: 200
        });
        Ext.apply(a, b);
        this.callParent([a])
    },
    activate: function() {
        this.form.findField("router_list").on("select", function(c, a, b) {
            this.form.findField("router_brand").setValue(a.get("router_brand"));
            this.form.findField("router_model").setValue(a.get("router_model"));
            this.form.findField("router_version").setValue(a.get("router_version"));
            if (this._S("demo_mode")) {
                this.owner.getButton("next").disable();
                this.owner.getButton("next").setTooltip(_JSLIBSTR("uicommon", "error_demo"))
            }
        }, this);
        this.loadRouterList();
        this.doLayout()
    },
    loadRouterList: function() {
        this.owner.setStatusBusy();
        this.router_store.load({
            callback: function(b, a, c) {
                this.owner.clearStatusBusy();
                if (!c) {
                    this.owner.reportFailure({
                        yesfn: this.loadRouterList,
                        nofn: this.close,
                        msg: _T("routerconf", "routerconf_router_list_error"),
                        scope: this
                    })
                }
            },
            scope: this,
            add: false
        })
    },
    onAfterLoad: function(b, a, c) {
        for (var d = 0; d < b.getCount(); d++) {
            var e = b.getAt(d);
            if (e.get("generic")) {
                e.set("value", e.get("router_brand") + ": " + e.get("router_model"))
            } else {
                e.set("value", e.get("router_brand") + ": " + e.get("router_model") + "(" + e.get("router_version") + ")")
            }
        }
        b.commitChanges()
    },
    configForm: function(a) {
        this.router_store = new SYNO.API.JsonStore({
            api: "SYNO.Core.PortForwarding.RouterList",
            appWindow: this.owner,
            method: "list",
            version: 1,
            autoDestroy: true,
            root: "routers",
            fields: ["value", "router_brand", "router_model", "router_version", "generic"],
            listeners: {
                beforeload: function() {},
                load: this.onAfterLoad,
                scope: this
            }
        });
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            trackResetOnLoad: true,
            labelWidth: 200,
            border: false,
            items: [{
                indent: 0,
                xtype: "compositefield",
                fieldLabel: _T("routerconf", "routerconf_router_type"),
                width: 380,
                items: [{
                    width: 200,
                    xtype: "syno_combobox",
                    name: "router_list",
                    forceSelection: true,
                    selectOnFocus: true,
                    editable: true,
                    listWidth: 375,
                    resizable: true,
                    allowBlank: false,
                    emptyText: _T("routerconf", "routerconf_select_router"),
                    store: this.router_store,
                    valueField: "value",
                    displayField: "value"
                }, {
                    disabled: this._S("demo_mode"),
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    xtype: "syno_button",
                    text: _T("routerconf", "routerconf_update_router_list"),
                    handler: this.updateRouterDB,
                    scope: this
                }, {
                    xtype: "box",
                    html: "<img src=" + SYNO.SDS.UIFeatures.IconSizeManager.getIconPath("/webman/resources/images/components/icon_information_mini.png", "") + ' width=24 height=24 style="vertical-align:bottom;" border="0" ext:qtip="' + Ext.util.Format.htmlEncode(_T("routerconf", "routerconf_router_warning")) + '">'
                }]
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("routerconf", "routerconf_manager_protocol"),
                name: "router_protocol",
                width: 80,
                store: new Ext.data.JsonStore({
                    fields: ["name", "value", "port"],
                    data: [{
                        name: "HTTP",
                        value: "http",
                        port: 80
                    }, {
                        name: "HTTPS",
                        value: "https",
                        port: 443
                    }]
                }),
                value: "http",
                displayField: "name",
                valueField: "value",
                listeners: {
                    select: function(c, e, b) {
                        var d = this.ownerCt.getComponent("router_port");
                        d.setValue(e.get("port"))
                    }
                }
            }, {
                xtype: "syno_numberfield",
                fieldLabel: _T("routerconf", "routerconf_manager_port"),
                name: "router_port",
                maxlangth: 5,
                itemId: "router_port",
                value: 80,
                vtype: "port"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("routerconf", "routerconf_custom_account"),
                name: "router_use_custom"
            }, {
                xtype: "syno_textfield",
                indent: 1,
                fieldLabel: _T("routerconf", "routerconf_manager_account"),
                name: "router_account"
            }, {
                xtype: "syno_textfield",
                indent: 1,
                textType: "password",
                fieldLabel: _T("routerconf", "routerconf_manager_password"),
                name: "router_password"
            }, {
                xtype: "syno_textfield",
                indent: 1,
                textType: "password_confirm",
                fieldLabel: _T("service", "service_ddns_passwd_confirm"),
                name: "router_password_confirm",
                confirmFor: "router_password"
            }, {
                xtype: "syno_displayfield",
                value: String.format("<p>&nbsp;</p><p>{0}</p>", _T("ezinternet", "ezinternet_router_info"))
            }, {
                xtype: "hidden",
                name: "support_natpmp"
            }, {
                xtype: "hidden",
                name: "support_upnp"
            }, {
                xtype: "hidden",
                name: "router_brand"
            }, {
                xtype: "hidden",
                name: "router_model"
            }, {
                xtype: "hidden",
                name: "router_version"
            }]
        }, a))
    },
    getNext: function() {
        if (!this.checkData()) {
            return false
        }
        this.popWarning(this.savePWRouterInfo, this);
        return false
    },
    checkData: function() {
        var a = this.getForm();
        if (!a.isValid()) {
            return false
        }
        if (!a.isDirty()) {
            return null
        }
        return true
    },
    popWarning: function(c, a) {
        var b = this.getForm();
        if (!(b.findField("router_use_custom").getValue() && (b.findField("router_use_custom").isDirty() || b.findField("router_account").isDirty() || b.findField("router_password").isDirty()))) {
            c.call(a);
            if (this.nextId) {
                this.owner.goNext(this.nextId, true)
            }
            return
        }
        this.owner.getMsgBox().confirm(this.owner.title, _T("routerconf", "routerconf_custom_warning"), function(d) {
            if ("yes" === d) {
                c.call(a, true);
                if (this.nextId) {
                    this.owner.goNext(this.nextId, true)
                }
            }
        }, this)
    },
    savePWRouterInfo: function() {
        this.owner.setStatusBusy({
            text: _T("common", "saving")
        });
        var a = {
            router_brand: this.form.findField("router_brand").getValue(),
            router_model: this.form.findField("router_model").getValue(),
            router_version: this.form.findField("router_version").getValue(),
            router_protocol: this.form.findField("router_protocol").getValue(),
            router_port: this.form.findField("router_port").getValue(),
            support_upnp: "no",
            support_natpmp: "no"
        };
        if (this.form.findField("router_use_custom").getValue()) {
            a.router_account = this.form.findField("router_account").getValue();
            a.router_pass = this.form.findField("router_password").getValue()
        }
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.saveRouterConf.call(this, {
            retryTimes: 5,
            params: a
        })
    },
    updateRouterDB: function() {
        this.owner.setStatusBusy();
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.updateDb.call(this, {
            success_callback: function(c, b, a) {
                this.owner.clearStatusBusy();
                if (0 === b.router_version) {
                    this.owner.getMsgBox().alert(this.title, _T("routerconf", "routerconf_update_nochange"))
                } else {
                    this.loadRouterList();
                    this.owner.getMsgBox().alert(this.title, String.format(_T("routerconf", "routerconf_update_success"), b.router_version))
                }
            },
            failure_callback: function(c, b, a) {
                this.owner.clearStatusBusy();
                this.owner.reportFailure({
                    msg: _T("routerconf", "routerconf_update_db_failed"),
                    yesfn: this.updateRouterDB,
                    scope: this
                })
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI", {
    extend: "Object",
    constructor: function() {},
    closeOrFireFailEvent: function(a) {
        if (this.owner.owner) {
            this.owner.close()
        } else {
            if (a) {
                this.fireEvent("disableNextStep", this)
            }
        }
    },
    fireSuccess: function() {
        if (this.owner.owner) {
            this.owner.close()
        } else {
            this.fireEvent("enableNextStep", this)
        }
    },
    saveRouterConf: function(a) {
        if (!a) {
            throw Error("SendWebAPI saveRouterConf cfg null")
        }
        if (undefined === a.retryTimes) {
            throw Error("SendWebAPI saveRouterConf cfg.retryTimes null")
        }
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding.RouterConf",
            version: 1,
            method: "set",
            params: a.params,
            callback: function(f, e, d) {
                if (f) {
                    this.owner.clearStatusBusy();
                    if (this.owner.callback && this.owner.cbscope) {
                        this.owner.callback.call(this.owner.cbscope)
                    }
                    SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.fireSuccess.call(this);
                    SYNO.Debug("save conf success")
                } else {
                    var b = 1501;
                    if (b === e.code) {
                        if (0 > a.retryTimes) {
                            this.owner.getMsgBox().alert(this.title, _T("common", "error_occupied"));
                            this.owner.clearStatusBusy();
                            SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.closeOrFireFailEvent.call(this, true);
                            return
                        } else {
                            a.retryTimes--;
                            this.saveRouterConfWebAPI()
                        }
                        SYNO.Debug("retry to save upnp conf")
                    } else {
                        var c = SYNO.API.getErrorString(e.code);
                        this.owner.getMsgBox().alert(this.title, c);
                        this.owner.clearStatusBusy();
                        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.closeOrFireFailEvent.call(this, true)
                    }
                }
            },
            scope: this
        })
    },
    detect: function(a) {
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding",
            version: 1,
            method: "detect",
            params: {
                auto_save: false
            },
            callback: function(d, c, b) {
                if (d) {
                    if (!c || !c.task_id) {
                        throw Error("detect webapi shall return data.task_id")
                    }
                    if (a && a.success_callback) {
                        a.success_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("detect success")
                } else {
                    SYNO.Debug("detect failed");
                    return
                }
            },
            scope: this
        })
    },
    updateDb: function(a) {
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding.RouterList",
            version: 1,
            method: "update",
            callback: function(d, c, b) {
                if (d) {
                    if (a && a.success_callback) {
                        a.success_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("updateDb success")
                } else {
                    if (a && a.failure_callback) {
                        a.failure_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("updateDb failed");
                    return
                }
            },
            scope: this
        })
    },
    testCompatibility: function(a) {
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding.Compatibility",
            version: 1,
            method: "test",
            callback: function(d, c, b) {
                if (d) {
                    if (a && a.success_callback) {
                        a.success_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("start compatibility success")
                } else {
                    if (a && a.failure_callback) {
                        a.failure_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("start comptibility failed");
                    return
                }
            },
            scope: this
        })
    },
    stopTestCompatibility: function(a) {
        var b = this;
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding.Compatibility",
            version: 1,
            method: "stop",
            callback: function(e, d, c) {
                if (e) {
                    if (a && a.success_callback) {
                        a.success_callback.call(b, e, d, c)
                    }
                    SYNO.Debug("stop compatibility success")
                } else {
                    if (a && a.failure_callback) {
                        a.failure_callback.call(b, e, d, c)
                    }
                    SYNO.Debug("stop comptibility failed");
                    return
                }
            },
            scope: b
        })
    },
    testCompatibilityStatus: function(a) {
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding.Compatibility",
            version: 1,
            method: "test_status",
            params: {
                task_id: a.task_id
            },
            callback: function(d, c, b) {
                if (d) {
                    if (a && a.success_callback) {
                        a.success_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("get compatibility status success")
                } else {
                    if (a && a.failure_callback) {
                        a.failure_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("get comptibility status failed");
                    return
                }
            },
            scope: this
        })
    },
    uploadCompatibilityResult: function(a) {
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding.Compatibility",
            version: 1,
            method: "upload",
            callback: function(d, c, b) {
                if (d) {
                    if (a && a.success_callback) {
                        a.success_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("upload compatibility status success")
                } else {
                    if (a && a.failure_callback) {
                        a.failure_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("upload comptibility status failed");
                    return
                }
            },
            scope: this
        })
    },
    getCurrentProcessing: function(a) {
        this.owner.sendWebAPI({
            api: "SYNO.Core.PortForwarding",
            version: 1,
            method: "get_current_process",
            callback: function(d, c, b) {
                if (d) {
                    if (a && a.success_callback) {
                        a.success_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("get current process success")
                } else {
                    if (a && a.failure_callback) {
                        a.failure_callback.call(this, d, c, b)
                    }
                    SYNO.Debug("get current process failed");
                    return
                }
            },
            scope: this
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.UPnPStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(b) {
        if (!b.owner) {
            throw Error("UPnPStep constructor failed")
        }
        this.owner = b.owner;
        var a = this.configForm({
            module: this.owner,
            autoFlexcroll: false,
            headline: _T("ezinternet", "ezinternet_router_conf_title"),
            description: _T("routerconf", "routerconf_upnp_title")
        });
        Ext.apply(a, b);
        this.callParent([a])
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            labelWidth: 200,
            border: false,
            items: [{
                fieldLabel: _T("routerconf", "routerconf_brand"),
                name: "router_brand",
                indent: 0,
                width: 360,
                xtype: "syno_displayfield"
            }, {
                fieldLabel: _T("routerconf", "routerconf_model"),
                name: "router_model",
                indent: 0,
                width: 360,
                xtype: "syno_displayfield"
            }, {
                fieldLabel: _T("routerconf", "routerconf_version"),
                name: "router_version",
                indent: 0,
                width: 360,
                xtype: "syno_displayfield"
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("routerconf", "routerconf_manager_protocol"),
                name: "router_protocol",
                store: new Ext.data.JsonStore({
                    fields: ["name", "value", "port"],
                    data: [{
                        name: "HTTP",
                        value: "http",
                        port: 80
                    }, {
                        name: "HTTPS",
                        value: "https",
                        port: 443
                    }]
                }),
                value: "http",
                displayField: "name",
                valueField: "value",
                listeners: {
                    select: function(c, e, b) {
                        var d = this.ownerCt.getComponent("router_port");
                        d.setValue(e.get("port"))
                    }
                }
            }, {
                xtype: "syno_numberfield",
                fieldLabel: _T("routerconf", "routerconf_manager_port"),
                name: "router_port",
                maxlangth: 5,
                itemId: "router_port",
                value: 80,
                vtype: "port"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("routerconf", "routerconf_custom_account"),
                name: "router_use_custom"
            }, {
                xtype: "syno_textfield",
                indent: 1,
                fieldLabel: _T("routerconf", "routerconf_manager_account"),
                name: "router_account"
            }, {
                xtype: "syno_textfield",
                textType: "password",
                indent: 1,
                fieldLabel: _T("routerconf", "routerconf_manager_password"),
                name: "router_password"
            }, {
                xtype: "syno_textfield",
                textType: "password_confirm",
                indent: 1,
                fieldLabel: _T("service", "service_ddns_passwd_confirm"),
                name: "router_password_confirm",
                confirmFor: "router_password"
            }, {
                xtype: "hidden",
                name: "router_list"
            }, {
                xtype: "hidden",
                name: "upnp_pfpath"
            }, {
                xtype: "hidden",
                name: "support_natpmp"
            }, {
                xtype: "hidden",
                name: "support_upnp"
            }]
        }, a))
    },
    getNext: function() {
        this.saveUPnPRouterInfo();
        return false
    },
    saveUPnPRouterInfo: function(a, c, e) {
        var b = this.getForm();
        if (!this.getForm().isValid()) {
            return false
        }
        if (!e && b.findField("router_use_custom").getValue() && (b.findField("router_use_custom").isDirty() || b.findField("router_account").isDirty() || b.findField("router_password").isDirty())) {
            this.owner.getMsgBox().confirm(this.owner.title, _T("routerconf", "routerconf_custom_warning"), function(f) {
                if ("yes" === f) {
                    this.saveUPnPRouterInfo(f, c, true)
                }
            }, this);
            return false
        }
        this.owner.setStatusBusy({
            text: _T("common", "saving")
        });
        var d = {
            router_brand: this.form.findField("router_brand").getValue(),
            router_model: this.form.findField("router_model").getValue(),
            router_version: this.form.findField("router_version").getValue(),
            support_upnp: "yes",
            support_natpmp: "no"
        };
        if (this.form.findField("upnp_pfpath").getValue()) {
            d.upnp_pfpath = this.form.findField("upnp_pfpath").getValue();
            d.router_protocol = this.form.findField("router_protocol").getValue();
            d.router_port = this.form.findField("router_port").getValue();
            if (this.form.findField("router_use_custom").getValue()) {
                d.router_account = this.form.findField("router_account").getValue();
                d.router_pass = this.form.findField("router_password").getValue()
            }
        }
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.saveRouterConf.call(this, {
            retryTimes: 5,
            params: d
        })
    },
    initEvents: function() {
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.UPnPStep.superclass.initEvents.apply(this, arguments);
        var a;
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "router_use_custom", ["router_account", "router_password", "router_password_confirm"])
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.NatpmpStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(b) {
        if (!b.owner) {
            throw Error("NatpmpStep constructor failed")
        }
        this.owner = b.owner;
        var a = this.configForm({
            module: this.owner,
            headline: _T("ezinternet", "ezinternet_router_natpmp_conf_title"),
            description: _T("routerconf", "routerconf_natpmp_title")
        });
        Ext.apply(a, b);
        SYNO.LayoutConfig.fill(a);
        this.callParent([a])
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            synodefaults: {
                width: 200
            },
            border: false,
            items: [{
                fieldLabel: _T("routerconf", "routerconf_brand"),
                name: "router_brand",
                indent: 0,
                width: 360,
                xtype: "syno_displayfield"
            }, {
                fieldLabel: _T("routerconf", "routerconf_model"),
                name: "router_user_setting_name",
                indent: 0,
                width: 360,
                xtype: "syno_displayfield"
            }, {
                xtype: "hidden",
                name: "router_model"
            }, {
                xtype: "hidden",
                name: "router_version"
            }, {
                xtype: "hidden",
                name: "router_protocol"
            }, {
                xtype: "hidden",
                name: "router_port"
            }, {
                xtype: "hidden",
                name: "support_natpmp"
            }, {
                xtype: "hidden",
                name: "support_upnp"
            }, {
                xtype: "hidden",
                name: "router_max_rule"
            }]
        }, a))
    },
    getNext: function(a) {
        this.saveNatpmpRouterInfo();
        return false
    },
    saveNatpmpRouterInfo: function() {
        var a = {
            router_brand: this.form.findField("router_brand").getValue(),
            router_model: this.form.findField("router_model").getValue(),
            router_version: this.form.findField("router_version").getValue(),
            support_upnp: "no",
            support_natpmp: "yes"
        };
        this.owner.setStatusBusy({
            text: _T("common", "saving")
        });
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.saveRouterConf.call(this, {
            retryTimes: 5,
            params: a
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.CompatibilityStatusUpdater", {
    extend: "Object",
    constructor: function(a) {
        if (!a.owner || !a.scope || !a.pollConf) {
            throw Error("CompatibilityStatusUpdater contructor failed")
        }
        this.owner = a.owner;
        this.scope = a.scope;
        this.pollConf = a.pollConf;
        this.pollId = null
    },
    Start: function() {
        this.Stop();
        this.pollId = this.owner.pollReg(this.pollConf)
    },
    Stop: function() {
        if (this.pollId) {
            this.owner.pollUnreg(this.pollId)
        }
        this.pollId = null
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.TestStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(b) {
        this.strTaskId = null;
        this.compatibility_status_updater = null;
        this.hasUpload = false;
        if (!b.owner) {
            throw Error("TestStep constructor failed")
        }
        this.owner = b.owner;
        var a = this.configForm({
            module: this.owner,
            headline: _T("ezinternet", "ezinternet_router_conf_title"),
            description: _T("routerconf", "routerconf_test_upnp_desc")
        }, b);
        Ext.apply(a, b);
        this.callParent([a])
    },
    initEvents: function() {
        this.owner.mon(this.owner, "beforeclose", this.onClose, this)
    },
    onClose: function() {
        if (this === this.owner.getActiveStep()) {
            this.Stop(true)
        }
        this.owner.mun(this.owner, "beforeclose", this.onClose, this)
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            trackResetOnLoad: true,
            synodefaults: {
                width: 200
            },
            items: [{
                xtype: "listview",
                itemId: "test_list",
                hideHeaders: true,
                columns: [{
                    width: 0.07,
                    header: _T("pkgmgr", "pkgmgr_pkg_status"),
                    dataIndex: "field1",
                    align: "center"
                }, {
                    header: _T("status", "header_item"),
                    dataIndex: "field2"
                }],
                draggable: false,
                enableColumnMove: false,
                store: [
                    ["", ""]
                ]
            }, {
                xtype: "syno_displayfield",
                name: ""
            }, {
                xtype: "syno_displayfield",
                name: ""
            }, {
                xtype: "syno_displayfield",
                name: "test_staus"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("routerconf", "routerconf_test_report"),
                name: "test_report",
                checked: true,
                indent: 1
            }]
        }, a))
    },
    renderStatus: function(a) {
        var b = {
            processing: '<div class="x-status-loading">&nbsp;</div>',
            unknown: "-",
            success: '<div class="x-status-success">&nbsp;</div>',
            failed: '<div class="x-status-fail">&nbsp;</div>'
        };
        if (a in b) {
            return b[a]
        } else {
            return "-"
        }
    },
    renderItems: function(b) {
        var a = {
            add: _T("routerconf", "routerconf_test_rule_add"),
            max: _T("routerconf", "routerconf_test_max_count")
        };
        if (b in a) {
            return a[b]
        } else {
            return "-"
        }
    },
    activate: function() {
        SYNO.SDS.Utils.DisplayField(this.getForm(), "test_report", false);
        if (!this.hasCompatibilityTest) {
            if (!this.compatibility_status_updater) {
                this.testUPnPCompatibility()
            }
        } else {
            this.testUPnPResult(this.compatibilitTestData)
        }
    },
    testUPnPCompatibility: function() {
        if (this.compatibility_status_updater) {
            SYNO.Debug("testUPnPCompatibility compatibility_status_updater shall not exist")
        }
        this.owner.pollList({
            task_id_prefix: "SYNO.Core.PortForwarding.test_compatibility",
            extra_group_tasks: ["admin"],
            callback: function(d, c, b, a) {
                if (d) {
                    if (c.admin && (0 < c.admin.size())) {
                        this.checkStrTaskIdStatus(c.admin[0])
                    } else {
                        this.checkStrTaskIdStatus(null)
                    }
                } else {
                    SYNO.Debug("pollCompatibilityStrTaskId() failed");
                    return
                }
            },
            scope: this
        })
    },
    checkStrTaskIdStatus: function(a) {
        if (this.compatibility_status_updater) {
            SYNO.Debug("checkStrTaskIdStatus falied");
            return
        }
        if (!a) {
            this.createNewTaskId()
        } else {
            this.strTaskId = a;
            SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.testCompatibilityStatus.call(this, {
                task_id: a,
                success_callback: function(d, c, b) {
                    SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.getCurrentProcessing.call(this, {
                        success_callback: function(g, f, e) {
                            if ("none" === f.process) {
                                this.createNewTaskId()
                            } else {
                                if ("autotest" === f.process) {
                                    this.compatibilityStatusUpdate(this.strTaskId)
                                } else {
                                    this.compatibilityErrorHandler(1501)
                                }
                            }
                            SYNO.Debug("get current process success")
                        },
                        failure_callback: function(g, f, e) {
                            SYNO.Debug("get current process failed")
                        }
                    })
                },
                failure_callback: function(d, c, b) {
                    this.createNewTaskId()
                }
            })
        }
    },
    compatibilityErrorHandler: function(c) {
        var a = 1501;
        this.Stop(true);
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.closeOrFireFailEvent.call(this, true);
        if (a === c) {
            SYNO.Debug("error_code: " + c + " is handling.");
            this.owner.module.appWin.getMsgBox().alert(this.title, _T("common", "error_occupied"))
        } else {
            SYNO.Debug("shall handle error code =" + c + "here");
            var b = SYNO.API.getErrorString(c);
            this.owner.module.appWin.getMsgBox().alert(this.title, b)
        }
        return
    },
    createNewTaskId: function() {
        if (this.compatibility_status_updater) {
            SYNO.Debug("createNewTaskId failed");
            return
        }
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.testCompatibility.call(this, {
            success_callback: function(c, b, a) {
                this.compatibilityStatusUpdate(b.task_id)
            },
            failure_callback: function(c, b, a) {
                if (!b || !b.code) {
                    SYNO.Debug("testCompatibility failed");
                    return
                }
                this.compatibilityErrorHandler(b.code)
            }
        })
    },
    compatibilityStatusUpdate: function(b) {
        if (!b) {
            SYNO.Debug("compatibilityStatusUpdate need strTaskId, but strTaskId is null");
            return
        }
        if (this.compatibility_status_updater) {
            SYNO.Debug("compatibilityStatusUpdater has been existed");
            return
        }
        var a = {
            interval: 3,
            immediate: true,
            webapi: {
                api: "SYNO.Core.PortForwarding.Compatibility",
                version: 1,
                method: "test_status",
                params: {
                    task_id: b
                }
            },
            status_callback: function(f, d, e, c) {
                if (!f) {
                    this.Stop(true);
                    if (d && d.code) {
                        this.compatibilityErrorHandler(d.code)
                    } else {
                        SYNO.Debug("compatibilityStatusUpdate failed due to polling framework failed")
                    }
                    return
                }
                this.testUPnPResult(d)
            },
            scope: this
        };
        this.strTaskId = b;
        this.compatibility_status_updater = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.CompatibilityStatusUpdater({
            owner: this.owner,
            pollConf: a,
            scope: this
        });
        this.compatibility_status_updater.Start();
        this.owner.getButton("back").disable();
        this.owner.getButton("next").disable()
    },
    Stop: function(b) {
        var c = function() {
            if (this.compatibility_status_updater) {
                this.compatibility_status_updater.Stop();
                this.compatibility_status_updater = null
            }
            this.strTaskId = null
        }.bind(this);
        c();
        if (b) {
            var a = this.owner;
            if (this.owner.module && this.owner.module.appWin) {
                a = this.owner.module.appWin
            }
            a.setStatusBusy();
            SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.stopTestCompatibility.call(this, {
                success_callback: function() {
                    a.clearStatusBusy()
                },
                failure_callback: function() {
                    a.clearStatusBusy()
                }
            })
        }
    },
    closeOrFireFailEvent: function() {
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.closeOrFireFailEvent.call(this, true)
    },
    testUPnPResult: function(c) {
        var b;
        var a = [];
        this.owner.getButton("back").disable();
        this.owner.getButton("next").disable();
        if ((null === c) || (undefined === c)) {
            this.Stop(true);
            this.owner.getMsgBox().alert(this.title, _T("common", "loadsetting_fail"), this);
            return 0
        } else {
            if (!Ext.isDefined(c.test)) {
                this.owner.getButton("back").enable();
                this.owner.getButton("next").enable();
                this.Stop(true);
                this.owner.getMsgBox().alert(this.title, _T("common", "loadsetting_fail"), this.closeOrFireFailEvent, this);
                return 0
            } else {
                if (!Ext.isDefined(c.status)) {
                    this.owner.getButton("back").enable();
                    this.owner.getButton("next").enable();
                    this.Stop(true);
                    this.owner.getMsgBox().alert(this.title, _T("common", "loadsetting_fail"), this.closeOrFireFailEvent, this);
                    return 0
                }
            }
        }
        b = c.test;
        Ext.each(b, function(d) {
            if ("max" === d.test_item && "unknown" !== d.status) {
                a.push([this.renderStatus(d.status), String.format(this.renderItems(d.test_item), '<span class="green-status">' + d.max + "</span>")])
            } else {
                a.push([this.renderStatus(d.status), String.format(this.renderItems(d.test_item), _T("routerconf", "routerconf_status_ntest"))])
            }
        }, this);
        this.getComponent("test_list").getStore().loadData(a, false);
        if ("success" === c.status) {
            if (!this.hasCompatibilityTest) {
                this.hasCompatibilityTest = true;
                this.compatibilitTestData = c
            }
            SYNO.SDS.Utils.DisplayField(this.getForm(), "test_report", true);
            this.getForm().findField("test_staus").setValue(_T("routerconf", "routerconf_test_pass"));
            this.owner.getButton("back").enable();
            this.owner.getButton("next").enable();
            this.Stop()
        } else {
            if ("failed" === c.status) {
                if (!this.hasCompatibilityTest) {
                    this.hasCompatibilityTest = true;
                    this.compatibilitTestData = c
                }
                if (this.compatibilitTestData && this.compatibilitTestData.blAllPortFail) {
                    this.owner.getButton("cancel").setText(_T("common", "exit"));
                    this.owner.getButton("cancel").enable();
                    this.owner.getButton("back").enable();
                    this.owner.getButton("next").hide();
                    this.getForm().findField("test_staus").setValue(_T("routerconf", "routerconf_may_not_enable_upnp_write"))
                } else {
                    this.owner.getButton("cancel").hide();
                    this.owner.getButton("back").enable();
                    this.owner.getButton("next").enable();
                    this.getForm().findField("test_staus").setValue(_T("routerconf", "routerconf_test_failed"))
                }
                SYNO.SDS.Utils.DisplayField(this.getForm(), "test_report", true);
                this.Stop();
                this.compability_test = -1
            } else {}
        }
    },
    Upload: function() {
        this.owner.setStatusBusy();
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.SendWebAPI.prototype.uploadCompatibilityResult.call(this, {
            success_callback: function(c, b, a) {
                this.owner.clearStatusBusy();
                if (this.owner.callback && this.owner.cbscope) {
                    this.owner.callback.call(this.owner.cbscope)
                }
                SYNO.Debug("upload test result success")
            },
            failure_callback: function(c, b, a) {
                this.owner.clearStatusBusy();
                if (this.owner.callback && this.owner.cbscope) {
                    this.owner.callback.call(this.owner.cbscope)
                }
                SYNO.Debug("upload test result failed")
            }
        });
        this.hasUpload = true
    },
    getNext: function() {
        var b = null;
        var a = function() {
            b = this.owner.getStep("upnpform").getForm().getValues();
            b.support_upnp = "yes";
            this.owner.getStep("upnpform").getForm().setValues(b)
        }.bind(this);
        if ("true" === this.getForm().getValues().test_report) {
            if (false === this.hasUpload) {
                this.Upload()
            }
        }
        this.Stop(true);
        if (this.compatibilitTestData.support || this.compatibilitTestData.support_change_port) {
            a();
            this.owner.goNext("upnpform", true)
        } else {
            this.owner.goNext("portfwform", true)
        }
        return false
    }
});
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_INDEX = "index";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_ROUTER_PORT = "router_port";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_DS_PORT = "ds_port";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_REMAP_ROUTER_PORT = "remap_router_port";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_STATUS = "status";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_PORT_INFO = "port_info";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_PORT_STATUS = "port_status";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_INDEX = "index";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_SERVICENAME = "service_name";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_SERVICEID = "serviceid";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.STATUS_SUCCESS = "success";
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.STATUS_PROGRESS = "processing";
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortRange", {
    extend: "Object",
    constructor: function(e, b) {
        var d = 0;
        var c = [e, b];
        if (undefined === b) {
            if ("string" === typeof e) {
                c = e.split("-");
                if (2 !== c.length) {
                    c = [e, e]
                }
            } else {
                c = [e, e]
            }
        }
        this.min = parseInt(c[0], 10);
        this.max = parseInt(c[1], 10);
        if (this.min > this.max) {
            d = this.min;
            this.min = this.max;
            this.max = d
        }
    },
    isValid: function() {
        return 0 < this.min && this.min <= this.max && this.max < 65536
    },
    toString: function() {
        if (this.min === this.max) {
            return this.min + ""
        } else {
            return this.min + "-" + this.max
        }
    },
    getCount: function() {
        if (!this.isValid()) {
            return NaN
        }
        return this.max - this.min + 1
    },
    compare: function(a) {
        if (this.min === a.min) {
            return this.max - a.max
        } else {
            return this.min - a.min
        }
    }
});
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortRange.comparator = function(d, c) {
    return d.compare(c)
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports", {
    extend: "Object",
    constructor: function(d) {
        var a = null;
        var c = null;
        this.ports = [];
        this.isValid = true;
        if ("string" !== typeof d) {
            return
        }
        a = d.split(",");
        for (var b = 0; b < a.length; b++) {
            c = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortRange(a[b]);
            if (c.isValid()) {
                this.ports.push(c)
            } else {
                this.isValid = false
            }
        }
    },
    toString: function() {
        return this.ports.join(",")
    },
    equalFormat: function(b) {
        if (this.ports.length !== b.ports.length || false === this.isValid || false === b.isValid) {
            return false
        }
        for (var a = 0; a < this.ports.length; a++) {
            if (this.ports[a].getCount() !== b.ports[a].getCount()) {
                return false
            }
        }
        return true
    },
    isConflict: function() {
        var e = null;
        var b = [];
        var d, a, c;
        e = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports(this.toString()).ports;
        if (0 >= e.length) {
            return b
        }
        e.sort(SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortRange.comparator);
        for (a = 1, d = e[0].max; a < e.length; a++) {
            if (d >= e[a].min) {
                c = (d < e[a].max ? d : e[a].max);
                b.push(new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortRange(e[a].min, c))
            }
            d = (d < e[a].max ? e[a].max : d)
        }
        return b
    },
    toArr: function() {
        return this.ports
    },
    getPortsNumber: function() {
        var c = 0;
        var b = 0;
        var a = 0;
        if (!this.ports) {
            return 0
        }
        for (a = 0; a < this.ports.size(); a++) {
            b = this.ports[a].getCount();
            if (!isNaN(b)) {
                c += b
            }
        }
        return c
    }
});
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Conflict = function(a) {
    return new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports(a).isConflict()
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortsValidate = function(c) {
    var e = c.dsPortsString || "";
    var h = c.routerPortsString || "";
    var b = c.cb || function() {};
    var f = 0;
    var i = 0;
    var a = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports(e);
    var d = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports(h);
    var g = {
        ret: -1,
        dsPort: a,
        routerPort: d
    };
    if (!e) {
        SYNO.Debug("dsPortsString of PortsValidate is empty")
    }
    if (!h) {
        SYNO.Debug("routerPortsString of PortsValidate is empty")
    }
    if ((0 < a.isConflict().size()) || (0 < d.isConflict().size())) {
        g.ret = -2;
        b(g);
        return g.ret
    }
    if (!a.isValid || !d.isValid) {
        g.ret = -3;
        b(g);
        return g.ret
    }
    if (!a.ports || !d.ports) {
        g.ret = -4;
        b(g);
        return g.ret
    }
    f = d.getPortsNumber();
    i = a.getPortsNumber();
    if (f != i) {
        g.ret = -5;
        b(g);
        return g.ret
    }
    g.ret = 0;
    b(g);
    return g.ret
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.IsRule = function(a) {
    if (!(a && a.hasOwnProperty("isEnable") && a.hasOwnProperty("getServiceName") && a.hasOwnProperty("getDsPorts") && a.hasOwnProperty("getRouterPorts") && a.hasOwnProperty("getProtocol"))) {
        SYNO.Debug("is not valid rule");
        return false
    }
    return true
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Rule = function(f) {
    var e = f.blEnable || false;
    var g = f.szServiceName || "";
    var d = f.szDsPorts || "";
    var a = f.szRouterPorts || "";
    var h = f.szProtocol || "";
    var c = -1;
    var b = function(i) {
        return i + String.format(" ,[blEnable={0}, szServiceName={1}, szDsPorts={2}, szRouterPorts={3}, szProtocol={4}]", e, g, d, a, h)
    };
    if (!h) {
        SYNO.Debug(b("failed, szProtocol is empty"));
        return null
    }
    if (("TCP" !== h.toUpperCase()) && ("UDP" !== h.toUpperCase()) && ("ALL" !== h.toUpperCase())) {
        SYNO.Debug(b("failed, szProtocol is invalid"));
        return null
    }
    c = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortsValidate({
        dsPortsString: d,
        routerPortsString: a,
        cb: function(i) {
            if (!i) {
                SYNO.Debug(b("failed, cbData is empty"));
                return
            }
            if (0 !== i.ret) {
                SYNO.Debug(b("failed, PortsValidate ret=" + i.ret));
                return
            }
        }
    });
    if (0 !== c) {
        return null
    }
    return {
        isEnable: function() {
            return e
        },
        getServiceName: function() {
            return g
        },
        getDsPorts: function() {
            return d
        },
        getRouterPorts: function() {
            return a
        },
        getProtocol: function() {
            return h
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleConflict = function(d, b) {
    var c = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.IsRule;
    var a = {
        dsPort: [],
        routerPort: []
    };
    if (!c(d)) {
        SYNO.Debug("rule1 is not valid rule");
        return null
    }
    if (!c(b)) {
        SYNO.Debug("rule2 is not valid rule");
        return null
    }
    if ((d.getProtocol() !== b.getProtocol()) && ("ALL" !== d.getProtocol().toUpperCase()) && ("ALL" !== b.getProtocol().toUpperCase())) {
        return null
    }
    a.dsPort = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports(d.getDsPorts() + "," + b.getDsPorts()).isConflict();
    a.routerPort = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports(d.getRouterPorts() + "," + b.getRouterPorts()).isConflict();
    if ((0 === a.dsPort.size()) && (0 === a.routerPort.size())) {
        return null
    }
    return a
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleSet = function() {
    var a = [];
    return {
        addRule: function(f, c) {
            var e = 0;
            var g = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.IsRule;
            var b = null;
            var d = false;
            if (!g(f)) {
                SYNO.Debug("rule is not rule");
                return false
            }
            if (!f.isEnable()) {
                a.push(f);
                return true
            }
            for (e = 0; e < a.size(); e++) {
                if (a[e].isEnable()) {
                    b = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleConflict(f, a[e]);
                    if (b) {
                        d = true;
                        if (c) {
                            c(b, f, a[e])
                        }
                    }
                }
            }
            if (d) {
                return false
            }
            a.push(f);
            return true
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray = function(c) {
    var e = [];
    var b = [];
    var h = 0;
    var a = 0;
    var g = 0;
    if (!c) {
        return e
    }
    b = c.split(",");
    for (var f = 0; f < b.size(); f++) {
        if (0 > b[f].search("-")) {
            e.push(parseInt(b[f], 10))
        } else {
            h = b[f].split("-")[0];
            a = b[f].split("-")[1];
            if (h > a) {
                g = h;
                h = a;
                a = g
            }
            for (var d = h; d <= a; d++) {
                e.push(parseInt(d, 10))
            }
        }
    }
    return e
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ServiceRuleStepAbstract", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(b) {
        if (!b.owner) {
            throw Error("ServiceRuleStep constructor failed")
        }
        this.owner = b.owner;
        this.rule_store = b.rule_store;
        this.serviceDescObj = b.serviceDescObj;
        this.next_step_callback = b.next_step_callback;
        this.next_step_callback_scope = b.next_step_callback_scope;
        this.isSupportChangePort = b.isSupportChangePort || false;
        this.allowBlank = false;
        var a = Ext.apply({
            headline: _T("routerconf", "routerconf_systemport_title"),
            items: [this.grid = this.createServiceRuleGrid()],
            listeners: {
                afterlayout: function(c) {
                    c.grid.setHeight(c.getHeight() - 30)
                }
            }
        }, b);
        this.callParent([a])
    },
    createServiceRuleGrid: function(b) {
        var c = new SYNO.ux.EnableColumn({
            dataIndex: "enabled",
            width: 40,
            align: "center"
        });
        var a = new Ext.data.ArrayStore({
            fields: ["port_id", "desc", "dst_port", "router_ports", "protocol", "enabled"],
            listeners: {
                update: function(d, e, f) {
                    if (Ext.data.Record.EDIT !== f) {
                        return
                    }
                    if (!this.allowBlank) {
                        this.checkState()
                    }
                },
                scope: this
            }
        });
        return new SYNO.ux.EditorGridPanel(Ext.apply({
            cls: "without-dirty-red-grid",
            plugins: c,
            selModel: new Ext.grid.RowSelectionModel({}),
            cm: new Ext.grid.ColumnModel([c, {
                id: "desc",
                header: _T("routerconf", "routerconf_header_service"),
                dataIndex: "desc",
                align: "left",
                width: 150,
                renderer: function(g, d, f) {
                    var e = g;
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(e) + '"';
                    return e
                }
            }, {
                header: _T("routerconf", "routerconf_header_protocol"),
                dataIndex: "protocol",
                align: "left",
                width: 80,
                renderer: function(g, d, f) {
                    var e = g.toUpperCase();
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(e) + '"';
                    return e
                }
            }, {
                header: _T("routerconf", "routerconf_header_ds_port"),
                dataIndex: "dst_port",
                sortable: true,
                align: "left",
                width: 150,
                renderer: function(f, d, e) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                    return f
                }
            }, {
                header: _T("routerconf", "routerconf_header_router_port"),
                dataIndex: "router_ports",
                align: "left",
                editor: new Ext.grid.GridEditor(new Ext.form.TextField({
                    allowBlank: false,
                    vtype: "portfwd"
                })),
                width: 150,
                renderer: function(f, d, e) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                    return f
                }
            }]),
            store: a,
            enableHdMenu: false,
            clicksToEdit: 1,
            listeners: {
                validateedit: function(d) {
                    var f = function(h, g) {
                        h.cancel = true;
                        if (!g) {
                            g = _T("routerconf", "routerconf_port_value_invalid")
                        }
                        this.owner.getMsgBox().alert(_T("routerconf", "routerconf_portfwd_title"), g)
                    }.bind(this);
                    SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortsValidate({
                        dsPortsString: d.record.get("dst_port").toString(),
                        routerPortsString: d.value,
                        cb: function(e) {
                            if (0 > e.ret) {
                                f(d)
                            }
                        }.bind(this)
                    })
                },
                scope: this
            }
        }, b))
    },
    deleteAddedServices: function(a) {
        var b, e;
        var d = 0;
        var c = function(f) {
            if ((f.get("serviceid").id == e.get("port_id")) && (f.get("ds_port") == e.get("dst_port"))) {
                d = 1
            }
        };
        for (b = a.getCount() - 1; b >= 0; b--) {
            e = a.getAt(b);
            e.set("router_ports", e.get("dst_port"));
            d = 0;
            if (this.rule_store) {
                this.rule_store.each(c);
                if (d == 1) {
                    a.removeAt(b)
                }
            }
        }
        a.commitChanges()
    },
    deactivate: function() {
        this.owner.getButton("next").enable()
    },
    checkState: function() {
        SYNO.SDS.Wizard.Step.prototype.checkState.call(this);
        if (this.allowBlank) {
            return
        }
        var b, a = this.grid.getStore();
        for (b = 0; b < a.getCount(); b++) {
            if (a.getAt(b).get("enabled")) {
                this.owner.getButton("next").enable();
                return
            }
        }
        this.owner.getButton("next").disable()
    },
    getNext: function() {
        this.grid.stopEditing();
        if (this.owner.addSystemRules(this.grid.getStore())) {
            if (this.next_step_callback) {
                this.next_step_callback.call(this.next_step_callback_scope)
            }
            return this.nextId
        } else {
            return false
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ServiceRuleStep", {
    extend: "SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ServiceRuleStepAbstract",
    constructor: function(a) {
        this.callParent([a])
    },
    activate: function() {
        if (!this.serviceDescObj.hasInitialized()) {
            this.owner.setStatusBusy();
            this.serviceDescObj.initAsync(function() {
                this.owner.clearStatusBusy();
                this.activateCore()
            }.bind(this))
        } else {
            this.activateCore()
        }
    },
    activateCore: function() {
        this.grid.getStore().loadData(this.serviceDescObj.getPortInfoArrayData(), false);
        this.deleteAddedServices(this.grid.getStore());
        this.grid.getColumnModel().setEditable(4, this.isSupportChangePort);
        if (!this.isSupportChangePort) {
            this.grid.getStore().each(function(a) {
                a.set("router_ports", a.get("dst_port"))
            })
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.AddRuleWizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(b) {
        this.isSupportChangePort = b.isSupportChangePort || false;
        this.next_step_callback = b.next_step_callback;
        this.next_step_callback_scope = b.next_step_callback_scope;
        this.owner = b.owner;
        var a = Ext.apply({
            title: _T("routerconf", "routerconf_portfwd_title"),
            dsmStyle: "v5",
            width: 600,
            height: 450,
            steps: []
        }, b);
        a.steps.push(this.configChooser({
            itemId: "option",
            nextId: ["service", "custom"]
        }));
        a.steps.push(new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ServiceRuleStep({
            itemId: "service",
            nextId: null,
            owner: this,
            rule_store: b.rule_store,
            serviceDescObj: b.serviceDescObj,
            isSupportChangePort: this.isSupportChangePort,
            next_step_callback: this.next_step_callback,
            next_step_callback_scope: this.next_step_callback_scope
        }));
        a.steps.push(this.configCustomPort({
            itemId: "custom",
            nextId: null,
            owner: this,
            next_step_callback: this.next_step_callback,
            next_step_callback_scope: this.next_step_callback_scope
        }));
        this.callParent([a])
    },
    configChooser: function(b) {
        var a = Ext.apply({
            headline: _T("routerconf", "routerconf_portfwd_opt_title"),
            description: _T("routerconf", "routerconf_portfwd_opt_desc"),
            synodefaults: {
                width: 275
            },
            xtype: "syno_formpanel",
            items: [{
                xtype: "syno_radio",
                boxLabel: _T("routerconf", "routerconf_systemport_short"),
                name: "port_fwd_type",
                inputValue: 0,
                checked: true
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("routerconf", "routerconf_systemport_long")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("routerconf", "routerconf_customport_short"),
                name: "port_fwd_type",
                inputValue: 1
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("routerconf", "routerconf_customport_long")
            }],
            getNext: function() {
                return this.nextId[this.getForm().getValues().port_fwd_type]
            }
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    configCustomPort: function(b) {
        var a = Ext.apply({
            headline: _T("routerconf", "routerconf_customport_title"),
            description: _T("routerconf", "routerconf_port_hint"),
            synodefaults: {
                width: 275
            },
            xtype: "syno_formpanel",
            items: [{
                xtype: "syno_combobox",
                fieldLabel: _T("routerconf", "routerconf_header_protocol"),
                name: "protocol",
                store: [
                    ["tcp", "TCP"],
                    ["udp", "UDP"]
                ],
                value: "tcp"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("routerconf", "routerconf_header_ds_port"),
                name: "ds_ports",
                itemId: "ds_ports",
                allowBlank: false,
                vtype: "portfwd",
                listeners: {
                    blur: function(d) {
                        var c = d.ownerCt.getComponent("router_ports");
                        if (!this.isSupportChangePort) {
                            c.setValue(d.getValue())
                        } else {
                            if ("" === c.getValue() && d.isValid()) {
                                c.setValue(d.getValue())
                            }
                        }
                    },
                    scope: this
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("routerconf", "routerconf_header_router_port"),
                name: "router_ports",
                itemId: "router_ports",
                hiddenName: "router_ports",
                allowBlank: false,
                vtype: "portfwd",
                disabled: !this.isSupportChangePort
            }],
            getNext: function() {
                if (this.owner.addCustomRules(this.getForm())) {
                    if (this.next_step_callback) {
                        this.next_step_callback.call(this.next_step_callback_scope)
                    }
                    return this.nextId
                } else {
                    return false
                }
            }
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    loadUsedPorts: function() {
        if (Ext.isDefined(this.used_ports)) {
            return Ext.apply({}, this.used_ports)
        }
        this.used_ports = this.rule_store.getUsedPortStrings();
        return Ext.apply({}, this.used_ports)
    },
    isRuleIdInStore: function(c, a) {
        for (var b = 0; b < a.getCount(); b++) {
            if (c === parseInt(a.getAt(b).get("rule_id"), 10)) {
                return true
            }
        }
        return false
    },
    getUniqueId: function(a) {
        for (var b = 1; b < 1000; b++) {
            if (!this.isRuleIdInStore(b, a)) {
                return parseInt(b, 10)
            }
        }
        throw Error("incredible, there is more thant 1000 rules in rule.conf")
    },
    addSystemRules: function(j) {
        var d, c;
        var e = null;
        var a = function(k, i) {
            if (!k) {
                SYNO.Debug("addSingleSystemRule failed due to rec is null")
            }
            if (!i) {
                SYNO.Debug("addSingleSystemRule failed due to protocol is empty")
            }
            this.rule_store.add(new this.rule_store.recordType({
                rule_id: this.getUniqueId(this.rule_store).toString(10),
                enable: true,
                rule_status: "",
                serviceid: {
                    id: k.get("port_id"),
                    desc: k.get("desc")
                },
                ds_port: k.get("dst_port").toString(),
                router_port: k.get("router_ports").toString(),
                router_protocol: i
            }))
        };
        var b = false;
        var f = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleSet();
        var g = function() {
            var l = 0;
            var k = {
                alert: true,
                text: String.format("{0}:<br>", _T("routerconf", "routerconf_port_conflict"))
            };
            var m = function(n, o, i) {
                k.text += String.format("[{0} : {1}]<br>[{2} : {3}]<br>&nbsp", o.getServiceName(), o.getProtocol(), i.getServiceName(), i.getProtocol());
                if (n.dsPort.size() > 0) {
                    k.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_ds_port"), n.dsPort.toString())
                }
                if (n.routerPort.size() > 0) {
                    k.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_router_port"), n.routerPort.toString())
                }
                k.text += "<br>"
            };
            for (l = 0; l < j.getCount(); l++) {
                c = j.getAt(l);
                if (!c.get("enabled")) {
                    continue
                }
                e = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Rule({
                    blEnable: c.get("enabled"),
                    szServiceName: c.get("desc"),
                    szDsPorts: c.get("dst_port").toString(),
                    szRouterPorts: c.get("router_ports").toString(),
                    szProtocol: c.get("protocol")
                });
                if (!f.addRule(e, m)) {
                    b = true
                }
            }
            if (b) {
                this.reportFailure(k);
                return false
            }
            return true
        }.bind(this);
        var h = function() {
            var l = 0;
            var k = {
                alert: true,
                text: String.format("{0}:<br>", _T("routerconf", "routerconf_service_port_conflict"))
            };
            var m = function(n, o, i) {
                k.text += String.format("[{0} : {1}]<br>[{2} : {3}]<br>&nbsp", i.getServiceName(), i.getProtocol(), o.getServiceName(), o.getProtocol());
                if (n.dsPort.size() > 0) {
                    k.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_ds_port"), n.dsPort.toString())
                }
                if (n.routerPort.size() > 0) {
                    k.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_router_port"), n.routerPort.toString())
                }
                k.text += "<br>"
            };
            for (l = 0; l < this.rule_store.getCount(); l++) {
                c = this.rule_store.getAt(l);
                if (!c.get("enable")) {
                    continue
                }
                e = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Rule({
                    blEnable: c.get("enable"),
                    szServiceName: c.get("serviceid").desc,
                    szDsPorts: c.get("ds_port").toString(),
                    szRouterPorts: c.get("router_port").toString(),
                    szProtocol: c.get("router_protocol")
                });
                if (!f.addRule(e, m)) {
                    b = true
                }
            }
            if (b) {
                this.reportFailure(k);
                return false
            }
            return true
        }.bind(this);
        if (!g()) {
            return false
        }
        if (!h()) {
            return false
        }
        for (d = 0; d < j.getCount(); d++) {
            c = j.getAt(d);
            if (!c.get("enabled")) {
                continue
            }
            if ("all" === c.get("protocol")) {
                a.call(this, c, "tcp");
                a.call(this, c, "udp")
            } else {
                a.call(this, c, c.get("protocol"))
            }
        }
        this.rule_store.commitChanges();
        return true
    },
    addCustomRules: function(e) {
        if (!e.isValid()) {
            return false
        }
        var d = e.findField("protocol").getValue();
        var b = e.findField("ds_ports").getValue();
        var c = e.findField("router_ports").getValue();
        var a = false;
        a = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortsValidate({
            dsPortsString: b,
            routerPortsString: c,
            cb: function(h) {
                if (0 > h.ret) {
                    this.reportFailure({
                        text: _T("routerconf", "routerconf_port_value_invalid"),
                        clear: true
                    })
                }
            }.bind(this)
        });
        if (a) {
            return false
        }
        var f = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleSet();
        var g = function() {
            var k = 0;
            var j = {
                alert: true,
                text: String.format("{0}:<br>", _T("routerconf", "routerconf_service_port_conflict"))
            };
            var l = function(o, p, i) {
                j.text += String.format("[{0} {1}]<br>&nbsp", p.getServiceName(), p.getProtocol());
                if (o.dsPort.size() > 0) {
                    j.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_ds_port"), o.dsPort.toString())
                }
                if (o.routerPort.size() > 0) {
                    j.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_router_port"), o.routerPort.toString())
                }
                j.text += "<br>"
            };
            var m = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Rule({
                blEnable: true,
                szServiceName: _T("routerconf", "routerconf_customport_short"),
                szDsPorts: b,
                szRouterPorts: c,
                szProtocol: d
            });
            var n = null;
            var h = false;
            if (!f.addRule(m)) {
                SYNO.Debug("strange, addRule failed");
                return false
            }
            for (k = 0; k < this.rule_store.getCount(); k++) {
                n = this.rule_store.getAt(k);
                if (!n.get("enable")) {
                    continue
                }
                m = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Rule({
                    blEnable: n.get("enable"),
                    szServiceName: n.get("serviceid").desc,
                    szDsPorts: n.get("ds_port").toString(),
                    szRouterPorts: n.get("router_port").toString(),
                    szProtocol: n.get("router_protocol")
                });
                if (!f.addRule(m, l)) {
                    h = true
                }
            }
            if (h) {
                this.reportFailure(j);
                return false
            }
            return true
        }.bind(this);
        if (!g()) {
            return false
        }
        this.rule_store.add(new this.rule_store.recordType({
            rule_id: this.getUniqueId(this.rule_store).toString(10),
            enable: true,
            rule_status: "",
            serviceid: {
                id: "",
                desc: _T("routerconf", "routerconf_customport_short")
            },
            ds_port: b,
            router_port: c,
            router_protocol: d
        }));
        this.rule_store.commitChanges();
        return true
    },
    reportFailure: function(a) {
        if (a.alert) {
            this.getMsgBox().alert(this.title, a.text)
        } else {
            this.setStatusError(a)
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(c) {
        if (!Ext.isDefined(c.owner)) {
            throw Error("owner is undefined")
        }
        this.grid = c.grid;
        if (!Ext.isDefined(this.grid)) {
            throw Error("grid is undefined")
        }
        this.systemSetRules = [];
        var a = this.getWebAPIDesc();
        a.appWindow = c.owner;
        a.autoDestroy = true;
        a.fields = ["enable", "rule_id", "serviceid", "router_port", "router_protocol", "rule_status", "ds_port", "service_name", "remap_router_port_map_table"];
        a.listeners = {
            exception: this.onStoreException,
            beforeload: this.onBeforeLoad,
            load: this.onAfterLoad,
            add: this.onRuleChanged,
            remove: this.onRuleChanged,
            scope: this
        };
        var b = Ext.apply(a, c);
        this.callParent([b])
    },
    getWebAPIDesc: function() {
        return {
            api: "SYNO.Core.PortForwarding.Rules",
            method: "load",
            version: 1
        }
    },
    joinCompound: function(a) {
        var b = function(c) {
            this.loadData(c)
        }.bind(this);
        a.params.push(this.getWebAPIDesc());
        a.callbacks.push(b)
    },
    setServiceDescObj: function(a) {
        this.serviceDescObj = a
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", c);
        this.owner.unmask();
        this.owner.setStatusError()
    },
    onBeforeLoad: function(a, b) {},
    pasteServiceDesc: function() {
        for (var a = 0; a < this.getCount(); a++) {
            var b = this.getAt(a).get("serviceid");
            var c = this.getAt(a);
            c.set("serviceid", {
                id: b,
                desc: this.serviceDescObj.getServiceDesc(b)
            })
        }
        this.commitChanges()
    },
    onAfterLoad: function(b, a, c) {
        var e = null;
        if (this.serviceDescObj && !this.serviceDescObj.hasInitialized()) {
            this.serviceDescObj.initAsync(function() {
                this.pasteServiceDesc()
            }.bind(this))
        } else {
            this.pasteServiceDesc()
        }
        this.systemSetRules = [];
        for (var d = 0; d < this.getCount(); d++) {
            e = this.getAt(d);
            if ("" !== e.get("service_name")) {
                this.systemSetRules.push(e)
            }
        }
        this.remove(this.systemSetRules);
        this.commitChanges();
        this.grid.updateUsedPortsAndShow();
        this.grid.isRuleStatusLoaded = false;
        this.clearDirty()
    },
    getSystemUsedPorts: function() {
        var b = 0;
        for (var a = 0; a < this.systemSetRules.size(); a++) {
            if (!this.systemSetRules[a].get("enable")) {
                continue
            }
            b++
        }
        return b
    },
    countUsedPortsNumber: function() {
        var a = this.getPortsArray();
        if (!a) {
            SYNO.Debug("countUsedPortsNumber failed");
            return 0
        }
        return a.size() + this.getSystemUsedPorts()
    },
    onRuleChanged: function(b, c, a) {
        this.isRuleChanged = true;
        this.grid.checkOnRuleChanged();
        this.grid.getView().onLayout()
    },
    getUsedPortStrings: function() {
        var a = {
            tcp: "",
            udp: ""
        };
        for (var b = 0; b < this.getCount(); b++) {
            var c = this.getAt(b);
            if (!c.get("enable")) {
                continue
            }
            if (a[c.get("router_protocol")]) {
                a[c.get("router_protocol")] += ","
            }
            a[c.get("router_protocol")] += c.get("router_port")
        }
        return a
    },
    getPortsArray: function() {
        var c = this.getUsedPortStrings();
        var a = "";
        var b = [];
        if (c) {
            if (c.tcp) {
                a += c.tcp
            }
            if (c.udp) {
                if (a) {
                    a += ","
                }
                a += c.udp
            }
            b = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray(a)
        }
        return b
    },
    getRules: function() {
        var e = [];
        var c = 0,
            b = 0;
        var a = ["enable", "rule_id", "ds_port", "router_port", "router_protocol", "serviceid", "service_name", "force"];
        var d = null;
        for (c = 0; c < this.getCount(); c++) {
            d = {
                id: c
            };
            for (b = 0; b < a.length; b++) {
                if ("serviceid" === a[b]) {
                    d[a[b]] = this.getAt(c).get(a[b]).id
                } else {
                    d[a[b]] = this.getAt(c).get(a[b]) || false
                }
            }
            e.push(d)
        }
        return e
    },
    isDirty: function() {
        return this.isRuleChanged || this.getModifiedRecords().length > 0
    },
    clearDirty: function() {
        this.commitChanges();
        this.isRuleChanged = false
    },
    reportFailure: function(a) {
        if (a.alert) {
            this.owner.getMsgBox().alert("", a.text)
        } else {
            this.owner.setStatusError(a)
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleEnableColumn", {
    extend: "SYNO.ux.EnableColumn",
    onSelectAll: function() {
        var d, c, b = this.getGrid().getStore();
        var a = false;
        if ("normal" !== this.getGrid().state) {
            this.box_el.dom.checked = !this.box_el.dom.checked;
            return
        }
        if (!this.box_el.dom.checked) {
            SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleEnableColumn.superclass.onSelectAll.apply(this, arguments);
            this.getGrid().checkOnRuleChanged();
            return
        }
        for (c = 0; c < b.getCount(); c++) {
            d = b.getAt(c);
            if (d.get("enable")) {
                continue
            }
            d.set("enable", true);
            a = true
        }
        if (a) {
            this.getGrid().checkOnRuleChanged()
        }
    },
    onCellClick: function(a, c, b) {
        if ("normal" !== a.state) {
            return
        }
        SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleEnableColumn.superclass.onCellClick.apply(this, arguments);
        a.checkOnRuleChanged()
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Checker", {
    extend: "Object",
    constructor: function(a) {
        this.previousProcess = null;
        this.scope = null;
        this.statusHandler = null;
        if (!a.appWin) {
            SYNO.Debug("contructor failed due to no module");
            this.appWin = null
        } else {
            this.appWin = a.appWin
        }
        if (!a.scope) {
            SYNO.Debug("constructor failed due to no scope");
            this.scope = null
        } else {
            this.scope = a.scope
        }
        if (!a.callback) {
            SYNO.Debug("constructor failed due to no callback");
            this.statusHandler = null
        } else {
            this.statusHandler = a.callback
        }
        if (!a.interval) {
            this.interval = 1
        } else {
            this.interval = a.interval
        }
        this.pfConfPollId = null;
        this.pfConf = {
            interval: this.interval,
            immediate: false,
            webapi: {
                api: "SYNO.Core.PortForwarding",
                version: 1,
                method: "get_current_process"
            },
            status_callback: function(e, c, d, b) {
                if (!e) {
                    this.previousProcess = this.process;
                    this.process = "";
                    this.processTaskId = ""
                } else {
                    this.previousProcess = this.process;
                    this.process = c.process;
                    this.processTaskId = c.task_id
                }
                this.statusHandler.call(this.scope);
                SYNO.Debug("pf conf status_callback")
            },
            scope: this
        }
    },
    Start: function() {
        this.Stop();
        this.pfConfPollId = this.appWin.pollReg(this.pfConf)
    },
    Stop: function() {
        if (this.pfConfPollId) {
            this.appWin.pollUnreg(this.pfConfPollId)
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util");
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.PPPoEInfo = function() {
    var a = false;
    var b = function(d) {
        for (var c = 0; c < d.size(); c++) {
            if (d[c].status === "connected") {
                a = true;
                break
            }
        }
    };
    return {
        joinCompound: function(c) {
            c.params.push({
                api: "SYNO.Core.Network.PPPoE",
                version: 1,
                method: "list"
            });
            c.callbacks.push(b)
        },
        isPPPoE: function() {
            return a
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.NetworkInfo = function() {
    var b = {};
    var a = function(c) {
        b = c
    };
    return {
        joinCompound: function(c) {
            c.params.push({
                api: "SYNO.Core.Network",
                version: 1,
                method: "get"
            });
            c.callbacks.push(a)
        },
        getNetworkInfo: function() {
            return b
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.RouterConfInfo = function() {
    var b = {};
    var a = function(c) {
        if (("" === c.router_brand) && ("" === c.router_model) && ("" === c.router_version)) {
            b = {}
        } else {
            b = c
        }
    };
    return {
        joinCompound: function(c) {
            c.params.push({
                api: "SYNO.Core.PortForwarding.RouterConf",
                version: 1,
                method: "get"
            });
            c.callbacks.push(a)
        },
        getRouterConf: function() {
            return b
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.ServiceName = function(e, c) {
    var d = [];
    var g = {};
    var b = false;
    if (!e) {
        SYNO.Debug("scope is empty");
        return {}
    }
    if (!c) {
        SYNO.Debug("appWin is empty");
        return {}
    }
    if (!c.sendWebAPI) {
        SYNO.Debug("appWin.sendWebAPI is empty");
        return {}
    }
    var f = function() {
        return {
            api: "SYNO.Core.Service.PortInfo",
            version: 1,
            method: "load",
            params: {
                target: ["port_forward"]
            }
        }
    };
    var a = function() {
        return function(k) {
            d = [];
            g = {};
            var i = k.port_info;
            for (var h = 0; h < i.size(); h++) {
                g[i[h].port_id] = i[h].desc;
                d.push([i[h].port_id, i[h].desc, i[h].dst_port, i[h].router_ports, i[h].protocol, i[h].enabled])
            }
            b = true
        }
    };
    return {
        hasInitialized: function() {
            return b
        },
        initAsync: function(h) {
            var i = f();
            i.scope = e;
            i.callback = function(m, l, j) {
                var k = null;
                if (m) {
                    if (!l) {
                        SYNO.Debug("data is empty");
                        return
                    }
                    k = a();
                    k(l)
                } else {
                    SYNO.Debug("send Service.PortInfo failed")
                }
                if (h) {
                    h()
                }
            };
            c.sendWebAPI(i)
        },
        joinCompound: function(h) {
            h.params.push(f());
            h.callbacks.push(a())
        },
        getServiceDesc: function(i) {
            var h = _T("routerconf", "routerconf_customport_short");
            if (!i) {
                return h
            }
            if (!g) {
                SYNO.Debug("serviceNameMapping is empty");
                return i
            }
            if (g[i]) {
                h = g[i]
            } else {
                if (i) {
                    h = i
                } else {}
            }
            return h
        },
        getPortInfoArrayData: function() {
            return d
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.PortStatus = function(c) {
    var b = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding;
    var d = c;
    var e = function(i, g, f) {
        for (var h = 0; h < i[b.WEBAPI_PORT_INFO].length; h++) {
            if (g === i[b.WEBAPI_PORT_INFO][h].status) {
                f(i[b.WEBAPI_PORT_INFO][h])
            }
        }
    };
    var a = function(h, k) {
        var m = "";
        var l = c[h];
        for (var g = 0; g < l[b.WEBAPI_PORT_INFO].length; g++) {
            var f = l[b.WEBAPI_PORT_INFO][g][k];
            if (!m) {
                m += f
            } else {
                m = m + ", " + f
            }
        }
        return m
    };
    return {
        getRulesNumber: function() {
            return d.length
        },
        getRule: function(f) {
            return d[f]
        },
        getDsPorts: function(f) {
            return a(f, b.WEBAPI_DS_PORT)
        },
        getRemapRouterPorts: function(f) {
            return a(f, b.WEBAPI_REMAP_ROUTER_PORT)
        },
        getRouterPorts: function(f) {
            return a(f, b.WEBAPI_ROUTER_PORT)
        },
        getFailRouterPorts: function(g) {
            var f = "";
            e(g, 2, function(h) {
                if (!f) {
                    f += h[b.WEBAPI_ROUTER_PORT]
                } else {
                    f = f + ", " + h[b.WEBAPI_ROUTER_PORT]
                }
            });
            return f
        }
    }
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow", {
    extend: "SYNO.SDS.ModalWindow",
    UNDO_TEXT_HEIGHT: 70,
    UNDO_WINDOW_WIDTH: 600,
    UNDO_PANEL_WIDTH: 600,
    UNDO_PANEL_HEIGHT: 300,
    constructor: function(b) {
        this.owner = b.owner;
        this.undoText = b.text;
        this.forciable = b.forciable;
        this.confirmCB = b.confirmCB;
        this.cancelCB = b.cancelCB;
        this.forceCheckBox = new SYNO.ux.Checkbox({
            itemId: "forceCheckBox",
            boxLabel: '<span class="red-status">' + _T("routerconf", "force_port_map") + "</span>&nbsp&nbsp",
            indent: 1,
            hidden: true,
            listeners: {
                check: {
                    scope: this,
                    fn: function(d, c) {
                        this.forceCheckBoxHandler(d, c)
                    }
                }
            }
        });
        this.enableColumn = new SYNO.ux.EnableColumn({
            header: _T("routerconf", "routerconf_header_enabled"),
            dataIndex: "enable",
            width: 80,
            align: "center",
            id: "enable",
            commitChanges: true,
            onCellClick: function(d, c, e) {
                SYNO.ux.EnableColumn.prototype.onCellClick.apply(this, arguments)
            }
        });
        var a = SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            autoScroll: false,
            trackResetOnLoad: true,
            synodefaults: {
                width: 200
            },
            items: [{
                xtype: "syno_displayfield",
                indent: 1,
                value: this.undoText,
                autoScroll: true,
                height: SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow.prototype.UNDO_TEXT_HEIGHT
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: ""
            }, {
                xtype: "syno_gridpanel",
                indent: 1,
                itemId: "test_list",
                trackOver: false,
                plugins: [this.enableColumn],
                cm: this.createColumnModel(),
                draggable: false,
                enableColumnMove: false,
                overClass: "",
                autoScroll: true,
                store: this.createJsonStore(),
                width: SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow.prototype.UNDO_PANEL_WIDTH,
                height: SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow.prototype.UNDO_PANEL_HEIGHT
            }, this.forceCheckBox],
            buttons: [{
                text: _T("common", "commit"),
                xtype: "syno_button",
                btnStyle: "blue",
                itemId: "apply",
                scope: this,
                handler: function() {
                    this.commitHandler()
                }
            }, {
                text: _T("common", "alt_cancel"),
                xtype: "syno_button",
                btnStyle: "grey",
                itemId: "cancel",
                scope: this,
                handler: function() {
                    this.cancelHandler()
                }
            }],
            listeners: {
                activate: this.onActivate,
                deactivate: this.onDeactivate
            },
            width: SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow.prototype.UNDO_WINDOW_WIDTH,
            height: SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow.prototype.UNDO_PANEL_HEIGHT + SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow.prototype.UNDO_TEXT_HEIGHT + 130,
            resizable: false
        }, b));
        this.callParent([a]);
        this.on("afterlayout", function(c, d) {
            SYNO.SDS.Utils.AddTip(this.forceCheckBox.getEl(), _T("routerconf", "force_msg_content"))
        }, this, {
            single: true
        })
    },
    onActivate: function() {
        this.callParent(arguments);
        var a = this.createTestArray();
        this.getComponent("test_list").getStore().loadData(a, false);
        if (this.forciable) {
            this.forceCheckBox.show()
        }
    },
    createColumnModel: function() {},
    createJsonStore: function() {},
    createTestArray: function() {},
    forceCheckBoxHandler: function(b, a) {},
    commitHandler: function() {},
    cancelHandler: function() {}
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ChYesForceUndoWindow", {
    extend: "SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ForceUndoWindow",
    createColumnModel: function() {
        return new Ext.grid.ColumnModel([this.enableColumn, {
            header: _T("common", "status"),
            dataIndex: "status",
            id: "status",
            align: "center",
            sortable: true,
            width: 80,
            renderer: function(d, b) {
                var c = "";
                var a = "";
                if (!d) {
                    c = _T("common", "common_success");
                    a = c
                } else {
                    c = _T("routerconf", "failed_external_ports") + ": " + d;
                    a = _T("routerconf", "routerconf_status_failed")
                }
                b.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                return a
            }
        }, {
            header: _T("routerconf", "routerconf_header_service"),
            dataIndex: "serviceid",
            id: "serviceid",
            sortable: true,
            width: 160,
            renderer: function(b, a) {
                a.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"';
                return b
            }
        }, {
            header: _T("routerconf", "routerconf_header_ds_port"),
            dataIndex: "ds_port",
            id: "ds_port",
            width: 100,
            renderer: function(b, a) {
                a.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"';
                return b
            }
        }, {
            header: _T("routerconf", "routerconf_header_router_port"),
            dataIndex: "router_port",
            id: "router_port",
            width: 100,
            renderer: function(b, a) {
                a.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"';
                return b
            }
        }, {
            header: _T("routerconf", "routerconf_header_protocol"),
            dataIndex: "protocol",
            id: "protocol",
            sortable: true,
            width: 100,
            renderer: function(b, a) {
                a.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"';
                return b
            }
        }])
    },
    createJsonStore: function() {
        return new Ext.data.JsonStore({
            autoLoad: false,
            fields: [{
                mapping: "enable",
                name: "enable"
            }, {
                mapping: "status",
                name: "status"
            }, {
                mapping: "service_name",
                name: "service_name"
            }, {
                mapping: "serviceid",
                name: "serviceid"
            }, {
                mapping: "ds_port",
                name: "ds_port"
            }, {
                mapping: "router_port",
                name: "router_port"
            }, {
                mapping: "router_port_tmp",
                name: "router_port_tmp"
            }, {
                mapping: "remap_router_port_tmp",
                name: "remap_router_port_tmp"
            }, {
                mapping: "protocol",
                name: "protocol"
            }, {
                mapping: "rule_index",
                name: "rule_index"
            }]
        })
    },
    createTestArray: function() {
        var a = [];
        var d = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_SERVICENAME;
        var b = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.WEBAPI_SERVICEID;
        if (this.portStatusObj) {
            for (var c = 0; c < this.portStatusObj.getRulesNumber(); c++) {
                var e = this.portStatusObj.getRule(c);
                a.push({
                    enable: true,
                    status: this.portStatusObj.getFailRouterPorts(e),
                    serviceid: this.serviceDescObj.getServiceDesc(e[b]),
                    service_name: e[d],
                    ds_port: this.portStatusObj.getDsPorts(c),
                    router_port: this.portStatusObj.getRemapRouterPorts(c),
                    router_port_tmp: this.portStatusObj.getRouterPorts(c),
                    remap_router_port_tmp: this.portStatusObj.getRemapRouterPorts(c),
                    protocol: e.router_protocol.toUpperCase(),
                    rule_index: e.index
                })
            }
        }
        return a
    },
    forceCheckBoxHandler: function(e, d) {
        var c = this.getComponent("test_list");
        var a = c.getStore();
        for (var b = 0; b < a.getCount(); b++) {
            var f = a.getAt(b);
            if (d) {
                f.set("router_port", f.get("router_port_tmp"))
            } else {
                f.set("router_port", f.get("remap_router_port_tmp"))
            }
        }
        a.commitChanges()
    },
    commitHandler: function() {
        if (this.confirmCB) {
            var c = this.getComponent("test_list");
            var a = c.getStore();
            for (var b = 0; b < a.getCount(); b++) {
                var d = a.getAt(b);
                if (!d.get("enable")) {
                    d.set("router_port", d.get("router_port_tmp"))
                }
            }
            a.commitChanges();
            this.confirmCB({
                blForce: this.forceCheckBox.getValue(),
                store: a
            })
        }
        this.close()
    },
    cancelHandler: function() {
        this.cancelCB();
        this.close()
    }
});
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.OtherDeviceUsedPortNumber = function(a) {
    var d = -1;
    var b = [];
    var c = [];
    if (!a) {
        SYNO.Debug("appWin is empty");
        return {}
    }
    if (!a.sendWebAPI) {
        SYNO.Debug("appWin.sendWebAPI is empty");
        return {}
    }
    return {
        asyncUpdateMaxPorts: function(e) {
            a.sendWebAPI({
                api: "SYNO.Core.PortForwarding.RouterInfo",
                version: 1,
                method: "get",
                callback: function(h, g, f) {
                    if (h) {
                        d = g.otherDeviceUsed;
                        b = g.otherDeviceUsedTCPPorts;
                        c = g.otherDeviceUsedUDPPorts
                    } else {
                        d = 0;
                        b = [];
                        c = []
                    }
                    if (e) {
                        e()
                    }
                }
            })
        },
        getOtherDeviceUsedPortsNumber: function() {
            return d
        },
        getConflictPortsWithOtherDevice: function(h, f) {
            var e = [];
            var l = (f.toUpperCase() === "TCP") ? b : c;
            for (var k = 0; k < h.length; k++) {
                for (var g = 0; g < l.length; g++) {
                    if (h[k] === l[g]) {
                        e.push(h[k])
                    }
                }
            }
            return e
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.GetDisabledSystemServiceMsg = function(d, b, a) {
    if (!d) {
        SYNO.Debug("appWin is empty");
        return {}
    }
    if (!d.sendWebAPI) {
        SYNO.Debug("appWin.sendWebAPI is empty");
        return {}
    }
    var c = function(g, e) {
        if (!e) {
            SYNO.Debug("isPortIdInService failed due to service_obj is null");
            return false
        }
        if (!e.additional) {
            return false
        }
        if (!e.additional.port_info) {
            return false
        }
        var h = e.additional.port_info;
        for (var f = 0; f < h.size(); f++) {
            if (g === h[f].port_id) {
                SYNO.Debug("matched prot_id=" + g + ", service=" + e.display_name);
                return true
            }
        }
        return false
    };
    d.sendWebAPI({
        api: "SYNO.Core.Service",
        method: "get",
        version: 1,
        params: {
            additional: ["port_info"]
        },
        callback: function(p, h, o) {
            var n = "";
            if (!p || !h) {
                return
            }
            var l = {};
            for (var k = 0; k < b.getCount(); k++) {
                var e = b.getAt(k);
                if (!e.get("enable")) {
                    continue
                }
                var f = e.get("serviceid").id;
                for (var g = 0; g < h.service.size(); g++) {
                    if (c(f, h.service[g]) && !h.service[g].enable) {
                        l[h.service[g].service_id] = h.service[g]
                    }
                }
            }
            for (var m in l) {
                if (l.hasOwnProperty(m)) {
                    n += "<br>&nbsp;&nbsp;" + l[m].display_name
                }
            }
            a(n)
        }
    })
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleGrid", {
    extend: "SYNO.ux.EditorGridPanel",
    getHelpParam: function() {
        return "AdminCenter/connection_routerconf.html"
    },
    constructor: function(b) {
        this.msg = "";
        this.testPortConnPollId = null;
        this.iface = null;
        this.state = null;
        this.routerinfo = null;
        this.isRouterChanged = undefined;
        this.module = b.module;
        var c = this.createColumnModel();
        var a = Ext.apply({
            width: 600,
            height: 300,
            title: _T("tree", "leaf_routerconf"),
            cm: c,
            plugins: c.config[0],
            autoExpandColumn: "serviceid",
            enableHdMenu: false,
            loadMask: false,
            cls: "without-dirty-red-grid",
            listeners: {
                activate: this.onActivate,
                deactivate: this.onDeactivate,
                validateedit: function(d) {
                    var f = function(h, g) {
                        h.cancel = true;
                        if (!g) {
                            g = _T("routerconf", "routerconf_port_value_invalid")
                        }
                        this.module.appWin.getMsgBox().alert(_T("routerconf", "routerconf_portfwd_title"), g)
                    }.bind(this);
                    SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.PortsValidate({
                        dsPortsString: d.record.get("ds_port").toString(),
                        routerPortsString: d.value,
                        cb: function(e) {
                            if (0 > e.ret) {
                                f(d)
                            }
                        }.bind(this)
                    })
                },
                scope: this
            },
            clicksToEdit: 1,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: this.checkOnSelectionChanged,
                    scope: this
                }
            }),
            store: new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleStore({
                owner: this.module.appWin,
                grid: this,
                serviceDescObj: this.serviceDescObj
            }),
            tbar: [{
                xtype: "syno_button",
                text: _T("routerconf", "routerconf_setup_router"),
                handler: this.onSetupRouter,
                scope: this,
                itemId: "router"
            }, {
                xtype: "syno_button",
                text: _T("common", "create"),
                handler: this.onCreateRule,
                scope: this,
                itemId: "create"
            }, {
                xtype: "syno_button",
                text: _T("common", "delete"),
                handler: this.onDeleteRule,
                scope: this,
                itemId: "del"
            }, {
                disabled: this._S("demo_mode"),
                xtype: "syno_button",
                text: _T("common", "save"),
                handler: this.onSave,
                scope: this,
                itemId: "save"
            }, {
                disabled: this._S("demo_mode"),
                xtype: "syno_button",
                text: _T("routerconf", "routerconf_test_conn"),
                handler: this.onTest,
                scope: this,
                itemId: "test"
            }],
            bbar: [{
                xtype: "syno_displayfield",
                value: _T("common", "loading"),
                itemId: "max_used"
            }]
        }, b);
        this.callParent([a])
    },
    createColumnModel: function() {
        var k = '<img align="center" width="16" height="16" border=0 src="{0}">';
        var l = "/scripts/ext-3/resources/images/default/grid/loading.gif";
        var e = {
            tcp: _T("routerconf", "routerconf_protocol_tcp"),
            udp: _T("routerconf", "routerconf_protocol_udp")
        };
        var h = {
            testing: String.format(k, l),
            waiting: String.format(k, l),
            yes: _T("routerconf", "routerconf_status_ok"),
            no: _T("routerconf", "routerconf_status_failed"),
            udp: _T("routerconf", "routerconf_status_ntest"),
            nolisten: _T("routerconf", "routerconf_status_ntest"),
            notest: _T("routerconf", "routerconf_status_ntest"),
            psuccess: _T("routerconf", "routerconf_status_failed")
        };
        var j = {
            testing: _T("routerconf", "routerconf_status_testing"),
            waiting: _T("routerconf", "routerconf_status_testing"),
            yes: _T("routerconf", "routerconf_status_ok"),
            no: _T("routerconf", "routerconf_tip_net_cnn_failed"),
            udp: _T("routerconf", "routerconf_tip_udp"),
            nolisten: _T("routerconf", "routerconf_tip_no_service"),
            notest: _T("routerconf", "routerconf_status_ntest"),
            psuccess: _T("routerconf", "routerconf_tip_psuccess")
        };
        var f = function(o, n, m) {
            n.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(o) + '"';
            return o
        };
        var d = function(D, x, n) {
            var v = 0;
            var p = function(J) {
                var F = "";
                var I = {
                    port: null,
                    originPort: null
                };
                var E = false;
                var H = J;
                var G = function(N) {
                    var K = N.ret;
                    var M = N.prePortObj;
                    var O = N.curPortObj;
                    var L = N.toStringCB;
                    if (N.blDashed) {
                        K = K + L(M);
                        K = K + ", " + L(O);
                        N.blDashed = false
                    } else {
                        K = K + ", " + L(O)
                    }
                    return K
                };
                return {
                    init: function() {
                        F = "";
                        I = {
                            port: null,
                            originPort: null
                        };
                        E = false
                    },
                    addPort: function(L) {
                        var K = {};
                        if (!I.port) {
                            F = H(L)
                        } else {
                            if ((1 === Math.abs(I.port - L.port)) && (1 === Math.abs(I.originPort - L.originPort))) {
                                if (E) {} else {
                                    F += "-";
                                    E = true
                                }
                            } else {
                                K = {
                                    ret: F,
                                    blDashed: E,
                                    prePortObj: I,
                                    curPortObj: L,
                                    toStringCB: H
                                };
                                F = G(K);
                                E = K.blDashed
                            }
                        }
                        I = L
                    },
                    finish: function() {
                        if (E) {
                            F += H(I);
                            E = false
                        }
                    },
                    toString: function() {
                        return F
                    }
                }
            };
            var t = function(E) {
                if (!E) {
                    SYNO.Debug("portObj is empty");
                    return false
                }
                if (E.originPort) {
                    return true
                }
                return false
            };
            var r = function(E) {
                if (t(E)) {
                    return '<span class="blue-status">' + E.port + "</span>"
                } else {
                    return E.port
                }
            };
            var s = function(E) {
                if (t(E)) {
                    return E.port + "(" + E.originPort + ")"
                } else {
                    return E.port
                }
            };
            var u = null;
            var m = [];
            var y = null;
            var C = null;
            if (n.data.remap_router_port_map_table) {
                u = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Ports(D);
                m = u.toArr();
                y = p(r);
                C = p(s);
                y.init();
                C.init();
                for (v = 0; v < m.length; v++) {
                    for (var q = m[v].min; q <= m[v].max; q++) {
                        var A = n.data.remap_router_port_map_table[q];
                        y.addPort({
                            port: q,
                            originPort: A
                        });
                        C.addPort({
                            port: q,
                            originPort: A
                        })
                    }
                }
                y.finish();
                C.finish();
                x.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(C.toString()) + '"';
                return y.toString()
            } else {
                var w = true;
                var B = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray(n.data.ds_port);
                var o = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray(n.data.router_port);
                var z = D;
                for (v = 0; v < B.length; v++) {
                    if (B[v] !== o[v]) {
                        w = false;
                        break
                    }
                }
                if (false === w) {
                    z = '<span class="blue-status">' + D + "</span>"
                }
                x.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(D) + '"';
                return z
            }
        };
        var b = function(n, m) {
            if (n in e) {
                return e[n]
            } else {
                return "-"
            }
        };
        var g = function(n, m) {
            m.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(n.desc) + '"';
            return n.desc
        };
        var c = function(n, m) {
            if (n in j) {
                m.attr = String.format('ext:qtip="{0}"', Ext.util.Format.htmlEncode(j[n]))
            } else {
                m.attr = ""
            }
            if (n in h) {
                return h[n]
            } else {
                return "-"
            }
        };
        var i = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleEnableColumn({
            header: _T("routerconf", "routerconf_header_enabled"),
            dataIndex: "enable",
            width: 80,
            align: "center",
            commitChanges: false
        });
        var a = [i, {
            header: _T("routerconf", "routerconf_header_status"),
            dataIndex: "rule_status",
            width: 80,
            align: "center",
            renderer: c
        }, {
            header: _T("routerconf", "routerconf_header_service"),
            id: "serviceid",
            dataIndex: "serviceid",
            width: 150,
            align: "left",
            renderer: g
        }, {
            header: _T("routerconf", "routerconf_header_ds_port"),
            dataIndex: "ds_port",
            width: 120,
            align: "left",
            renderer: f
        }, {
            header: _T("routerconf", "routerconf_header_router_port"),
            dataIndex: "router_port",
            width: 120,
            align: "left",
            renderer: d,
            editor: new Ext.grid.GridEditor(new Ext.form.TextField({
                allowBlank: false,
                vtype: "portfwd"
            }))
        }, {
            header: _T("routerconf", "routerconf_header_protocol"),
            dataIndex: "router_protocol",
            width: 60,
            align: "center",
            renderer: b
        }];
        return new Ext.grid.ColumnModel(a)
    },
    changeState: function(b) {
        var a = {
            error: function() {
                this.disableAllButton();
                if (!this.el.isMasked()) {
                    this.el.mask()
                }
            },
            normal: function() {
                this.getButton("router").enable();
                this.getButton("create").enable();
                this.checkOnRuleChanged();
                this.checkOnSelectionChanged(this.getSelectionModel());
                this.el.unmask();
                this.getView().el.unmask()
            },
            set_router: function() {
                this.el.unmask();
                this.disableAllButton();
                this.enableButton("router", true)
            },
            testing: this.disableAllButton,
            waiting: this.disableAllButton
        };
        if (!(b in a)) {
            throw Error("changeState: no such state: " + b)
        }
        this.state = b;
        a[b].call(this)
    },
    checkOnRuleChanged: function() {
        this.updateUsedPortsAndShow();
        if (this._S("demo_mode")) {
            this.getButton("save").disable();
            this.getButton("save").setTooltip(_JSLIBSTR("uicommon", "error_demo"));
            this.getButton("test").disable();
            this.getButton("test").setTooltip(_JSLIBSTR("uicommon", "error_demo"));
            return
        }
        if (("normal" !== this.state)) {
            this.getButton("save").disable();
            this.getButton("test").disable();
            return
        }
        this.getButton(this.isDirty() ? "save" : "test").enable();
        this.getButton(!this.isDirty() ? "save" : "test").disable();
        if (0 >= this.getStore().getCount()) {
            this.getButton("test").disable()
        }
    },
    checkOnSelectionChanged: function(a) {
        if (0 < a.getCount() && "normal" === this.state) {
            this.enableButton("del", true)
        } else {
            this.enableButton("del", false)
        }
    },
    isDirty: function() {
        return this.getStore().isDirty() || this.isRouterChanged
    },
    clearDirty: function() {
        this.getStore().clearDirty();
        this.isRouterChanged = false
    },
    showMaxAndUsedPortObj: function(b, d) {
        var e = _T("routerconf", "max_port_map_number");
        var a = _T("routerconf", "used_port_map_number");
        var c = "";
        var f = function(k, i) {
            var j = {
                green: '<span class="green-status">',
                red: '<span class="red-status">',
                blue: '<span class="blue-status">',
                orange: '<span class="orange-status">'
            };
            var h = j[i];
            if (!h) {
                return k
            } else {
                return h + k + "</span>"
            }
        };
        var g = function(h, j) {
            var i = "";
            var k = h.toString();
            var l = j.toString();
            if (j / h >= 0.9) {
                l = f(l, "red")
            } else {
                l = f(l, "green")
            }
            k = f(k, "blue");
            i = a + "/" + e + ": " + l.bold() + "/" + k.bold();
            return i
        };
        if ((0 <= b) && (0 <= d)) {
            c = g(b, d);
            this.getBottomToolbar().getComponent("max_used").setValue(c)
        }
    },
    getMaxPortsNumber: function() {
        return parseInt(this.routerConfInfoObj.getRouterConf().router_max_rule, 10)
    },
    getOtherDeviceUsedPortsNumber: function() {
        return this.maxAndUsedPortObj.getOtherDeviceUsedPortsNumber()
    },
    getSystemUsedPorts: function() {
        return this.getStore().getSystemUsedPorts()
    },
    showMaxAndUsedPortsTips: function() {
        var a = "";
        var b = function() {
            var c = _T("routerconf", "max_and_used_tip");
            if (0 >= (this.getSystemUsedPorts() + this.getOtherDeviceUsedPortsNumber())) {
                return ""
            }
            return String.format(c, this.getSystemUsedPorts() + this.getOtherDeviceUsedPortsNumber())
        }.bind(this);
        a = b();
        if ("" !== a) {
            Ext.QuickTips.register({
                target: this.getBottomToolbar().getComponent("max_used").getEl(),
                text: a
            })
        } else {
            Ext.QuickTips.unregister(this.getBottomToolbar().getComponent("max_used").getEl())
        }
    },
    updateUsedPortsAndShow: function() {
        if (0 <= this.getOtherDeviceUsedPortsNumber() && this.isUpnpOrNatpmpRouter()) {
            this.showMaxAndUsedPortObj(this.getMaxPortsNumber(), this.getOtherDeviceUsedPortsNumber() + this.getStore().countUsedPortsNumber());
            this.showMaxAndUsedPortsTips()
        }
    },
    showLoadingForMaxAndUsedPorts: function() {
        var a = this.getBottomToolbar().getComponent("max_used");
        a.setValue(_T("common", "loading"));
        a.show()
    },
    hideMaxAndUsedPorts: function() {
        this.getBottomToolbar().getComponent("max_used").hide()
    },
    isExceedMaxUsedPorts: function() {
        var a = function() {
            var b = this.routerConfInfoObj.getRouterConf();
            if (this.isNatpmpRouter()) {
                return true
            }
            if (this.isUpnpRouter() && b && b.limit_upnp_portmap_number) {
                return true
            }
            return false
        }.bind(this);
        if (!a()) {
            return false
        }
        if ((this.getOtherDeviceUsedPortsNumber() + this.getStore().countUsedPortsNumber()) > this.getMaxPortsNumber()) {
            return true
        }
        return false
    },
    isUpnpRouter: function() {
        var a = this.routerConfInfoObj.getRouterConf();
        if (a) {
            if (a.support_natpmp && a.support_upnp) {
                if (("no" == a.support_natpmp) && ("yes" == a.support_upnp)) {
                    return true
                }
            }
        }
        return false
    },
    isNatpmpRouter: function() {
        var a = this.routerConfInfoObj.getRouterConf();
        if (a) {
            if (a.support_natpmp && a.support_upnp) {
                if (("yes" == a.support_natpmp) && ("no" == a.support_upnp)) {
                    return true
                }
            }
        }
        return false
    },
    isUpnpOrNatpmpRouter: function() {
        var a = this.routerConfInfoObj.getRouterConf();
        if (a) {
            if (a.support_natpmp && a.support_upnp) {
                if (("yes" == a.support_natpmp) || ("yes" == a.support_upnp)) {
                    return true
                }
            }
        }
        return false
    },
    isSupportChangePort: function() {
        var a = this.routerConfInfoObj.getRouterConf();
        if (a) {
            return a.support_change_port
        }
        return false
    },
    reloadMainPage: function() {
        var a = {
            params: [],
            callbacks: []
        };
        this.routerConfInfoObj = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.RouterConfInfo();
        this.pppoeInfoObj = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.PPPoEInfo();
        this.networkInfoObj = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.NetworkInfo();
        this.maxAndUsedPortObj = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.OtherDeviceUsedPortNumber(this.module.appWin);
        this.serviceDescObj = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.ServiceName(this, this.module.appWin);
        this.disableAllButton();
        this.getStore().setServiceDescObj(this.serviceDescObj);
        this.showLoadingForMaxAndUsedPorts();
        this.module.appWin.setStatusBusy();
        this.serviceDescObj.joinCompound(a);
        this.getStore().joinCompound(a);
        this.routerConfInfoObj.joinCompound(a);
        this.pppoeInfoObj.joinCompound(a);
        this.networkInfoObj.joinCompound(a);
        this.module.appWin.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: false,
                params: a.params
            },
            callback: function(f, d, c) {
                var e = null;
                this.module.appWin.clearStatusBusy();
                if (!f || !d.result) {
                    SYNO.Debug("compound for compoundParams failed");
                    this.module.appWin.getMsgBox().alert(this.title, _T("common", "error_system"));
                    return
                }
                for (var b = 0; b < a.params.size(); b++) {
                    e = SYNO.API.Util.GetValByAPI(d, a.params[b].api, a.params[b].method);
                    if (!e) {
                        SYNO.Debug("dataRet of " + a.params[b].api + ":" + a.params[b].method + " is empty");
                        this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
                        this.module.appWin.clearStatusBusy();
                        return
                    }
                    if (a.callbacks[b]) {
                        a.callbacks[b].call(this, e)
                    }
                }
                if (this.isUpnpOrNatpmpRouter()) {
                    this.maxAndUsedPortObj.asyncUpdateMaxPorts(function() {
                        this.updateUsedPortsAndShow()
                    }.bind(this))
                } else {
                    this.hideMaxAndUsedPorts()
                }
                if (this.pppoeInfoObj.isPPPoE()) {
                    this.confirmToChangeSetting(_T("routerconf", "routerconf_require_not_pppoe"), "SYNO.SDS.AdminCenter.Network.Main", "leaf_pppoe", {
                        tab: "InterfaceTab"
                    });
                    return this.changeState("error")
                } else {
                    if (null === this.networkInfoObj.getNetworkInfo().gateway_info) {
                        this.confirmToChangeSetting(_T("routerconf", "routerconf_require_iface"), "SYNO.SDS.AdminCenter.Network.Main", "leaf_lan");
                        return this.changeState("error")
                    } else {
                        if ((0 === Object.keys(this.networkInfoObj.getNetworkInfo()).length) || !this.networkInfoObj.getNetworkInfo().gateway_info.ifname || !this.networkInfoObj.getNetworkInfo().gateway_info.ip || !this.networkInfoObj.getNetworkInfo().gateway_info.mask || !this.networkInfoObj.getNetworkInfo().gateway_info.type) {
                            this.confirmToChangeSetting(_T("routerconf", "routerconf_require_gateway"), "SYNO.SDS.AdminCenter.Network.Main", "leaf_lan");
                            return this.changeState("error")
                        }
                    }
                }
                this.getColumnModel().setEditable(4, this.isSupportChangePort());
                this.statusUpdaterStart()
            }
        })
    },
    onActivate: function() {
        if (this.isDirty()) {
            return
        }
        this.resetMainPage();
        this.reloadMainPage()
    },
    resetMainPage: function() {
        this.getSelectionModel().clearSelections();
        this.el.unmask();
        this.getView().el.unmask();
        this.statusUpdaterStop();
        this.stopPollTestRuleStatus();
        this.stopPollSaveRuleStatus();
        Ext.QuickTips.unregister(this.getBottomToolbar().getComponent("max_used").getEl())
    },
    onDeactivate: function() {
        this.resetMainPage();
        return true
    },
    statusUpdaterStart: function() {
        this.statusUpdaterStop();
        this.status_updater = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Checker({
            appWin: this.module.appWin,
            scope: this,
            callback: this.statusHandler,
            interval: 1
        });
        this.status_updater.Start()
    },
    statusUpdaterStop: function() {
        if (this.status_updater) {
            this.status_updater.Stop()
        }
    },
    statusHandler: function() {
        SYNO.Debug("this.status_updater.process=" + this.status_updater.process);
        if (this.status_updater.process === "portforwarding") {
            this.changeState("waiting");
            if (this.status_updater.processTaskId) {
                this.startPollSaveRuleStatus({
                    taskId: this.status_updater.processTaskId
                })
            } else {
                this.getView().el.mask(_T("routerconf", "routerconf_upnp_service_busy"), "syno-ux-mask-info")
            }
            return
        } else {
            if ((this.status_updater.process === "autotest") || (this.status_updater.process === "routerdetect")) {
                if (this.status_updater.processTaskId) {
                    this.getView().el.mask(_T("routerconf", "routerconf_upnp_service_busy"), "syno-ux-mask-info")
                } else {
                    this.getView().el.mask(_T("routerconf", "routerconf_upnp_service_busy"), "syno-ux-mask-info")
                }
                this.changeState("testing");
                return
            } else {
                if ("testrule" == this.status_updater.process) {
                    if (this.status_updater.processTaskId) {
                        if ("testrule" != this.status_updater.previousProcess) {
                            this.getStore().load({
                                callback: function() {
                                    if ("testrule" == this.status_updater.process) {
                                        this.startPollTestRuleStatus({
                                            taskId: this.status_updater.processTaskId
                                        })
                                    }
                                },
                                scope: this
                            })
                        } else {}
                    } else {
                        this.getView().el.mask(_T("routerconf", "routerconf_upnp_service_busy"), "syno-ux-mask-info");
                        this.changeState("testing")
                    }
                } else {
                    if (0 === Object.keys(this.routerConfInfoObj.getRouterConf()).length) {
                        this.getView().el.mask(_T("routerconf", "routerconf_no_router_setting"), "syno-ux-mask-info");
                        return this.changeState("set_router")
                    } else {
                        this.changeState("normal")
                    }
                }
            }
        }
    },
    showSaveRuleProgress: function(a) {
        var b = "";
        if (a.stage) {
            if ("add" === a.stage) {
                b = _T("routerconf", "routerconf_progress_add")
            } else {
                if ("del" === a.stage) {
                    b = _T("routerconf", "routerconf_progress_delete")
                }
            }
        }
        this.saveRuleProgressBar = this.module.appWin.getMsgBox();
        this.saveRuleProgressBar.show({
            width: 240,
            progress: true,
            closable: false
        });
        this.saveRuleProgressBar.updateProgress(a.percentage * 0.01, a.percentage + "%", b)
    },
    hideSaveRuleProgress: function() {
        if (this.saveRuleProgressBar) {
            this.saveRuleProgressBar.hide();
            this.saveRuleProgressBar = null
        }
    },
    toSaveRuleErrorStringWithData: function(a, c) {
        var e = 1521;
        var b = 1522;
        var h = 1523;
        var g = 1524;
        var i = 1525;
        var d = 1526;
        var f = SYNO.API.getErrorString(a);
        if (a === e) {
            return String.format(f, c.errors.append.max_port)
        } else {
            if (a === b) {
                return String.format(f, c.errors.append.max_port)
            } else {
                if (a === h) {
                    return String.format(f, c.errors.append.max_port, c.errors.append.max_range)
                } else {
                    if (a === g) {
                        return f + " : " + c.errors.append.max_port
                    } else {
                        if (a === i) {
                            return f + " : " + c.errors.append
                        } else {
                            if (a === d) {
                                return f + " : " + c.errors.append
                            }
                        }
                    }
                }
            }
        }
        return f
    },
    saveRuleErrorHandler: function(a, c) {
        var b = 1501;
        if (a === b) {
            this.statusUpdaterStop();
            this.showSaveRuleErrorMessage(c)
        } else {
            this.statusUpdaterStop();
            this.showSaveRuleErrorMessage(c)
        }
    },
    confirmToChangeSetting: function(c, a, e, b) {
        var d = c + "<br>" + String.format(_T("routerconf", "routerconf_goto_module"), _T("tree", e));
        this.module.appWin.getMsgBox().confirm(_T("tree", "leaf_routerconf"), d, function(f) {
            if ("yes" === f) {
                this.module.appWin.startModule(a, b)
            } else {
                this.getView().el.mask(c, "syno-ux-mask-info")
            }
        }, this)
    },
    startTestRules: function(b) {
        var a = b.selectedRules;
        var c = b.success_callback;
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.PortForwarding.Rules",
            version: 1,
            method: "test",
            params: {
                selection: a ? a.join(",") : ""
            },
            callback: function(f, e, d) {
                if (f) {
                    this.startPollTestRuleStatus({
                        taskId: e.task_id,
                        success_callback: c
                    })
                }
            },
            scope: this
        })
    },
    isPortsInRecord: function(c, a) {
        var b = "";
        if (!c || !a) {
            SYNO.Debug("[Error] port=" + c + " record=" + a);
            return
        }
        b = c + ", " + a.data.router_port;
        return SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Conflict(b).length > 0
    },
    getRecordsInStoreByUserSelectedPorts: function(e) {
        var c = [];
        var d, b, a = this.getStore();
        if (!e || (0 >= e.length)) {
            return c
        }
        for (d = 0; d < a.getCount(); d++) {
            for (b = 0; b < e.length; b++) {
                if ((e[b].data.router_protocol == "all" || (e[b].data.router_protocol != "all" && e[b].data.router_protocol == a.getAt(d).data.router_protocol))) {
                    if (this.isPortsInRecord(e[b].data.router_port, a.getAt(d))) {
                        c.push(a.getAt(d));
                        break
                    }
                }
            }
        }
        return c
    },
    testingStart: function(e) {
        var f = e.selectedRecords;
        var g = e.success_callback;
        var d = [];
        var c, b = this.getStore();
        var a = this.getRecordsInStoreByUserSelectedPorts(f);
        if (0 >= a.length) {
            for (c = 0; c < b.getCount(); c++) {
                a.push(b.getAt(c))
            }
            if (0 >= a.length) {
                return
            }
        }
        for (c = 0; c < a.length; c++) {
            if (a[c].get("enable")) {
                a[c].set("rule_status", "testing");
                d.push(a[c].get("rule_id"))
            }
        }
        this.startTestRules({
            selectedRules: d,
            success_callback: g
        })
    },
    testingStop: function(e) {
        var c = this.getStore();
        var d, b;
        var a = {
            testing: "no",
            waiting: "psuccess"
        };
        this.stopPollTestRuleStatus(true);
        for (d = 0; d < c.getCount(); d++) {
            b = c.getAt(d).get("rule_status");
            if (b in a) {
                c.getAt(d).set("rule_status", a[b])
            }
        }
        c.commitChanges()
    },
    testPortConnErrorHandler: function(a, c) {
        var b = 1501;
        this.testingStop(false);
        if (a === b) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "error_occupied"));
            return
        } else {
            var d = SYNO.API.getErrorString(a);
            this.module.appWin.getMsgBox().alert(this.title, d)
        }
    },
    loadTestRuleResult: function(d) {
        var c, a = this.getStore();
        if (d.rules && this.getStore()) {
            for (c in d.rules) {
                if (d.rules.hasOwnProperty(c)) {
                    for (var b = 0; b < this.getStore().getCount(); b++) {
                        if (a.getAt(b).get("rule_id") === c) {
                            break
                        }
                    }
                    if (b === this.getStore().getCount()) {
                        SYNO.Debug("error occur: can not find rule_id by id in store");
                        break
                    }
                    a.getAt(b).set("rule_status", d.rules[c] === "fail" ? "no" : d.rules[c])
                }
            }
            a.commitChanges()
        }
    },
    startPollTestRuleStatus: function(c) {
        var b = c.taskId;
        var d = c.success_callback;
        var a = {
            interval: 3,
            immediate: false,
            webapi: {
                api: "SYNO.Core.PortForwarding.Rules",
                version: 1,
                method: "test_status",
                params: {
                    task_id: b
                }
            },
            status_callback: function(h, f, g, e) {
                if (h) {
                    if ("wait" === f.status) {
                        return true
                    }
                    this.loadTestRuleResult(f);
                    if ("success" == f.status) {
                        if (d) {
                            d()
                        }
                        this.testingStop(true);
                        this.isRuleStatusLoaded = true
                    }
                } else {
                    SYNO.Debug("polling test port connection, error occur, into error handling");
                    this.testPortConnErrorHandler(f.code, f)
                }
            },
            scope: this
        };
        this.statusUpdaterStop();
        this.changeState("testing");
        if (this.testPortConnPollId) {
            this.module.appWin.pollUnreg(this.testPortConnPollId);
            this.testPortConnPollId = null
        }
        this.testPortConnPollId = this.module.appWin.pollReg(a)
    },
    stopPollTestRuleStatus: function(a) {
        if (this.testPortConnPollId) {
            this.module.appWin.pollUnreg(this.testPortConnPollId);
            this.testPortConnPollId = null
        }
        if (a) {
            this.status_updater.Start()
        }
    },
    getButton: function(a) {
        var b = this.getTopToolbar();
        return b.getComponent(a)
    },
    enableButton: function(d, a) {
        var b = this.getButton(d);
        var c;
        if (!Ext.isObject(b)) {
            SYNO.Debug("enableButton failed: no button object of ", d);
            return
        }
        c = a ? b.enable() : b.disable()
    },
    disableAllButton: function() {
        Ext.each(["router", "create", "del", "save", "test"], function(a) {
            this.getButton(a).disable()
        }, this)
    },
    onSetupRouter: function() {
        this.statusUpdaterStop();
        var a = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RouterWizard({
            module: this.module,
            owner: this.module.appWin
        });
        a.open({
            scope: this,
            callback: function() {
                this.isRouterChanged = true;
                this.reloadMainPage()
            }
        })
    },
    onCreateRule: function() {
        var a = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.AddRuleWizard({
            module: this.module,
            owner: this.module.appWin,
            appWin: this.module.appWin,
            rule_store: this.getStore(),
            serviceDescObj: this.serviceDescObj,
            isSupportChangePort: this.routerConfInfoObj.getRouterConf().support_change_port,
            next_step_callback: this.updateUsedPortsAndShow,
            next_step_callback_scope: this
        });
        a.open()
    },
    onDeleteRule: function() {
        var b = this.getSelectionModel().getSelections();
        var a = this.getStore();
        var c = 0;
        for (c = 0; c < b.length; c++) {
            a.remove(b[c])
        }
        this.updateUsedPortsAndShow()
    },
    onSave: function(d) {
        var c = 0;
        var h = this.getStore();
        var e = "";
        var g = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleSet();
        var f = function() {
            var m = 0;
            var p = null;
            var o = null;
            var l = false;
            var k = {
                alert: true,
                text: String.format("{0}:<br>", _T("routerconf", "routerconf_port_conflict"))
            };
            var n = function(q, r, i) {
                k.text += String.format("[{0} : {1}]<br>[{2} : {3}]<br>&nbsp", i.getServiceName(), i.getProtocol(), r.getServiceName(), r.getProtocol());
                if (q.dsPort.size() > 0) {
                    k.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_ds_port"), q.dsPort.toString())
                }
                if (q.routerPort.size() > 0) {
                    k.text += String.format(" {0}:{1} ", _T("routerconf", "routerconf_header_router_port"), q.routerPort.toString())
                }
                k.text += "<br>"
            };
            for (m = 0; m < h.getCount(); m++) {
                p = h.getAt(m);
                if (!p.get("enable")) {
                    continue
                }
                o = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Rule({
                    blEnable: p.get("enable"),
                    szServiceName: p.get("serviceid").desc,
                    szDsPorts: p.get("ds_port").toString(),
                    szRouterPorts: p.get("router_port").toString(),
                    szProtocol: p.get("router_protocol")
                });
                if (!g.addRule(o, n)) {
                    l = true
                }
            }
            if (l) {
                this.module.appWin.getMsgBox().alert(this.title, k.text);
                return false
            }
            return true
        }.bind(this);
        var b = function(k) {
            var m = 0,
                l = 0;
            for (m = 0; m < k.getCount(); m++) {
                var p = k.getAt(m);
                if (!p.get("enable")) {
                    continue
                }
                var n = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray(p.get("ds_port").toString());
                var o = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray(p.get("router_port").toString());
                for (l = 0; l < n.length; l++) {
                    if (n[l] !== o[l]) {
                        return true
                    }
                }
            }
            return false
        }.bind(this);
        var j = function(k) {
            var m = 0,
                l = 0;
            for (m = 0; m < k.getCount(); m++) {
                var p = k.getAt(m);
                if (!p.get("enable")) {
                    continue
                }
                var n = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray(p.get("ds_port").toString());
                var o = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ParsePortsToArray(p.get("router_port").toString());
                for (l = 0; l < n.length; l++) {
                    if (n[l] !== o[l]) {
                        p.set("enable", false);
                        break
                    }
                }
            }
            k.commitChanges()
        };
        var a = b(h);
        if (!this.isSupportChangePort() && a) {
            this.module.appWin.getMsgBox().show({
                title: _T("common", "note"),
                msg: _T("routerconf", "disable_change_port_rules_confirm"),
                buttons: Ext.MessageBox.OK,
                fn: function(i) {
                    j(h);
                    this.onSave(false)
                },
                scope: this,
                icon: Ext.MessageBox.QUESTION,
                minWidth: 300
            }, this);
            return
        }
        if (!f()) {
            return false
        }
        if (this.isExceedMaxUsedPorts()) {
            this.module.appWin.getMsgBox().alert(this.title, _T("routerconf", "routerconf_exceed_max_rule"));
            return false
        }
        e = "1. " + _T("routerconf", "routerconf_overwrite_warning") + "<br/>2. ";
        e += String.format(_T("routerconf", "routerconf_wan_warning"), this._D("product")) + "<br/>3. ";
        e += _T("routerconf", "routerconf_logout_warning");
        if (true !== d) {
            this.module.appWin.getMsgBox().show({
                title: _T("common", "note"),
                msg: e,
                buttons: Ext.MessageBox.OKCANCEL,
                fn: function(i) {
                    if ("ok" === i) {
                        this.onSave(true)
                    }
                },
                scope: this,
                icon: Ext.MessageBox.QUESTION,
                minWidth: 300
            }, this);
            return
        }
        for (c = h.getCount() - 1; c >= 0; c--) {
            h.getAt(c).set("rule_status", "")
        }
        this.getSelectionModel().clearSelections();
        this.saveRules()
    },
    saveRules: function(a) {
        this.changeState("waiting");
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.PortForwarding.Rules",
            version: 1,
            method: "save",
            params: {
                rules: this.getStore().getRules(),
                task_id_suffix: "PF"
            },
            callback: function(d, c, b) {
                this.module.appWin.clearStatusBusy();
                if (!d || !c) {
                    this.module.appWin.getMsgBox().alert(this.title, _T("common", "error_system"));
                    SYNO.Debug("save rule failed, framwork give empty data or failed result");
                    return
                }
                this.disableAllButton();
                this.startPollSaveRuleStatus({
                    taskId: c.task_id,
                    success_callback: this.saveSuccess.bind(this)
                });
                if (a && a.cb) {
                    a.cb()
                }
            },
            scope: this
        })
    },
    isBusy: function(a) {
        return 1501 === a
    },
    isToPopUpPortStatus: function(a) {
        return a.port_status.length > 0
    },
    isToPopUpOpenUPnPWriteAbilityMsgBox: function(b) {
        var c = 0;
        if (!b) {
            return false
        }
        if (!b.port_status) {
            return false
        }
        if (0 === b.port_status.length) {
            return false
        }
        for (var a = 0; a < b.port_status.length; a++) {
            if (b.port_status[a].blFailRule) {
                c++
            }
        }
        if (c == b.port_status.length) {
            return true
        } else {
            return false
        }
    },
    saveSuccess: function(e) {
        var c = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.GetDisabledSystemServiceMsg;
        var a = function(g) {
            if (g) {
                this.module.appWin.getMsgBox().alert(_T("common", "note"), _T("service", "service_portmapping_services_disable") + ": " + g, function(h) {
                    if ("ok" === h) {
                        this.el.unmask();
                        this.getView().el.unmask()
                    }
                }, this)
            }
        }.bind(this);
        var d = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding;
        if (this.isUpnpRouter() && this.isToPopUpOpenUPnPWriteAbilityMsgBox(e)) {
            this.stopPollSaveRuleStatus(true);
            this.changeState("normal");
            this.module.appWin.getMsgBox().alert(this.title, _T("routerconf", "routerconf_may_not_enable_upnp_write"));
            return
        }
        c(this.module.appWin, this.getStore(), a);
        if (this.isToPopUpPortStatus(e)) {
            this.portStatusObj = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.Util.PortStatus(e.port_status);
            var b = function() {
                this.changeState("normal");
                this.onTestRule(function() {
                    var h = this.getStore();
                    var g = function(l) {
                        var k = {};
                        for (var j = 0; j < l.length; j++) {
                            k[l[j][d.WEBAPI_REMAP_ROUTER_PORT]] = l[j][d.WEBAPI_ROUTER_PORT]
                        }
                        return k
                    };
                    var i = function(l) {
                        if (!l) {
                            SYNO.Debug("confirmCB store is null");
                            this.changeState("normal");
                            return
                        }
                        if (!e.port_status) {
                            SYNO.Debug("confirmCB port_status is null");
                            this.changeState("normal");
                            return
                        }
                        for (var m = 0; m < e.port_status.length; m++) {
                            var n = e.port_status[m][d.WEBAPI_INDEX];
                            var o = g(e.port_status[m][d.WEBAPI_PORT_INFO]);
                            var k = l.getAt(n);
                            if (k) {
                                k.set("remap_router_port_map_table", o)
                            }
                        }
                    };
                    i(h);
                    h.commitChanges()
                }.bind(this))
            }.bind(this);
            var f = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.ChYesForceUndoWindow({
                owner: this.findWindow(),
                text: _T("routerconf", "undo_msg_content"),
                forciable: this.isUpnpRouter(),
                portStatusObj: this.portStatusObj,
                serviceDescObj: this.serviceDescObj,
                confirmCB: function(l) {
                    var g = l.blForce || false;
                    var h = l.store || null;
                    var p = this.getStore() || null;
                    var j = function(r, s) {
                        for (var q = 0; q < r.getCount(); q++) {
                            if (s === r.getAt(q).get("rule_index")) {
                                return r.getAt(q)
                            }
                        }
                        return null
                    }.bind(this);
                    var o = function(r) {
                        if (r.blForce) {
                            return true
                        } else {
                            for (var q = 0; q < h.getCount(); q++) {
                                if (!h.getAt(q).get("enable")) {
                                    return true
                                }
                            }
                            return false
                        }
                    }.bind(this);
                    var k = function(r, i, q) {
                        if (!i || !q) {
                            return
                        }
                        if (!q.get("enable")) {
                            i.set("enable", false);
                            return
                        }
                        if (r && q.get("enable")) {
                            i.set("router_port", q.get("router_port_tmp"));
                            i.set("force", true)
                        } else {
                            i.set("router_port", q.get("remap_router_port_tmp"));
                            i.set("force", false)
                        }
                    }.bind(this);
                    if (!o(l)) {
                        b();
                        return
                    }
                    for (var m = p.getCount() - 1; m >= 0; m--) {
                        var n = j(h, m);
                        k(g, p.getAt(m), n)
                    }
                    p.commitChanges();
                    this.saveRules()
                }.bind(this),
                cancelCB: function() {
                    b();
                    return
                }.bind(this)
            });
            f.show()
        } else {
            this.changeState("normal");
            this.onTestRule()
        }
    },
    startPollSaveRuleStatus: function(b) {
        var a = b.taskId;
        var c = b.success_callback;
        this.saveStatusConf = {
            interval: 1,
            immediate: true,
            webapi: {
                api: "SYNO.Core.PortForwarding.Rules",
                version: 1,
                method: "save_status",
                params: {
                    task_id: a
                }
            },
            status_callback: function(i, f, h, e) {
                var g = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.STATUS_SUCCESS;
                var d = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.STATUS_PROGRESS;
                if (!i) {
                    this.stopPollSaveRuleStatus(true);
                    this.showSaveRuleErrorMessage(f)
                } else {
                    if (d === f.status) {
                        this.changeState("waiting");
                        this.showSaveRuleProgress(f)
                    } else {
                        if (g === f.status) {
                            this.clearDirty();
                            if (c) {
                                c(f)
                            }
                            this.stopPollSaveRuleStatus(true)
                        } else {
                            SYNO.Debug("impossible here. data.status = " + f.status);
                            this.changeState("normal");
                            this.stopPollSaveRuleStatus(true)
                        }
                    }
                }
            },
            scope: this
        };
        this.statusUpdaterStop();
        if (this.saveStatusConfPollId) {
            this.module.appWin.pollUnreg(this.saveStatusConfPollId);
            this.saveStatusConfPollId = null
        }
        this.saveStatusConfPollId = this.module.appWin.pollReg(this.saveStatusConf)
    },
    showSaveRuleErrorMessage: function(c) {
        var b = function() {
            this.msg = "";
            this.changeState("normal")
        };
        var a = this.toSaveRuleErrorStringWithData(c.code, c);
        this.module.appWin.getMsgBox().alert(this.title, a, b, this)
    },
    stopPollSaveRuleStatus: function(a) {
        if (this.saveStatusConfPollId) {
            this.module.appWin.pollUnreg(this.saveStatusConfPollId);
            this.saveStatusConfPollId = null
        }
        this.hideSaveRuleProgress();
        if (a) {
            this.status_updater.Start()
        }
    },
    onTest: function() {
        this.onTestRule()
    },
    onTestRule: function(b) {
        var a = this.getSelectionModel().getSelections();
        this.getStore().load({
            callback: function() {
                this.testingStart({
                    selectedRecords: a,
                    success_callback: b
                })
            },
            scope: this
        })
    }
});
Ext.ns("SYNO.SDS.MyDSCenter");
Ext.ns("SYNO.SDS.AdminCenter.PublicAccess");
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSTab", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.getInfoArray = [{
            api: "SYNO.Core.DDNS.Provider",
            version: 1,
            method: "list"
        }, {
            api: "SYNO.Core.DDNS.Record",
            version: 1,
            method: "list"
        }, {
            api: "SYNO.Core.DDNS.ExtIP",
            version: 1,
            method: "list"
        }, {
            api: "SYNO.Core.DDNS.Synology",
            version: 1,
            method: "get_myds_account"
        }];
        this.btnAdd = this.getTopToolbar().getComponent("create_ddns_info");
        this.btnDel = this.getTopToolbar().getComponent("delete_ddns_info");
        this.btnEdit = this.getTopToolbar().getComponent("edit_ddns_info");
        this.btnUpdate = this.getTopToolbar().getComponent("update_ddns_info");
        this.btnCustomized = this.getTopToolbar().getComponent("advanced");
        this.mon(this, "rowdblclick", this.editHandler, this);
        this.mon(this, "click", this.btnChg, this);
        this.mon(this, "rowcontextmenu", this.onRowContextMenu, this);
        this._linkId = Ext.id();
        this._linkEl = null;
        this.getInfoConf = {
            interval: 5,
            immediate: true,
            webapi: {
                api: "SYNO.Entry.Request",
                version: 1,
                method: "request",
                params: {
                    stopwhenerror: false,
                    compound: this.getInfoArray
                }
            },
            status_callback: this.getInfoDone,
            scope: this
        }
    },
    fillConfig: function(a) {
        this.store = new SYNO.SDS.AdminCenter.PublicAccess.DDNSInfoStore(a);
        var c = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false
            },
            columns: [{
                header: _T("service", "service_ddns_type"),
                dataIndex: "display",
                width: 130
            }, {
                header: _T("service", "service_ddns_hostname"),
                dataIndex: "hostname",
                width: 180
            }, {
                header: _T("service", "service_wanconfig_gateway_addr_out"),
                dataIndex: "ip",
                width: 120
            }, {
                header: _T("service", "service_wanconfig_status"),
                dataIndex: "status",
                useHtmlEncodeRender: false,
                width: 250
            }, {
                header: _T("service", "service_ddns_last_updated"),
                dataIndex: "lastupdated",
                width: 150
            }]
        });
        var d = {
            defaultType: "syno_button",
            items: [{
                text: _T("common", "add"),
                scope: this,
                itemId: "create_ddns_info",
                handler: this.addHandler
            }, {
                text: _T("common", "alt_edit"),
                scope: this,
                itemId: "edit_ddns_info",
                handler: this.editHandler
            }, {
                text: _T("common", "delete"),
                scope: this,
                itemId: "delete_ddns_info",
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                handler: this.deleteHandler
            }, {
                text: _T("time", "ntp_updatenow"),
                scope: this,
                itemId: "update_ddns_info",
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                handler: this.refreshHandler
            }, {
                text: _T("common", "customize"),
                scope: this,
                itemId: "advanced",
                hidden: (this._S("version") < "5491") ? true : false,
                handler: this.advancedHandler
            }]
        };
        var b = {
            title: _T("tree", "leaf_wanconfig"),
            heigh: 400,
            colModel: c,
            store: this.store,
            tbar: d,
            listeners: {
                scope: this,
                activate: this.onActivate,
                deactivate: this.deactivate
            },
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            })
        };
        Ext.apply(b, a);
        return b
    },
    getHelpParam: function() {
        var a = "AdminCenter/connection_ddns.html";
        return a
    },
    addHandler: function() {
        if ((undefined === this.records) || (undefined === this.records.length)) {
            return
        }
        if (this.records.length === this.providers.length) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_max_info_num"));
            return
        }
        var a = null;
        if (this._S("version") < "5004") {
            a = new SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialogBefore5004({
                owner: this.module.appWin,
                module: this,
                providers: this.providers,
                records: this.records,
                selected: null,
                action: "add",
                ipAddrs: this.ipAddrs
            })
        } else {
            a = new SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialog({
                owner: this.module.appWin,
                module: this,
                providers: this.providers,
                records: this.records,
                myDSAccountLogin: this.myDSAccountLogin,
                myDSAccount: this.myDSAccount,
                selected: null,
                action: "add",
                ipAddrs: this.ipAddrs
            })
        }
        this.mon(a, "close", function() {
            this.pollingTaskStart()
        }, this);
        this.pollingTaskStop();
        a.open({
            scope: this
        })
    },
    editHandler: function() {
        if (this.getSelectionModel().getSelected()) {
            var a = null;
            if (this._S("version") < "5004") {
                a = new SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialogBefore5004({
                    owner: this.module.appWin,
                    module: this,
                    providers: this.providers,
                    records: this.records,
                    myDSAccountLogin: this.myDSAccountLogin,
                    myDSAccount: this.myDSAccount,
                    selected: this.getSelectionModel().getSelected().data.provider,
                    action: "edit",
                    ipAddrs: this.ipAddrs
                })
            } else {
                a = new SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialog({
                    owner: this.module.appWin,
                    module: this,
                    providers: this.providers,
                    records: this.records,
                    myDSAccountLogin: this.myDSAccountLogin,
                    myDSAccount: this.myDSAccount,
                    selected: this.getSelectionModel().getSelected().data.provider,
                    action: "edit",
                    ipAddrs: this.ipAddrs
                })
            }
            this.mon(a, "close", function() {
                this.pollingTaskStart()
            }, this);
            this.pollingTaskStop();
            a.open({
                scope: this
            })
        }
    },
    sendDelCmd: function(a) {
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.DDNS.Record",
            method: "delete",
            version: 1,
            scope: this,
            params: {
                id: a
            },
            callback: function(d, c, b) {
                this.module.appWin.clearStatusBusy();
                if (d) {
                    this.pollingTaskStart()
                } else {
                    this.module.appWin.getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_operation_fail"))
                }
            }
        })
    },
    deleteHandler: function() {
        if (this.getSelectionModel().getSelected()) {
            var b = [];
            var c = "";
            for (var a = 0; a < this.getSelectionModel().getSelections().length; a++) {
                if (0 !== a) {
                    c += "<p>"
                }
                b.push(this.getSelectionModel().getSelections()[a].data.provider);
                c += this.getSelectionModel().getSelections()[a].data.hostname
            }
            this.pollingTaskStop();
            this.module.appWin.getMsgBox().confirmDelete(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_delete_warning") + "<br><br>" + c + "<br>", function(d) {
                if ("yes" == d) {
                    this.sendDelCmd(b)
                }
            }, this)
        }
    },
    refreshHandler: function() {
        this.module.appWin.setStatusBusy();
        this.pollingTaskStop();
        this.sendWebAPI({
            api: "SYNO.Core.DDNS.Record",
            method: "update_ip_address",
            version: 1,
            scope: this,
            params: null,
            callback: function(c, b, a) {
                this.pollingTaskStart();
                this.module.appWin.clearStatusBusy()
            }
        })
    },
    advancedHandler: function() {
        var a = new SYNO.SDS.AdminCenter.PublicAccess.DDNSAdvancedDialog({
            owner: this.module.appWin,
            module: this,
            providers: this.providers
        });
        this.mon(a, "close", function() {
            this.pollingTaskStart()
        }, this);
        this.pollingTaskStop();
        a.open({
            scope: this
        })
    },
    btnChg: function() {
        var b = this.store.getCount();
        var a = this.getSelectionModel().getSelections().length;
        if (!this._S("demo_mode") && (b > 0)) {
            this.btnUpdate.enable()
        } else {
            this.btnUpdate.disable()
        }
        if (b >= this.providers.length) {
            this.btnAdd.disable()
        } else {
            this.btnAdd.enable()
        }
        if (1 == a) {
            this.btnEdit.enable()
        } else {
            this.btnEdit.disable()
        }
        if (!this._S("demo_mode") && (a > 0)) {
            this.btnDel.enable()
        } else {
            this.btnDel.disable()
        }
    },
    onRowContextMenu: function(c, h, a) {
        var b = [];
        var g = this.getSelectionModel();
        g.selectRow(h, g.isSelected(h));
        var e = this.btnDel.initialConfig;
        var d = this.btnEdit.initialConfig;
        b.push(e);
        if (1 == g.getSelections().length) {
            b.push(d)
        }
        var f = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        f.showAt(a.getXY());
        a.preventDefault()
    },
    onActivate: function() {
        this.module.appWin.setStatusBusy();
        this.getInfo();
        this.pollingTaskStart()
    },
    deactivate: function() {
        this.pollingTaskStop()
    },
    providerNameComp: function(d, c) {
        if (d.display < c.display) {
            return -1
        }
        if (d.display > c.display) {
            return 1
        }
        return 0
    },
    getInfo: function() {
        this.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: false,
                params: this.getInfoArray
            },
            callback: this.getInfoDone
        })
    },
    getInfoDone: function(e, d, c) {
        this.myDSAccountLogin = false;
        this.myDSAccount = "NO_MY_DS_ACCOUNT";
        if ((undefined === d) || (undefined === d.result) || (undefined === d.result.length)) {
            this.module.appWin.clearStatusBusy();
            return
        }
        for (var b = 0; b < d.result.length; b++) {
            if (!d.result[b].success) {
                continue
            }
            if (SYNO.ux.Utils.checkApiConsistency(d.result[b], this.getInfoArray[0])) {
                this.providers = d.result[b].data.providers;
                this.providers = SYNO.SDS.AdminCenter.PublicAccess.DDNSApplyCustomProviders(this.providers, this._S("lang"), this.providerNameComp)
            } else {
                if (SYNO.ux.Utils.checkApiConsistency(d.result[b], this.getInfoArray[1])) {
                    this.btnUpdate.setTooltip(_T("service", "service_ddns_next_refresh") + "  " + d.result[b].data.next_update_time);
                    this.records = d.result[b].data.records
                } else {
                    if (SYNO.ux.Utils.checkApiConsistency(d.result[b], this.getInfoArray[2])) {
                        for (var a = 0; a < d.result[b].data.length; a++) {
                            if ("WAN" == d.result[b].data[a].type) {
                                if (this._S("version") < "5004") {
                                    this.ipAddrs = [{
                                        id: "LAN",
                                        display: "WAN: " + d.result[b].data[a].ip
                                    }]
                                } else {
                                    this.ipAddrs = d.result[b].data[a]
                                }
                                break
                            }
                        }
                    } else {
                        if (SYNO.ux.Utils.checkApiConsistency(d.result[b], this.getInfoArray[3])) {
                            if (this.myDSAccount !== d.result[b].data.email) {
                                this.myDSAccountLogin = true;
                                this.myDSAccount = '<a class="link-font" href="javascript: void(0)">' + d.result[b].data.email + "</a>"
                            } else {
                                this.myDSAccountLogin = false;
                                this.myDSAccount = '<a class="link-font" href="javascript: void(0)">' + _T("myds", "login_or_register_myds_account") + "</a>"
                            }
                        }
                    }
                }
            }
        }
        this.updateStoreData();
        this.btnChg();
        this.module.appWin.clearStatusBusy()
    },
    updateStoreData: function() {
        var g = this.getSelectionModel();
        var b = [];
        var f = [];
        var d = "-";
        for (var e = 0; e < this.records.length; e++) {
            if (g.isSelected(e)) {
                b.push(e)
            }
            if ("Synology" !== this.records[e].provider) {
                this.records[e].ipv6 = "0:0:0:0:0:0:0:0"
            }
            if ("-" === SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[e].ip)) {
                d = SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[e].ipv6)
            } else {
                if ("-" === SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[e].ipv6)) {
                    d = SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[e].ip)
                } else {
                    d = SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[e].ip) + "/" + SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[e].ipv6)
                }
            }
            f.push({
                provider: this.records[e].provider,
                display: SYNO.SDS.AdminCenter.PublicAccess.DDNSGetDisplayName(this.providers, this.records[e].provider),
                hostname: this.records[e].hostname,
                ip: d,
                status: SYNO.SDS.AdminCenter.PublicAccess.DDNSTransferStatus(this, this.records[e].status),
                lastupdated: SYNO.SDS.AdminCenter.PublicAccess.DDNSTransferStatus(this, this.records[e].lastupdated)
            });
            if ("Synology" === this.records[e].provider) {
                var c = this.records[e].username.indexOf(">") + 1;
                var a = this.records[e].username.indexOf("<", c);
                this.mailInfo = {
                    owner: this.module.appWin,
                    email: this.records[e].username.slice(c, a)
                }
            }
        }
        this.getView().el.unmask();
        this.store.loadData(f, false);
        this._linkEl = Ext.get(this._linkId);
        if (this._linkEl) {
            this.mon(this._linkEl, "click", SYNO.SDS.AdminCenter.PublicAccess.DDNSSendVerifiedMail, this)
        }
        g.selectRows(b, true)
    },
    pollingTaskStart: function() {
        if (undefined === this.pollingTaskID) {
            this.pollingTaskID = this.module.appWin.pollReg(this.getInfoConf)
        }
    },
    pollingTaskStop: function() {
        if (undefined !== this.pollingTaskID) {
            this.module.appWin.pollUnreg(this.pollingTaskID);
            this.pollingTaskID = undefined
        }
    }
});
SYNO.SDS.AdminCenter.PublicAccess.DDNSApplyCustomProviders = function(e, b, h) {
    var f = 0;
    var d = 0;
    var k = null;
    var a = -1;
    var c = -1;
    var g = [{
        id: "TwoDNS.de",
        display: "Two-DNS.de"
    }, {
        id: "NoIP.com",
        display: "No-IP.com"
    }, {
        id: "DYNDNS.org",
        display: "DYNDNS"
    }, {
        id: "Oray.com",
        display: _T("service", "service_ddns_provider_oray")
    }];
    for (f = 0; f < e.length; f++) {
        e[f] = Ext.apply(e[f], {
            display: e[f].provider
        });
        if (0 === e[f].provider.search("USER_")) {
            e[f].display = e[f].provider.replace("USER_", "*")
        } else {
            for (d = 0; d < g.length; d++) {
                if (e[f].id === g[d].id) {
                    e[f].display = g[d].display
                }
            }
        }
    }
    if (h !== null) {
        e = e.sort(h)
    }
    for (f = 0; f < e.length; f++) {
        if (e[f].provider === "RU-CENTER") {
            a = f
        } else {
            if (e[f].provider === "Synology") {
                c = f
            }
        }
    }
    if ((b === "rus") && (a >= 0)) {
        k = e.splice(a, 1);
        e.splice(0, 0, k[0])
    }
    if (c >= 0) {
        k = e.splice(c, 1);
        e.splice(0, 0, k[0])
    }
    return e
};
SYNO.SDS.AdminCenter.PublicAccess.formatIP = function(a) {
    if (("0.0.0.0" === a) || ("0:0:0:0:0:0:0:0" === a) || (null === a) || "" === a) {
        return "-"
    }
    return a
};
SYNO.SDS.AdminCenter.PublicAccess.DDNSGetDisplayName = function(c, a) {
    for (var b = 0; b < c.length; b++) {
        if (c[b].id === a) {
            if (c[b].display) {
                return c[b].display
            } else {
                return a
            }
        }
    }
};
SYNO.SDS.AdminCenter.PublicAccess.DDNSTransferStatus = function(b, a) {
    var c;
    if ("invalid login" == a) {
        return '<font class="red-status">' + _T("error", "error_auth") + "</font>"
    } else {
        if ("loading" == a) {
            return _T("common", a)
        } else {
            if ("disabled" == a) {
                return _T("common", a)
            } else {
                if ("service_ddns_normal" == a) {
                    return '<font class="green-status">' + _T("service", a) + "</font>"
                } else {
                    if ("service_status_inprocess" == a) {
                        return '<font class="green-status">' + _T("service", a) + "</font>"
                    } else {
                        if ("service_ddns_error_unknown" == a) {
                            return '<font class="red-status">' + _T("service", "service_ddns_status_connect_host") + "</font>"
                        } else {
                            if ("check_network" == a) {
                                return '<font class="red-status">' + _T("relayservice", "relayservice_err_resolv") + "</font>"
                            } else {
                                if ("service_ddns_status_synology_email_not_verified" == a) {
                                    this._verifyLink = String.format('<a id="{0}" style="cursor:pointer" class="link-font">{1}</a>', b._linkId, _T("common", "here"));
                                    c = String.format(_T("service", "service_ddns_status_synology_email_not_verified"), this._verifyLink);
                                    return '<font class="red-status">' + c + "</font>"
                                } else {
                                    c = _T("service", a);
                                    if (("string" == typeof(c)) && (c.length > 0)) {
                                        c = '<font class="red-status">' + c + "</font>"
                                    } else {
                                        c = a
                                    }
                                    return c
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSInfoStore", {
    extend: "Ext.data.JsonStore",
    constructor: function(b) {
        var a = Ext.apply({
            autoDestroy: true,
            fields: ["provider", "display", "hostname", "ip", "status", "lastupdated"],
            data: []
        }, b);
        this.callParent([a])
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.providers = b.providers;
        this.records = b.records;
        this.myDSAccountLogin = b.myDSAccountLogin;
        this.myDSAccount = b.myDSAccount;
        this.selected = b.selected;
        this.action = b.action;
        this.ipAddrs = b.ipAddrs;
        this.panel = new SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordForm(b);
        this.testConBtn = b.testConBtn;
        this.manualIPBtn = b.manualIPBtn;
        this.serviceField = this.panel.getForm().findField("enable");
        this.providerField = this.panel.getForm().findField("ddns_provider_list");
        this.providerField.getStore().loadData(this.providers, false);
        this.hostnameField = this.panel.getForm().findField("hostname");
        this.synoHostnameField = this.panel.getForm().findField("syno_hostname");
        this.domainList = this.panel.getForm().findField("ddns_domain_list");
        this.usernameField = this.panel.getForm().findField("username");
        this.mydsAccountField = this.panel.getForm().findField("mydsAccount");
        this.passwdField = this.panel.getForm().findField("passwd");
        this.netField = this.panel.getForm().findField("net");
        this.netV4Field = this.panel.getForm().findField("net_ipv4");
        this.netV6Field = this.panel.getForm().findField("net_ipv6");
        this.heartbeatField = this.panel.getForm().findField("heartbeat");
        this.providerWebsite = this.panel.getForm().findField("provider_website");
        this.statusField = this.panel.getForm().findField("status");
        this.checkTOS = this.panel.getForm().findField("register_tos");
        this.oldServiceEnable = null;
        this.lastSelected = -1;
        this._linkId = Ext.id();
        this._linkEl = null;
        this.panel.mon(this.providerField, "select", function() {
            this.oldServiceEnable = this.serviceField.getValue();
            if (this.lastSelected >= 0) {
                this.records[this.lastSelected].service = this.oldServiceEnable;
                this.records[this.lastSelected].hostname = this.hostnameField.getValue();
                this.records[this.lastSelected].user = this.usernameField.getValue();
                this.records[this.lastSelected].passwd = this.passwdField.getValue();
                this.records[this.lastSelected].net = this.netField.getValue();
                this.records[this.lastSelected].netV4 = this.netV4Field.getValue();
                this.records[this.lastSelected].netV6 = this.netV6Field.getValue();
                this.records[this.lastSelected].heartbeat = this.heartbeatField.getValue()
            }
            this.loadSelectdInfo(this.providerField.getValue())
        }, this);
        this.panel.mon(this.serviceField, "check", function() {
            this.changeApplyBtnStatus()
        }, this);
        this.panel.mon(this.hostnameField, "invalid", function() {
            var c = /[\x20]/;
            if (("Oray.com" == this.providerField.getValue()) && ("" !== this.hostnameField.getValue()) && (!c.test(this.hostnameField.getValue()))) {
                this.hostnameField.clearInvalid()
            }
        }, this);
        this.panel.mon(this.passwdField, "focus", function() {
            this.userPwd = this.passwdField.getValue();
            this.passwdField.setValue("")
        }, this);
        this.panel.mon(this.passwdField, "blur", function() {
            if ("" === this.passwdField.getValue()) {
                this.passwdField.setValue(this.userPwd)
            }
        }, this);
        this.checkTOS.mon(this.checkTOS, "check", function(d, c) {
            this.changeApplyBtnStatus()
        }, this);
        this.initTestConBtn();
        this.initManualIPBtn();
        var a = Ext.apply({
            title: _T("tree", "leaf_wanconfig"),
            width: 760,
            height: 520,
            layout: "fit",
            resizable: false,
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                itemId: "recordApply",
                text: _T("common", "apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: function(d, c) {
                    if (this.panel.getForm().isDirty()) {
                        this.getMsgBox().confirm(_T("tree", "leaf_wanconfig"), _T("common", "confirm_lostchange"), function(e) {
                            if ("yes" === e) {
                                this.close()
                            }
                        }, this)
                    } else {
                        this.close()
                    }
                }
            }]
        }, b);
        SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialog.superclass.constructor.call(this, a)
    },
    changeApplyBtnStatus: function() {
        if (this.isAbleToApply()) {
            this.getFooterToolbar().getComponent("recordApply").enable()
        } else {
            this.getFooterToolbar().getComponent("recordApply").disable()
        }
    },
    afterRegMyDSAccount: function(b, a) {
        this.myDSAccount = '<a class="link-font" href="javascript: void(0)">' + b + "</a>";
        this.myDSAccountLogin = true;
        this.setFieldAndOriginalValues(this.mydsAccountField, this.myDSAccount);
        this.setFieldAndOriginalValues(this.usernameField, this.myDSAccount)
    },
    checkAndDoRegMyDSAccount: function(b) {
        if ((this.providerField.getValue() == "Synology") && (!this.myDSAccountLogin)) {
            var a = new SYNO.SDS.MyDSCenter.RegisterDialog({
                owner: this.findWindow(),
                listeners: {
                    scope: this,
                    login_success: b
                }
            });
            a.show();
            return true
        } else {
            return false
        }
    },
    afterRender: function(a) {
        this.callParent([a]);
        this.mydsAccountField.getEl().on("click", function() {
            if (!this.checkAndDoRegMyDSAccount(this.afterRegMyDSAccount)) {
                SYNO.SDS.AppLaunch("SYNO.SDS.MyDSCenter.Application", {
                    fn: "SYNO.SDS.MyDSCenter.AccountModule"
                })
            }
        }, this);
        SYNO.SDS.Utils.AddTip(this.heartbeatField.getEl(), _T("service", "service_ddns_heartbeat_help"));
        this.setFieldAndOriginalValues(this.netField, "DEFAULT");
        this.setFieldAndOriginalValues(this.netV4Field, SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.ipAddrs.ip));
        this.setFieldAndOriginalValues(this.netV6Field, SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.ipAddrs.ipv6));
        if ("edit" == this.action) {
            this.serviceField.show();
            this.loadSelectdInfo(this.selected)
        }
        for (var c = 0; c < this.records.length; c++) {
            if (this.records[c].provider == this.selected) {
                continue
            }
            var b = this.providerField.getStore().find("id", this.records[c].provider);
            if (b >= 0) {
                this.providerField.getStore().removeAt(b)
            }
        }
        this.panel.getForm().clearInvalid();
        this.hostnameField.clearInvalid()
    },
    regAndTest: function(b, a) {
        this.afterRegMyDSAccount(b, a);
        this.testCon()
    },
    testCon: function(b, a) {
        if (this.checkAndDoRegMyDSAccount(this.regAndTest)) {
            return
        }
        var c = this.panel.getForm();
        if (!this.CheckFieldValid(c)) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        if (this.providerField.getValue() === "Synology") {
            this.hostnameField.setValue(this.synoHostnameField.getValue() + "." + this.domainList.getValue())
        }
        var d = {
            enable: true,
            provider: this.providerField.getValue(),
            hostname: this.hostnameField.getValue(),
            username: this.usernameField.getValue(),
            net: this.netField.getValue(),
            ip: this.netV4Field.getValue(),
            ipv6: this.netV6Field.getValue(),
            heartbeat: this.heartbeatField.getValue()
        };
        if (this.passwdField.isDirty() || (this.providerField.getValue() === "Synology")) {
            d.passwd = this.passwdField.getValue()
        }
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.DDNS.Record",
            method: "test",
            version: 1,
            scope: this,
            params: d,
            callback: function(g, f, e) {
                if (g) {
                    this.statusField.setValue(SYNO.SDS.AdminCenter.PublicAccess.DDNSTransferStatus(this, f.status))
                } else {
                    this.statusField.setValue("");
                    this.owner.getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_operation_fail"))
                }
                this.clearStatusBusy()
            }
        })
    },
    initTestConBtn: function() {
        this.testConBtn.mon(this.testConBtn, "click", this.testCon, this)
    },
    initManualIPBtn: function() {
        this.manualIPBtn.mon(this.manualIPBtn, "click", function(b, a) {
            var c = new SYNO.SDS.AdminCenter.PublicAccess.DDNSManualIPDialog({
                owner: this,
                module: this.module
            });
            c.open()
        }, this)
    },
    CheckFieldValid: function(b) {
        var a = true;
        var c = b.findField("ddns_provider_list").getValue();
        if (("Oray.com" !== c) && ("Synology" !== c)) {
            a = a && b.findField("hostname").isValid()
        }
        if ("Synology" === c) {
            a = a && b.findField("syno_hostname").isValid()
        }
        if (!b.findField("ddns_provider_list").isValid() || !b.findField("username").isValid() || !b.findField("passwd").isValid()) {
            a = a && false
        }
        return a
    },
    setFieldAndOriginalValues: function(b, a) {
        b.setValue(a);
        b.originalValue = b.getValue()
    },
    loadSelectdInfo: function(g) {
        this.setFieldStatus(g);
        for (var f = 0; f < this.records.length; f++) {
            if (this.records[f].provider === g) {
                this.lastSelected = f;
                this.setFieldAndOriginalValues(this.netField, this.records[f].net);
                this.setFieldAndOriginalValues(this.netV4Field, SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[f].ip));
                this.setFieldAndOriginalValues(this.netV6Field, SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.records[f].ipv6));
                if (null !== this.oldServiceEnable) {
                    this.serviceField.setValue(this.oldServiceEnable)
                } else {
                    this.setFieldAndOriginalValues(this.serviceField, this.records[f].enable)
                }
                this.setFieldAndOriginalValues(this.providerField, this.records[f].provider);
                this.setFieldAndOriginalValues(this.hostnameField, this.records[f].hostname);
                this.setFieldAndOriginalValues(this.usernameField, this.records[f].username);
                if (undefined !== this.records[f].passwd) {
                    this.setFieldAndOriginalValues(this.passwdField, this.records[f].passwd)
                } else {
                    this.setFieldAndOriginalValues(this.passwdField, "12345678")
                }
                this.setFieldAndOriginalValues(this.heartbeatField, this.records[f].heartbeat);
                var h = SYNO.SDS.AdminCenter.PublicAccess.DDNSTransferStatus(this, this.records[f].status);
                this.setFieldAndOriginalValues(this.statusField, h);
                this._linkEl = Ext.get(this._linkId);
                if (this._linkEl) {
                    var d = this.usernameField.getValue().indexOf(">") + 1;
                    var a = this.usernameField.getValue().indexOf("<", d);
                    this.mailInfo = {
                        owner: this.owner,
                        email: this.usernameField.getValue().slice(d, a)
                    };
                    this.panel.mon(this._linkEl, "click", SYNO.SDS.AdminCenter.PublicAccess.DDNSSendVerifiedMail, this)
                }
                if ("Synology" === g) {
                    var e = null;
                    if ("" === this.records[f].hostname) {
                        this.domainList.setValue("synology.me")
                    } else {
                        e = this.records[f].hostname.split(".");
                        this.setFieldAndOriginalValues(this.synoHostnameField, e[0]);
                        e.shift();
                        this.setFieldAndOriginalValues(this.domainList, e.join("."))
                    }
                    this.setFieldAndOriginalValues(this.mydsAccountField, this.myDSAccount);
                    this.setFieldAndOriginalValues(this.usernameField, this.myDSAccount)
                }
                break
            }
        }
        if (this.records.length == f) {
            if (g === "Synology") {
                this.setFieldAndOriginalValues(this.mydsAccountField, this.myDSAccount);
                this.setFieldAndOriginalValues(this.usernameField, this.myDSAccount);
                this.setFieldAndOriginalValues(this.passwdField, "Synology")
            }
            this.lastSelected = this.records.length;
            this.records.push({
                service: this.oldServiceEnable,
                provider: g,
                hostname: "",
                user: "",
                passwd: "",
                net: "DEFAULT",
                ip: SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.ipAddrs.ip),
                ipv6: SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.ipAddrs.ipv6),
                heartbeat: "Synology" === g,
                status: ""
            })
        }
        for (var c = 0; c < this.providers.length; c++) {
            if (this.providers[c].id === g) {
                break
            }
        }
        if ("" !== this.providers[c].website) {
            var b = '<a class="link-font" target="_blank" href="' + this.providers[c].website + '">' + _T("service", "service_ddns_provider_website") + "</a>";
            this.setFieldAndOriginalValues(this.providerWebsite, b);
            this.providerWebsite.show()
        } else {
            this.providerWebsite.hide()
        }
        this.changeApplyBtnStatus()
    },
    getDomainList: function() {
        var b = ["synology.me", "DiskStation.me", "i234.me", "myDS.me", "DSCloud.biz", "DSCloud.me", "DSCloud.mobi", "DSmyNAS.com", "DSmyNAS.net", "DSmyNAS.org", "FamilyDS.com", "FamilyDS.net", "FamilyDS.org"];
        var c = [];
        for (var a = 0; a < b.length; a++) {
            c.push({
                value: b[a],
                display: b[a]
            })
        }
        this.domainList.getStore().loadData(c, false)
    },
    setFieldStatus: function(a) {
        this.hostnameField.setValue("");
        this.setFieldAndOriginalValues(this.domainList, "synology.me");
        this.usernameField.setValue("");
        this.passwdField.setValue("");
        this.netField.setValue("DEFAULT");
        this.statusField.setValue("");
        if ("Synology" === a) {
            this.panel.getComponent("ddns_hostname").hide();
            this.panel.getComponent("ddns_syno_hostname").show();
            this.usernameField.hide();
            this.mydsAccountField.show();
            this.passwdField.hide();
            this.heartbeatField.show();
            this.heartbeatField.setValue(true);
            this.getDomainList();
            this.checkTOS.show()
        } else {
            this.panel.getComponent("ddns_hostname").show();
            this.panel.getComponent("ddns_syno_hostname").hide();
            this.usernameField.show();
            this.mydsAccountField.hide();
            this.passwdField.show();
            this.heartbeatField.hide();
            this.heartbeatField.setValue(false);
            this.checkTOS.hide()
        }
    },
    getErrorString: function(a, b) {
        if (!a) {
            return _T("common", "error_system")
        }
        var c = {
            badauth: _T("service", "service_ddns_status_auth_failed"),
            account_inused: _T("service", "service_ddns_dup_email"),
            host_inused: _T("service", "service_ddns_dup_hostname"),
            host_inused_by_yourhost: _T("service", "service_ddns_msg_host_in_used_by_yourhost"),
            account_disabled: _T("service", "service_ddns_status_email_not_verified")
        };
        var d = c[a];
        if (!(a in c)) {
            d = _T("service", "service_ddns_status_param_error");
            return d
        }
        if ("host_inused_by_yourhost" == a) {
            d = String.format(d, b)
        }
        return d
    },
    createSynoHostname: function(a) {
        this.hostnameField.setValue(this.synoHostnameField.getValue() + "." + this.domainList.getValue());
        this.sendWebAPI({
            api: "SYNO.Core.DDNS.Synology",
            method: "register_hostname",
            version: 1,
            scope: this,
            params: {
                hostname: this.hostnameField.getValue(),
                ip: "-" === this.netV4Field.getValue() ? "0.0.0.0" : this.netV4Field.getValue(),
                ipv6: "-" === this.netV6Field.getValue() ? "0:0:0:0:0:0:0:0" : this.netV6Field.getValue(),
                heartbeat: this.heartbeatField.getValue(),
                forced_update: a
            },
            callback: function(e, c, b) {
                if (!e) {
                    var d = this.getErrorString(c.errors, this.hostnameField.getValue());
                    if ("host_inused_by_yourhost" === c.errors) {
                        this.getMsgBox().confirm(_T("tree", "leaf_wanconfig"), d, function(f) {
                            if ("yes" == f) {
                                this.createSynoHostname(true)
                            } else {
                                this.setAndUpdateRec()
                            }
                        }, this)
                    } else {
                        this.getMsgBox().alert(_T("tree", "leaf_wanconfig"), d);
                        this.clearStatusBusy()
                    }
                } else {
                    this.setAndUpdateRec()
                }
            }
        })
    },
    setAndUpdateRec: function() {
        var a = {
            id: ("add" == this.action) ? null : this.selected,
            enable: this.serviceField.getValue(),
            provider: this.providerField.getValue(),
            hostname: this.hostnameField.getValue(),
            username: this.usernameField.getValue(),
            net: this.netField.getValue(),
            ip: "-" === this.netV4Field.getValue() ? "0.0.0.0" : this.netV4Field.getValue(),
            ipv6: "-" === this.netV6Field.getValue() ? "0:0:0:0:0:0:0:0" : this.netV6Field.getValue(),
            heartbeat: this.heartbeatField.getValue()
        };
        if (this.passwdField.isDirty() || ("add" == this.action)) {
            a.passwd = this.passwdField.getValue()
        }
        this.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.DDNS.Record",
                    version: 1,
                    method: ("add" == this.action) ? "create" : "set",
                    params: a
                }, {
                    api: "SYNO.Core.DDNS.Record",
                    version: 1,
                    method: "update_ip_address",
                    params: {
                        id: this.providerField.getValue()
                    }
                }]
            },
            callback: this.applyFunCallback
        })
    },
    isAbleToApply: function() {
        if (!this.providerField) {
            SYNO.Debug("this.providerField is empty");
            return false
        }
        if (!this.providerField.getValue()) {
            return false
        }
        if ("Synology" === this.providerField.getValue()) {
            if (this._S("demo_mode")) {
                return false
            } else {
                if (this.serviceField.getValue() && !this.checkTOS.getValue()) {
                    return false
                } else {
                    return true
                }
            }
        } else {
            return true
        }
    },
    regAndApply: function(b, a) {
        this.afterRegMyDSAccount(b, a);
        this.apply()
    },
    apply: function() {
        var a = this.panel.getForm();
        if (!this.CheckFieldValid(a)) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        if (!a.isDirty()) {
            this.close();
            return
        }
        if (!this.isAbleToApply()) {
            this.close();
            return
        }
        if (this.checkAndDoRegMyDSAccount(this.regAndApply)) {
            return
        }
        this.setStatusBusy();
        if ("Synology" === this.providerField.getValue()) {
            this.createSynoHostname(false)
        } else {
            this.setAndUpdateRec()
        }
    },
    applyFunCallback: function(d, c, b) {
        this.clearStatusBusy();
        for (var a = 0; a < c.result.length; a++) {
            if (!c.result[a].success) {
                this.getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_operation_fail"))
            }
        }
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        a.testConBtn = Ext.getCmp(this.testConBtnId);
        a.manualIPBtn = Ext.getCmp(this.manualIPBtnId)
    },
    fillConfig: function(a) {
        var b = {
            border: false,
            labelWidth: 200,
            items: SYNO.SDS.AdminCenter.PublicAccess.DDNSGetRecordConfig(this, false, false, false, this.module)
        };
        Ext.apply(b, a);
        return b
    }
});
SYNO.SDS.AdminCenter.PublicAccess.DDNSGetRecordConfig = function(a, f, g, b, e) {
    var h = g ? 0 : 1;
    var d = g ? 200 : 280;
    var c = [{
        xtype: "syno_displayfield",
        value: (f) ? _T("ezinternet", "ezinternet_ddns_use_desc") : _T("service", "service_ddns_tip"),
        hidden: g
    }, {
        xtype: "syno_checkbox",
        boxLabel: _T("service", "service_ddns_title"),
        name: "enable",
        hideMode: g ? "display" : "visibility",
        hidden: true,
        checked: true
    }, {
        synotype: "indent",
        indent: h,
        fieldLabel: _T("service", "service_ddns_type"),
        xtype: "syno_compositefield",
        itemId: "ddns_provider_type",
        hidden: g,
        items: [{
            xtype: "syno_combobox",
            width: d,
            hiddenName: "ddns_provider_list",
            valueField: "id",
            displayField: "display",
            autoDestroy: true,
            allowBlank: false,
            store: new Ext.data.JsonStore({
                fields: ["id", "display", "provider", "registrable"],
                idProperty: "id",
                data: []
            })
        }, {
            xtype: "syno_displayfield",
            width: 10
        }, {
            xtype: "syno_button",
            text: _T("routerconf", "routerconf_test_conn"),
            itemId: "ddns_test_con_btn",
            id: a.testConBtnId = Ext.id(),
            disabled: e._S("demo_mode"),
            hidden: (f) ? true : false,
            tooltip: e._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
        }]
    }, {
        indent: h,
        fieldLabel: _T("service", "service_ddns_hostname"),
        xtype: "syno_compositefield",
        itemId: "ddns_hostname",
        items: [{
            xtype: "syno_textfield",
            width: d,
            vtype: "hostname",
            allowBlank: false,
            value: "",
            name: "hostname"
        }]
    }, {
        indent: h,
        fieldLabel: _T("service", "service_ddns_hostname"),
        xtype: "syno_compositefield",
        itemId: "ddns_syno_hostname",
        hidden: true,
        items: [{
            xtype: "syno_textfield",
            width: 130,
            name: "syno_hostname",
            allowBlank: false,
            minLength: 2,
            maxLength: 24,
            vtype: "shorthostname"
        }, {
            xtype: "syno_displayfield",
            width: 3,
            value: "."
        }, {
            xtype: "syno_combobox",
            name: "ddns_domain_list",
            allowBlank: false,
            valueField: "value",
            displayField: "display",
            width: 137,
            value: _T("service", "service_ddns_domain_select"),
            store: new Ext.data.JsonStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: []
            })
        }]
    }, {
        xtype: "syno_textfield",
        fieldLabel: g ? _T("service", "service_ddns_email") : _T("service", "service_ddns_username") + "/" + _T("service", "service_ddns_email"),
        name: "username",
        width: d,
        indent: h,
        minLength: g ? 3 : 1,
        maxLength: 256,
        value: "",
        vtype: g ? "email" : "",
        allowBlank: false
    }, {
        xtype: "syno_displayfield",
        indent: h,
        itemId: "mydsAccount",
        hidden: true,
        fieldLabel: _T("service", "service_ddns_username") + "/" + _T("service", "service_ddns_email")
    }, {
        fieldLabel: _T("service", "service_ddns_passwd"),
        xtype: "syno_textfield",
        textType: "password",
        name: "passwd",
        width: d,
        indent: h,
        minLength: g ? 6 : 1,
        maxLength: 128,
        value: "",
        allowBlank: false
    }, {
        fieldLabel: _T("service", "service_ddns_passwd_confirm"),
        xtype: "syno_textfield",
        textType: "password_confirm",
        confirmFor: "passwd",
        name: "passwd_confirm",
        width: d,
        indent: h,
        minLength: g ? 6 : 1,
        maxLength: 128,
        hidden: !g,
        value: "",
        allowBlank: false
    }, {
        xtype: "syno_combobox",
        fieldLabel: _T("service", "service_ddns_heartbeat"),
        name: "heartbeat",
        itemId: "heartbeat",
        indent: h,
        width: d,
        displayField: "display",
        valueField: "id",
        value: g,
        hidden: true,
        store: new Ext.data.JsonStore({
            fields: ["id", "display"],
            data: [{
                id: true,
                display: _T("service", "service_enable")
            }, {
                id: false,
                display: _T("service", "service_disable")
            }]
        })
    }, {
        indent: h,
        fieldLabel: _T("service", "service_wanconfig_gateway_addr_out") + "(IPv4)",
        xtype: "syno_compositefield",
        itemId: "ddns_net_manualIP",
        hidden: g,
        items: [{
            xtype: "syno_displayfield",
            width: d,
            name: "net_ipv4",
            value: ""
        }, {
            xtype: "syno_displayfield",
            width: 10
        }, {
            xtype: "syno_button",
            text: _T("service", "service_ddns_customize_ip"),
            itemId: "ddns_manual_ip_btn",
            minWidth: 80,
            id: a.manualIPBtnId = Ext.id(),
            hidden: (f) ? true : false
        }]
    }, {
        xtype: "syno_displayfield",
        indent: h,
        itemId: "net_ipv6",
        value: "-",
        hidden: (f || g) ? true : false,
        hideLabel: (f) ? true : false,
        fieldLabel: _T("service", "service_wanconfig_gateway_addr_out") + "(IPv6)"
    }, {
        xtype: "syno_displayfield",
        indent: h,
        itemId: "net",
        value: "DEFAULT",
        hidden: true,
        hideLabel: true,
        fieldLabel: "Net IP Type"
    }, {
        synotype: "indent",
        xtype: "syno_displayfield",
        indent: h,
        itemId: "status",
        hidden: (f || g) ? true : false,
        hideLabel: (f) ? true : false,
        fieldLabel: _T("service", "service_wanconfig_status")
    }, {
        xtype: "syno_displayfield",
        indent: h,
        itemId: "empty_line",
        value: "",
        hidden: true,
        hideMode: "visibility",
        hideLabel: true
    }, {
        xtype: "syno_displayfield",
        indent: h,
        itemId: "provider_website",
        value: "",
        hidden: true,
        hideMode: "visibility",
        hideLabel: true
    }, {
        xtype: "syno_checkbox",
        indent: h,
        name: "register_tos",
        hidden: true,
        boxLabel: _T("service", "service_ddns_syno_tos"),
        checked: false
    }];
    SYNO.LayoutConfig.fill(c);
    return c
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSManualIPDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.form = this.createForm();
        var a = Ext.apply({
            title: _T("tree", "leaf_wanconfig"),
            width: 520,
            height: 200,
            layout: "fit",
            resizable: false,
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.form]
        }, b);
        this.IPv4Field = this.form.getForm().findField("ipv4");
        this.IPv6Field = this.form.getForm().findField("ipv6");
        this.net = 0;
        if ("MANUAL" === this.owner.netField.getValue()) {
            this.net = 3
        } else {
            if ("MANUAL_V6" === this.owner.netField.getValue()) {
                this.net = 2
            } else {
                if ("MANUAL_V4" === this.owner.netField.getValue()) {
                    this.net = 1
                } else {
                    this.net = 0
                }
            }
        }
        this.IPv4Field.mon(this.IPv4Field, "change", function() {
            this.net = parseInt(this.net, 10) | 1
        }, this);
        this.IPv6Field.mon(this.IPv6Field, "change", function() {
            this.net = parseInt(this.net, 10) | 2
        }, this);
        SYNO.SDS.AdminCenter.PublicAccess.DDNSManualIPDialog.superclass.constructor.call(this, a)
    },
    afterRender: function(a) {
        this.callParent([a]);
        if ("-" !== this.owner.netV4Field.getValue()) {
            this.IPv4Field.setValue(this.owner.netV4Field.getValue());
            this.IPv4Field.originalValue = this.owner.netV4Field.getValue()
        } else {
            this.IPv4Field.setValue("0.0.0.0");
            this.IPv4Field.originalValue = "0.0.0.0"
        }
        if ("-" !== this.owner.netV6Field.getValue()) {
            this.IPv6Field.setValue(this.owner.netV6Field.getValue());
            this.IPv6Field.originalValue = this.owner.netV6Field.getValue()
        } else {
            this.IPv6Field.setValue("0:0:0:0:0:0:0:0");
            this.IPv6Field.originalValue = "0:0:0:0:0:0:0:0"
        }
    },
    resetIP: function() {
        this.IPv4Field.setValue(this.owner.ipAddrs.ip);
        if ("Synology" === this.owner.providerField.getValue()) {
            this.IPv6Field.setValue(this.owner.ipAddrs.ipv6)
        }
        this.net = 0
    },
    createForm: function() {
        var b = 300;
        var a = {
            border: false,
            trackResetOnLoad: true,
            labelWidth: 80,
            items: [{
                xtype: "syno_textfield",
                fieldLabel: "IPv4",
                name: "ipv4",
                allowBlank: false,
                validator: this.checkIPv4,
                width: b
            }, {
                xtype: "syno_textfield",
                fieldLabel: "IPv6",
                name: "ipv6",
                disabled: (this.owner.providerField.getValue() !== "Synology"),
                allowBlank: false,
                validator: this.checkIPv6,
                width: b
            }, {
                xtype: "syno_button",
                text: _T("common", "default"),
                itemId: "ddns_set_default_ip",
                scope: this,
                handler: this.resetIP
            }]
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    checkIPv4: function(b) {
        var a = Ext.form.VTypes.v4ip(b);
        if ((a !== true) && ("0.0.0.0" === b)) {
            a = true
        }
        return a
    },
    checkIPv6: function(b) {
        var a = Ext.form.VTypes.v6ip(b);
        if ((a !== true) && ("0:0:0:0:0:0:0:0" === b)) {
            a = true
        }
        return a
    },
    apply: function() {
        var a = this.form.getForm();
        if (!a.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        this.owner.netV4Field.setValue(SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.IPv4Field.getValue()));
        this.owner.netV6Field.setValue(SYNO.SDS.AdminCenter.PublicAccess.formatIP(this.IPv6Field.getValue()));
        if (3 === this.net) {
            this.owner.netField.setValue("MANUAL")
        } else {
            if (2 === this.net) {
                this.owner.netField.setValue("MANUAL_V6")
            } else {
                if (1 === this.net) {
                    this.owner.netField.setValue("MANUAL_V4")
                } else {
                    this.owner.netField.setValue("DEFAULT")
                }
            }
        }
        this.close()
    }
});
SYNO.SDS.AdminCenter.PublicAccess.DDNSSendVerifiedMail = function() {
    this.sendWebAPI({
        api: "SYNO.Core.DDNS.Synology",
        method: "send_verified_mail",
        version: 1,
        scope: this,
        params: {
            account: this.mailInfo.email
        },
        callback: function(c, b, a) {
            var d = "";
            d = '<font class="blue-status">' + this.mailInfo.email + "</font>";
            d = String.format(_T("service", "service_ddns_msg_verification_mail_alert"), d);
            this.mailInfo.owner.getMsgBox().alert(_T("tree", "leaf_wanconfig"), d)
        }
    })
};
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSAdvancedDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.providers = b.providers;
        this.form = this.createForm();
        var a = Ext.apply({
            title: _T("tree", "leaf_wanconfig"),
            width: 600,
            height: 400,
            layout: "fit",
            resizable: false,
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "save"),
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.form]
        }, b);
        this.providerField = this.form.getForm().findField("ddns_provider_list");
        this.urlField = this.form.getForm().findField("provider_url");
        SYNO.SDS.AdminCenter.PublicAccess.DDNSManualIPDialog.superclass.constructor.call(this, a)
    },
    afterRender: function(a) {
        this.callParent([a]);
        this.urlField.clearInvalid();
        var b = 0;
        for (b = this.providers.length - 1; b >= 0; b--) {
            if (0 === this.providers[b].provider.search("USER_")) {
                this.providers[b].display = this.providers[b].provider.replace("USER_", "")
            } else {
                this.providers.splice(b, 1)
            }
        }
        this.providerField.getStore().loadData(this.providers, false);
        this.mon(this.providerField, "select", function(e, c, d) {
            this.urlField.setValue(c.data.url);
            this.providerChanged = false
        }, this);
        this.mon(this.providerField, "beforeselect", function(g, d, f) {
            var e = false;
            var c = this.providerField.getStore().getById(this.providerField.getValue());
            if ((undefined === c) || (c.data.url !== this.urlField.getValue()) || (c.data.display !== this.providerField.getRawValue())) {
                e = true
            }
            if (!(("" === this.providerField.getValue()) && ("" === this.urlField.getValue())) && e) {
                this.findWindow().getMsgBox().confirm(_T("tree", "leaf_wanconfig"), _T("common", "confirm_lostchange"), function(h) {
                    if ("yes" == h) {
                        this.providerField.setValue(d.data.id);
                        this.urlField.setValue(d.data.url)
                    }
                }, this);
                return false
            }
        }, this)
    },
    createForm: function() {
        var b = 300;
        var a = {
            border: false,
            trackResetOnLoad: true,
            labelWidth: 140,
            items: [{
                xtype: "syno_displayfield",
                value: _T("service", "service_ddns_provider_customized_description")
            }, {
                xtype: "syno_displayfield",
                width: 10
            }, {
                fieldLabel: _T("service", "service_ddns_type"),
                xtype: "syno_compositefield",
                itemId: "ddns_provider_setting",
                items: [{
                    xtype: "syno_combobox",
                    width: b,
                    hiddenName: "ddns_provider_list",
                    valueField: "id",
                    displayField: "display",
                    autoDestroy: true,
                    editable: true,
                    allowBlank: false,
                    minLength: 1,
                    maxLength: 32,
                    maskRe: /[a-zA-Z0-9\-._]/,
                    validator: this.checkChar,
                    store: new Ext.data.JsonStore({
                        fields: ["id", "display", "provider", "url"],
                        idProperty: "id",
                        data: []
                    })
                }, {
                    xtype: "syno_displayfield",
                    width: 10
                }, {
                    xtype: "syno_button",
                    text: _T("common", "delete"),
                    itemId: "ddns_delete_provider_btn",
                    scope: this,
                    handler: this.deleteSetting,
                    disabled: this.owner._S("demo_mode"),
                    tooltip: this.owner._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
                }]
            }, {
                xtype: "syno_textarea",
                fieldLabel: "Query URL",
                name: "provider_url",
                autoScroll: true,
                allowBlank: false,
                minLength: 1,
                maxLength: 500,
                value: "",
                width: b,
                height: 80
            }, {
                xtype: "syno_displayfield",
                width: 500,
                value: "Example:<br>" + _T("service", "service_ddns_type") + ': <font class="blue-status">provider_XYZ</font><br>Query URL: <br><font class="blue-status">http://ddns.provider.org/update?hostname=__HOSTNAME__&myip=__MYIP__</font><br>'
            }]
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    checkChar: function(b) {
        var a = /^[a-zA-Z0-9\-._]+$/;
        if (true === a.test(b)) {
            return true
        } else {
            return false
        }
    },
    deleteSetting: function() {
        var a = this.providerField.getValue();
        if (-1 === this.providerField.getStore().find("id", a)) {
            return
        }
        if (a) {
            this.findWindow().setStatusBusy();
            this.findWindow().getMsgBox().confirmDelete(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_delete_warning") + "<br><br>" + a.replace("USER_", "") + "<br>", function(b) {
                if ("yes" == b) {
                    this.sendWebAPI({
                        api: "SYNO.Core.DDNS.Provider",
                        method: "delete",
                        version: 1,
                        scope: this,
                        params: {
                            id: a
                        },
                        callback: function(f, e, d) {
                            if (f) {
                                var c = this.providerField.getStore().getById(a);
                                this.providerField.getStore().remove(c);
                                this.providerField.setValue("");
                                this.providerField.clearInvalid();
                                this.urlField.setValue("");
                                this.urlField.clearInvalid()
                            } else {
                                this.findWindow().getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_operation_fail"))
                            }
                            this.findWindow().clearStatusBusy()
                        }
                    })
                } else {
                    this.findWindow().clearStatusBusy()
                }
            }, this)
        }
    },
    apply: function() {
        var c = this.form.getForm();
        if (!c.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        var b = this.urlField.getValue();
        if ((-1 !== b.search(" ")) || (-1 !== b.search(";"))) {
            this.urlField.markInvalid();
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        var d = 2;
        var a = this.providerField.getValue();
        if (-1 === this.providerField.getStore().find("id", a)) {
            d = 1;
            a = "USER_" + a
        }
        this.sendWebAPI({
            api: "SYNO.Core.DDNS.Provider",
            method: "set",
            version: 1,
            scope: this,
            params: {
                id: a,
                url: b,
                action: d
            },
            callback: function(g, f, e) {
                if (g) {
                    this.close()
                } else {
                    this.owner.getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_operation_fail"))
                }
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialogBefore5004", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.providers = b.providers;
        this.records = b.records;
        this.selected = b.selected;
        this.action = b.action;
        this.ipAddrs = b.ipAddrs;
        this.panel = new SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordFormBefore5004(b);
        this.testConBtn = b.testConBtn;
        this.serviceField = this.panel.getForm().findField("enable");
        this.providerField = this.panel.getForm().findField("ddns_provider_list");
        this.providerField.getStore().loadData(this.providers, false);
        this.hostnameField = this.panel.getForm().findField("hostname");
        this.usernameField = this.panel.getForm().findField("username");
        this.passwdField = this.panel.getForm().findField("passwd");
        this.netField = this.panel.getForm().findField("net");
        this.netField.getStore().loadData(this.ipAddrs, false);
        this.heartbeatField = this.panel.getForm().findField("heartbeat");
        this.statusField = this.panel.getForm().findField("status");
        this.oldServiceEnable = null;
        this.lastSelected = -1;
        this._linkId = Ext.id();
        this._linkEl = null;
        this.panel.mon(this.providerField, "select", function() {
            this.oldServiceEnable = this.serviceField.getValue();
            if (this.lastSelected >= 0) {
                this.records[this.lastSelected].service = this.oldServiceEnable;
                this.records[this.lastSelected].hostname = this.hostnameField.getValue();
                this.records[this.lastSelected].user = this.usernameField.getValue();
                this.records[this.lastSelected].passwd = this.passwdField.getValue();
                this.records[this.lastSelected].net = this.netField.getValue();
                this.records[this.lastSelected].heartbeat = this.heartbeatField.getValue()
            }
            this.loadSelectdInfo(this.providerField.getValue())
        }, this);
        this.panel.mon(this.hostnameField, "invalid", function() {
            var c = /[\x20]/;
            if (("Oray.com" === this.providerField.getValue()) && ("" !== this.hostnameField.getValue()) && (!c.test(this.hostnameField.getValue()))) {
                this.hostnameField.clearInvalid()
            }
        }, this);
        this.panel.mon(this.netField, "invalid", function() {
            if (this.CheckNetFieldValid(this.netField)) {
                this.netField.clearInvalid()
            }
        }, this);
        this.panel.mon(this.passwdField, "focus", function() {
            this.userPwd = this.passwdField.getValue();
            this.passwdField.setValue("")
        }, this);
        this.panel.mon(this.passwdField, "blur", function() {
            if ("" === this.passwdField.getValue()) {
                this.passwdField.setValue(this.userPwd)
            }
        }, this);
        this.initTestConBtn();
        var a = Ext.apply({
            title: _T("tree", "leaf_wanconfig"),
            width: 680,
            height: 450,
            layout: "fit",
            resizable: false,
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: function(d, c) {
                    if (this.panel.getForm().isDirty()) {
                        this.getMsgBox().confirm(_T("tree", "leaf_wanconfig"), _T("common", "confirm_lostchange"), function(e) {
                            if ("yes" === e) {
                                this.close()
                            }
                        }, this)
                    } else {
                        this.close()
                    }
                }
            }]
        }, b);
        SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordDialogBefore5004.superclass.constructor.call(this, a)
    },
    afterRender: function(a) {
        this.callParent([a]);
        SYNO.SDS.Utils.AddTip(this.heartbeatField.getEl(), _T("service", "service_ddns_heartbeat_help"));
        this.setFieldAndOriginalValues(this.netField, "LAN");
        if ("edit" == this.action) {
            this.serviceField.show();
            this.loadSelectdInfo(this.selected)
        }
        for (var c = 0; c < this.records.length; c++) {
            if (this.records[c].provider == this.selected) {
                continue
            }
            var b = this.providerField.getStore().find("id", this.records[c].provider);
            if (b >= 0) {
                this.providerField.getStore().removeAt(b)
            }
        }
        this.panel.getForm().clearInvalid();
        this.hostnameField.clearInvalid()
    },
    initTestConBtn: function() {
        this.testConBtn.mon(this.testConBtn, "click", function(b, a) {
            var c = this.panel.getForm();
            if (!this.CheckFieldValid(c)) {
                this.setStatusError({
                    text: _T("common", "forminvalid"),
                    clear: true
                });
                return
            }
            var d = {
                enable: this.serviceField.getValue(),
                provider: this.providerField.getValue(),
                hostname: this.hostnameField.getValue(),
                username: this.usernameField.getValue(),
                net: ("MANUAL" === this.netField.getValue()) ? this.manualIP : this.netField.getValue(),
                ip: this.netField.getValue(),
                heartbeat: this.heartbeatField.getValue()
            };
            if (this.passwdField.isDirty()) {
                d.passwd = this.passwdField.getValue()
            }
            this.setStatusBusy();
            this.sendWebAPI({
                api: "SYNO.Core.DDNS.Record",
                method: "test",
                version: 1,
                scope: this,
                params: d,
                callback: function(g, f, e) {
                    if (g) {
                        this.statusField.setValue(SYNO.SDS.AdminCenter.PublicAccess.DDNSTransferStatus(this, f.status))
                    } else {
                        this.statusField.setValue("");
                        this.owner.getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_operation_fail"))
                    }
                    this.clearStatusBusy()
                }
            })
        }, this)
    },
    CheckNetFieldValid: function(c) {
        var a = false;
        for (var b = 0; b < c.getStore().getCount(); b++) {
            if ((c.getStore().getAt(b).data.display == c.getValue()) || (c.getStore().getAt(b).data.id == c.getValue())) {
                a = true
            }
        }
        return a
    },
    CheckFieldValid: function(b) {
        var a = true;
        if (!this.CheckNetFieldValid(b.findField("net"))) {
            a = a && b.findField("hostname").isValid()
        }
        if ("Oray.com" != b.findField("ddns_provider_list").getValue()) {
            a = a && b.findField("hostname").isValid()
        }
        if (!b.findField("ddns_provider_list").isValid() || !b.findField("username").isValid() || !b.findField("passwd").isValid()) {
            a = a && false
        }
        return a
    },
    setFieldAndOriginalValues: function(b, a) {
        b.setValue(a);
        b.originalValue = b.getValue()
    },
    loadSelectdInfo: function(b) {
        this.setFieldStatus(b);
        for (var a = 0; a < this.records.length; a++) {
            if (this.records[a].provider === b) {
                this.lastSelected = a;
                if ("MANUAL" === this.records[a].net) {
                    this.netField.getStore().loadData({
                        id: "MANUAL",
                        display: "MANUAL: " + this.records[a].ip
                    }, true);
                    this.manualIP = this.records[a].ip
                } else {
                    this.netField.setValue(this.records[a].net);
                    this.manualIP = ""
                }
                if (null !== this.oldServiceEnable) {
                    this.serviceField.setValue(this.oldServiceEnable)
                } else {
                    this.setFieldAndOriginalValues(this.serviceField, this.records[a].enable)
                }
                this.setFieldAndOriginalValues(this.providerField, this.records[a].provider);
                this.setFieldAndOriginalValues(this.hostnameField, this.records[a].hostname);
                this.setFieldAndOriginalValues(this.usernameField, this.records[a].username);
                if (undefined !== this.records[a].passwd) {
                    this.setFieldAndOriginalValues(this.passwdField, this.records[a].passwd)
                } else {
                    this.setFieldAndOriginalValues(this.passwdField, "12345678")
                }
                this.setFieldAndOriginalValues(this.netField, this.records[a].net);
                this.setFieldAndOriginalValues(this.heartbeatField, this.records[a].heartbeat);
                var c = SYNO.SDS.AdminCenter.PublicAccess.DDNSTransferStatus(this, this.records[a].status);
                this.setFieldAndOriginalValues(this.statusField, c);
                this._linkEl = Ext.get(this._linkId);
                if (this._linkEl) {
                    this.mailInfo = {
                        owner: this.owner,
                        email: this.usernameField.getValue()
                    };
                    this.panel.mon(this._linkEl, "click", SYNO.SDS.AdminCenter.PublicAccess.DDNSSendVerifiedMail, this)
                }
                break
            }
        }
        if (this.records.length == a) {
            this.lastSelected = this.records.length;
            this.records.push({
                service: this.oldServiceEnable,
                provider: b,
                hostname: "",
                user: "",
                passwd: "",
                net: "",
                heartbeat: "Synology" === b,
                status: ""
            });
            this.netField.setValue("LAN")
        }
    },
    setFieldStatus: function(a) {
        this.hostnameField.setValue("");
        this.usernameField.setValue("");
        this.passwdField.setValue("");
        this.netField.setValue("");
        this.statusField.setValue("");
        if ("Synology" === a) {
            this.heartbeatField.setValue(true);
            this.heartbeatField.enable()
        } else {
            this.heartbeatField.setValue(false);
            this.heartbeatField.disable()
        }
    },
    apply: function() {
        var a = this.panel.getForm();
        if (!this.CheckFieldValid(a)) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        if (!a.isDirty()) {
            this.close()
        }
        this.setStatusBusy();
        var b = {
            id: ("add" == this.action) ? null : this.selected,
            enable: this.serviceField.getValue(),
            provider: this.providerField.getValue(),
            hostname: this.hostnameField.getValue(),
            username: this.usernameField.getValue(),
            net: ("MANUAL" === this.netField.getValue()) ? this.manualIP : this.netField.getValue(),
            ip: this.netField.getValue(),
            heartbeat: this.heartbeatField.getValue()
        };
        if (this.passwdField.isDirty()) {
            b.passwd = this.passwdField.getValue()
        }
        this.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.DDNS.Record",
                    version: 1,
                    method: ("add" == this.action) ? "create" : "set",
                    params: b
                }, {
                    api: "SYNO.Core.DDNS.Record",
                    version: 1,
                    method: "update_ip_address",
                    params: {
                        id: this.providerField.getValue()
                    }
                }]
            },
            callback: this.applyFunCallback
        })
    },
    applyFunCallback: function(d, c, b) {
        this.clearStatusBusy();
        for (var a = 0; a < c.result.length; a++) {
            if (!c.result[a].success) {
                this.getMsgBox().alert(_T("tree", "leaf_wanconfig"), _T("service", "service_ddns_operation_fail"))
            }
        }
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.DDNSRecordFormBefore5004", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        a.testConBtn = Ext.getCmp(this.testConBtnId)
    },
    fillConfig: function(a) {
        var b = {
            border: false,
            items: SYNO.SDS.AdminCenter.PublicAccess.DDNSGetRecordConfigBefore5004(this, false, false, false, this.module)
        };
        Ext.apply(b, a);
        return b
    }
});
SYNO.SDS.AdminCenter.PublicAccess.DDNSGetRecordConfigBefore5004 = function(a, f, g, b, e) {
    var h = g ? 0 : 1;
    var d = 200;
    var c = [{
        xtype: "syno_displayfield",
        value: (f) ? _T("ezinternet", "ezinternet_ddns_use_desc") : _T("service", "service_ddns_tip"),
        hidden: g
    }, {
        xtype: "syno_checkbox",
        boxLabel: _T("service", "service_ddns_title"),
        name: "enable",
        hideMode: g ? "display" : "visibility",
        hidden: true,
        checked: true
    }, {
        synotype: "indent",
        indent: h,
        fieldLabel: _T("service", "service_ddns_type"),
        xtype: "syno_compositefield",
        itemId: "ddns_provider_type",
        hidden: g,
        items: [{
            xtype: "syno_combobox",
            width: d,
            hiddenName: "ddns_provider_list",
            valueField: "id",
            displayField: "display",
            autoDestroy: true,
            allowBlank: false,
            store: new Ext.data.JsonStore({
                fields: ["id", "display", "provider", "registrable"],
                idProperty: "id",
                data: []
            })
        }, {
            xtype: "syno_displayfield",
            width: 10
        }, {
            xtype: "syno_button",
            text: _T("routerconf", "routerconf_test_conn"),
            itemId: "ddns_test_con_btn",
            id: a.testConBtnId = Ext.id(),
            disabled: e._S("demo_mode"),
            hidden: (f) ? true : false,
            tooltip: e._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
        }]
    }, {
        indent: h,
        fieldLabel: _T("service", "service_ddns_hostname"),
        xtype: "syno_compositefield",
        itemId: "ddns_hostname_testCon",
        hidden: g,
        items: [{
            xtype: "syno_textfield",
            width: d,
            vtype: "hostname",
            allowBlank: false,
            value: "",
            name: "hostname"
        }, {
            xtype: "syno_displayfield",
            width: 10
        }]
    }, {
        xtype: "syno_textfield",
        fieldLabel: g ? _T("service", "service_ddns_email") : _T("service", "service_ddns_username") + "/" + _T("service", "service_ddns_email"),
        name: "username",
        width: d,
        indent: h,
        minLength: g ? 3 : 1,
        maxLength: 256,
        value: "",
        vtype: g ? "email" : "",
        allowBlank: false
    }, {
        fieldLabel: _T("service", "service_ddns_passwd"),
        xtype: "syno_textfield",
        textType: "password",
        name: "passwd",
        width: d,
        indent: h,
        minLength: g ? 6 : 1,
        maxLength: 128,
        value: "",
        allowBlank: false
    }, {
        fieldLabel: _T("service", "service_ddns_passwd_confirm"),
        xtype: "syno_textfield",
        textType: "password_confirm",
        confirmFor: "passwd",
        name: "passwd_confirm",
        width: d,
        indent: h,
        minLength: g ? 6 : 1,
        maxLength: 128,
        hidden: !g,
        value: "",
        allowBlank: false
    }, {
        xtype: "syno_combobox",
        fieldLabel: _T("service", "service_wanconfig_gateway_addr_out"),
        name: "net",
        hidden: g,
        itemId: "net",
        indent: h,
        width: d,
        vtype: "v4ip",
        allowBlank: false,
        editable: true,
        displayField: "display",
        valueField: "id",
        value: "",
        store: new Ext.data.JsonStore({
            fields: ["id", "display"],
            data: []
        })
    }, {
        xtype: "syno_combobox",
        fieldLabel: _T("service", "service_ddns_heartbeat"),
        name: "heartbeat",
        itemId: "heartbeat",
        indent: h,
        width: d,
        displayField: "display",
        valueField: "id",
        value: g,
        disabled: !g,
        store: new Ext.data.JsonStore({
            fields: ["id", "display"],
            data: [{
                id: true,
                display: _T("service", "service_enable")
            }, {
                id: false,
                display: _T("service", "service_disable")
            }]
        })
    }, {
        synotype: "indent",
        xtype: "syno_displayfield",
        indent: h,
        itemId: "status",
        hidden: (f || g) ? true : false,
        hideLabel: (f) ? true : false,
        fieldLabel: _T("service", "service_wanconfig_status")
    }];
    SYNO.LayoutConfig.fill(c);
    return c
};
Ext.ns("SYNO.SDS.AdminCenter.PublicAccess");
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin
    },
    getHelpParam: function() {
        return this.panel.getActiveTab().getHelpParam()
    },
    getPanel: function() {
        if (!this.panel) {
            this.panel = new SYNO.SDS.AdminCenter.PublicAccess.TabPanel({
                module: this
            })
        }
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    confirmCallback: function(a) {
        if (Ext.isDefined(this.panel.PortforwardingPanel)) {
            this.panel.PortforwardingPanel.onChangeConfirm(a)
        }
        if ("no" === a) {
            if (this.panel.activeTab === this.panel.DDNSForm) {
                this.panel.DDNSForm.pollingTaskStart()
            }
        }
    },
    activate: function(a) {
        this.panel.DDNSForm.pollingTaskStart();
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    deactivate: function() {
        this.panel.DDNSForm.pollingTaskStop();
        if (this.panel.advancedForm.getForm().isDirty()) {
            return false
        }
        if (this.panel && this.panel.PortforwardingPanel && this.panel.PortforwardingPanel.layout) {
            if (this.panel.PortforwardingPanel.isDirty()) {
                return false
            }
            this.panel.PortforwardingPanel.layout.setActiveItem("emptyPf")
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.FakePanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b;
        b = Ext.apply({
            title: _T("tree", "leaf_routerconf"),
            items: [],
            renderTo: Ext.getBody()
        }, a);
        this.callParent([b])
    },
    setLastActiveItem: function(a) {
        this.lastActiveItem = a
    },
    isDirty: function() {
        if (!Ext.isDefined(this.lastActiveItem)) {
            return false
        }
        return this.lastActiveItem.isDirty()
    },
    clearDirty: function() {
        if (Ext.isDefined(this.lastActiveItem)) {
            this.lastActiveItem.clearDirty()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.PortForwardingPanel", {
    extend: "Ext.Panel",
    constructor: function(a) {
        this.module = a.module;
        var b;
        b = Ext.apply({
            activeItem: 0,
            layout: "card",
            title: _T("tree", "leaf_routerconf"),
            items: [this.emptyPanel = new SYNO.SDS.AdminCenter.PublicAccess.FakePanel({
                module: this.module,
                itemId: "emptyPf"
            }), this.otherPorForwarding = new SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleGrid({
                module: this.module,
                itemId: "otherPf"
            }), this.selfPortforwarding = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardTab.RuleGrid({
                module: this.module,
                itemId: "selfPf"
            })]
        }, a);
        this.callParent([b])
    },
    onTabChange: function(b, a) {
        if (this === a) {
            this.activated = true
        } else {
            this.activated = false
        }
        this.onTopologyChange(null, null)
    },
    isSelfPf: function(a) {
        if ((true === a.support_net_topology) && ("router" === a.net_topology)) {
            return true
        }
        return false
    },
    onTopologyChange: function(c, a) {
        var b = {};
        if (c) {
            this.topology = c
        }
        if ((true === a) || (false === a)) {
            this.support_net_topology = a
        }
        if (this.activated) {
            b.net_topology = this.topology;
            b.support_net_topology = this.support_net_topology;
            if (true === this.isSelfPf(b)) {
                this.layout.setActiveItem("selfPf")
            } else {
                this.layout.setActiveItem("otherPf")
            }
            this.emptyPanel.setLastActiveItem(this.layout.activeItem)
        } else {
            this.layout.setActiveItem("emptyPf")
        }
    },
    onChangeConfirm: function(a) {
        if (a === "yes") {
            this.layout.activeItem.clearDirty()
        }
    },
    isDirty: function() {
        return this.layout.activeItem.isDirty()
    },
    getHelpParam: function() {
        if (this.layout.activeItem) {
            return this.layout.activeItem.getHelpParam()
        } else {
            return "AdminCenter/connection_routerconf.html"
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.PublicAccess.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.module = a.module;
        var b;
        b = Ext.apply({
            activeTab: 0,
            items: [this.DDNSForm = new SYNO.SDS.AdminCenter.PublicAccess.DDNSTab({
                module: this.module
            }), this.PortforwardingPanel = new SYNO.SDS.AdminCenter.PublicAccess.PortForwardingPanel({
                module: this.module,
                itemId: "portforwardingtab"
            }), this.advancedForm = new SYNO.SDS.AdminCenter.PublicAccess.AdvancedForm({
                module: this.module,
                itemId: "advancetab"
            })]
        }, a);
        this.callParent([b]);
        this.mon(this, "activate", this.startPolling, this);
        this.mon(this, "deactivate", this.stopPolling, this);
        this.mon(this, "tabchange", this.PortforwardingPanel.onTabChange, this.PortforwardingPanel)
    },
    startPolling: function() {
        this.pollDeviceId = this.pollReg({
            scope: this,
            webapi: {
                api: "SYNO.Core.Network.Router.Topology",
                version: 1,
                method: "get"
            },
            interval: 1,
            immediate: true,
            status_callback: this.checkTopology
        })
    },
    checkTopology: function(c, b, a) {
        if (!c) {
            SYNO.Debug("PublicAccess load topology failed");
            return
        }
        if ((b.support_net_topology !== this.support_net_topology) || (b.net_topology !== this.topology)) {
            this.support_net_topology = b.support_net_topology;
            this.topology = b.net_topology;
            if (this.PortforwardingPanel) {
                this.PortforwardingPanel.onTopologyChange(b.net_topology, b.support_net_topology)
            }
        }
    },
    stopPolling: function() {
        if (this.pollDeviceId) {
            this.pollUnreg(this.pollDeviceId)
        }
    },
    onApiSuccess: function(d, b, a) {
        if ("set" === d) {
            if (!b.has_fail) {
                this.setStatusOK()
            } else {
                var c = SYNO.API.getErrorString(b);
                this.setStatusError({
                    text: c,
                    clear: true
                })
            }
        }
        this.processReturnData(d, b, a)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Network.Utils");
SYNO.SDS.AdminCenter.Network.Utils.SortFunc = function(b, a) {
    var h = 0;
    var f = /^([a-z]+)([0-9]*)(\.?)([0-9]*)$/;
    var e = f.exec(b.ifname);
    var d = f.exec(a.ifname);
    if (e instanceof Array && d instanceof Array) {
        if (e[1] > d[1]) {
            h = 1
        } else {
            if (e[1] < d[1]) {
                h = -1
            } else {
                h = 0
            }
        }
        if (0 === h) {
            var g = parseInt(e[2], 10) || 0;
            var c = parseInt(d[2], 10) || 0;
            if (g > c) {
                h = 1
            } else {
                if (g < c) {
                    h = -1
                } else {
                    h = 0
                }
            }
        }
    }
    return h
};
SYNO.SDS.AdminCenter.Network.Utils.WaitingBox = function(e) {
    var f = e.times || 10;
    var b = f;
    var a = Ext.isDefined(e.no_close) ? e.no_close : true;
    var c = e.interval || 1000;
    SYNO.SDS.Desktop.getMsgBox().show({
        title: e.title || this.title,
        msg: e.msg || this.msg,
        width: e.width || 240,
        progress: true,
        closable: false
    });
    var d = function() {
        SYNO.Debug("refresh");
        b--;
        if (0 === b && !a) {
            if (Ext.isFunction(e.callback)) {
                e.callback.call(e.scope || this)
            }
            SYNO.SDS.Desktop.getMsgBox().hide();
            return
        }
        if (0 === b) {
            b = f
        }
        SYNO.SDS.Desktop.getMsgBox().updateProgress(1 - b / f);
        d.defer(c, this)
    };
    d.defer(c, this)
};
SYNO.SDS.AdminCenter.Network.Utils.Redirect = function(g, a, f, b, h, d, j) {
    var k = j || 50000;
    var c = 0;
    if (!Ext.isBoolean(a) || !Ext.isArray(f) || !Ext.isString(b) || !Ext.isString(h)) {
        SYNO.Debug("bad parameters");
        return
    }
    if (!g) {
        a = ("https:" === location.protocol);
        f = [location.hostname];
        b = location.port
    }
    if (null === d) {
        d = "SYNO.SDS.AdminCenter.Network.Main"
    }
    SYNO.SDS.UserSettings.setProperty("Desktop", "restoreParams", Ext.apply({
        className: "SYNO.SDS.AdminCenter.Application",
        params: {
            fn: d
        }
    }));
    SYNO.SDS.StatusNotifier.fireEvent("redirect");
    window.onbeforeunload = null;
    var e = function(l) {
        var m = "http" + ((true === a) ? "s" : "");
        var n = String.format("{0}://{1}:{2}/webman/index.cgi?auth_key={3}", m, f[l % f.length], b, h);
        SYNO.Debug("try " + n);
        window.location = n
    };
    e.defer(k, this, [0]);
    for (c = 0; c < 3; c++) {
        k += 10000;
        e.defer(k, this, [0])
    }
    for (c = 1; c <= f.length; c++) {
        k += 10000;
        e.defer(k, this, [c])
    }
    SYNO.SDS.AdminCenter.Network.Utils.WaitingBox.apply(this, [{
        times: k / 1000,
        msg: _T("tcpip", "connect_new_ip")
    }])
};
SYNO.SDS.AdminCenter.Network.Utils.IsInt = function(a) {
    return (("number" === typeof a) && (a % 1 === 0))
};
SYNO.SDS.AdminCenter.Network.Utils.GetLinkStatus = function(f, e, g, c) {
    var a = "--";
    if (!SYNO.SDS.AdminCenter.Network.Utils.IsInt(f) || ("boolean" !== typeof e) || !SYNO.SDS.AdminCenter.Network.Utils.IsInt(g) || (-1 == f)) {
        return a
    }
    var h = String.format(_T("tcpip", "if_speed"), f);
    var b = String.format(_T("tcpip", "MTU_value"), g);
    var d = e ? _T("tcpip", "full_duplex") : _T("tcpip", "half_duplex");
    if (true === e) {
        d = _T("tcpip", "full_duplex")
    } else {
        d = _T("tcpip", "half_duplex")
    }
    a = String.format("{0}, {1}, {2}", h, d, b);
    if (true === c) {
        a += String.format(', <font class="red-status">{0}</font>', _T("network", "linkaggr_8023ad_error"))
    }
    return a
};
SYNO.SDS.AdminCenter.Network.Utils.apiMap = {
    "SYNO.Core.Network": "network",
    "SYNO.Core.Network.Proxy": "proxy",
    "SYNO.Core.Network.IPv6Tunnel": "tunnel",
    "SYNO.Core.Network.Ethernet": "ethernet",
    "SYNO.Core.Network.LocalBridge": "local_bridge",
    "SYNO.Core.Network.Bridge": "bridge",
    "SYNO.Core.Network.PPPoE": "pppoe",
    "SYNO.Core.Network.Bond": "bond",
    "SYNO.Core.Network.PPPoE.Relay": "pppoe_relay",
    "SYNO.Core.Network.IPv6": "ipv6",
    "SYNO.Core.Network.IPv6.Router": "ipv6_router",
    "SYNO.Core.Network.IPv6.Router.Prefix": "ipv6_router_prefix",
    "SYNO.Core.Network.DHCPServer": "dhcp_server",
    "SYNO.Core.Network.DHCPServer.Reservation": "dhcp_server_reservation",
    "SYNO.Core.Network.DHCPServer.ClientList": "dhcp_server_clientlist",
    "SYNO.Core.Network.USBModem": "usbmodem",
    "SYNO.Core.Network.UPnPServer": "upnpserver",
    "SYNO.GlusterfsMgmt.Service": "gluster_service",
    "SYNO.Core.Network.DHCPServer.WPAD": "wpad"
};
SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix = function(b) {
    var a = SYNO.SDS.AdminCenter.Network.Utils.apiMap;
    if (a.hasOwnProperty(b)) {
        return a[b] + "_"
    }
    return ""
};
SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_RULE = 100;
SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_PORTS_IN_A_RULE = 15;
SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH = 200;
SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_LABEL_WIDTH = 200;
SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_RATE = 200000;
SYNO.SDS.AdminCenter.Network.Utils.TcErrCode = {};
Ext.apply(SYNO.SDS.AdminCenter.Network.Utils.TcErrCode, {
    WEBAPI_ERR_NO_REQUIRED_PARAM: 114,
    WEBAPI_CORE_ERR_TC_NOERR: 1200,
    WEBAPI_CORE_ERR_TC_OP_FAIL: 1201,
    WEBAPI_CORE_ERR_TC_CEIL_EXCEED_SYSTEM_UPPER_BOUND: 1202,
    WEBAPI_CORE_ERR_TC_MAX_CEIL_TOO_LARGE: 1203,
    WEBAPI_CORE_ERR_TC_RESTORE_FAIL: 1204,
    WEBAPI_CORE_ERR_TC_MAX: 1299,
    WEBAPI_CORE_ERR_NET_NO_SUCH_INTERFACE: 4311
});
SYNO.SDS.AdminCenter.Network.Utils.TcRULERecord = Ext.data.Record.create({
    name: "id"
}, {
    name: "enabled"
}, {
    name: "port_type"
}, {
    name: "port_num"
}, {
    name: "protocol"
}, {
    name: "minrate"
}, {
    name: "maxrate"
});
SYNO.SDS.AdminCenter.Network.Utils.Render_Min_Rate = function(a, b) {
    b.attr = 'ext:qtip="' + a + '"';
    return a
};
SYNO.SDS.AdminCenter.Network.Utils.Render_Max_Rate = function(b, c) {
    var a = "";
    if (0 === b) {
        a = _T("firewall", "firewall_tc_unlimited")
    } else {
        a = b
    }
    c.attr = 'ext:qtip="' + a + '"';
    return a
};
SYNO.SDS.AdminCenter.Network.Utils.onClickDirectoryServiceUrl = function(a) {
    a.findAppWindow().startModule("SYNO.SDS.AdminCenter.DirectoryService.Main")
};
SYNO.SDS.AdminCenter.Network.Utils.RenderSubnetGridCell = function(e, d, a, f, c, b) {
    if (true === a.get("pxe")) {
        d.attr = 'ext:qtip="' + _T("network", "pxe_subnet_tooltip") + '"'
    }
    return e
};
SYNO.SDS.AdminCenter.Network.Utils.GetDSInfo = function() {
    var c = {
        platform: "",
        model: ""
    };
    var b = /^synology_([A-Z|a-z|0-9]*)_([a-z|0-9|+]*)$/;
    var d = this._D("unique");
    if (!d) {
        return c
    }
    var a = b.exec(d);
    if (3 > a.size()) {
        return c
    }
    c.platform = a[1];
    c.model = a[2];
    return c
};
SYNO.SDS.AdminCenter.Network.Utils.Strncmp = function(b, a, c) {
    b = b.substring(0, c);
    a = a.substring(0, c);
    return ((b === a) ? 0 : (b > a) ? 1 : -1)
};
Ext.define("SYNO.SDS.AdminCenter.Network.GeneralTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.showOldUI = (this._S("version") < 4966);
        this.callParent([this.fillConfig(a)]);
        this.on("afterlayout", function(b, c) {
            this.checkGroupDNS = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "dns_manual", ["dns_primary", "dns_secondary"]);
            this.checkGroupProxy = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable", []);
            this.checkGroupProxyDiff = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_different_host", ["https_host", "https_port"]);
            this.checkGroupProxyAuth = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_auth", ["username", "password"])
        }, this, {
            single: true
        });
        this.customizeForm()
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("common", "general"),
            hideMode: "offsets",
            module: a.module,
            trackResetOnLoad: true,
            proxy_keys: ["enable", "http_host", "http_port", "enable_different_host", "https_host", "https_port", "enable_auth", "username", "password", "enable_bypass"],
            items: [this.createCommonSetting(), this.createProxySetting()]
        }, a);
        return b
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    customizeForm: function() {
        var a = this.getForm();
        a.isDirtyDefault = a.isDirty;
        a.isDirty = function() {
            var e = this.isDirtyDefault();
            var d = this.findField("enable_different_host");
            var c = this.findField("http_host");
            var b = this.findField("http_port");
            if (true === d.getValue()) {
                c.enable();
                b.enable();
                e = e || c.isDirty() || b.isDirty();
                c.disable();
                b.disable()
            }
            return e
        };
        a.isValidDefault = a.isValid;
        a.isValid = function() {
            var b = this.findField("http_host");
            var c = this.findField("enable_different_host");
            if (!this.isValidDefault()) {
                return false
            }
            if (true === c.getValue()) {
                return true
            }
            return b.isValid()
        }
    },
    createCommonSetting: function() {
        var a = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.Network.Main::general::general",
            title: _T("common", "general"),
            collapsible: true,
            webapi: {
                api: "SYNO.Core.Network",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                value: _T("tcpip", "name_dns_gateway_desc")
            }, {
                xtype: "syno_textfield",
                fieldLabel: this._S("ha_running") ? _TT("SYNO.SDS.HA.Instance", "ui", "virtual_server") : _T("tcpip", "server_name"),
                name: "server_name",
                vtype: "netbiosName",
                allowBlank: false,
                maxlength: 15
            }, {
                xtype: "syno_compositefield",
                hidden: this.showOldUI,
                disabled: this.showOldUI,
                items: [{
                    xtype: "syno_displayfield",
                    fieldLabel: _T("tcpip", "tcpip_gateway"),
                    width: 200,
                    name: "gateway"
                }, {
                    xtype: "syno_button",
                    text: _T("common", "alt_edit"),
                    id: this.btnServiceOrder = Ext.id(),
                    scope: this,
                    handler: this.onServiceOrder
                }]
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "tcpip_gateway"),
                hidden: !this.showOldUI,
                disabled: !this.showOldUI,
                name: "gateway",
                vtype: "v4ip",
                maxlength: 15,
                validator: function(f) {
                    var b = SYNO.SDS.Utils.Network.GatewayMatchIP;
                    var d = false;
                    var c = null;
                    var e = null;
                    if (!this.ownerCt || !this.ownerCt.ownerCt || !this.ownerCt.ownerCt.module) {
                        return true
                    }
                    c = this.ownerCt.ownerCt.module.getStore();
                    e = this.ownerCt.ownerCt.module.getWifiStore();
                    if ("" === f || 0 === c.getCount()) {
                        return true
                    }
                    c.each(function(h) {
                        var i = h.get("ip");
                        var g = h.get("mask");
                        if (i && g && b(f, i, g)) {
                            d = true;
                            return false
                        }
                    }, this);
                    e.each(function(h) {
                        var i = h.get("ip");
                        var g = h.get("mask");
                        if (i && g && b(f, i, g)) {
                            d = true;
                            return false
                        }
                    }, this);
                    if (d) {
                        return true
                    } else {
                        return _T("common", "error_notmatch")
                    }
                }
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("tcpip", "tcpip_v6gateway"),
                hidden: this.showOldUI,
                name: "v6gateway"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "enable_static_dns"),
                name: "dns_manual"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "primary_dns"),
                name: "dns_primary",
                allowBlank: false,
                maxlength: ("yes" === this._D("ipv4only")) ? 15 : 39,
                indent: 1,
                vtype: ("yes" === this._D("ipv4only")) ? "v4ip" : "ip"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "secondary_dns"),
                name: "dns_secondary",
                allowBlank: true,
                maxlength: ("yes" === this._D("ipv4only")) ? 15 : 39,
                indent: 1,
                vtype: ("yes" === this._D("ipv4only")) ? "v4ip" : "ip"
            }, {
                xtype: "syno_displayfield",
                value: String.format('<span class="note-font">' + _T("common", "note") + "</span>: " + _T("network", "goto_directory_service_for_dns_desc"), '<a id="' + Ext.id() + '" href="javascript: void(0)"><font class="link-font">' + _T("directory_service", "directory_service_title") + "</font></a>"),
                name: "dns_domain_warning",
                indent: 1,
                hidden: true
            }, {
                xtype: "syno_checkbox",
                boxLabel: "enable_windomain",
                name: "enable_windomain",
                hidden: true,
                readOnly: true,
                disabled: true
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "arp_ignore"),
                hidden: !this.showOldUI,
                name: "arp_ignore"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "route_multi_gateway_enable"),
                hidden: true,
                name: "multi_gateway"
            }, {
                xtype: "syno_button",
                text: _T("common", "adv_setting"),
                indent: 1,
                hidden: this.showOldUI,
                scope: this,
                handler: this.onClickAdvanceSettingsBtn
            }]
        };
        return a
    },
    createProxySetting: function() {
        var a = {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.Network.Main::general::proxy",
            title: _T("network", "proxy_title"),
            collapsible: true,
            webapi: {
                api: "SYNO.Core.Network.Proxy",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("network", "proxy_enabled"),
                disabled: this._S("ha_running"),
                name: "enable"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "network_address"),
                name: "http_host",
                allowBlank: false,
                maxlength: 128,
                indent: 1,
                disabled: this._S("ha_running"),
                vtype: "hostname"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "port"),
                name: "http_port",
                allowBlank: true,
                maxlength: 5,
                indent: 1,
                disabled: this._S("ha_running"),
                vtype: "port"
            }, {
                xtype: "syno_checkbox",
                name: "enable_different_host",
                boxLabel: _T("network", "proxy_enabled_adv"),
                disabled: this._S("ha_running"),
                hidden: true
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "network_address"),
                name: "https_host",
                maxlength: 128,
                indent: 1,
                vtype: "hostname",
                disabled: this._S("ha_running"),
                hidden: true
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "port"),
                name: "https_port",
                allowBlank: true,
                maxlength: 5,
                indent: 1,
                vtype: "port",
                disabled: this._S("ha_running"),
                hidden: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_auth",
                boxLabel: _T("network", "proxy_enabled_auth"),
                disabled: this._S("ha_running"),
                hidden: true
            }, {
                indent: 1,
                xtype: "syno_textfield",
                fieldLabel: _T("common", "username"),
                allowBlank: false,
                maxlength: 64,
                name: "username",
                disabled: this._S("ha_running"),
                hidden: true
            }, {
                indent: 1,
                xtype: "syno_textfield",
                fieldLabel: _T("common", "password"),
                maxlength: 127,
                textType: "password",
                name: "password",
                disabled: this._S("ha_running"),
                hidden: true
            }, {
                xtype: "syno_button",
                text: _T("common", "adv_setting"),
                indent: 1,
                scope: this,
                handler: this.onClickProxyAdvBtn,
                disabled: this._S("ha_running"),
                id: this.advBtnId = Ext.id()
            }, {
                xtype: "syno_checkbox",
                name: "enable_bypass",
                indent: 1,
                disabled: this._S("ha_running"),
                boxLabel: _T("network", "proxy_enabled_bypass_local")
            }]
        };
        return a
    },
    onClickProxyAdvBtn: function() {
        var a = new SYNO.SDS.AdminCenter.Network.ProxyDialog({
            owner: this.module.appWin,
            module: this.module,
            generalSetting: this
        });
        a.open()
    },
    onClickAdvanceSettingsBtn: function() {
        var a = new SYNO.SDS.AdminCenter.Network.AdvanceSettings({
            owner: this.module.appWin,
            module: this.module,
            generalSetting: this
        });
        a.open()
    },
    isGatewayDirty: function() {
        return this.getForm().findField("gateway").isDirty()
    },
    isGatewayEmpty: function() {
        return ("" === this.getForm().findField("gateway").getValue())
    },
    processParams: function(f, e) {
        var d = this.getForm();
        var a = d.findField("enable").getValue();
        var c = d.findField("password").isDirty();
        var b = d.findField("enable_different_host").getValue();
        Ext.each(e, function(h, g, i) {
            var j = i[g].params;
            if ("get" === h.method) {
                return
            }
            switch (h.api) {
                case "SYNO.Core.Network.Proxy":
                    if (a) {
                        if (b) {
                            j.http_host = d.findField("http_host").getValue();
                            j.http_port = d.findField("http_port").getValue()
                        } else {
                            j.http_host = d.findField("http_host").getValue();
                            j.http_port = d.findField("http_port").getValue();
                            j.https_host = d.findField("http_host").getValue();
                            j.https_port = d.findField("http_port").getValue()
                        }
                    }
                    if (!c) {
                        delete j.password
                    }
                    break;
                default:
                    break
            }
        }, this);
        return e
    },
    processReturnData: function(h, f, e) {
        var a = false;
        var c = "";
        var g = 0;
        var b = this.getForm().findField("dns_domain_warning").el.first("a");
        if (b) {
            this.mun(b, "click", this.onRedirectDomainServiceClick, this);
            this.mon(b, "click", this.onRedirectDomainServiceClick, this)
        }
        Ext.each(f.result, function(k, j, i) {
            if (false === k.success) {
                g = k.error.code;
                return
            }
            if ("set" === k.method) {
                a = true
            }
            switch (k.api) {
                case "SYNO.Core.Network":
                    if ("set" === k.method && k.data.hostname_changed_and_join_domain) {
                        this.module.appWin.getMsgBox().alert(_T("common", "general"), _T("tcpip", "rejoin_domain_msg"))
                    }
                    if ("get" === k.method) {
                        c = k.data.gateway;
                        if (!this.showOldUI && k.data.v6gateway.empty()) {
                            k.data.v6gateway = "-"
                        }
                    }
                    break;
                default:
                    break
            }
        }, this);
        if (this.isFormDirty() && false === a) {
            if (this.showOldUI) {
                var d = this.getForm().findField("gateway");
                if (d.disabled) {
                    this.getForm().setValues({
                        gateway: c
                    })
                }
            } else {
                this.getForm().setValues({
                    gateway: c
                })
            }
            return
        }
        this.callParent([h, f, e]);
        this.updateForm();
        if (this.showOldUI) {
            this.clearGatewayInvalid()
        }
        if (0 !== g) {
            this.module.appWin.getMsgBox().alert(_T("controlpanel", "leaf_lan"), SYNO.API.getErrorString(g))
        }
    },
    onRedirectDomainServiceClick: function() {
        SYNO.SDS.AdminCenter.Network.Utils.onClickDirectoryServiceUrl(this.module.appWin)
    },
    clearGatewayInvalid: function() {
        var a = this.getForm().findField("gateway");
        a.clearInvalid()
    },
    updateForm: function() {
        var a = this.getForm();
        if (true === a.findField("enable_windomain").getValue()) {
            a.findField("dns_manual").disable();
            a.findField("dns_secondary").hide();
            a.findField("dns_domain_warning").show()
        } else {
            a.findField("dns_manual").enable();
            a.findField("dns_secondary").show();
            a.findField("dns_domain_warning").hide()
        }
        this.setCheckGroupProxy()
    },
    getProxyValues: function() {
        var a = {};
        var b = this.getForm();
        Ext.each(this.proxy_keys, function(c) {
            var d = b.findField(c);
            if (d) {
                a[c] = d.getValue()
            }
        });
        return a
    },
    setProxyValues: function(a) {
        var b = this.getForm();
        Ext.each(this.proxy_keys, function(c) {
            var e = b.findField(c);
            var d = a[c];
            if (e && undefined !== d) {
                e.setValue(d)
            }
        })
    },
    setCheckGroupProxy: function() {
        var c = this.getForm();
        var b = ["enable_bypass", this.advBtnId];
        var a = !c.findField("enable").getValue();
        if (true === c.findField("enable_different_host").getValue()) {
            c.findField("http_host").disable();
            c.findField("http_port").disable()
        } else {
            c.findField("http_host").setDisabled(a);
            c.findField("http_port").setDisabled(a);
            b.push("http_host");
            b.push("http_port")
        }
        c.findField("enable_bypass").setDisabled(a);
        Ext.getCmp(this.advBtnId).setDisabled(a);
        this.checkGroupProxy.enable_fields = b
    },
    afterLoad: function() {
        var a = false;
        var c = true;
        this.module.getStore().each(function(d) {
            switch (d.get("type")) {
                case "wan":
                case "lan":
                case "bridge":
                case "local_bridge":
                case "bond":
                    if (true !== d.get("use_dhcp")) {
                        c = false
                    }
                    break;
                case "usbmodem":
                case "pppoe":
                case "vpnc":
                    if ("connected" === d.get("status") || "connecting" === d.get("status")) {
                        a = true
                    }
                    break;
                default:
                    SYNO.Debug("unknowntype:" + d.get("type"));
                    break
            }
        }, this);
        this.module.getWifiStore().each(function(d) {
            if (true !== d.get("use_dhcp")) {
                c = false
            }
        }, this);
        var b = this.getForm().findField("gateway");
        if (!b) {
            return
        }
        if (a || c) {
            b.reset()
        }
        b.setDisabled(a || c)
    },
    loadFormNoMask: function(a) {
        var c = "get",
            b;
        if (false === this.onBeforeAction(this.getForm(), c)) {
            return false
        }
        b = this.getApiArray(c);
        b = this.processParams(c, b);
        this.sendAjaxRequestNoMask(c, b)
    },
    sendAjaxRequestNoMask: function(e, d) {
        var c = this.getAjaxCfg(e);
        var a = this.getCompoundCfg(e);
        var b = Ext.apply({
            fileUpload: false,
            clientValidation: false,
            compound: {
                stopwhenerror: false,
                params: d
            },
            scope: this,
            callback: function(h, g, f) {
                if (h) {
                    this.onApiSuccess(e, g, f)
                } else {
                    this.onApiFailure(e, g, f)
                }
            }
        }, c);
        b.compound = Ext.apply(b.compound, a);
        this.getForm().submit(b)
    },
    onServiceOrder: function(a, b) {
        var c = new SYNO.SDS.AdminCenter.Network.ServiceOrderDialog({
            module: this.module,
            owner: this.module.appWin
        });
        c.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.ProxyDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        var c = this.fillConfig(a);
        var b = a.generalSetting.getProxyValues();
        this.callParent([c]);
        this.getComponent("adv_form").getForm().setValues(b);
        this.checkGroupHost = new SYNO.ux.Utils.EnableCheckGroup(this.getComponent("adv_form").getForm(), "enable_different_host", ["http_host", "http_port", "https_host", "https_port"]);
        this.checkGroupAuth = new SYNO.ux.Utils.EnableCheckGroup(this.getComponent("adv_form").getForm(), "enable_auth", ["username", "password"])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("network", "proxy_title_advanced"),
            width: 480,
            height: 420,
            resizable: false,
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }],
            items: [this.createAdvSetting()]
        }, a);
        return b
    },
    onApply: function() {
        var c = this.getComponent("adv_form").getForm();
        var e = c.findField("http_host");
        var b = c.findField("https_host");
        var f = c.findField("enable_different_host").getValue();
        var d = ("" === e.getValue());
        var a = ("" === b.getValue());
        if (!c.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (f && d && a) {
            this.setStatusError({
                text: _T("network", "proxy_warning_host_blank"),
                clear: true
            });
            return false
        }
        this.generalSetting.setProxyValues(c.getValues());
        this.generalSetting.updateForm();
        this.close()
    },
    onCancel: function() {
        this.close()
    },
    createAdvSetting: function() {
        var a = {
            xtype: "form",
            border: false,
            itemId: "adv_form",
            items: [{
                xtype: "syno_checkbox",
                name: "enable_different_host",
                boxLabel: _T("network", "proxy_enabled_adv")
            }, {
                xtype: "syno_displayfield",
                value: _T("network", "proxy_setting_http"),
                indent: 1
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "network_address"),
                name: "http_host",
                maxlength: 128,
                indent: 1,
                vtype: "hostname"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "port"),
                name: "http_port",
                allowBlank: true,
                maxlength: 5,
                indent: 1,
                vtype: "port"
            }, {
                xtype: "syno_displayfield",
                value: _T("network", "proxy_setting_https"),
                indent: 1
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "network_address"),
                name: "https_host",
                maxlength: 128,
                indent: 1,
                vtype: "hostname"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "port"),
                name: "https_port",
                allowBlank: true,
                maxlength: 5,
                indent: 1,
                vtype: "port"
            }, {
                xtype: "syno_checkbox",
                name: "enable_auth",
                boxLabel: _T("network", "proxy_enabled_auth")
            }, {
                indent: 1,
                xtype: "syno_textfield",
                fieldLabel: _T("common", "username"),
                allowBlank: false,
                maxlength: 64,
                name: "username"
            }, {
                indent: 1,
                xtype: "syno_textfield",
                fieldLabel: _T("common", "password"),
                maxlength: 127,
                textType: "password",
                name: "password"
            }]
        };
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.AdvanceSettings", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.generalSetting = a.generalSetting;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("common", "adv_setting"),
            width: 400,
            height: 280,
            resizable: false,
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }],
            items: [this.createAdvSetting()]
        }, a);
        return b
    },
    createAdvSetting: function() {
        var a = {
            xtype: "form",
            border: false,
            itemId: "advancesetting_form",
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("network", "route_policy_route_enable"),
                name: "arp_ignore"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "route_multi_gateway_enable"),
                name: "multi_gateway"
            }]
        };
        return a
    },
    onActivate: function() {
        var b = this.getComponent("advancesetting_form").getForm();
        var a = this.generalSetting.getForm();
        b.findField("arp_ignore").setValue(a.findField("arp_ignore").getValue());
        b.findField("multi_gateway").setValue(a.findField("multi_gateway").getValue());
        SYNO.SDS.AdminCenter.Network.AdvanceSettings.superclass.onActivate.call(this)
    },
    onApply: function() {
        var b = this.getComponent("advancesetting_form").getForm();
        var a = this.generalSetting.getForm();
        a.findField("arp_ignore").setValue(b.findField("arp_ignore").getValue());
        a.findField("multi_gateway").setValue(b.findField("multi_gateway").getValue());
        this.close()
    },
    onCancel: function() {
        this.close()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Utils");
SYNO.SDS.AdminCenter.Utils.WaitHttpdRestart = function(b, h) {
    if (!Ext.isObject(b) || !Ext.isFunction(b.IsAllowRelay)) {
        return Ext.emptyFn
    }
    var d = null;
    var c = null;
    var e = function() {
        if (!d || d.isDestroyed) {
            d = new SYNO.SDS.MessageBoxV5({
                modal: true,
                draggable: false,
                renderTo: document.body
            })
        }
        return d.getWrapper()
    };
    var g = function() {
        if (b.IsAllowRelay()) {
            return b.getMsgBox()
        } else {
            return e()
        }
    };
    var f = function(j) {
        var i = j || _T("common", "msg_waiting");
        g().show({
            closable: false,
            msg: i
        })
    };
    var a = function() {
        if (c) {
            c.remove();
            c = null
        }
        f(_T("service", "restart_apache"));
        c = b.addWebAPITask({
            interval: 5000,
            autoJsonDecode: true,
            api: "SYNO.Core.AppPortal.Config",
            method: "get",
            version: 1,
            scope: this,
            callback: function(l, j, k, i) {
                if (l) {
                    g().hide();
                    c.remove();
                    c = null;
                    if (Ext.isFunction(h)) {
                        h()
                    }
                }
            },
            appWindow: b
        });
        c.start(false)
    };
    return a
};
Ext.define("SYNO.SDS.AdminCenter.Network.BondModeTab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            trackResetOnLoad: true,
            description: _T("network", "linkaggr_mode_select"),
            items: [{
                xtype: "syno_radio",
                boxLabel: _T("network", "linkaggr_mode_alb"),
                name: "mode",
                disabled: (true === _S("ha_running") || this._S("version") < 5454),
                hidden: (this._S("version") < 5454),
                inputValue: "balance-alb",
                itemId: "balance-alb",
                checked: true
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                disabled: (true === _S("ha_running") || this._S("version") < 5454),
                hidden: (this._S("version") < 5454),
                value: _T("network", "linkaggr_tip_alb")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("network", "linkaggr_mode_8023ad"),
                name: "mode",
                disabled: (true === _S("ha_running")),
                inputValue: "802.3ad",
                itemId: "802.3ad"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                disabled: (true === _S("ha_running")),
                value: _T("network", "linkaggr_tip_8023ad")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("network", "linkaggr_mode_xor"),
                name: "mode",
                disabled: (true === _S("ha_running") || this._S("version") < 5454),
                hidden: (this._S("version") < 5454),
                inputValue: "balance-xor",
                itemId: "balance-xor"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                disabled: (true === _S("ha_running") || this._S("version") < 5454),
                hidden: (this._S("version") < 5454),
                value: _T("network", "linkaggr_tip_xor")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("network", "linkaggr_mode_failover"),
                name: "mode",
                disabled: (true === _S("ha_running")),
                inputValue: "active-backup",
                itemId: "active-backup"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                disabled: (true === _S("ha_running")),
                value: _T("network", "linkaggr_tip_failover")
            }]
        }, a);
        return b
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.getComponent("802.3ad").getEl(), _T("network", "linkaggr_tip_8023ad_switch"))
        }, this, {
            single: true
        })
    },
    fillContent: function(a) {
        this.getForm().setValues(this.getConfig(a))
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    isValid: function() {
        return this.getForm().isValid()
    },
    getWebAPISetData: function() {
        return {
            api: "SYNO.Core.Network.Bond",
            version: 1,
            method: "set",
            params: {
                configs: [{
                    ifname: this.win.ifname,
                    mode: this.getForm().findField("mode").getGroupValue()
                }]
            }
        }
    },
    getWebAPIGetData: function() {
        return []
    },
    getWebAPIName: function() {
        if (this.win.ifname.indexOf("bond") > -1) {
            return "SYNO.Core.Network.Bond"
        } else {
            return ""
        }
    },
    getConfig: function(b) {
        var a = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix(this.getWebAPIName());
        return {
            mode: b[a + "mode"]
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.IPv4Tab", {
    extend: "SYNO.ux.FormPanel",
    old_config: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            hideMode: "offsets",
            module: a.module,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "tcpip_dhcp"),
                name: "use_dhcp",
                indent: 0,
                hidden: (true === _S("ha_running")),
                id: this.useDhcpYesId = Ext.id(),
                inputValue: "yes"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "tcpip_manual"),
                name: "use_dhcp",
                indent: 0,
                hidden: (true === _S("ha_running")),
                id: this.useDhcpNoId = Ext.id(),
                inputValue: "no"
            }, {
                xtype: "syno_radio",
                boxLabel: _TT("SYNO.SDS.HA.Instance", "ui", "ha_network_disable"),
                name: "enable_ha_ip",
                indent: 0,
                hidden: (false === _S("ha_running")),
                id: this.enableHAIpNoId = Ext.id(),
                inputValue: "no"
            }, {
                xtype: "syno_radio",
                boxLabel: _TT("SYNO.SDS.HA.Instance", "ui", "ha_network_manual"),
                name: "enable_ha_ip",
                indent: 0,
                hidden: (false === _S("ha_running")),
                id: this.enableHAIpYesId = Ext.id(),
                inputValue: "yes"
            }, {
                xtype: "syno_textfield",
                fieldLabel: (true === _S("ha_running")) ? _TT("SYNO.SDS.HA.Instance", "ui", "ha_ip") : _T("tcpip", "tcpip_ipaddr"),
                name: "ip",
                indent: 1,
                allowBlank: false,
                maxlength: 15,
                vtype: "v4ip",
                width: 350,
                validator: function(g) {
                    var e = g.split(".");
                    var d = this.ownerCt.getForm().findField("mask");
                    var h = d.getValue().split(".");
                    if (e.size() !== 4 || h.size() !== 4 || !d.getActiveError().empty()) {
                        return true
                    }
                    var i = parseInt(e[0], 10) << 24 | parseInt(e[1], 10) << 16 | parseInt(e[2], 10) << 8 | parseInt(e[3], 10);
                    var c = parseInt(h[0], 10) << 24 | parseInt(h[1], 10) << 16 | parseInt(h[2], 10) << 8 | parseInt(h[3], 10);
                    var f = i | ~c;
                    if (i == f) {
                        return _T("network", "error_bad_broadcast_ip")
                    }
                    return true
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: (true === _S("ha_running")) ? _TT("SYNO.SDS.HA.Instance", "ui", "ha_ip_mask") : _T("tcpip", "tcpip_mask"),
                name: "mask",
                indent: 1,
                allowBlank: false,
                maxlength: 15,
                vtype: "netmask",
                width: 350,
                listeners: {
                    valid: function(c) {
                        this.getForm().findField("ip").validate()
                    },
                    scope: this
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "route_gateway"),
                name: "gateway",
                indent: 1,
                allowBlank: true,
                vtype: "v4ip",
                width: 350,
                maxlength: 15,
                disabled: (this._S("version") < 4966),
                hidden: (this._S("version") < 4966),
                validator: function(d) {
                    var e = this.ownerCt.getForm().findField("ip").getValue();
                    var c = this.ownerCt.getForm().findField("mask").getValue();
                    if ("" !== d && !SYNO.SDS.Utils.Network.GatewayMatchIP(d, e, c)) {
                        return _T("common", "error_notmatch")
                    }
                    return true
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "route_dns"),
                name: "dns",
                allowBlank: true,
                maxlength: 15,
                indent: 1,
                vtype: "v4ip",
                disabled: (this._S("version") < 4966),
                hidden: (this._S("version") < 4966),
                width: 350
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_set_as_default_gw"),
                name: "is_default_gateway",
                disabled: (this._S("version") < 4966),
                hidden: (this._S("version") < 4966),
                checked: false
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("tcpip", "enable_jumbo_frame"),
                name: "enable_jumbo_frame",
                hidden: "yes" !== this._D("supportMTU")
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("tcpip", "mtu_value_label"),
                name: "mtu_config",
                indent: 1,
                editable: false,
                width: 350,
                store: this.getMTUStore(),
                hidden: "yes" !== this._D("supportMTU")
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "enable_vlan"),
                name: "enable_vlan"
            }, {
                xtype: "syno_numberfield",
                indent: 1,
                fieldLabel: "VLAN ID",
                name: "vlan_id",
                allowBlank: false,
                maxlength: 4,
                minValue: 1,
                maxValue: 4094,
                validator: function(c) {
                    if (4094 < c || 1 > c) {
                        return false
                    }
                    return true
                }
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "pppoe_relay_enabled"),
                name: "enable_pppoe_relay",
                hidden: false
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("network", "interface"),
                name: "pppoe_relay_server_config",
                indent: 1,
                allowBlank: false,
                editable: false,
                hidden: !SYNO.SDS.Utils.Network.isMultiLan.apply(this),
                store: this.PPPoERelayServerStore = new Ext.data.JsonStore({
                    autoDestroy: true,
                    root: "devs",
                    fields: ["ifname", "ifstring"]
                }),
                displayField: "ifstring",
                valueField: "ifname"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "upnp_service_enabled"),
                name: "enable_upnp",
                hidden: false
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("network", "interface"),
                name: "upnp_server_config",
                indent: 1,
                allowBlank: false,
                editable: false,
                hidden: !SYNO.SDS.Utils.Network.isMultiLan.apply(this),
                store: this.UPnPServerStore = new Ext.data.JsonStore({
                    autoDestroy: true,
                    root: "devs",
                    fields: ["ifname", "ifstring"]
                }),
                scope: this,
                displayField: "ifstring",
                valueField: "ifname"
            }]
        }, a);
        return b
    },
    getMTUStore: function() {
        var a = [];
        for (var b = 2000; b <= 9000; b = b + 1000) {
            a.push([b, b])
        }
        return a
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.getForm().findField("enable_vlan").getEl(), _T("network", "vlan_notify"));
            SYNO.SDS.Utils.AddTip(this.getForm().findField("gateway").getEl(), _T("network", "route_gateway_warning"))
        }, this, {
            single: true
        })
    },
    fillContent: function(c) {
        var b = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix(this.getWebAPIName());
        var a = this.getConfig(c);
        if (this.win.ifname.indexOf("br") > -1) {
            this.hideFields(["enable_vlan", "vlan_id", "enable_jumbo_frame", "mtu_config"])
        }
        if (1000 > c[b + "speed"]) {
            this.hideFields(["enable_jumbo_frame", "mtu_config"])
        }
        this.nat = c[b + "nat"];
        if (true !== this.nat) {
            this.hideFields(["enable_pppoe_relay", "pppoe_relay_server_config", "enable_upnp", "upnp_server_config"])
        }
        this.old_config = a;
        this.setGlusterDisabled(c);
        this.loadStoreData(c);
        this.getForm().setValues(a);
        this.setGroup()
    },
    setGlusterDisabled: function(e) {
        var d = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix(this.getWebAPIName());
        var h = e.gluster_service_role || 0;
        var g = e.gluster_service_addr || "";
        var b = e.gluster_service_enabled || false;
        this.isComputingOrStorageNode = false;
        if ((0 === h & 1) && (0 === h & 2)) {
            return
        }
        if (!b) {
            return
        }
        if (e[d + "ip"] === g) {
            var c = this.getForm();
            var f = [this.useDhcpYesId, this.useDhcpNoId];
            var a = ["ip", "mask", "gateway", "dns", "is_default_gateway", "enable_vlan", "vlan_id"];
            Ext.each(f, function(j) {
                var i = Ext.getCmp(j);
                if (i) {
                    i.disable()
                }
            });
            Ext.each(a, function(i) {
                var j = c.findField(i);
                if (j) {
                    j.disable()
                }
            });
            this.isComputingOrStorageNode = true
        }
    },
    getServerInterfaceMappingList: function(d, b, a) {
        var c = this;
        var f = [];
        var e = [];
        if (a) {
            Ext.each(a, function(g) {
                if (g.inn_ifname !== b) {
                    e.push(g.ext_ifname)
                }
            })
        }
        Ext.each(d, function(g) {
            if (0 > e.indexOf(g)) {
                f.push({
                    ifname: g,
                    ifstring: SYNO.SDS.Utils.Network.idToString.apply(c, [g])
                })
            }
        });
        return f
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    isValid: function() {
        if (false === this.checkConfigInHA(this.prepareWebAPISetMainData())) {
            return false
        }
        return this.getForm().isValid()
    },
    getWebAPISetData: function() {
        var a = [this.procWebAPISetMainData()];
        if (true === this.nat) {
            a.push(this.procWebAPISetRelayData());
            a.push(this.procWebAPISetUPnPData())
        }
        return a
    },
    getWebAPIGetData: function() {
        var a = [{
            api: this.getWebAPIName(),
            version: 1,
            method: "get",
            params: {
                ifname: this.win.ifname
            }
        }, {
            api: "SYNO.Core.Network.PPPoE.Relay",
            method: "get",
            version: 1,
            params: {
                ifname: this.win.ifname
            }
        }, {
            api: "SYNO.Core.Network.UPnPServer",
            method: "get",
            version: 1,
            params: {
                ifname: this.win.ifname
            }
        }];
        if (!Ext.isEmpty(this.getKnownAPI("SYNO.GlusterfsMgmt.Service"))) {
            a.push({
                api: "SYNO.GlusterfsMgmt.Service",
                method: "get",
                version: 1,
                params: {}
            })
        }
        return a
    },
    prepareWebAPISetMainData: function() {
        var b = this.getForm();
        var a = {
            ifname: this.win.ifname,
            use_dhcp: b.findField(this.useDhcpYesId).checked,
            enable_ha_ip: (_S("ha_running") && b.findField(this.enableHAIpYesId).checked)
        };
        if (false === a.use_dhcp || true === _S("ha_running")) {
            a.ip = b.findField("ip").getValue();
            a.mask = b.findField("mask").getValue();
            a.gateway = b.findField("gateway").getValue();
            a.dns = b.findField("dns").getValue()
        }
        if (true === _S("ha_running") && false === a.enable_ha_ip) {
            a.ip = this.old_config.ip;
            a.mask = this.old_config.mask;
            a.gateway = this.old_config.gateway;
            a.dns = this.old_config.dns
        }
        a.is_default_gateway = b.findField("is_default_gateway").getValue();
        if (this.win.ifname.indexOf("br") < 0) {
            if (true === b.findField("enable_jumbo_frame").getValue()) {
                a.mtu = b.findField("mtu_config").getValue()
            } else {
                a.mtu = 1500
            }
            a.enable_vlan = b.findField("enable_vlan").getValue();
            if (true === a.enable_vlan) {
                a.vlan_id = b.findField("vlan_id").getValue()
            }
        }
        return a
    },
    procWebAPISetMainData: function() {
        var b = this.prepareWebAPISetMainData();
        if (false === this.checkConfigInHA(b)) {
            return false
        }
        var a = {
            api: this.getWebAPIName(),
            version: 1,
            method: "set",
            params: {
                configs: [b]
            }
        };
        return a
    },
    checkConfigInHA: function(e) {
        var h = SYNO.SDS.Utils.Network.idToString.apply(this, [this.win.ifname]);
        var g = "";
        var f = this.getForm().findField("enable_jumbo_frame").getValue();
        var d = this.getForm().findField("mtu_config").getValue();
        var c = this.getForm().findField("enable_vlan").getValue();
        var a = this.getForm().findField("vlan_id").getValue();
        if (true !== _S("ha_running")) {
            return true
        }
        if (true === e.use_dhcp && this.old_config.gateway !== e.gateway) {
            if ("" !== g) {
                g += "<br />"
            }
            g += String.format(_TT("SYNO.SDS.HA.Instance", "ui", "cannot_change_setting_dhcp"), h, _T("network", "route_gateway"))
        }
        if (true === e.use_dhcp && this.old_config.dns !== e.dns) {
            if ("" !== g) {
                g += "<br />"
            }
            g += String.format(_TT("SYNO.SDS.HA.Instance", "ui", "cannot_change_setting_dhcp"), h, _T("network", "route_dns"))
        }
        if (true === this.old_config.is_main_ha_ip && false === e.enable_ha_ip) {
            if ("" !== g) {
                g += "<br />"
            }
            g += String.format(_TT("SYNO.SDS.HA.Instance", "config", "cannot_disable_main_if"), h)
        }
        if (true === this.old_config.is_main_ha_ip && (this.old_config.enable_jumbo_frame !== f || this.old_config.mtu_config !== d)) {
            if ("" !== g) {
                g += "<br />"
            }
            g += String.format(_TT("SYNO.SDS.HA.Instance", "ui", "cannot_change_mtu_main_if"), h)
        }
        if (this.old_config.enable_vlan !== c || (this.old_config.vlan_id && this.old_config.vlan_id !== a)) {
            if ("" !== g) {
                g += "<br />"
            }
            g += String.format(_TT("SYNO.SDS.HA.Instance", "ui", "not_allow_vlan_setting"), h)
        }
        if ("" !== g) {
            var b;
            b = new SYNO.SDS.MessageBoxV5({
                owner: this.win
            });
            b.getWrapper().alert(_TT("SYNO.SDS.HA.Instance", "app", "app_name"), g);
            return false
        }
        return true
    },
    procWebAPISetRelayData: function() {
        var b = this.getForm();
        var a = {
            api: "SYNO.Core.Network.PPPoE.Relay",
            method: "set",
            version: 1,
            params: {
                ifname: this.win.ifname,
                enabled: b.findField("enable_pppoe_relay").getValue(),
                server_interface: b.findField("pppoe_relay_server_config").getValue()
            }
        };
        return a
    },
    procWebAPISetUPnPData: function() {
        var b = this.getForm();
        var a = {
            api: "SYNO.Core.Network.UPnPServer",
            method: "set",
            version: 1,
            params: {
                ifname: this.win.ifname,
                enabled: b.findField("enable_upnp").getValue(),
                server_interface: b.findField("upnp_server_config").getValue()
            }
        };
        return a
    },
    getWebAPIName: function() {
        var a = "";
        if (this.win.ifname) {
            a = this.win.ifname
        }
        if (a.indexOf("eth") > -1) {
            return "SYNO.Core.Network.Ethernet"
        } else {
            if (a.indexOf("bond") > -1) {
                return "SYNO.Core.Network.Bond"
            } else {
                if (a.indexOf("br") > -1) {
                    return "SYNO.Core.Network.Bridge"
                } else {
                    return ""
                }
            }
        }
    },
    hideFields: function(a) {
        var b = this.getForm();
        Ext.each(a, function(c) {
            b.findField(c).hide()
        }, this)
    },
    setGroup: function() {
        var a = this.getForm();
        if (!this.isComputingOrStorageNode) {
            this.checkGroupDHCP = new SYNO.ux.Utils.EnableRadioGroup(a, "use_dhcp", {
                no: ["ip", "mask", "gateway", "dns"]
            });
            if (true === _S("ha_running")) {
                this.checkGroupEnableHAIp = new SYNO.ux.Utils.EnableRadioGroup(a, "enable_ha_ip", {
                    yes: ["ip", "mask", "gateway", "dns"]
                })
            }
            this.checkGroupVlan = new SYNO.ux.Utils.EnableCheckGroup(a, "enable_vlan", ["vlan_id"])
        }
        this.checkGroupMTU = new SYNO.ux.Utils.EnableCheckGroup(a, "enable_jumbo_frame", ["mtu_config"]);
        this.checkGroupPPPoERelay = new SYNO.ux.Utils.EnableCheckGroup(a, "enable_pppoe_relay", ["pppoe_relay_server_config"]);
        this.checkGroupUPNP = new SYNO.ux.Utils.EnableCheckGroup(a, "enable_upnp", ["upnp_server_config"])
    },
    getConfig: function(c) {
        var b = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix(this.getWebAPIName());
        var a = {};
        if (0 !== c[b + "vlan_id"]) {
            a.vlan_id = c[b + "vlan_id"]
        }
        if (1500 === c[b + "mtu_config"]) {
            a.enable_jumbo_frame = false;
            a.mtu_config = 2000
        } else {
            a.enable_jumbo_frame = true;
            a.mtu_config = c[b + "mtu_config"]
        }
        a.ip = c[b + "ip"];
        a.mask = c[b + "mask"];
        a.gateway = c[b + "gateway"];
        a.dns = c[b + "dns"];
        a.is_default_gateway = c[b + "is_default_gateway"];
        a.use_dhcp = c[b + "use_dhcp"] ? "yes" : "no";
        a.enable_ha_ip = c[b + "enable_ha_ip"] ? "yes" : "no";
        a.is_main_ha_ip = c[b + "is_main_ha_ip"];
        a.enable_vlan = c[b + "enable_vlan"];
        a.enable_pppoe_relay = c.pppoe_relay_enabled;
        a.pppoe_relay_server_config = c.pppoe_relay_server_interface;
        if (!a.pppoe_relay_server_config && c.pppoe_relay_server_list) {
            a.pppoe_relay_server_config = c.pppoe_relay_server_list[0]
        }
        a.enable_upnp = c.upnpserver_enabled;
        a.upnp_server_config = c.upnpserver_server_interface;
        if (!a.upnp_server_config && c.upnpserver_server_list) {
            a.upnp_server_config = c.upnpserver_server_list[0]
        }
        return a
    },
    loadStoreData: function(a) {
        this.PPPoERelayServerStore.loadData({
            success: true,
            devs: this.getServerInterfaceMappingList(a.pppoe_relay_server_list)
        }, false);
        this.UPnPServerStore.loadData({
            success: true,
            devs: this.getServerInterfaceMappingList(a.upnpserver_server_list, this.win.ifname, a.upnpserver_config_list)
        }, false)
    },
    isNeedConfirm: function() {
        var b = this.getForm().findField("enable_jumbo_frame").getValue();
        var a = this.getForm().findField("mtu_config").getValue();
        if (this.old_config.enable_jumbo_frame !== b || this.old_config.mtu_config !== a) {
            this.confirmMsg = _T("network", "mtu_warning_msg");
            return true
        }
        return false
    },
    getConfirmMsg: function() {
        return this.confirmMsg
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.LocalBridgeIPv4Tab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.support_wpad = (this._S("version") > 5459);
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            hideMode: "offsets",
            module: a.module,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "tcpip_ipaddr"),
                name: "ip",
                indent: 0,
                allowBlank: false,
                maxlength: 15,
                vtype: "v4ip",
                width: 350,
                validator: function(g) {
                    var e = g.split(".");
                    var d = this.ownerCt.getForm().findField("mask");
                    var h = d.getValue().split(".");
                    if (e.size() !== 4 || h.size() !== 4 || !d.getActiveError().empty()) {
                        return true
                    }
                    var i = parseInt(e[0], 10) << 24 | parseInt(e[1], 10) << 16 | parseInt(e[2], 10) << 8 | parseInt(e[3], 10);
                    var c = parseInt(h[0], 10) << 24 | parseInt(h[1], 10) << 16 | parseInt(h[2], 10) << 8 | parseInt(h[3], 10);
                    var f = i | ~c;
                    if (i == f) {
                        return _T("network", "error_bad_broadcast_ip")
                    }
                    return true
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "tcpip_mask"),
                name: "mask",
                indent: 0,
                allowBlank: false,
                maxlength: 15,
                vtype: "netmask",
                width: 350,
                listeners: {
                    valid: function(c) {
                        this.getForm().findField("ip").validate()
                    },
                    scope: this
                }
            }, {
                xtype: "syno_displayfield"
            }, {
                xtype: "syno_checkbox",
                checked: false,
                name: "enable",
                boxLabel: _T("dhcp_server", "enable_dhcpd"),
                listeners: {
                    scope: this,
                    check: function(d, c) {
                        if (this._S("version") >= 4966) {
                            this.parentPanel.syncDHCPMaskWithIPv6("v4", c)
                        }
                    }
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "dhcp_range_start"),
                name: "startip",
                indent: 1,
                allowBlank: false,
                vtype: "v4ip",
                width: 300
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "dhcp_range_end"),
                name: "endip",
                indent: 1,
                allowBlank: false,
                vtype: "v4ip",
                width: 300
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("dhcp_server", "dhcp_wpad_enable"),
                name: "wpad_enable",
                disabled: !this.support_wpad,
                hidden: !this.support_wpad,
                indent: 1
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "dhcp_wpad_url"),
                name: "wpad_url",
                width: 350,
                disabled: !this.support_wpad,
                hidden: !this.support_wpad,
                indent: 2,
                allowBlank: false
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "pppoe_relay_enabled"),
                name: "enable_pppoe_relay",
                hidden: false
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("network", "interface"),
                name: "pppoe_relay_server_config",
                indent: 1,
                allowBlank: false,
                editable: false,
                hidden: !SYNO.SDS.Utils.Network.isMultiLan.apply(this),
                store: this.PPPoERelayServerStore = new Ext.data.JsonStore({
                    autoDestroy: true,
                    root: "devs",
                    fields: ["ifname", "ifstring"]
                }),
                displayField: "ifstring",
                valueField: "ifname"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "upnp_service_enabled"),
                name: "enable_upnp",
                hidden: false
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("network", "interface"),
                name: "upnp_server_config",
                indent: 1,
                allowBlank: false,
                editable: false,
                hidden: !SYNO.SDS.Utils.Network.isMultiLan.apply(this),
                store: this.UPnPServerStore = new Ext.data.JsonStore({
                    autoDestroy: true,
                    root: "devs",
                    fields: ["ifname", "ifstring"]
                }),
                scope: this,
                displayField: "ifstring",
                valueField: "ifname"
            }]
        }, a);
        return b
    },
    fillContent: function(c) {
        var b = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix(this.getWebAPIName());
        var a = this.getConfig(c);
        if (this._S("version") >= 4966) {
            this.nat = c[b + "nat"]
        } else {
            this.nat = c[0].nat
        }
        if (true !== this.nat) {
            this.hideFields(["enable_pppoe_relay", "pppoe_relay_server_config", "enable_upnp", "upnp_server_config"])
        }
        this.setGlusterDisabled(c);
        this.loadStoreData(c);
        this.getForm().setValues(a);
        this.setGroup()
    },
    setGlusterDisabled: function(e) {
        var d = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix(this.getWebAPIName());
        var h = e.gluster_service_role || 0;
        var g = e.gluster_service_addr || "";
        var b = e.gluster_service_enabled || false;
        this.isComputingOrStorageNode = false;
        if ((0 === h & 1) && (0 === h & 2)) {
            return
        }
        if (!b) {
            return
        }
        if (e[d + "ip"] === g) {
            var c = this.getForm();
            var f = [this.useDhcpYesId, this.useDhcpNoId];
            var a = ["ip", "mask"];
            Ext.each(f, function(j) {
                var i = Ext.getCmp(j);
                if (i) {
                    i.disable()
                }
            });
            Ext.each(a, function(i) {
                var j = c.findField(i);
                if (j) {
                    j.disable()
                }
            });
            this.isComputingOrStorageNode = true
        }
    },
    getServerInterfaceMappingList: function(d, b, a) {
        var c = this;
        var f = [];
        var e = [];
        if (a) {
            Ext.each(a, function(g) {
                if (g.inn_ifname !== b) {
                    e.push(g.ext_ifname)
                }
            })
        }
        Ext.each(d, function(g) {
            if (0 > e.indexOf(g)) {
                f.push({
                    ifname: g,
                    ifstring: SYNO.SDS.Utils.Network.idToString.apply(c, [g])
                })
            }
        });
        return f
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    isValid: function() {
        return this.getForm().isValid()
    },
    getWebAPISetData: function() {
        var a = [this.procWebAPISetMainData()];
        if (this.support_wpad) {
            a.push(this.procWebAPISetWpadData())
        }
        if (true === this.nat) {
            a.push(this.procWebAPISetRelayData());
            a.push(this.procWebAPISetUPnPData())
        }
        return a
    },
    getWebAPIGetData: function() {
        var a = [];
        a.push({
            api: this.getWebAPIName(),
            version: 1,
            method: "get",
            params: {
                ifname: this.win.ifname
            }
        });
        if (this.support_wpad) {
            a.push({
                api: "SYNO.Core.Network.DHCPServer.WPAD",
                method: "get",
                version: 1,
                params: {
                    ifname: this.win.ifname
                }
            })
        }
        a.push({
            api: "SYNO.Core.Network.PPPoE.Relay",
            method: "get",
            version: 1,
            params: {
                ifname: this.win.ifname
            }
        });
        a.push({
            api: "SYNO.Core.Network.UPnPServer",
            method: "get",
            version: 1,
            params: {
                ifname: this.win.ifname
            }
        });
        if (!Ext.isEmpty(this.getKnownAPI("SYNO.GlusterfsMgmt.Service"))) {
            a.push({
                api: "SYNO.GlusterfsMgmt.Service",
                method: "get",
                version: 1,
                params: {}
            })
        }
        return a
    },
    procWebAPISetMainData: function() {
        var c = this.getForm();
        var b = {};
        b.ap_ip_address = c.findField("ip").getValue();
        b.ap_netmask = c.findField("mask").getValue();
        b.dhcp_enabled = c.findField("enable").getValue();
        b.dhcp_range_begin = c.findField("startip").getValue();
        b.dhcp_range_end = c.findField("endip").getValue();
        var a = {
            api: this.getWebAPIName(),
            version: 1,
            method: "set",
            params: {
                ifname: this.win.ifname,
                config: b
            }
        };
        return a
    },
    procWebAPISetWpadData: function() {
        var b = this.getForm();
        var a = {
            api: "SYNO.Core.Network.DHCPServer.WPAD",
            version: 1,
            method: "set",
            params: {
                ifname: this.win.ifname,
                enable: b.findField("wpad_enable").getValue(),
                url: b.findField("wpad_url").getValue()
            }
        };
        return a
    },
    procWebAPISetRelayData: function() {
        var b = this.getForm();
        var a = {
            api: "SYNO.Core.Network.PPPoE.Relay",
            method: "set",
            version: 1,
            params: {
                ifname: this.win.ifname,
                enabled: b.findField("enable_pppoe_relay").getValue(),
                server_interface: b.findField("pppoe_relay_server_config").getValue()
            }
        };
        return a
    },
    procWebAPISetUPnPData: function() {
        var b = this.getForm();
        var a = {
            api: "SYNO.Core.Network.UPnPServer",
            method: "set",
            version: 1,
            params: {
                ifname: this.win.ifname,
                enabled: b.findField("enable_upnp").getValue(),
                server_interface: b.findField("upnp_server_config").getValue()
            }
        };
        return a
    },
    getWebAPIName: function() {
        return "SYNO.Core.Network.LocalBridge"
    },
    hideFields: function(a) {
        var b = this.getForm();
        Ext.each(a, function(c) {
            b.findField(c).hide()
        }, this)
    },
    setGroup: function() {
        var a = this.getForm();
        if (this.support_wpad) {
            this.checkGroupEnable = new SYNO.ux.Utils.EnableCheckGroup(a, "enable", ["startip", "endip", "wpad_enable", "wpad_url"]);
            this.checkGroupWpadEnable = new SYNO.ux.Utils.EnableCheckGroup(a, "wpad_enable", ["wpad_url"])
        } else {
            this.checkGroupEnable = new SYNO.ux.Utils.EnableCheckGroup(a, "enable", ["startip", "endip"])
        }
        this.checkGroupPPPoERelay = new SYNO.ux.Utils.EnableCheckGroup(a, "enable_pppoe_relay", ["pppoe_relay_server_config"]);
        this.checkGroupUPNP = new SYNO.ux.Utils.EnableCheckGroup(a, "enable_upnp", ["upnp_server_config"])
    },
    getConfig: function(c) {
        var b = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix(this.getWebAPIName());
        var a = {};
        if (this._S("version") >= 4966) {
            a.ip = c[b + "ap_ip_address"];
            a.mask = c[b + "ap_netmask"];
            a.enable = c[b + "dhcp_enabled"];
            a.startip = c[b + "dhcp_range_begin"];
            a.endip = c[b + "dhcp_range_end"]
        } else {
            a.ip = c[0].ap_ip_address;
            a.mask = c[0].ap_netmask;
            a.enable = c[0].dhcp_enabled;
            a.startip = c[0].dhcp_range_begin;
            a.endip = c[0].dhcp_range_end
        }
        if (this.support_wpad) {
            a.wpad_enable = c.wpad_enable;
            a.wpad_url = c.wpad_url
        }
        a.enable_pppoe_relay = c.pppoe_relay_enabled;
        a.pppoe_relay_server_config = c.pppoe_relay_server_interface;
        if (!a.pppoe_relay_server_config && c.pppoe_relay_server_list) {
            a.pppoe_relay_server_config = c.pppoe_relay_server_list[0]
        }
        a.enable_upnp = c.upnpserver_enabled;
        a.upnp_server_config = c.upnpserver_server_interface;
        if (!a.upnp_server_config && c.upnpserver_server_list) {
            a.upnp_server_config = c.upnpserver_server_list[0]
        }
        if (this._S("version") >= 4966) {
            this.parentPanel.syncDHCPMaskWithIPv6("v4", a.enable)
        }
        return a
    },
    loadStoreData: function(a) {
        this.PPPoERelayServerStore.loadData({
            success: true,
            devs: this.getServerInterfaceMappingList(a.pppoe_relay_server_list)
        }, false);
        this.UPnPServerStore.loadData({
            success: true,
            devs: this.getServerInterfaceMappingList(a.upnpserver_server_list, this.win.ifname, a.upnpserver_config_list)
        }, false)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.IPv6Tab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: "IPv6",
            hideMode: "offsets",
            module: a.module,
            trackResetOnLoad: true,
            defaults: {
                width: 330
            },
            items: [{
                xtype: "syno_combobox",
                fieldLabel: _T("tcpip", "ipv6_setup"),
                name: "ipv6_type",
                disabled: (true === _S("ha_running")),
                allowBlank: false,
                valueField: "value",
                displayField: "display",
                hiddenName: "ipv6_type",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: this.getTypeData()
                }),
                listeners: {
                    select: function(c) {
                        this.onSelect(c.getValue())
                    },
                    beforeselect: this.onBeforeSelect,
                    scope: this
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("status", "status_ipv6addr"),
                name: "ipv6_ip",
                disabled: (true === _S("ha_running")),
                allowBlank: false,
                vtype: "v6ip"
            }, {
                xtype: "syno_numberfield",
                fieldLabel: _T("tcpip", "ipv6_prefixleng"),
                name: "ipv6_prefix_length",
                disabled: (true === _S("ha_running")),
                allowBlank: false,
                vtype: "v6prefixLeng",
                listeners: {
                    focus: function(c) {
                        if (!c.getValue()) {
                            c.setValue(64)
                        }
                    }
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "ipv6_router"),
                name: "ipv6_router",
                disabled: (true === _S("ha_running")),
                allowBlank: true,
                vtype: "v6ip"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "primary_dns"),
                disabled: (true === _S("ha_running") || _S("version") < 4966),
                hidden: (_S("version") < 4966),
                name: "ipv6_dns",
                allowBlank: true,
                vtype: "v6ip"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("status", "status_ipv6addr"),
                disabled: (true === _S("ha_running")),
                name: "ipv6_router_local_addr_v6",
                allowBlank: false,
                vtype: "v6ip"
            }, {
                xtype: "syno_numberfield",
                fieldLabel: _T("tcpip", "ipv6_prefixleng"),
                disabled: (true === _S("ha_running")),
                name: "ipv6_router_prefix_length",
                allowBlank: false,
                vtype: "v6prefixLeng"
            }, new SYNO.ux.CompositeField({
                name: "prefix_composite",
                items: [{
                    xtype: "syno_textfield",
                    fieldLabel: _T("tcpip", "ipv6_prefix"),
                    name: "ipv6_router_prefix",
                    disabled: (true === _S("ha_running")),
                    allowBlank: false,
                    vtype: "v6ip",
                    width: 250
                }, {
                    xtype: "syno_displayfield",
                    value: "/64"
                }]
            }), {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "remote_ipv4_address"),
                name: "ipv6_router_remote_addr_v4",
                disabled: (true === _S("ha_running")),
                allowBlank: false,
                vtype: "v4ip"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_set_as_default_gw"),
                name: "is_default_gateway",
                disabled: (true === _S("ha_running") || _S("version") < 4966),
                hidden: (_S("version") < 4966),
                checked: false
            }]
        }, a);
        return b
    },
    getTypeData: function() {
        var a;
        if (_S("version") < 4966) {
            a = [
                ["auto", _T("tcpip", "ipv6_auto")],
                ["dhcp", _T("tcpip", "ipv6_dhcp")],
                ["static", _T("tcpip", "ipv6_static")],
                ["off", _T("tcpip", "ipv6_off")]
            ]
        } else {
            a = [
                ["off", _T("tcpip", "ipv6_off")],
                ["auto", _T("tcpip", "ipv6_auto")],
                ["static", _T("tcpip", "ipv6_static")]
            ]
        }
        if (_S("version") > 4966 && !this.isWifiClient) {
            a = a.concat([
                ["6in4", _T("tcpip", "ipv6_6in4")],
                ["6to4", _T("tcpip", "ipv6_6to4")],
                ["native", _T("tcpip", "ipv6_dhcp_pd")]
            ])
        }
        return a
    },
    fillContent: function(b) {
        var a = this.getForm();
        SYNO.SDS.Utils.AddTip(a.findField("ipv6_router").getEl(), _T("network", "route_gateway_warning"));
        a.setValues(this.getConfig(b));
        this.onSelect(a.findField("ipv6_type").getValue())
    },
    getConfig: function(e) {
        var a = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix("SYNO.Core.Network.IPv6.Router");
        var d = e[a + "config"];
        var c = this.getIPv6Type(e.ipv6_type, e[a + "type"], d);
        this.isDefgw = e.ipv6_is_default_gateway;
        this.isTunDefgw = e[a + "is_default_gateway"];
        var b = {
            is_default_gateway: this.isTunnelType(c) ? this.isTunDefgw : this.isDefgw,
            ipv6_type: c,
            ipv6_ip: e.ipv6_ip,
            ipv6_prefix_length: e.ipv6_prefix_length,
            ipv6_router: e.ipv6_router,
            ipv6_dns: e.ipv6_dns
        };
        if ("6in4" === b.ipv6_type || "6to4" === b.ipv6_type) {
            b.ipv6_router_local_addr_v6 = d.local_addr_v6.substring(0, d.local_addr_v6.indexOf("/"));
            b.ipv6_router_prefix_length = d.local_addr_v6.substring(d.local_addr_v6.indexOf("/") + 1);
            b.ipv6_router_prefix = d.prefix.substring(0, d.prefix.indexOf("/"));
            b.ipv6_router_remote_addr_v4 = d.remote_addr_v4
        } else {
            if ("native" === b.ipv6_type && d.prefix) {
                b.ipv6_router_prefix = d.prefix.substring(0, d.prefix.indexOf("/"))
            }
        }
        return b
    },
    getIPv6Type: function(a, c, b) {
        if (!b || !b.wan || b.wan !== this.win.ifname) {
            return a
        }
        return ("off" === c) ? a : c
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    isValid: function() {
        return this.getForm().isValid()
    },
    isRouterType: function(a) {
        return ("6in4" === a || "6to4" === a || "native" === a)
    },
    isTunnelType: function(a) {
        return ("6in4" === a || "6to4" === a)
    },
    getWebAPISetData: function() {
        var a = [];
        if (this.isRouterType(this.getForm().findField("ipv6_type").getValue())) {
            a.push(this.getIPv6RouterWebAPISetData())
        } else {
            a.push(this.getIPv6WebAPISetData());
            if (!this.isWifiClient) {
                a.push({
                    api: "SYNO.Core.Network.IPv6.Router",
                    version: 1,
                    method: "set",
                    params: {
                        type: "off",
                        config: {
                            wan: this.win.ifname
                        }
                    }
                })
            }
        }
        return a
    },
    getIPv6WebAPISetData: function() {
        var c = this.getForm();
        var b = {
            ifname: this.win.ifname,
            type: c.findField("ipv6_type").getValue(),
            is_default_gateway: c.findField("is_default_gateway").getValue(),
            force: true
        };
        if ("static" === b.type) {
            b.ip = c.findField("ipv6_ip").getValue();
            b.prefix_length = c.findField("ipv6_prefix_length").getValue();
            b.router = c.findField("ipv6_router").getValue();
            b.dns = c.findField("ipv6_dns").getValue()
        }
        var a = {
            api: "SYNO.Core.Network.IPv6",
            version: 1,
            method: "set",
            params: b
        };
        return a
    },
    getIPv6RouterWebAPISetData: function() {
        var c = this.getForm();
        var b = {
            wan: this.win.ifname,
            is_default_gateway: c.findField("is_default_gateway").getValue()
        };
        if ("6in4" === c.findField("ipv6_type").getValue()) {
            b.prefix = c.findField("ipv6_router_prefix").getValue() + "/64";
            b.remote_addr_v4 = c.findField("ipv6_router_remote_addr_v4").getValue();
            b.local_addr_v6 = c.findField("ipv6_router_local_addr_v6").getValue() + "/" + c.findField("ipv6_router_prefix_length").getValue()
        }
        var a = {
            api: "SYNO.Core.Network.IPv6.Router",
            version: 1,
            method: "set",
            params: {
                type: c.findField("ipv6_type").getValue(),
                config: b
            }
        };
        return a
    },
    getWebAPIGetData: function() {
        var a = [{
            api: "SYNO.Core.Network.IPv6",
            version: 1,
            method: "get",
            params: {
                ifname: this.win.ifname
            }
        }, {
            api: "SYNO.Core.Network.IPv6.Router",
            version: 1,
            method: "get",
            params: {
                wan: this.win.ifname
            }
        }];
        return a
    },
    onBeforeSelect: function(e, a, c) {
        var d = e.getValue();
        var b = a.get("value");
        if (!this.isRouterType(d) && this.isRouterType(b)) {
            e.collapse();
            this.win.getMsgBox().confirm("", _T("tcpip", "ipv6_tunnel_warning"), function(f) {
                if ("yes" === f) {
                    e.setValue(b);
                    this.onSelect(b)
                }
            }, this);
            return false
        }
        return true
    },
    onSelect: function(b) {
        var a;
        if (_S("version") >= 4966) {
            a = ["ipv6_ip", "ipv6_prefix_length", "ipv6_router", "ipv6_dns"]
        } else {
            a = ["ipv6_ip", "ipv6_prefix_length", "ipv6_router"]
        }
        var c = ["prefix_composite", "ipv6_router_remote_addr_v4", "ipv6_router_local_addr_v6", "ipv6_router_prefix_length"];
        this.getForm().findField("is_default_gateway").setValue(this.isTunnelType(b) ? this.isTunDefgw : this.isDefgw);
        if (this.isRouterType(b)) {
            this.hideFields(a, true);
            this.hideFields(c, false);
            this.enableFields(a, false)
        } else {
            this.hideFields(a, false);
            this.hideFields(c, true);
            this.enableFields(c, false)
        }
        switch (b) {
            case "static":
                this.enableFields(a, true);
                break;
            case "off":
            case "dhcp":
            case "auto":
                this.enableFields(a, false);
                this.getForm().clearInvalid();
                break;
            case "6in4":
                this.enableFields(c, true);
                break;
            case "6to4":
            case "native":
                this.enableFields(c, false);
                this.getForm().clearInvalid();
                break;
            default:
                SYNO.Debug("Unknown type: " + b)
        }
    },
    syncMask: function(a) {},
    enableFields: function(a, b) {
        Ext.each(a, function(c) {
            var d = this.getForm().findField(c);
            return b ? d.enable() : d.disable()
        }, this)
    },
    hideFields: function(a, b) {
        Ext.each(a, function(c) {
            var d = this.getForm().findField(c);
            return b ? d.hide() : d.show()
        }, this)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.LocalBridgeIPv6Tab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: "IPv6",
            hideMode: "offsets",
            module: a.module,
            trackResetOnLoad: true,
            defaults: {
                width: 330
            },
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("tcpip", "ipv6_enable_router"),
                name: "enable_router",
                checked: false,
                listeners: {
                    check: function(d, c) {
                        this.parentPanel.syncDHCPMaskWithIPv6("v6", c, this.blStateful);
                        this.syncMask()
                    },
                    scope: this
                }
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("tcpip", "ipv6_prefix"),
                id: this.prefixId = Ext.id(),
                indent: 1,
                name: "ipv6_prefix",
                allowBlank: false,
                store: this.prefixStore = new Ext.data.SimpleStore({
                    fields: ["value", "display"]
                }),
                displayField: "display",
                valueField: "value"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                name: "msg_prefix_not_match",
                hideLabel: true,
                value: "<element class='red-status'>" + _T("msg", "err_prefix_not_match") + "</>",
                hidden: true
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "primary_dns"),
                indent: 1,
                name: "ipv6_pdns",
                allowBlank: true,
                vtype: "v6ip"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "secondary_dns"),
                indent: 1,
                name: "ipv6_sdns",
                allowBlank: true,
                vtype: "v6ip"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "ipv6_ra_stateless"),
                name: "ipv6_state",
                indent: 1,
                id: this.ipv6StatelessId = Ext.id(),
                inputValue: "ra-only",
                width: 600,
                listeners: {
                    check: this.syncMask,
                    scope: this
                }
            }, {
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "ipv6_ra_stateless_dhcpv6"),
                name: "ipv6_state",
                indent: 1,
                id: this.ipv6StatelessDHCPId = Ext.id(),
                inputValue: "ra-stateless",
                width: 600,
                listeners: {
                    check: this.syncMask,
                    scope: this
                }
            }, {
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "ipv6_ra_stateful"),
                name: "ipv6_state",
                indent: 1,
                id: this.ipv6StatefulId = Ext.id(),
                inputValue: "stateful",
                width: 600,
                listeners: {
                    check: this.syncMask,
                    scope: this
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "dhcp_range_start"),
                name: "startip",
                indent: 2,
                allowBlank: false,
                vtype: "v6ip",
                validator: Ext.createDelegate(function(c) {
                    var d = this.getForm().findField("ipv6_prefix").getValue();
                    if (0 === SYNO.SDS.AdminCenter.Network.Utils.Strncmp(c, d, d.length)) {
                        return true
                    }
                    return false
                }, this)
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "dhcp_range_end"),
                name: "endip",
                indent: 2,
                allowBlank: false,
                vtype: "v6ip",
                validator: Ext.createDelegate(function(c) {
                    var d = this.getForm().findField("ipv6_prefix").getValue();
                    if (0 === SYNO.SDS.AdminCenter.Network.Utils.Strncmp(c, d, d.length)) {
                        return true
                    }
                    return false
                }, this)
            }]
        }, a);
        return b
    },
    fillContent: function(a) {
        this.fillPrefixStore(a.ipv6_router_prefix_prefix);
        this.addTips();
        this.getForm().setValues(this.getConfig(a));
        this.syncMask();
        Ext.getCmp(this.prefixId).addListener("select", function() {
            var b = this.getForm();
            var c = b.findField("ipv6_prefix").getValue();
            if ("stateful" === this.getIPv6State()) {
                b.findField("startip").setValue(c);
                b.findField("endip").setValue(c)
            }
        }, this)
    },
    fillPrefixStore: function(b) {
        var a = [];
        Ext.each(b, function(c) {
            if (c.lan.empty() || this.win.ifname === c.lan) {
                a.push([c.prefix, c.prefix + "(" + SYNO.SDS.Utils.Network.idToString.apply(this, [c.wan]) + ")"])
            }
        }, this);
        this.prefixStore.loadData(a)
    },
    isInPrefixStore: function(b) {
        var a = false;
        this.prefixStore.each(function(c) {
            if (b === c.get("value")) {
                a = true;
                return false
            }
        }, this);
        return a
    },
    addTips: function() {
        SYNO.SDS.Utils.AddTip(Ext.getCmp(this.ipv6StatelessId).getEl(), _T("tcpip", "ipv6_ra_stateless_desc"));
        SYNO.SDS.Utils.AddTip(Ext.getCmp(this.ipv6StatelessDHCPId).getEl(), _T("tcpip", "ipv6_ra_stateless_dhcpv6_desc"));
        SYNO.SDS.Utils.AddTip(Ext.getCmp(this.ipv6StatefulId).getEl(), _T("tcpip", "ipv6_ra_stateful_desc"))
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    isValid: function() {
        return this.getForm().isValid()
    },
    isDHCPv6Enabled: function(a) {
        return ("ra-only" === a || "ra-stateless" === a || "stateful" === a)
    },
    getConfig: function(c) {
        var b = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix("SYNO.Core.Network.LocalBridge");
        var a = {};
        a.enable_router = this.isDHCPv6Enabled(c[b + "dhcpv6_type"]) ? true : false;
        a.ipv6_state = this.isDHCPv6Enabled(c[b + "dhcpv6_type"]) ? c[b + "dhcpv6_type"] : "ra-only";
        a.ipv6_prefix = c[b + "ap_ipv6_prefix"];
        a.ipv6_pdns = c[b + "ipv6_pdns"];
        a.ipv6_sdns = c[b + "ipv6_sdns"];
        a.startip = c[b + "dhcpv6_range_begin"];
        a.endip = c[b + "dhcpv6_range_end"];
        this.oriEnabled = a.enable_router;
        this.oriPrefix = a.ipv6_prefix;
        if (this.oriEnabled && !this.isInPrefixStore(this.oriPrefix)) {
            this.getForm().findField("msg_prefix_not_match").show()
        }
        this.blStateful = ("stateful" === a.ipv6_state);
        this.parentPanel.syncDHCPMaskWithIPv6("v6", a.enable_router, this.blStateful);
        return a
    },
    getWebAPIGetData: function() {
        var a = [];
        a.push({
            api: "SYNO.Core.Network.LocalBridge",
            version: 1,
            method: "get",
            params: {
                ifname: this.win.ifname
            }
        });
        a.push({
            api: "SYNO.Core.Network.IPv6.Router.Prefix",
            version: 1,
            method: "list"
        });
        return a
    },
    getPrefixWebAPI: function(b, a) {
        if (a.empty()) {
            return {}
        }
        return {
            api: "SYNO.Core.Network.IPv6.Router.Prefix",
            version: 1,
            method: b,
            params: {
                ifname: this.win.ifname,
                prefix: a
            }
        }
    },
    getWebAPISetData: function() {
        var c = this.getForm();
        var a = {};
        var e = c.findField("enable_router").getValue();
        var d = c.findField("ipv6_prefix").getValue();
        a.dhcpv6_type = this.getIPv6State();
        if ("off" !== a.dhcpv6_type) {
            a.ap_ipv6_prefix = c.findField("ipv6_prefix").getValue()
        }
        if ("ra-stateless" === a.dhcpv6_type || "stateful" === a.dhcpv6_type) {
            a.ipv6_pdns = c.findField("ipv6_pdns").getValue();
            a.ipv6_sdns = c.findField("ipv6_sdns").getValue()
        }
        if ("stateful" === a.dhcpv6_type) {
            a.dhcpv6_range_begin = c.findField("startip").getValue();
            a.dhcpv6_range_end = c.findField("endip").getValue()
        }
        var b = [{
            api: "SYNO.Core.Network.LocalBridge",
            version: 1,
            method: "set",
            params: {
                ifname: this.win.ifname,
                config: a
            }
        }];
        if (!this.oriEnabled && e) {
            b.push(this.getPrefixWebAPI("add", d))
        } else {
            if (this.oriEnabled && !e) {
                b.push(this.getPrefixWebAPI("remove", this.oriPrefix))
            } else {
                if (this.oriEnabled && e) {
                    b.push(this.getPrefixWebAPI("remove", this.oriPrefix));
                    b.push(this.getPrefixWebAPI("add", d))
                }
            }
        }
        return b
    },
    getIPv6State: function() {
        if (true === this.getForm().findField("enable_router").getValue()) {
            if (true === Ext.getCmp(this.ipv6StatelessId).getValue()) {
                return "ra-only"
            }
            if (true === Ext.getCmp(this.ipv6StatelessDHCPId).getValue()) {
                return "ra-stateless"
            }
            if (true === Ext.getCmp(this.ipv6StatefulId).getValue()) {
                return "stateful"
            }
        }
        return "off"
    },
    syncMask: function() {
        var c = this.getForm();
        var b = ["ipv6_state", "ipv6_prefix", "ipv6_pdns", "ipv6_sdns", "startip", "endip"];
        var f = ["startip", "endip"];
        var a = ["ipv6_pdns", "ipv6_sdns"];
        if (true === c.findField("enable_router").getValue()) {
            this.enableFields(b, true)
        } else {
            this.enableFields(b, false);
            return
        }
        if (true === Ext.getCmp(this.ipv6StatefulId).getValue()) {
            this.enableFields(f, true);
            var d = this.getForm().findField("ipv6_prefix").getValue();
            var e = this.getForm().findField("startip").getValue();
            if (0 !== SYNO.SDS.AdminCenter.Network.Utils.Strncmp(e, d, d.length)) {
                Ext.getCmp(this.prefixId).fireEvent("select")
            }
        } else {
            if (true === Ext.getCmp(this.ipv6StatelessId).getValue()) {
                this.enableFields(a, false);
                this.enableFields(f, false)
            } else {
                this.enableFields(f, false)
            }
        }
    },
    enableFields: function(a, b) {
        Ext.each(a, function(c) {
            if ("ipv6_state" == c) {
                Ext.getCmp(this.ipv6StatelessId).setDisabled(!b);
                Ext.getCmp(this.ipv6StatelessDHCPId).setDisabled(!b);
                Ext.getCmp(this.ipv6StatefulId).setDisabled(!b)
            } else {
                var d = this.getForm().findField(c);
                return b ? d.enable() : d.disable()
            }
        }, this)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.PPPoEIPv6Tab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: "IPv6",
            hideMode: "offsets",
            module: a.module,
            trackResetOnLoad: true,
            defaults: {
                width: 330
            },
            items: [{
                xtype: "syno_combobox",
                fieldLabel: _T("tcpip", "ipv6_setup"),
                name: "ipv6_type",
                allowBlank: false,
                valueField: "value",
                displayField: "display",
                hiddenName: "ipv6_type",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: [
                        ["off", _T("tcpip", "ipv6_off")],
                        ["6in4", _T("tcpip", "ipv6_6in4")],
                        ["6to4", _T("tcpip", "ipv6_6to4")],
                        ["native", _T("tcpip", "ipv6_dhcp_pd")]
                    ]
                }),
                listeners: {
                    select: function(c) {
                        this.onSelect(c.getValue())
                    },
                    beforeSelect: this.onBeforeSelect,
                    scope: this
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("status", "status_ipv6addr"),
                name: "ipv6_router_local_addr_v6",
                allowBlank: false,
                vtype: "v6ip"
            }, {
                xtype: "syno_numberfield",
                fieldLabel: _T("tcpip", "ipv6_prefixleng"),
                name: "ipv6_router_prefix_length",
                allowBlank: false,
                vtype: "v6prefixLeng"
            }, new SYNO.ux.CompositeField({
                name: "prefix_composite",
                items: [{
                    xtype: "syno_textfield",
                    fieldLabel: _T("tcpip", "ipv6_prefix"),
                    name: "ipv6_router_prefix",
                    allowBlank: false,
                    vtype: "v6ip",
                    width: 250
                }, {
                    xtype: "syno_displayfield",
                    value: "/64"
                }]
            }), {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "remote_ipv4_address"),
                name: "ipv6_router_remote_addr_v4",
                allowBlank: false,
                vtype: "v4ip"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_set_as_default_gw"),
                name: "is_default_gateway",
                disabled: (true === _S("ha_running")),
                checked: false
            }]
        }, a);
        return b
    },
    fillContent: function(b) {
        var a = this.getForm();
        a.setValues(this.getConfig(b));
        this.onSelect(a.findField("ipv6_type").getValue())
    },
    getConfig: function(d) {
        var a = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix("SYNO.Core.Network.IPv6.Router");
        var c = d[a + "config"];
        var b = {
            is_default_gateway: d[a + "is_default_gateway"],
            ipv6_type: d[a + "type"]
        };
        if (c && "pppoe" !== c.wan) {
            return b
        }
        if ("6in4" === b.ipv6_type || "6to4" === b.ipv6_type) {
            b.ipv6_router_local_addr_v6 = c.local_addr_v6.substring(0, c.local_addr_v6.indexOf("/"));
            b.ipv6_router_prefix_length = c.local_addr_v6.substring(c.local_addr_v6.indexOf("/") + 1);
            b.ipv6_router_prefix = c.prefix.substring(0, c.prefix.indexOf("/"));
            b.ipv6_router_remote_addr_v4 = c.remote_addr_v4
        } else {
            if ("native" === b.ipv6_type && c.prefix) {
                b.ipv6_router_prefix = c.prefix.substring(0, c.prefix.indexOf("/"))
            }
        }
        return b
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    isValid: function() {
        return this.getForm().isValid()
    },
    getWebAPISetData: function() {
        var c = this.getForm();
        var b = {
            wan: this.win.ifname,
            is_default_gateway: c.findField("is_default_gateway").getValue()
        };
        if ("6in4" === c.findField("ipv6_type").getValue()) {
            b.prefix = c.findField("ipv6_router_prefix").getValue() + "/64";
            b.remote_addr_v4 = c.findField("ipv6_router_remote_addr_v4").getValue();
            b.local_addr_v6 = c.findField("ipv6_router_local_addr_v6").getValue() + "/" + c.findField("ipv6_router_prefix_length").getValue()
        }
        var a = {
            api: "SYNO.Core.Network.IPv6.Router",
            version: 1,
            method: "set",
            params: {
                type: c.findField("ipv6_type").getValue(),
                config: b
            }
        };
        return a
    },
    getWebAPIGetData: function() {
        return {
            api: "SYNO.Core.Network.IPv6.Router",
            version: 1,
            method: "get",
            params: {
                wan: this.win.ifname
            }
        }
    },
    onBeforeSelect: function(e, a, c) {
        var d = e.getValue();
        var b = a.get("value");
        if ("off" === d && "off" !== b) {
            e.collapse();
            this.win.getMsgBox().confirm("", _T("tcpip", "ipv6_tunnel_warning"), function(f) {
                if ("yes" === f) {
                    e.setValue(b);
                    this.onSelect(b)
                }
            }, this);
            return false
        }
        return true
    },
    onSelect: function(a) {
        var b = ["prefix_composite", "ipv6_router_remote_addr_v4", "ipv6_router_local_addr_v6", "ipv6_router_prefix_length"];
        switch (a) {
            case "6in4":
                this.enableFields(b, true);
                break;
            case "off":
            case "6to4":
            case "native":
                this.enableFields(b, false);
                this.getForm().clearInvalid();
                break;
            default:
                SYNO.Debug("Unknown type: " + a)
        }
    },
    enableFields: function(a, b) {
        Ext.each(a, function(c) {
            var d = this.getForm().findField(c);
            return b ? d.enable() : d.disable()
        }, this)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Network.DHCPServer");
SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_GATEWAY = -1;
SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_BROADCAST = -2;
SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_RANGE = -3;
SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_DOMAIN_LENGTH = 255;
SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_DOMAIN_LABEL_LENGTH = 63;
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPIPRangeValidator = function(d, c) {
    var e = d.split(".");
    var a = c.split(".");
    for (var b = 0; b < 4; ++b) {
        if (parseInt(a[b], 10) > parseInt(e[b], 10) || (parseInt(a[b], 10) == parseInt(e[b], 10) && 3 == b)) {
            return true
        }
    }
    return false
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPBroadcastValidator = function(g, e) {
    var b = g.split(".");
    var f = e.split(".");
    if (b.size() !== 4 || f.size() !== 4) {
        return true
    }
    var c = parseInt(b[0], 10) << 24 | parseInt(b[1], 10) << 16 | parseInt(b[2], 10) << 8 | parseInt(b[3], 10);
    var a = parseInt(f[0], 10) << 24 | parseInt(f[1], 10) << 16 | parseInt(f[2], 10) << 8 | parseInt(f[3], 10);
    var d = c | ~a;
    if (c === d) {
        return false
    }
    return true
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPCheckSubnet = function(c) {
    for (var b = 0; b < c.length; ++b) {
        var a = c[b];
        if (!SYNO.SDS.Utils.Network.GatewayMatchIP(a.gateway, a.startip, a.netmask) || !SYNO.SDS.Utils.Network.GatewayMatchIP(a.gateway, a.endip, a.netmask)) {
            return SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_GATEWAY
        } else {
            if (!SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPBroadcastValidator(a.startip, a.netmask) || !SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPBroadcastValidator(a.endip, a.netmask)) {
                return SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_BROADCAST
            } else {
                if (!SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPIPRangeValidator(a.startip, a.endip)) {
                    return SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_RANGE
                }
            }
        }
    }
    return 0
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateMAC = function(c) {
    var a = c.split(":");
    var b = /^([0-9A-Fa-f][0-9A-Fa-f]:){5}[0-9A-Fa-f][0-9A-Fa-f]$/g;
    if (a.length != 6 || !b.test(c)) {
        return false
    }
    return true
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateMACnoColon = function(a) {
    var b = /^([0-9A-Fa-f][0-9A-Fa-f]){6}$/g;
    var e = a.value;
    var d;
    if (!b.test(e)) {
        return false
    }
    d = e.substr(0, 2);
    for (var c = 2; c < e.length; c += 2) {
        d = d + ":" + e.substr(c, 2)
    }
    a.value = d;
    return true
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateDUID = function(a) {
    var b = /^[0-9A-Fa-f:]*$/;
    if (!b.test(a)) {
        return false
    }
    return true
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateDomain = function(a) {
    var b = /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/;
    if (a === "") {
        return true
    }
    if (SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_DOMAIN_LENGTH < a.length || !b.test(a)) {
        return false
    }
    return true
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateHostname = function(c) {
    var b = c.split(".");
    var a = /^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$/;
    if (c === "") {
        return true
    }
    if (SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_DOMAIN_LENGTH < c.legth) {
        return false
    }
    for (var d = 0; d < b; ++d) {
        if (SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_DOMAIN_LABEL_LENGTH < b[d]) {
            return false
        }
    }
    return a.test(c)
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateIP = function(d) {
    var c = d.split(".");
    if ("" === d) {
        return true
    }
    if (4 != c.length) {
        return false
    }
    for (var b = 0; b < 4; ++b) {
        var a = parseInt(c[b], 10);
        if ("" === c[b]) {
            return false
        }
        if (isNaN(a) || (a < 0 && (b === 0 || b === 3)) || a > 256) {
            return false
        }
    }
    return true
};
SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateIPv6 = function(b) {
    var a = /^((([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,7}:)|(([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,5}:([0-9a-fA-F]{1,4}:){0,1}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,4}:([0-9a-fA-F]{1,4}:){0,2}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,3}:([0-9a-fA-F]{1,4}:){0,3}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,2}:([0-9a-fA-F]{1,4}:){0,4}[0-9a-fA-F]{1,4})|([0-9a-fA-F]{1,4}::([0-9a-fA-F]{1,4}:){0,5}[0-9a-fA-F]{1,4})|(::([0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{1,4}))$/;
    if (!a.test(b)) {
        return false
    }
    return true
};
Ext.define("SYNO.SDS.AdminCenter.Network.DHCPTab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.errorMsg = null;
        this.support_wpad = (this._S("version") > 5459);
        this.enableAutoConnectColumn = new SYNO.ux.EnableColumn({
            dataIndex: "activated",
            header: _T("common", "enabled"),
            width: 100,
            align: "center",
            isIgnore: function(c, b) {
                if (true === b.get("pxe")) {
                    return true
                } else {
                    return false
                }
            }
        });
        this.callParent([this.fillConfig(a)]);
        this.enableDHCPCheckbox = Ext.getCmp(this.enableDHCPCheckboxId);
        this.addButton = Ext.getCmp(this.addButtonId);
        this.removeButton = Ext.getCmp(this.removeButtonId)
    },
    fillConfig: function(a) {
        var b = {
            title: _T("dhcp_server", "dhcp_enabled"),
            buttonAlign: "left",
            hideMode: "offsets",
            trackResetOnLoad: true,
            defaults: {
                labelWidth: 200
            },
            items: [{
                xtype: "syno_checkbox",
                checked: false,
                name: "enable",
                boxLabel: _T("dhcp_server", "enable_dhcpd"),
                disabled: (true === _S("ha_running")),
                id: this.enableDHCPCheckboxId = Ext.id(),
                listeners: {
                    scope: this,
                    check: function(d, c) {
                        this.syncBtnStatus();
                        if (c) {
                            this.grid.el.unmask()
                        } else {
                            this.grid.el.mask()
                        }
                        this.parentPanel.syncDHCPMask(c)
                    }
                }
            }, {
                xtype: "syno_numberfield",
                fieldLabel: _T("dhcp_server", "leasetime"),
                name: "leasetime",
                disabled: (true === _S("ha_running")),
                indent: 1,
                allowBlank: false,
                maxLength: 10,
                vtype: "number",
                width: 300,
                minValue: 1,
                maxValue: 43200
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "primary_dns"),
                disabled: (true === _S("ha_running")),
                name: "pdns",
                indent: 1,
                allowBlank: false,
                vtype: "v4ip",
                width: 300
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "secondary_dns"),
                disabled: (true === _S("ha_running")),
                name: "sdns",
                indent: 1,
                allowBlank: true,
                vtype: "v4ip",
                width: 300
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "domain_name"),
                disabled: (true === _S("ha_running")),
                name: "domain",
                indent: 1,
                allowBlank: true,
                maskRe: /[.0-9a-zA-Z-]/,
                width: 300,
                vtype: "hostname"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("dhcp_server", "dhcp_wpad_enable"),
                name: "wpad_enable",
                disabled: !this.support_wpad,
                hidden: !this.support_wpad,
                indent: 1
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("dhcp_server", "dhcp_wpad_url"),
                name: "wpad_url",
                width: 350,
                disabled: !this.support_wpad,
                hidden: !this.support_wpad,
                indent: 2,
                allowBlank: false
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("dhcp_server", "subnet"),
                indent: 1
            }, this.grid = new SYNO.ux.EditorGridPanel({
                height: 170,
                indent: 1,
                disabled: true,
                enableColumnMove: false,
                enableHdMenu: false,
                cls: "without-dirty-red-grid",
                bodyStyle: "margin-bottom: 10px;",
                viewConfig: {
                    getRowClass: function(c, d) {
                        if (true === c.get("pxe")) {
                            return "disable-font"
                        }
                    }
                },
                listeners: {
                    beforeedit: function(c) {
                        if (c.record.get("pxe") === true) {
                            c.cancel = true;
                            return false
                        }
                    }
                },
                plugins: [this.enableAutoConnectColumn],
                columns: [{
                    dataIndex: "startip",
                    header: _T("dhcp_server", "dhcp_range_start"),
                    width: 130,
                    align: "left",
                    editor: new SYNO.ux.TextField({
                        allowBlank: false,
                        vtype: "v4ip"
                    }),
                    renderer: SYNO.SDS.AdminCenter.Network.Utils.RenderSubnetGridCell
                }, {
                    dataIndex: "endip",
                    header: _T("dhcp_server", "dhcp_range_end"),
                    width: 130,
                    align: "left",
                    editor: new SYNO.ux.TextField({
                        allowBlank: false,
                        vtype: "v4ip"
                    }),
                    renderer: SYNO.SDS.AdminCenter.Network.Utils.RenderSubnetGridCell
                }, {
                    dataIndex: "netmask",
                    header: _T("dhcp_server", "netmask"),
                    width: 130,
                    align: "left",
                    editor: new SYNO.ux.TextField({
                        allowBlank: false,
                        vtype: "netmask"
                    }),
                    renderer: SYNO.SDS.AdminCenter.Network.Utils.RenderSubnetGridCell
                }, {
                    dataIndex: "gateway",
                    header: _T("dhcp_server", "gateway"),
                    width: 130,
                    align: "left",
                    editor: new SYNO.ux.TextField({
                        allowBlank: false,
                        vtype: "v4ip"
                    }),
                    renderer: SYNO.SDS.AdminCenter.Network.Utils.RenderSubnetGridCell
                }, this.enableAutoConnectColumn],
                sm: new Ext.grid.RowSelectionModel({
                    singleSelect: false,
                    listeners: {
                        beforerowselect: function(f, e, d, c) {
                            if (true === c.get("pxe")) {
                                return false
                            }
                        },
                        selectionchange: function(d) {
                            var c = d.getSelections();
                            if (0 < c.length) {
                                Ext.each(c, function(e) {
                                    if (true === e.get("pxe")) {
                                        d.deselect(e, true)
                                    }
                                })
                            }
                            this.syncBtnStatus()
                        },
                        scope: this
                    }
                }),
                store: this.getStore()
            }), [{
                xtype: "syno_button",
                text: _T("common", "add"),
                id: this.addButtonId = Ext.id(),
                disabled: true,
                scope: this,
                handler: this.addSubnet
            }, {
                xtype: "syno_button",
                text: _T("common", "remove"),
                id: this.removeButtonId = Ext.id(),
                disabled: true,
                scope: this,
                handler: this.removeSubnets
            }]]
        };
        Ext.apply(b, a);
        return b
    },
    getStore: function() {
        if (!this.store) {
            this.store = new Ext.data.JsonStore({
                fields: ["startip", "endip", "netmask", "gateway", "activated", "pxe"],
                idIndex: 0,
                listeners: {
                    update: this.storeDataChanged,
                    add: this.storeDataChanged,
                    remove: this.storeDataChanged,
                    scope: this
                }
            })
        }
        return this.store
    },
    addSubnet: function() {
        this.store.add(new Ext.data.Record());
        this.grid.getView().refresh()
    },
    removeSubnets: function() {
        var a = this.grid.getSelectionModel().getSelections();
        if (0 < a.length) {
            this.store.remove(a);
            this.grid.getView().refresh()
        }
    },
    storeDataChanged: function() {
        this.subnetDirty = true
    },
    hasInvalidEmpty: function() {
        var a = false;
        this.store.each(function(b) {
            if (!b.get("startip") || !b.get("endip") || !b.get("gateway") || !b.get("netmask")) {
                a = true;
                this.errorMsg = _T("dhcp_server", "subnet_empty_error")
            }
        }, this);
        return a
    },
    checkSubnetValid: function() {
        var a = false;
        var b = [];
        this.fillSubnetDataFromStore(b);
        if (0 === b.length) {
            this.errorMsg = _T("dhcp_server", "no_subnet_err");
            return a
        }
        switch (SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPCheckSubnet(b)) {
            case SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_GATEWAY:
                this.errorMsg = _T("dhcp_server", "dhcp_gateway_err");
                break;
            case SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_BROADCAST:
                this.errorMsg = _T("dhcp_server", "dhcp_broadcast_err");
                break;
            case SYNO.SDS.AdminCenter.Network.DHCPServer.SYNODHCP_ERR_RANGE:
                this.errorMsg = _T("dhcp_server", "dhcp_range_err");
                break;
            default:
                a = true
        }
        return a
    },
    isEnabledWithStaticIP: function() {
        var b = this.enableDHCPCheckbox.getValue();
        var a = this.parentPanel.ipv4Panel;
        var c = a.getForm().findField(a.useDhcpNoId).checked;
        if (b && !c) {
            this.confirmMsg = _T("dhcp_server", "need_static_ip_msg");
            return true
        }
        return false
    },
    fillSubnetDataFromStore: function(a) {
        this.store.each(function(b) {
            a.push({
                activated: b.get("activated"),
                startip: b.get("startip"),
                endip: b.get("endip"),
                netmask: b.get("netmask"),
                gateway: b.get("gateway"),
                pxe: b.get("pxe")
            })
        })
    },
    fillContent: function(c) {
        var b = this.getForm();
        var a = this.getConfig(c);
        b.setValues(a);
        if (a.subnetList && 0 < a.subnetList.length) {
            this.store.loadData(a.subnetList)
        }
        if (this.support_wpad) {
            this.checkGroupEnable = new SYNO.ux.Utils.EnableCheckGroup(b, "enable", ["leasetime", "pdns", "sdns", "domain", "wpad_enable", "wpad_url"]);
            this.checkGroupWpadEnable = new SYNO.ux.Utils.EnableCheckGroup(b, "wpad_enable", ["wpad_url"])
        } else {
            this.checkGroupEnable = new SYNO.ux.Utils.EnableCheckGroup(b, "enable", ["leasetime", "pdns", "sdns", "domain"])
        }
        this.parentPanel.dhcpClientListPanel.setIPStore(true, false);
        this.parentPanel.dhcpReservationPanel.setIPStore(true, false)
    },
    isDirty: function() {
        if (this.getForm().isDirty()) {
            return true
        }
        if (this.enableDHCPCheckbox.getValue() && this.subnetDirty) {
            return true
        }
        return false
    },
    isValid: function() {
        if (!this.getForm().isValid()) {
            return false
        }
        if (false === this.enableDHCPCheckbox.getValue()) {
            return true
        }
        return (!this.hasInvalidEmpty() && this.checkSubnetValid())
    },
    isNeedConfirm: function() {
        return this.isEnabledWithStaticIP()
    },
    getWebAPISetData: function() {
        var c = this.getForm();
        var a = {
            ifname: this.win.ifname,
            enable: c.findField("enable").getValue(),
            leasetime: parseInt(c.findField("leasetime").getValue(), 10),
            pdns: c.findField("pdns").getValue(),
            sdns: c.findField("sdns").getValue(),
            domain: c.findField("domain").getValue(),
            subnetData: []
        };
        this.fillSubnetDataFromStore(a.subnetData);
        var b = [];
        b.push({
            api: "SYNO.Core.Network.DHCPServer",
            version: 1,
            method: "set",
            params: a
        });
        if (this.support_wpad) {
            b.push({
                api: "SYNO.Core.Network.DHCPServer.WPAD",
                version: 1,
                method: "set",
                params: {
                    ifname: this.win.ifname,
                    enable: c.findField("wpad_enable").getValue(),
                    url: c.findField("wpad_url").getValue()
                }
            })
        }
        return b
    },
    getWebAPIGetData: function() {
        var a = [];
        a.push({
            api: "SYNO.Core.Network.DHCPServer",
            version: 1,
            method: "get",
            params: {
                ifname: this.win.ifname
            }
        });
        if (this.support_wpad) {
            a.push({
                api: "SYNO.Core.Network.DHCPServer.WPAD",
                version: 1,
                method: "get",
                params: {
                    ifname: this.win.ifname
                }
            })
        }
        return a
    },
    getErrorMsg: function() {
        return (this.errorMsg) ? this.errorMsg : _T("common", "forminvalid")
    },
    getConfirmMsg: function() {
        return this.confirmMsg
    },
    getConfig: function(b) {
        var a = {
            domain: b.dhcp_server_domain,
            enable: b.dhcp_server_enable,
            leasetime: b.dhcp_server_leasetime,
            pdns: b.dhcp_server_pdns,
            sdns: b.dhcp_server_sdns,
            wpad_enable: b.wpad_enable,
            wpad_url: b.wpad_url,
            subnetList: b.dhcp_server_subnetList
        };
        return a
    },
    syncBtnStatus: function() {
        var b = this.getForm().findField("enable").getValue();
        var a = (0 < this.grid.getSelectionModel().getSelections().length);
        this.addButton.setDisabled(!b);
        this.removeButton.setDisabled(!b || !a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.DHCPClientListTab", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.support_IPv6 = (this._S("version") > 4966);
        this.callParent([this.fillConfig(a)]);
        this.getSelectionModel().addListener("selectionchange", this.onSelectionChange, this)
    },
    fillConfig: function(a) {
        var b = {
            title: _T("dhcp_server", "client_list"),
            height: 420,
            disabled: true,
            hideMode: "offsets",
            enableColumnMove: false,
            enableHdMenu: false,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "refresh"),
                scope: this,
                handler: this.onRefresh
            }, {
                xtype: "syno_button",
                text: _T("network", "add_reservation"),
                scope: this,
                disabled: true,
                itemId: "add",
                handler: this.onAddReservation
            }, "->", {
                xtype: "syno_combobox",
                id: this.ipTypeId = Ext.id(),
                editable: false,
                allowBlank: false,
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"]
                }),
                displayField: "display",
                valueField: "value",
                hidden: !this.support_IPv6,
                listeners: {
                    scope: this,
                    beforeselect: this.onBeforeTypeChange,
                    select: this.onTypeChange
                }
            }],
            listeners: {
                scope: this,
                activate: this.onActivate
            },
            columns: [{
                dataIndex: "clid",
                header: _T("dhcp_server", "mac") + "/" + _T("tcpip", "ipv6_duid"),
                sortable: "true",
                hidden: !this.support_IPv6,
                align: "left"
            }, {
                dataIndex: "mac",
                header: _T("dhcp_server", "mac"),
                sortable: "true",
                hidden: this.support_IPv6,
                align: "left"
            }, {
                dataIndex: "ip",
                header: _T("dhcp_server", "ip"),
                sortable: "true",
                align: "left"
            }, {
                dataIndex: "hostname",
                header: _T("dhcp_server", "hostname"),
                sortable: "true",
                align: "left"
            }, {
                dataIndex: "expire",
                header: _T("dhcp_server", "expire_time"),
                sortable: "true",
                align: "left",
                renderer: this.expireRenderer
            }],
            store: this.getStore()
        };
        Ext.apply(b, a);
        return b
    },
    onActivate: function() {
        if (this.curType !== this.parentPanel.dhcpReservationPanel.curType) {
            Ext.getCmp(this.ipTypeId).setValue(this.parentPanel.dhcpReservationPanel.curType);
            this.onTypeChange()
        }
    },
    onSelectionChange: function() {
        var a = this.getTopToolbar().getComponent("add");
        a.setDisabled(!this.getSelectionModel().getSelected())
    },
    onBeforeTypeChange: function() {
        if (!this.parentPanel.dhcpReservationPanel.isValid()) {
            this.parentPanel.setActiveTab(this.parentPanel.dhcpReservationPanel);
            this.win.setStatusError({
                text: this.parentPanel.dhcpReservationPanel.getErrorMsg(),
                clear: true
            });
            return false
        }
        return true
    },
    onTypeChange: function() {
        var a = Ext.getCmp(this.ipTypeId).getValue();
        if ("ipv4" === a) {
            this.store.loadData(this.ipv4Data)
        } else {
            this.store.loadData(this.ipv6Data)
        }
        this.curType = a
    },
    onRefresh: function() {
        this.store.removeAll();
        this.sendWebAPI(Ext.apply(this.getWebAPIGetData(), {
            callback: function(d, b, c, a) {
                if (!d) {
                    SYNO.Debug(b);
                    return
                }
                this.fillContent(b, true)
            },
            scope: this
        }))
    },
    onAddReservation: function() {
        var c = this.win.getTabPanel().getDHCPReservationPanel();
        var b = this.getSelectionModel().getSelected();
        var a;
        if (this.support_IPv6) {
            a = {
                clid: b.data.clid,
                ip: b.data.ip,
                hostname: b.data.hostname
            }
        } else {
            a = {
                clid: b.data.mac,
                ip: b.data.ip,
                hostname: b.data.hostname
            }
        }
        if ("ipv4" === Ext.getCmp(this.ipTypeId).getValue()) {
            c.ipv4Data.push(a)
        } else {
            c.ipv6Data.push(a)
        }
        if ("ipv4" === Ext.getCmp(c.ipTypeId).getValue()) {
            c.getStore().loadData(c.ipv4Data)
        } else {
            c.getStore().loadData(c.ipv6Data)
        }
        c.dirty = true
    },
    expireRenderer: function(d, b, a) {
        var c = "";
        if ("unlimited" === a.get("expire")) {
            c = _T("dhcp_server", "unlimited")
        } else {
            if ("expired" === a.get("expire")) {
                c = _T("dhcp_server", "expired")
            } else {
                c = a.get("expire").split(",");
                c = String.format("{0} {1} {2} {3} {4} {5}", c[0], _T("status", "status_day"), c[1], _T("status", "status_hour"), c[2], _T("status", "status_minute"))
            }
        }
        return c
    },
    getStore: function() {
        if (!this.store) {
            this.store = new Ext.data.JsonStore({
                fields: ["clid", "mac", {
                    name: "ip",
                    sortType: function(b) {
                        var a = b.split(".");
                        return parseInt(a[0], 10) * 256 * 256 * 256 + parseInt(a[1], 10) * 256 * 256 + parseInt(a[2], 10) * 256 + parseInt(a[3], 10)
                    }
                }, "hostname", "expire"],
                idIndex: 0
            })
        }
        return this.store
    },
    fillContent: function(d, b) {
        var c = (b) ? "" : "dhcp_server_clientlist_";
        var a = c + "clientList";
        var e = Ext.getCmp(this.ipTypeId);
        if (!d.hasOwnProperty(a) || 0 === d[a].length) {
            return
        }
        if (this.support_IPv6) {
            this.ipv4Data = d[a].ipv4;
            this.ipv6Data = d[a].ipv6
        } else {
            this.ipv4Data = d[a]
        }
        e.fireEvent("select", e)
    },
    isDirty: function() {
        return false
    },
    isValid: function() {
        return true
    },
    getWebAPIGetData: function() {
        var b = this.getKnownAPI("SYNO.Core.Network.DHCPServer.ClientList");
        var a;
        if (2 == b.maxVersion) {
            a = {
                api: "SYNO.Core.Network.DHCPServer.ClientList",
                version: 2,
                method: "list",
                params: {
                    ifname: this.win.ifname
                }
            }
        } else {
            a = {
                api: "SYNO.Core.Network.DHCPServer.ClientList",
                version: 1,
                method: "list",
                params: {
                    ifname: this.win.ifname
                }
            }
        }
        return a
    },
    setIPStore: function(b, a) {
        var d = Ext.getCmp(this.ipTypeId);
        var c = [];
        if (true === b) {
            c.push(["ipv4", "IPv4"])
        }
        if (true === a) {
            c.push(["ipv6", "IPv6"])
        }
        if (0 === d.getStore().getCount() && 0 < c.length) {
            d.getStore().loadData(c);
            this.curType = d.getStore().getAt(0).get("value");
            d.setValue(this.curType)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.DHCPReservationTab", {
    extend: "SYNO.ux.EditorGridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.errorMsg = null;
        this.support_IPv6 = (this._S("version") > 4966);
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = {
            title: _T("dhcp_server", "address_reservation"),
            height: 400,
            disabled: true,
            hideMode: "offsets",
            enableColumnMove: false,
            enableHdMenu: false,
            cls: "without-dirty-red-grid",
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "add"),
                scope: this,
                handler: this.addReservedAddr
            }, {
                xtype: "syno_button",
                itemId: "removeBtn",
                text: _T("common", "remove"),
                disabled: true,
                scope: this,
                handler: this.removeReservedAddr
            }, "->", {
                xtype: "syno_combobox",
                id: this.ipTypeId = Ext.id(),
                editable: false,
                allowBlank: false,
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"]
                }),
                displayField: "display",
                valueField: "value",
                hidden: !this.support_IPv6,
                listeners: {
                    scope: this,
                    beforeselect: this.onBeforeTypeChange,
                    select: this.onTypeChange
                }
            }],
            listeners: {
                scope: this,
                activate: this.onActivate,
                validateedit: this.validateStatic
            },
            columns: [{
                dataIndex: "clid",
                header: _T("dhcp_server", "mac") + "/" + _T("tcpip", "ipv6_duid"),
                align: "left",
                sortable: "true",
                hidden: !this.support_IPv6,
                editor: new SYNO.ux.TextField({
                    allowBlank: false
                })
            }, {
                dataIndex: "mac",
                header: _T("dhcp_server", "mac"),
                align: "left",
                sortable: "true",
                hidden: this.support_IPv6,
                editor: new SYNO.ux.TextField({
                    allowBlank: false
                })
            }, {
                dataIndex: "ip",
                header: _T("dhcp_server", "ip"),
                align: "left",
                sortable: "true",
                editor: new SYNO.ux.TextField({
                    allowBlank: false
                })
            }, {
                dataIndex: "hostname",
                header: _T("dhcp_server", "hostname"),
                align: "left",
                sortable: "true",
                editor: new SYNO.ux.TextField({
                    allowBlank: true
                })
            }],
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: function(e) {
                        var d = e.getSelections();
                        var c = this.getTopToolbar().getComponent("removeBtn");
                        c.setDisabled(0 >= d.length)
                    },
                    scope: this
                }
            }),
            store: this.getStore()
        };
        Ext.apply(b, a);
        return b
    },
    onActivate: function() {
        if (this.curType !== this.parentPanel.dhcpClientListPanel.curType) {
            Ext.getCmp(this.ipTypeId).setValue(this.parentPanel.dhcpClientListPanel.curType);
            if (true === this.onBeforeTypeChange()) {
                this.onTypeChange()
            }
        }
    },
    onBeforeTypeChange: function() {
        this.oldType = this.curType;
        if (!this.isValid()) {
            this.win.setStatusError({
                text: this.getErrorMsg(),
                clear: true
            });
            return false
        }
        this.syncData();
        return true
    },
    onTypeChange: function() {
        var a = Ext.getCmp(this.ipTypeId).getValue();
        if ("ipv6" === this.oldType && "ipv4" === a) {
            this.store.loadData(this.ipv4Data)
        } else {
            if ("ipv4" === this.oldType && "ipv6" === a) {
                this.store.loadData(this.ipv6Data)
            }
        }
        this.curType = a
    },
    addReservedAddr: function() {
        this.store.add(new Ext.data.Record());
        this.getView().refresh()
    },
    removeReservedAddr: function() {
        var a = this.getSelectionModel().getSelections();
        if (0 < a.length) {
            this.store.remove(a);
            this.getView().refresh()
        }
    },
    getStore: function() {
        if (!this.store) {
            this.store = new Ext.data.JsonStore({
                fields: ["clid", "mac", {
                    name: "ip",
                    sortType: function(b) {
                        var a = b.split(".");
                        return parseInt(a[0], 10) * 256 * 256 * 256 + parseInt(a[1], 10) * 256 * 256 + parseInt(a[2], 10) * 256 + parseInt(a[3], 10)
                    }
                }, "hostname"],
                idIndex: 0,
                listeners: {
                    update: this.storeDataChanged,
                    add: this.storeDataChanged,
                    remove: this.storeDataChanged,
                    scope: this
                }
            })
        }
        return this.store
    },
    validateStatic: function(a) {
        var b = false;
        switch (a.column) {
            case 0:
            case 1:
                if ("ipv4" === Ext.getCmp(this.ipTypeId).getValue()) {
                    if (SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateMACnoColon(a)) {
                        b = true;
                        break
                    }
                    b = SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateMAC(a.value)
                } else {
                    b = SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateDUID(a.value)
                }
                break;
            case 2:
                if ("ipv4" === Ext.getCmp(this.ipTypeId).getValue()) {
                    b = SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateIP(a.value)
                } else {
                    b = SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateIPv6(a.value)
                }
                break;
            case 3:
                b = SYNO.SDS.AdminCenter.Network.DHCPServer.DHCPValidateHostname(a.value);
                break
        }
        if (!b) {
            a.record.value = a.record.originalValue
        }
        return b
    },
    storeDataChanged: function() {
        this.dirty = true
    },
    hasInvalidEmpty: function() {
        var a = false;
        if (this.support_IPv6) {
            this.store.each(function(b) {
                if (!b.get("clid") || !b.get("ip")) {
                    a = true;
                    this.errorMsg = _T("dhcp_server", "ip_mac_empty_error")
                }
            }, this)
        } else {
            this.store.each(function(b) {
                if (!b.get("mac") || !b.get("ip")) {
                    a = true;
                    this.errorMsg = _T("dhcp_server", "ip_mac_empty_error")
                }
            }, this)
        }
        return a
    },
    hasDupclicatedIP: function() {
        var b = [];
        this.store.each(function(e) {
            b.push(e.copy())
        });
        var d = new Ext.data.Store({
            recordType: this.store.recordType
        });
        d.add(b);
        d.sort("ip");
        for (var c = 1; c < d.getCount(); ++c) {
            var a = d.getAt(c - 1);
            if (a.data.ip == d.getAt(c).data.ip) {
                this.errorMsg = _T("network", "error_add_reservation");
                return true
            }
        }
        return false
    },
    fillContent: function(a) {
        if (!a.dhcp_server_reservation_reservationList) {
            SYNO.Debug("Error no data");
            return
        }
        if (this.support_IPv6) {
            this.ipv4Data = a.dhcp_server_reservation_reservationList.ipv4;
            this.ipv6Data = a.dhcp_server_reservation_reservationList.ipv6
        } else {
            this.ipv4Data = a.dhcp_server_reservation_reservationList
        }
        this.store.loadData(this.ipv4Data)
    },
    isDirty: function() {
        return this.dirty
    },
    isValid: function() {
        return !this.hasInvalidEmpty() && !this.hasDupclicatedIP()
    },
    getWebAPISetData: function() {
        var b = [];
        this.syncData();
        if (this.support_IPv6) {
            this.ipv4Data.each(function(c) {
                b.push({
                    mac: c.clid,
                    ip: c.ip,
                    hostname: c.hostname
                })
            })
        } else {
            this.ipv4Data.each(function(c) {
                b.push({
                    mac: c.mac,
                    ip: c.ip,
                    hostname: c.hostname
                })
            })
        }
        if (this.support_IPv6) {
            this.ipv6Data.each(function(c) {
                b.push(c)
            })
        }
        var a = {
            api: "SYNO.Core.Network.DHCPServer.Reservation",
            version: 1,
            method: "set",
            params: {
                reservationData: b
            }
        };
        return a
    },
    getWebAPIGetData: function() {
        var b = this.getKnownAPI("SYNO.Core.Network.DHCPServer.Reservation");
        var a;
        if (2 == b.maxVersion) {
            a = {
                api: "SYNO.Core.Network.DHCPServer.Reservation",
                version: 2,
                method: "get"
            }
        } else {
            a = {
                api: "SYNO.Core.Network.DHCPServer.Reservation",
                version: 1,
                method: "get"
            }
        }
        return a
    },
    syncData: function() {
        var a = [];
        if (this.support_IPv6) {
            this.store.each(function(b) {
                a.push({
                    clid: b.get("clid"),
                    ip: b.get("ip"),
                    hostname: b.get("hostname")
                })
            })
        } else {
            this.store.each(function(b) {
                a.push({
                    mac: b.get("mac"),
                    ip: b.get("ip"),
                    hostname: b.get("hostname")
                })
            })
        }
        if ("ipv4" === this.curType) {
            this.ipv4Data = a
        } else {
            this.ipv6Data = a
        }
    },
    getErrorMsg: function() {
        return (this.errorMsg) ? this.errorMsg : _T("common", "forminvalid")
    },
    setIPStore: function(b, a) {
        var d = Ext.getCmp(this.ipTypeId);
        var c = [];
        if (true === b) {
            c.push(["ipv4", "IPv4"])
        }
        if (true === a) {
            c.push(["ipv6", "IPv6"])
        }
        if (0 === d.getStore().getCount() && 0 < c.length) {
            d.getStore().loadData(c);
            this.curType = d.getStore().getAt(0).get("value");
            d.setValue(this.curType)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.EditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.ifname = a.ifname;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.addListener("destroy", a.module.startPolling, a.module);
        this.init()
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("common", "alt_edit"),
            width: 790,
            height: 590,
            resizable: false,
            items: [this.getTabPanel(a)],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, a);
        return b
    },
    getTabPanel: function(a) {
        if (!this.tabpanel) {
            this.tabpanel = new SYNO.SDS.AdminCenter.Network.EditTabPanel({
                module: a.module,
                owner: this.owner,
                win: this,
                isLocalBridge: a.isLocalBridge,
                tabs: a.tabs
            })
        }
        return this.tabpanel
    },
    onApply: function() {
        if (!this.tabpanel.isDirty()) {
            this.onCancel();
            return
        }
        var a = this.tabpanel.getInvalidTab();
        if (a) {
            var c = _T("common", "forminvalid");
            if ("function" === typeof a.getErrorMsg) {
                c = a.getErrorMsg()
            }
            this.tabpanel.setActiveTab(a);
            this.setStatusError({
                text: c
            });
            return
        }
        var b = this.tabpanel.getConfirmTabs();
        if (0 < b.length) {
            this.doConfirms(b, 0)
        } else {
            this.sendWebAPISetData()
        }
    },
    doConfirms: function(b, a) {
        if (b.length <= a) {
            return
        }
        this.tabpanel.setActiveTab(b[a]);
        this.getMsgBox().confirm("", b[a].getConfirmMsg(), function(c) {
            if ("yes" === c) {
                if (b.length - 1 === a) {
                    this.sendWebAPISetData()
                } else {
                    this.doConfirms(b, ++a)
                }
            }
        }, this)
    },
    sendWebAPISetData: function() {
        var a = this.tabpanel.getWebAPISetData();
        this.setStatusBusy({
            text: _T("common", "applying"),
            clear: false
        });
        this.disable();
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: a
            },
            callback: this.webapiSetHandler,
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    },
    init: function() {
        var a = this.tabpanel.getWebAPIGetData();
        this.setStatusBusy();
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: a
            },
            callback: this.webapiGetHandler,
            scope: this
        })
    },
    webapiGetHandler: function(a, e, d, c) {
        var b = SYNO.SDS.AdminCenter.Network.Utils.apiToPrefix;
        Ext.each(e.result, function(f, g, j) {
            if (!f.success) {
                SYNO.Debug("Failed on " + f.api + " " + f.method);
                return
            }
            var i = b(f.api);
            var h = [];
            Ext.iterate(f.data, function(k) {
                h.push(k)
            }, this);
            Ext.each(h, function(k) {
                f.data[i + k] = f.data[k];
                SYNO.Debug("result.data[" + i + k + "] = " + f.data[k]);
                delete f.data[k]
            }, this);
            this.data = Ext.apply(f.data, this.data)
        }, this);
        if (!this.data) {
            SYNO.Debug("No success request");
            return
        }
        this.tabpanel.fillContent(this.data);
        this.clearStatusBusy()
    },
    webapiSetHandler: function(k, c, d, a) {
        if (!k || c.has_fail) {
            var h = _T("common", "error_system");
            this.enable();
            Ext.each(c.result, function(i) {
                if (i.error && i.error.code) {
                    h = SYNO.API.getErrorString(i.error.code);
                    return false
                }
            }, this);
            this.setStatusError({
                text: h,
                clear: true
            });
            return
        }
        var j = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var b = this.findAppWindow().getOpenConfig("cms_self") === true;
        if ((!j || b) && c && c.result) {
            for (var g = 0; g < c.result.size(); g++) {
                var f = c.result[g].data;
                if (!f) {
                    continue
                }
                this.removeListener("destroy", this.module.startPolling, this.module);
                SYNO.SDS.AdminCenter.Network.Utils.Redirect.apply(this, [f.redirect, f.secure, f.ip_list, f.port, f.auth_key, "SYNO.SDS.AdminCenter.Network.Main", 10000]);
                break
            }
        }
        var e = false;
        Ext.each(d.compound, function(i) {
            if ("SYNO.Core.Network.DHCPServer" === i.api && true === i.enable) {
                e = true;
                this.checkPortBlock("SYNO.SDS.AdminCenter.Network.DHCP", "DHCP", "67, 68")
            } else {
                if ("SYNO.Core.Network.LocalBridge" === i.api && "stateful" === i.config.dhcpv6_type) {
                    e = true;
                    this.checkPortBlock("SYNO.SDS.AdminCenter.Network.DHCPv6", "DHCPv6", "546,547")
                }
            }
        }, this);
        if (false === e) {
            this.setStatusOK();
            this.close()
        }
    },
    checkPortBlock: function(a, b, e) {
        var d = {};
        d.action = "isPortBlock";
        d.name = [a];
        d.isPkg = false;
        var c = _T("dhcp_server", "check_firewall_msg");
        c = String.format(c, b, e);
        this.addAjaxTask({
            url: "modules/PortEnable/portenable.cgi",
            method: "POST",
            autoJsonDecode: true,
            single: true,
            params: Ext.util.JSON.encode(d),
            scope: this,
            success: function(f, g) {
                if (f.success) {
                    if (f.data.portcheck && !f.data.isPortAllow) {
                        this.owner.getMsgBox().alert("", c)
                    }
                } else {
                    this.owner.getMsgBox().alert("", c)
                }
                this.close()
            },
            failure: function(f, g) {
                this.owner.getMsgBox().alert("", c);
                this.close()
            }
        }).start()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.EditTabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.owner = a.owner;
        var b = Ext.apply({
            activeTab: 0,
            deferredRender: false,
            module: a.module,
            items: []
        }, a);
        Ext.each(a.tabs, function(c) {
            switch (c) {
                case "bond_mode":
                    b.items.push(this.getBondModePanel(a));
                    break;
                case "ipv4":
                    b.items.push(this.getIPv4Panel(a));
                    break;
                case "ipv6":
                    b.items.push(this.getIPv6Panel(a));
                    break;
                case "dhcpserver":
                    b.items.push([this.getDHCPPanel(a), this.getDHCPClientListPanel(a), this.getDHCPReservationPanel(a)]);
                    break;
                case "local_bridge_dhcpserver":
                    b.items.push([this.getDHCPClientListPanel(a), this.getDHCPReservationPanel(a)]);
                    break;
                default:
                    SYNO.Debug("unknown tab: " + c);
                    break
            }
        }, this);
        this.callParent([b])
    },
    getBondModePanel: function(a) {
        if (!this.bondModePanel) {
            this.bondModePanel = new SYNO.SDS.AdminCenter.Network.BondModeTab({
                title: _T("network", "linkaggr_mode"),
                module: a.module,
                owner: this.owner,
                win: a.win
            })
        }
        return this.bondModePanel
    },
    getIPv4Panel: function(a) {
        var b = {
            title: "IPv4",
            module: a.module,
            owner: this.owner,
            win: a.win,
            parentPanel: this
        };
        if (!this.ipv4Panel) {
            if (a.isLocalBridge) {
                this.ipv4Panel = new SYNO.SDS.AdminCenter.Network.LocalBridgeIPv4Tab(b)
            } else {
                this.ipv4Panel = new SYNO.SDS.AdminCenter.Network.IPv4Tab(b)
            }
        }
        return this.ipv4Panel
    },
    getIPv6Panel: function(a) {
        var b = {
            title: "IPv6",
            module: a.module,
            owner: this.owner,
            win: a.win,
            parentPanel: this
        };
        if (!this.ipv6Panel) {
            if (a.isLocalBridge) {
                this.ipv6Panel = new SYNO.SDS.AdminCenter.Network.LocalBridgeIPv6Tab(b)
            } else {
                if ("pppoe" === a.win.ifname) {
                    this.ipv6Panel = new SYNO.SDS.AdminCenter.Network.PPPoEIPv6Tab(b)
                } else {
                    this.ipv6Panel = new SYNO.SDS.AdminCenter.Network.IPv6Tab(b)
                }
            }
        }
        return this.ipv6Panel
    },
    getDHCPPanel: function(a) {
        if (!this.dhcpPanel) {
            this.dhcpPanel = new SYNO.SDS.AdminCenter.Network.DHCPTab({
                module: a.module,
                win: a.win,
                owner: this.owner,
                parentPanel: this
            })
        }
        return this.dhcpPanel
    },
    getDHCPClientListPanel: function(a) {
        if (!this.dhcpClientListPanel) {
            this.dhcpClientListPanel = new SYNO.SDS.AdminCenter.Network.DHCPClientListTab({
                module: a.module,
                owner: this.owner,
                win: a.win,
                parentPanel: this
            })
        }
        return this.dhcpClientListPanel
    },
    getDHCPReservationPanel: function(a) {
        if (!this.dhcpReservationPanel) {
            this.dhcpReservationPanel = new SYNO.SDS.AdminCenter.Network.DHCPReservationTab({
                module: a.module,
                owner: this.owner,
                win: a.win,
                parentPanel: this
            })
        }
        return this.dhcpReservationPanel
    },
    syncDHCPMask: function(a) {
        this.dhcpClientListPanel.setDisabled(!a);
        this.dhcpReservationPanel.setDisabled(!a);
        if (this.dhcpPanel && this.dhcpPanel.grid) {
            this.dhcpPanel.grid.setDisabled(!a)
        }
    },
    syncDHCPMaskWithIPv6: function(a, b, c) {
        if ("v4" === a) {
            this.dhcpv4Enabled = b
        } else {
            if ("v6" === a) {
                this.dhcpv6Enabled = b
            } else {
                return
            }
        }
        if (Ext.isDefined(this.dhcpv4Enabled) && Ext.isDefined(this.dhcpv6Enabled)) {
            this.dhcpClientListPanel.setIPStore(this.dhcpv4Enabled, (this.dhcpv6Enabled && c));
            this.dhcpReservationPanel.setIPStore(this.dhcpv4Enabled, (this.dhcpv6Enabled && c))
        }
        if (0 === Ext.getCmp(this.dhcpClientListPanel.ipTypeId).getStore().getCount()) {
            this.syncDHCPMask(false)
        } else {
            this.syncDHCPMask(true === this.dhcpv4Enabled || true === this.dhcpv6Enabled)
        }
    },
    fillContent: function(a) {
        this.items.each(function(b) {
            b.fillContent(a)
        })
    },
    isDirty: function() {
        var a = false;
        this.items.each(function(b) {
            if (b.isDirty()) {
                a = true;
                return
            }
        });
        return a
    },
    getInvalidTab: function() {
        var a;
        this.items.each(function(b) {
            if (!b.isValid()) {
                a = b
            }
        });
        return a
    },
    getConfirmTabs: function() {
        var a = [];
        this.items.each(function(b) {
            if (Ext.isDefined(b.isNeedConfirm) && b.isNeedConfirm()) {
                a.push(b)
            }
        });
        return a
    },
    getWebAPIGetData: function() {
        var a = [];
        this.items.each(function(c) {
            var b = c.getWebAPIGetData();
            if (b instanceof Array) {
                Ext.each(b, function(d) {
                    a.push(d)
                })
            } else {
                a.push(b)
            }
        });
        return a
    },
    getWebAPISetData: function() {
        var a = [];
        this.items.each(function(c) {
            if (c.getWebAPISetData && c.isDirty()) {
                var b = c.getWebAPISetData();
                if (b instanceof Array) {
                    Ext.each(b, function(d) {
                        a.push(d)
                    })
                } else {
                    a.push(b)
                }
            }
        });
        return a
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Network.Ethernet");
SYNO.SDS.AdminCenter.Network.Ethernet.getWebAPI = function() {
    var a = {
        api: "SYNO.Core.Network.Ethernet",
        method: "list",
        version: 1,
        callback: function(b) {
            Ext.each(b, function(f, c, e) {
                var d = "net-";
                if ("wan" === f.type) {
                    d += "wan-"
                } else {
                    d += "lan-"
                }
                if ("connected" === f.status) {
                    d += "connected"
                } else {
                    d += "disconnected"
                }
                e[c].cls = d
            })
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.Ethernet.getTpl = function(b) {
    var c = new Ext.XTemplate('<tpl for="slaves">', "<dl>", '<dt class="sm-disk-list-column" style="width:30%">{ifname:this.getTitle}</dt>', '<dt class="sm-disk-list-column" style="width:70%">{link_status:this.getLinkStatus}</dt>', "</dl>", '<div class="x-clear"></div>', "</tpl>");
    var a = new Ext.XTemplate("<tpl if=\"values.type=='lan' || values.type=='wan' || values.type=='bridge' || values.type=='bond'\">", "<div>", String.format(b, (true === _S("ha_running")) ? _TT("SYNO.SDS.HA.Instance", "ui", "use_ha_ip") : _T("network", "use_dhcp"), (true === _S("ha_running")) ? "{enable_ha_ip:this.toYesNo}" : "{use_dhcp:this.toYesNo}"), String.format(b, (true === _S("ha_running")) ? _TT("SYNO.SDS.HA.Instance", "ui", "ha_ip") : _T("tcpip", "tcpip_ipaddr"), "{ip:this.toEmptyDash}"), String.format(b, (true === _S("ha_running")) ? _TT("SYNO.SDS.HA.Instance", "ui", "ha_ip_mask") : _T("tcpip", "tcpip_mask"), "{mask:this.toEmptyDash}"), String.format(b, _T("status", "status_ipv6addr"), "{ipv6:this.toMultiLine}"), '<tpl if="values.mtu != 0 && values.mtu != 1500">', String.format(b, _T("tcpip", "MTU_setting"), _T("tcpip", "MTU_enable") + " {mtu}"), "</tpl>", '<tpl if="values.speed != 0">', String.format(b, _T("tcpip", "link_status"), "{link_status:this.getLinkStatus}"), "</tpl>", '<tpl if="values.enable_vlan == true">', String.format(b, "VLAN ID", "{vlan_id}"), "</tpl>", "</div>", "<tpl if=\"values.type=='bond'\">", '<div class="sm-disk-list">', '<div class="sm-disk-list-header" style="height: 24px">', "<dl>", String.format('<dt style="float:left;width:30%">{0}</dt>', _T("network", "interface")), String.format('<dt style="float:left;width:70%">{0}</dt>', _T("tcpip", "link_status")), "</dl>", "</div>", '<div class="sm-disk-list-body">', c.html, "</div>", "</div>", '<div class="x-clear"></div>', "</tpl>", "</tpl>");
    return a.html
};
SYNO.SDS.AdminCenter.Network.Ethernet.getBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.Ethernet.onEdit
        },
        deleteBtn: {
            isDisabled: true,
            handler: null
        },
        connectBtn: {
            isDisabled: true,
            handler: null
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.Ethernet.onEdit = function() {
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.EditDialog({
        module: this.module,
        owner: this.module.appWin,
        ifname: this.selectedRecord.get("ifname"),
        tabs: ["ipv4", "ipv6", "dhcpserver"]
    });
    a.open()
};
Ext.ns("SYNO.SDS.AdminCenter.Network.PPPoE");
SYNO.SDS.AdminCenter.Network.PPPoE.getWebAPI = function() {
    var a = {
        api: "SYNO.Core.Network.PPPoE",
        method: "list",
        version: 1,
        callback: function(b) {
            Ext.each(b, function(e, c, d) {
                d[c].id = "pppoe";
                if ("connected" === e.status || "connecting" === e.status) {
                    d[c].cls = "net-pppoe-connected"
                } else {
                    d[c].cls = "net-pppoe-disconnected"
                }
            })
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.PPPoE.getTpl = function(b) {
    var a = new Ext.XTemplate("<tpl if=\"values.type=='pppoe'\">", String.format(b, _T("pppoe", "pppoe_IP"), "{ip:this.toEmptyDash}"), String.format(b, _T("pppoe", "pppoe_mask"), "{mask:this.toEmptyDash}"), String.format(b, _T("status", "status_ipv6addr"), "{ipv6:this.toMultiLine}"), "</tpl>");
    return a.html
};
SYNO.SDS.AdminCenter.Network.PPPoE.getBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: function() {
                return false
            },
            handler: SYNO.SDS.AdminCenter.Network.PPPoE.onEdit
        },
        deleteBtn: {
            isDisabled: true,
            handler: null
        },
        connectBtn: {
            text: function() {
                if ("disconnected" === this.selectedRecord.get("status")) {
                    return _T("vpnc", "connect")
                } else {
                    return _T("vpnc", "disconnect")
                }
            },
            isDisabled: function() {
                if ("" === this.selectedRecord.get("username")) {
                    return true
                }
                return false
            },
            handler: SYNO.SDS.AdminCenter.Network.PPPoE.onConnect
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.PPPoE.onEdit = function() {
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    this.module.stopPolling();
    var a;
    if ("disconnected" === this.selectedRecord.get("status")) {
        a = new SYNO.SDS.AdminCenter.Network.PPPoE.EditDialog({
            module: this.module,
            owner: this.module.appWin
        })
    } else {
        a = new SYNO.SDS.AdminCenter.Network.EditDialog({
            module: this.module,
            owner: this.module.appWin,
            ifname: "pppoe",
            tabs: ["ipv6"]
        })
    }
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
SYNO.SDS.AdminCenter.Network.PPPoE.onConnect = function() {
    var a = SYNO.SDS.AdminCenter.Network.PPPoE.sendCommand;
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    if ("disconnected" === this.selectedRecord.get("status")) {
        if (true === this.selectedRecord.get("guest_enabled")) {
            this.module.appWin.getMsgBox().confirm(_T("pppoe", "pppoe_title"), _T("pppoe", "pppoe_close_guest"), function(b) {
                if ("yes" !== b) {
                    return
                }
                a.apply(this, ["connect"])
            }, this)
        } else {
            a.apply(this, ["connect"])
        }
    } else {
        a.apply(this, ["disconnect"])
    }
};
SYNO.SDS.AdminCenter.Network.PPPoE.sendCommand = function(c) {
    this.sendWebAPI({
        api: "SYNO.Core.Network.PPPoE",
        method: c,
        version: 1,
        params: {
            ifname: "pppoe"
        },
        callback: function() {
            this.module.connectingFlag = false;
            this.module.stopPolling();
            this.module.startPolling()
        },
        scope: this
    });
    if ("connect" === c) {
        this.module.connectingFlag = true;
        var b = this.getTopToolbar().getComponent("connectBtn");
        var a = this.getTopToolbar().getComponent("editBtn");
        b.disable();
        a.disable();
        b.setText(_T("vpnc", "disconnect"));
        this.selectedRecord.set("status", "connecting")
    }
    this.module.stopPolling();
    this.module.startPolling.defer(500, this.module)
};
Ext.define("SYNO.SDS.AdminCenter.Network.PPPoE.EditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.addListener("activate", this.onActivate, this)
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("common", "alt_edit"),
            width: 480,
            height: 260,
            resizable: false,
            layout: "fit",
            items: [this.getPPPoEForm(a)],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, a);
        return b
    },
    getPPPoEForm: function(a) {
        if (!this.panel) {
            this.panel = new SYNO.SDS.AdminCenter.Network.PPPoE.FormPanel({
                module: a.module,
                win: a
            })
        }
        return this.panel
    },
    onApply: function() {
        var b = this.getPPPoEForm().getForm();
        if (!b.isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return false
        }
        this.setStatusBusy();
        this.disable();
        var a = {
            api: "SYNO.Core.Network.PPPoE",
            method: "set",
            version: 1,
            params: {
                configs: [{
                    ifname: "pppoe",
                    real_ifname: b.findField("real_ifname").getValue(),
                    username: b.findField("username").getValue(),
                    password: b.findField("password").getValue(),
                    is_default_gateway: b.findField("is_default_gateway").getValue()
                }]
            },
            callback: this.afterApply,
            scope: this
        };
        if (!b.findField("password").isDirty()) {
            delete a.params.configs[0].password
        }
        this.sendWebAPI(a)
    },
    afterApply: function(a, e, d, b) {
        this.enable();
        this.clearStatusBusy();
        if (!a) {
            SYNO.Debug("Failed to load interface info");
            var c = _T("common", "error_system");
            if (e.error && e.error.code) {
                c = SYNO.API.getErrorString(e.error.code)
            }
            this.setStatusError({
                text: c,
                clear: true
            });
            return false
        }
        this.close()
    },
    onCancel: function() {
        this.close()
    },
    onActivate: function() {
        this.setStatusBusy();
        this.disable();
        this.sendWebAPI({
            api: "SYNO.Core.Network.PPPoE",
            method: "get",
            version: 1,
            params: {
                ifname: "pppoe"
            },
            callback: this.onLoad,
            scope: this
        })
    },
    onLoad: function(a, e, d, c) {
        var b = this.getPPPoEForm();
        if (!a || !e) {
            SYNO.Debug("Failed to load interface info");
            return false
        }
        b.setData(e);
        b.updatePanel();
        this.enable();
        this.clearStatusBusy()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.PPPoE.FormPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        var b = Ext.apply({
            module: a.module,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_displayfield",
                value: _T("pppoe", "pppoe_intr")
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("tcpip", "tcpip_lan_port"),
                name: "real_ifname",
                editable: false,
                store: new Ext.data.SimpleStore({
                    fields: ["ifname", "ifstring"],
                    data: []
                }),
                displayField: "ifstring",
                valueField: "ifname",
                hidden: true
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("pppoe", "pppoe_username"),
                name: "username",
                maxlength: 256,
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("pppoe", "pppoe_password"),
                name: "password",
                maxlength: 256
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_set_as_default_gw"),
                name: "is_default_gateway",
                checked: false
            }, {
                xtype: "syno_checkbox",
                name: "guest_enabled",
                hidden: true
            }]
        }, a);
        this.callParent([b])
    },
    setData: function(a) {
        if (a.devs instanceof Array) {
            var b = this.getForm().findField("real_ifname");
            var c = [];
            a.devs.sort(SYNO.SDS.AdminCenter.Network.Utils.SortFunc);
            Ext.each(a.devs, function(d) {
                c.push([d, SYNO.SDS.Utils.Network.idToString.apply(this, [d])])
            }, this);
            b.getStore().loadData(c)
        }
        if (-1 == a.devs.indexOf(a.real_ifname)) {
            a.real_ifname = a.devs[0]
        }
        this.getForm().setValues(a)
    },
    updatePanel: function() {
        var b = this.getForm().findField("real_ifname");
        var a = b.getStore();
        if (1 !== a.getCount()) {
            b.show()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.CreateWizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("vpnc", "create_profile"),
            resizable: false,
            width: 650,
            height: 500,
            webapi: {
                api: "SYNO.Core.Network.VPN.OpenVPN",
                method: "create",
                version: 1
            },
            fileUpload: true,
            activeStep: "prtltype",
            steps: [this.prtltypeStep = new SYNO.SDS.AdminCenter.Network.VPN.PrtlTypeStep({
                headline: _T("vpnc", "client_type"),
                itemId: "prtltype",
                nextId: "basic"
            }), this.basicStep = new SYNO.SDS.AdminCenter.Network.VPN.BasicStep({
                headline: _T("vpnc", "basic_setting"),
                itemId: "basic",
                nextId: "advance"
            }), this.advanceStep = new SYNO.SDS.AdminCenter.Network.VPN.AdvanceStep({
                headline: _T("vpnc", "adv_setting"),
                itemId: "advance",
                disableNextInDemoMode: true,
                nextId: null,
                getNext: function() {
                    this.owner.onApply();
                    return false
                }
            })]
        }, a);
        return b
    },
    applySetting: function() {
        SYNO.Debug("applySetting");
        var c;
        var b = {};
        var a = this.getStep("prtltype").getValues();
        Ext.apply(b, this.getStep("basic").getForm().getValues());
        Ext.apply(b, this.getStep("advance").getForm().getValues());
        if ("pptp" === a.vpnc_type) {
            c = "SYNO.Core.Network.VPN.PPTP"
        } else {
            if ("l2tp" === a.vpnc_type) {
                c = "SYNO.Core.Network.VPN.L2TP"
            }
        }
        this.sendWebAPI({
            api: c,
            version: 1,
            method: "create",
            params: b,
            callback: function(d, g, f, e) {
                this.clearStatusBusy();
                if (!d) {
                    SYNO.Debug(f);
                    this.setStatusError({
                        text: _T("common", "error_system")
                    });
                    return
                }
                this.close()
            },
            scope: this
        })
    },
    onApply: function() {
        SYNO.Debug("onApply");
        if (this._S("demo_mode")) {
            this.owner.getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        var a = this.getStep("prtltype").getValues();
        if ("pptp" === a.vpnc_type || "l2tp" === a.vpnc_type) {
            this.applySetting()
        } else {
            if ("ovpn" === a.vpnc_type) {
                this.createOVPN()
            }
        }
    },
    createOVPN: function() {
        var a = this.getStep("advance").getForm().getValues();
        this.getStep("basic").createOVPN(a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.PrtlTypeStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        var b = Ext.apply({
            title: _T("vpnc", "app_name"),
            description: _T("vpnc", "select_vpnc_type"),
            trackResetOnLoad: true,
            items: []
        }, a);
        delete b.title;
        b.items.push({
            xtype: "syno_radio",
            boxLabel: _T("vpnc", "type_pptp"),
            name: "vpnc_type",
            indent: 1,
            inputValue: "pptp",
            checked: true
        });
        b.items.push({
            xtype: "syno_radio",
            boxLabel: _T("vpnc", "type_ovpn"),
            name: "vpnc_type",
            indent: 1,
            inputValue: "ovpn"
        });
        b.items.push({
            xtype: "syno_radio",
            boxLabel: _T("vpnc", "type_l2tp"),
            name: "vpnc_type",
            indent: 1,
            inputValue: "l2tp"
        });
        this.callParent([b])
    },
    getValues: function() {
        return this.getForm().getValues()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.BasicStep", {
    extend: "SYNO.SDS.Utils.FormPanel",
    oriConfName: "",
    vpnc_type: "",
    constructor: function(a) {
        var e = 32;
        var g = 256;
        var d = 8;
        var f = 64;
        var c = 256;
        var b = Ext.apply({
            itemId: "panelCrt",
            description: _T("vpnc", "basic_setting_desc"),
            trackResetOnLoad: true,
            fileUpload: true,
            webapi: {
                api: "SYNO.Core.Network.VPN.OpenVPN",
                version: 1,
                method: "create",
                scope: this
            },
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("vpnc", "profile_name"),
                name: "confname",
                width: 350,
                indent: 1,
                allowBlank: false,
                maxlength: e,
                vtype: "alphanum"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("vpnc", "vpn_server"),
                name: "server",
                width: 350,
                indent: 1,
                allowBlank: false,
                maxlength: g,
                vtype: "iporhostname"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("vpnc", "user"),
                name: "user",
                width: 350,
                indent: 1,
                allowBlank: true,
                maxlength: f,
                validator: function(i) {
                    if (i.empty()) {
                        return true
                    }
                    if (Ext.form.VTypes.username_ext(i)) {
                        var h = i.match(/\\/g);
                        if ((h && 1 < h.length) || (0 === i.search(/\\/i)) || ((i.length - 1) == i.search(/\\/i))) {
                            return _JSLIBSTR("vtype", "bad_username")
                        }
                        return true
                    }
                    return _JSLIBSTR("vtype", "bad_username")
                }
            }, {
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("vpnc", "password"),
                name: "pass",
                width: 350,
                indent: 1,
                allowBlank: true,
                maxlength: c
            }, {
                xtype: "syno_textfield",
                width: 350,
                indent: 1,
                textType: "password",
                fieldLabel: _T("vpnc", "pswd_preshared"),
                name: "preshared_key"
            }, {
                xtype: "syno_textfield",
                width: 350,
                indent: 1,
                name: "port",
                fieldLabel: _T("common", "port"),
                maxlength: d,
                allowBlank: false,
                value: "1194",
                vtype: "port"
            }, {
                xtype: "syno_combobox",
                width: 350,
                indent: 1,
                fieldLabel: _T("tcpip", "wireless_protocol"),
                name: "protocol",
                editable: false,
                allowBlank: false,
                store: [
                    ["udp", _T("routerconf", "routerconf_protocol_udp")],
                    ["tcp", _T("routerconf", "routerconf_protocol_tcp")]
                ],
                value: "udp"
            }, {
                xtype: "syno_filebutton",
                width: 350,
                indent: 1,
                fieldLabel: _T("vpnc", "certificate"),
                name: "ca_file"
            }, {
                xtype: "syno_textfield",
                hidden: true,
                name: "compress"
            }, {
                xtype: "syno_textfield",
                hidden: true,
                name: "defgw"
            }, {
                xtype: "syno_textfield",
                hidden: true,
                name: "nat"
            }, {
                xtype: "syno_textfield",
                hidden: true,
                name: "reconnect"
            }]
        }, a);
        this.callParent([b])
    },
    activate: function() {
        this.vpnc_type = this.owner.getStep("prtltype").getValues().vpnc_type;
        var a = this.getForm().findField("ca_file");
        var b = this.getForm().findField("port");
        var e = this.getForm().findField("protocol");
        if ("ovpn" === this.vpnc_type) {
            a.setVisible(true);
            b.setVisible(true);
            e.setVisible(true);
            a.label.show();
            b.label.show();
            e.label.show()
        } else {
            a.setVisible(false);
            b.setVisible(false);
            e.setVisible(false);
            a.label.hide();
            b.label.hide();
            e.label.hide()
        }
        var c = this.getForm().findField("preshared_key");
        if ("l2tp" === this.vpnc_type) {
            c.setVisible(true);
            c.label.show()
        } else {
            c.setVisible(false);
            c.label.hide()
        }
        var d = this.getForm().findField("confname");
        if ("" === d.getValue()) {
            d.setValue("Connection")
        }
        this.getForm().findField("confname").focus(true)
    },
    NameCheckDone: function(a, d, c, b) {
        this.owner.clearStatusBusy();
        if (!a) {
            this.owner.getMsgBox().alert(_T("vpnc", "app_name"), _T("vpnc", "name_conflict"), function() {
                this.getForm().findField("confname").focus(true)
            }, this);
            return
        } else {
            var e = this.getForm().findField("confname").getValue();
            this.oriConfName = e;
            this.owner.goNext(this.nextId)
        }
    },
    getNext: function() {
        var b = this.getForm().findField("confname");
        var a = Ext.util.Format.trim(b.getValue());
        b.setValue(a);
        if (!this.getForm().isValid()) {
            this.owner.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if ("ovpn" == this.vpnc_type && !this.getForm().findField("ca_file").getValue()) {
            this.owner.setStatusError({
                text: _T("vpnc", "ca_no_file"),
                clear: true
            });
            return false
        }
        if ("l2tp" == this.vpnc_type && !this.getForm().findField("preshared_key").getValue()) {
            this.owner.setStatusError({
                text: _T("vpnc", "invalid_psk"),
                clear: true
            });
            return false
        }
        if (this.oriConfName != a) {
            this.owner.setStatusBusy({
                text: _T("common", "loading")
            });
            this.sendWebAPI({
                api: "SYNO.Core.Network.VPN",
                version: 1,
                method: "check",
                params: {
                    confname: a
                },
                callback: this.NameCheckDone,
                scope: this
            });
            return false
        } else {
            return this.nextId
        }
    },
    createOVPN: function(a) {
        this.getForm().setValues(a);
        this.upload()
    },
    onApiSuccess: function() {
        this.owner.clearStatusBusy();
        this.owner.close()
    },
    onApiFailure: function(c, a) {
        this.owner.clearStatusBusy();
        var b = SYNO.API.getErrorString(a);
        this.owner.setStatusError({
            text: b
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.AdvanceStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        var b = Ext.apply(this.configForm({
            itemId: "form"
        }), a);
        this.callParent([b])
    },
    configForm: function(a) {
        var b = Ext.apply({
            xtype: "form",
            description: _T("vpnc", "adv_setting_desc"),
            trackResetOnLoad: true,
            synodefaults: {
                width: 250
            },
            items: [{
                xtype: "syno_combobox",
                width: 350,
                indent: 1,
                fieldLabel: _T("vpnc", "auth"),
                name: "auth",
                editable: false,
                allowBlank: false,
                store: [
                    ["pap", "PAP"],
                    ["chap", "CHAP"],
                    ["mschap", "MS CHAP"],
                    ["mschap2", "MS CHAP v2"]
                ],
                listeners: {
                    select: this.onSelectAuth,
                    scope: this
                }
            }, {
                xtype: "syno_combobox",
                width: 350,
                indent: 1,
                fieldLabel: _T("vpnc", "encrypt"),
                name: "mppe",
                editable: false,
                allowBlank: false,
                store: [
                    ["none", "No MPPE"],
                    ["both", "Require MPPE (40/128 bit)"],
                    ["max", "Maximum MPPE (128 bit)"]
                ]
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("vpnc", "compress"),
                name: "compress",
                checked: false
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("vpnc", "remote_gateway"),
                name: "defgw",
                checked: false
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("vpnc", "internet_sharing"),
                name: "nat",
                checked: false
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("vpnc", "server_behind_nat"),
                name: "behind_nat",
                checked: false
            }, {
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("vpnc", "auto_reconnect"),
                name: "reconnect",
                checked: false
            }]
        }, a);
        return b
    },
    initEvents: function() {
        SYNO.SDS.AdminCenter.Network.VPN.AdvanceStep.superclass.initEvents.apply(this, arguments);
        this.mon(this, "activate", this.onActivate, this)
    },
    onSelectAuth: function(b) {
        var a = b.getValue();
        if ("mschap" === a || "mschap2" === a) {
            this.getForm().findField("mppe").enable()
        } else {
            this.getForm().findField("mppe").disable()
        }
    },
    onActivate: function() {
        var b = {
            auth: "mschap2",
            mppe: "both",
            compress: true,
            defgw: false,
            behind_nat: false,
            nat: false
        };
        var c = this.getForm();
        c.setValues(b);
        var a = this.owner.getStep("prtltype").getValues().vpnc_type;
        if ("pptp" === a) {
            c.findField("auth").enable();
            c.findField("auth").show();
            c.findField("mppe").enable();
            c.findField("mppe").show();
            c.findField("behind_nat").disable();
            c.findField("behind_nat").hide();
            c.findField("compress").disable();
            c.findField("compress").hide()
        } else {
            if ("l2tp" === a) {
                c.findField("auth").enable();
                c.findField("auth").show();
                c.findField("mppe").disable();
                c.findField("mppe").hide();
                c.findField("behind_nat").enable();
                c.findField("behind_nat").show();
                c.findField("compress").disable();
                c.findField("compress").hide()
            } else {
                if ("ovpn" === a) {
                    c.findField("auth").disable();
                    c.findField("auth").hide();
                    c.findField("mppe").disable();
                    c.findField("mppe").hide();
                    c.findField("behind_nat").disable();
                    c.findField("behind_nat").hide();
                    c.findField("compress").enable();
                    c.findField("compress").show()
                }
            }
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Network.VPN");
SYNO.SDS.AdminCenter.Network.VPN.getWebAPI = function() {
    var b = function(e) {
        var d = function(f) {
            return (10 > f) ? "0" + f : f
        };
        var c = function(i) {
            var k = i;
            var g = Math.floor(k / 86400);
            k = k % 86400;
            var f = Math.floor(k / 3600);
            k = k % 3600;
            var h = Math.floor(k / 60);
            var j = k % 60;
            var l = (g > 0) ? g + _T("status", "status_day") + " " : "";
            l += d(f) + ":" + d(h) + ":" + d(j);
            return l
        };
        Ext.each(e, function(h, f, g) {
            g[f].type = "vpnc";
            g[f].real_status = h.status;
            if ("connected" === h.status || "connecting" === h.status) {
                g[f].cls = "net-vpnc-connected"
            } else {
                g[f].cls = "net-vpnc-disconnected"
            }
            if (h.err_msg) {
                if ("disconnected" === h.status) {
                    g[f].status = "connection_failed"
                }
                if (h.err_msg === "error_auth") {
                    h.err_msg = _T("error", "error_auth")
                } else {
                    if (h.err_msg === "err_server_timeout") {
                        h.err_msg = _T("vpnc", "err_server_timeout")
                    } else {
                        if (h.err_msg === "commfail") {
                            h.err_msg = _T("common", "commfail")
                        } else {
                            if (h.err_msg === "err_invalid_ca") {
                                h.err_msg = _T("vpnc", "err_invalid_ca")
                            } else {
                                if (h.err_msg === "err_ipsec_fail") {
                                    h.err_msg = _T("vpnc", "err_ipsec_fail")
                                } else {
                                    if (h.err_msg === "err_l2tp_fail") {
                                        h.err_msg = _T("vpnc", "err_l2tp_fail")
                                    } else {
                                        h.err_msg = _T("common", "commfail")
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ("connected" === h.status) {
                g[f].uptime = c(h.uptime);
                g[f].vpn_gateway = h.vpn_gateway;
                g[f].tx = h.tx + String.format(" bytes");
                g[f].rx = h.rx + String.format(" bytes")
            }
        })
    };
    var a = [{
        api: "SYNO.Core.Network.VPN.PPTP",
        method: "list",
        version: 1,
        params: {
            additional: ["status"]
        },
        callback: b
    }, {
        api: "SYNO.Core.Network.VPN.OpenVPN",
        method: "list",
        version: 1,
        params: {
            additional: ["status"]
        },
        callback: b
    }, {
        api: "SYNO.Core.Network.VPN.L2TP",
        method: "list",
        version: 1,
        params: {
            additional: ["status"]
        },
        callback: b
    }];
    return a
};
SYNO.SDS.AdminCenter.Network.VPN.getTpl = function(b) {
    var a = '<tpl if="values.type==\'vpnc\'"><tpl if="values.err_msg"><tr><td colspan="2" class="syno-network-interfacelist-errmsg">{err_msg}</td></tr></tpl>' + String.format(b, _T("tcpip", "wimax_connected_time"), "{uptime:this.toEmptyDash}") + String.format(b, _T("vpnc", "client_ip"), "{virtual_ip:this.toEmptyDash}") + String.format(b, _T("network", "route_gateway"), "{vpn_gateway:this.toEmptyDash}") + String.format(b, _T("vpnc", "sent"), "{tx:this.toEmptyDash}") + String.format(b, _T("vpnc", "received"), "{rx:this.toEmptyDash}") + "</tpl>";
    return a
};
SYNO.SDS.AdminCenter.Network.VPN.getBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: function() {
                switch (this.selectedRecord.get("real_status")) {
                    case "connecting":
                    case "connected":
                        return true;
                    default:
                        return false
                }
            },
            handler: SYNO.SDS.AdminCenter.Network.VPN.onEdit
        },
        deleteBtn: {
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.VPN.onDelete
        },
        connectBtn: {
            text: function() {
                if ("disconnected" === this.selectedRecord.get("real_status")) {
                    return _T("vpnc", "connect")
                } else {
                    return _T("vpnc", "disconnect")
                }
            },
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.VPN.onConnect
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.VPN.onCreate = function() {
    this.module.stopPolling();
    var c = 16;
    var b = 0;
    for (var d = 0; d < this.module.store.getCount(); d++) {
        var a = this.module.store.getAt(d);
        if (a.data.type === "vpnc") {
            b++
        }
    }
    if (c <= b) {
        this.module.appWin.getMsgBox().alert(_T("common", "create"), _T("vpnc", "alt_max_config"));
        this.module.startPolling();
        return false
    }
    var e = new SYNO.SDS.AdminCenter.Network.VPN.CreateWizard({
        owner: this.module.appWin,
        module: this.module
    });
    e.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    e.open()
};
SYNO.SDS.AdminCenter.Network.VPN.onEdit = function() {
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.VPN.EditDialog({
        module: this.module,
        owner: this.module.appWin,
        confid: this.selectedRecord.get("id"),
        prtl: this.selectedRecord.get("prtl")
    });
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
SYNO.SDS.AdminCenter.Network.VPN.onDelete = function() {
    this.module.stopPolling();
    var c;
    var e = this.selectedRecord.get("id");
    var b = this.selectedRecord.get("prtl");
    var a = this.selectedRecord.get("real_status");
    if (b === "pptp") {
        c = "SYNO.Core.Network.VPN.PPTP"
    } else {
        if (b === "l2tp") {
            c = "SYNO.Core.Network.VPN.L2TP"
        } else {
            if (b === "ovpn") {
                c = "SYNO.Core.Network.VPN.OpenVPN"
            }
        }
    }
    var d = _T("common", "remove_cfrmrmv");
    if (!this.selectedRecord) {
        this.module.appWin.getMsgBox().alert(_T("common", "remove"), _T("vpnc", "alt_no_config_select"));
        return false
    }
    if ("disconnected" !== a) {
        d = _T("vpnc", "remove_connected")
    }
    this.module.appWin.getMsgBox().confirmDelete(_T("common", "remove"), d, function(f) {
        if ("yes" === f) {
            this.sendWebAPI({
                api: c,
                method: "delete",
                version: 1,
                params: {
                    id: e
                },
                callback: function() {
                    this.module.store.remove(this.selectedRecord);
                    this.module.stopPolling();
                    this.module.startPolling()
                },
                scope: this
            })
        }
        this.module.stopPolling();
        this.module.startPolling.defer(500, this.module)
    }, this)
};
SYNO.SDS.AdminCenter.Network.VPN.onConnect = function() {
    var j;
    var b;
    var a = "";
    var c = this.selectedRecord.get("id");
    if ("disconnected" === this.selectedRecord.get("real_status")) {
        a = "connect"
    } else {
        a = "disconnect"
    }
    var h = {
        api: "SYNO.Core.Network.VPN",
        method: a,
        version: 1,
        params: {
            id: c
        },
        callback: function(i, k) {
            if (!i) {
                this.module.appWin.getMsgBox().alert(_T("vpnc", "app_name"), SYNO.API.getErrorString(k))
            }
            this.module.stopPolling();
            this.module.startPolling()
        },
        scope: this
    };
    if ("disconnect" === a) {
        this.sendWebAPI(h);
        this.module.stopPolling();
        this.module.startPolling.defer(500, this.module);
        return
    }
    for (var g = 0; g < this.module.store.getCount(); g++) {
        var e = this.module.store.getAt(g);
        if (e.data.type === "vpnc") {
            var f = e.data.real_status;
            if ("connected" === f) {
                j = e.data.confname
            } else {
                if ("connecting" === f) {
                    b = e.data.confname
                }
            }
        }
    }
    if ("undefined" === typeof(j) && "undefined" === typeof(b)) {
        this.sendWebAPI(h);
        this.module.stopPolling();
        this.module.startPolling.defer(500, this.module)
    } else {
        var d;
        if (b) {
            d = String.format(_T("vpnc", "conflict_connect"), b);
            this.module.appWin.getMsgBox().alert(_T("vpnc", "connect"), d);
            return
        }
        d = String.format(_T("vpnc", "confirm_connect"), j);
        this.module.appWin.getMsgBox().confirm(_T("vpnc", "connect"), d, function(i) {
            if ("yes" === i) {
                this.sendWebAPI(h)
            }
            this.module.stopPolling();
            this.module.startPolling.defer(500, this.module)
        }, this)
    }
};
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.EditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.init()
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("common", "alt_edit"),
            width: 790,
            height: 450,
            resizable: false,
            layout: "fit",
            items: [this.getVPNForm(a)],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                disabled: _S("demo_mode"),
                tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, a);
        return b
    },
    getVPNForm: function(a) {
        if (!this.panel) {
            this.panel = new SYNO.SDS.AdminCenter.Network.VPN.FormPanel({
                module: a.module,
                win: a,
                dialogWin: this
            })
        }
        return this.panel
    },
    onApply: function() {
        var a = this.getVPNForm().getForm();
        if (!a.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (!a.isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return false
        }
        this.setStatusBusy();
        this.disable();
        if (a.findField("confname").isDirty()) {
            this.sendWebAPI({
                api: "SYNO.Core.Network.VPN",
                version: 1,
                method: "check",
                params: {
                    confname: Ext.util.Format.trim(a.findField("confname").getValue())
                },
                callback: this.checkNameDone,
                scope: this
            })
        } else {
            this.doApply()
        }
    },
    checkNameDone: function(d, b, c, a) {
        if (!d) {
            this.module.appWin.getMsgBox().alert(_T("vpnc", "app_name"), _T("vpnc", "name_conflict"), function() {
                this.getVPNForm().getForm().findField("confname").focus(true)
            }, this);
            this.enable();
            this.clearStatusBusy();
            return
        }
        this.doApply()
    },
    doApply: function() {
        var c = this.getVPNForm().getForm();
        var a;
        if (this.prtl === "pptp") {
            a = "SYNO.Core.Network.VPN.PPTP"
        } else {
            if (this.prtl === "l2tp") {
                a = "SYNO.Core.Network.VPN.L2TP"
            } else {
                if (this.prtl === "ovpn") {
                    a = "SYNO.Core.Network.VPN.OpenVPN"
                }
            }
        }
        var b = {
            api: a,
            method: "set",
            version: 1,
            params: c.getValues(),
            callback: this.afterApply,
            scope: this
        };
        this.sendWebAPI(b)
    },
    afterApply: function(a, d, c, b) {
        if (!a) {
            SYNO.Debug("Failed to load interface info");
            return false
        }
        this.enable();
        this.clearStatusBusy();
        this.close()
    },
    onCancel: function() {
        this.close()
    },
    init: function() {
        this.setStatusBusy();
        this.disable();
        var a;
        if (this.prtl === "pptp") {
            a = "SYNO.Core.Network.VPN.PPTP"
        } else {
            if (this.prtl === "l2tp") {
                a = "SYNO.Core.Network.VPN.L2TP"
            } else {
                if (this.prtl === "ovpn") {
                    a = "SYNO.Core.Network.VPN.OpenVPN"
                }
            }
        }
        this.sendWebAPI({
            api: a,
            method: "list",
            version: 1,
            callback: this.onLoad,
            scope: this
        })
    },
    onLoad: function(a, e, d, c) {
        var b = this.getVPNForm();
        if (!a || !e) {
            SYNO.Debug("Failed to load interface info");
            return false
        }
        b.setData(e, this.id);
        this.enable();
        this.clearStatusBusy()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.FormPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(e) {
        var i = 32;
        var b = 256;
        var c = 8;
        var f = 64;
        var h = 256;
        var d = e.win.prtl;
        var g = [{
            xtype: "hidden",
            name: "prtl"
        }, {
            xtype: "hidden",
            name: "id"
        }, {
            xtype: "syno_displayfield",
            width: 350,
            indent: 1,
            fieldLabel: _T("vpnc", "vpn_method"),
            name: "method"
        }, {
            xtype: "syno_textfield",
            width: 350,
            indent: 1,
            fieldLabel: _T("vpnc", "profile_name"),
            name: "confname",
            maxlength: i,
            allowBlank: false,
            vtype: "alphanum"
        }, {
            xtype: "syno_textfield",
            width: 350,
            indent: 1,
            fieldLabel: _T("vpnc", "vpn_server"),
            name: "server",
            maxlength: b,
            allowBlank: false
        }, {
            xtype: "syno_textfield",
            width: 350,
            indent: 1,
            fieldLabel: _T("vpnc", "user"),
            name: "user",
            maxlength: f,
            allowBlank: true,
            validator: function(k) {
                if (k.empty()) {
                    return true
                }
                if (Ext.form.VTypes.username_ext(k)) {
                    var j = k.match(/\\/g);
                    if ((j && 1 < j.length) || (0 === k.search(/\\/i)) || ((k.length - 1) == k.search(/\\/i))) {
                        return _JSLIBSTR("vtype", "bad_username")
                    }
                    return true
                }
                return _JSLIBSTR("vtype", "bad_username")
            }
        }, {
            xtype: "syno_textfield",
            width: 350,
            indent: 1,
            textType: "password",
            fieldLabel: _T("vpnc", "password"),
            name: "pass",
            maxlength: h,
            allowBlank: true
        }];
        if (d === "l2tp") {
            g.push({
                xtype: "syno_textfield",
                width: 350,
                indent: 1,
                textType: "password",
                fieldLabel: _T("vpnc", "pswd_preshared"),
                name: "preshared_key",
                maxlength: h,
                allowBlank: false
            })
        }
        if (d === "pptp" || d === "l2tp") {
            g.push({
                xtype: "syno_combobox",
                width: 350,
                indent: 1,
                fieldLabel: _T("vpnc", "auth"),
                name: "auth",
                editable: false,
                allowBlank: false,
                store: [
                    ["pap", "PAP"],
                    ["chap", "CHAP"],
                    ["mschap", "MS CHAP"],
                    ["mschap2", "MS CHAP v2"]
                ],
                listeners: {
                    select: this.onSelectAuth,
                    scope: this
                }
            })
        }
        if (d === "pptp") {
            g.push({
                xtype: "syno_combobox",
                width: 350,
                indent: 1,
                fieldLabel: _T("vpnc", "encrypt"),
                name: "mppe",
                editable: false,
                allowBlank: false,
                store: [
                    ["none", "No MPPE"],
                    ["both", "Require MPPE (40/128 bit)"],
                    ["max", "Maximum MPPE (128 bit)"]
                ]
            })
        }
        if (d === "ovpn") {
            g.push({
                xtype: "syno_textfield",
                fieldLabel: _T("common", "port"),
                width: 350,
                indent: 1,
                name: "port",
                maxlength: c,
                allowBlank: false,
                value: "1194",
                vtype: "port"
            });
            g.push({
                xtype: "syno_combobox",
                width: 350,
                indent: 1,
                fieldLabel: _T("tcpip", "wireless_protocol"),
                name: "protocol",
                editable: false,
                allowBlank: false,
                store: [
                    ["udp", _T("routerconf", "routerconf_protocol_udp")],
                    ["tcp", _T("routerconf", "routerconf_protocol_tcp")]
                ],
                value: "udp"
            });
            g.push({
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("vpnc", "compress"),
                name: "compress",
                checked: false
            })
        }
        g.push({
            xtype: "syno_checkbox",
            indent: 1,
            boxLabel: _T("vpnc", "remote_gateway"),
            name: "defgw",
            checked: false
        }, {
            xtype: "syno_checkbox",
            indent: 1,
            boxLabel: _T("vpnc", "internet_sharing"),
            name: "nat",
            checked: false
        });
        if (d === "l2tp") {
            g.push({
                xtype: "syno_checkbox",
                indent: 1,
                boxLabel: _T("vpnc", "server_behind_nat"),
                name: "behind_nat",
                checked: false
            })
        }
        g.push({
            xtype: "syno_checkbox",
            indent: 1,
            boxLabel: _T("vpnc", "auto_reconnect"),
            name: "reconnect",
            checked: false
        });
        if (d === "ovpn") {
            this.dialogWin = e.dialogWin;
            g.push(this.configCAFields())
        }
        var a = Ext.apply({
            module: e.module,
            trackResetOnLoad: true,
            items: g
        }, e);
        this.callParent([a])
    },
    configCAFields: function() {
        return [{
            xtype: "syno_button",
            name: "ca_import",
            disabled: _S("demo_mode"),
            tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            id: this.CaBtnId = Ext.id(),
            text: _T("vpnc", "import_ca"),
            indent: 1,
            handler: this.caImportBtn,
            scope: this
        }]
    },
    caImportBtn: function() {
        SYNO.Debug("caImportBtn");
        var a = new SYNO.SDS.AdminCenter.Network.VPN.UploadWin({
            owner: this.dialogWin
        });
        a.open()
    },
    onSelectAuth: function(b) {
        var a = b.getValue();
        if (this.getForm().findField("mppe")) {
            if ("mschap" === a || "mschap2" === a) {
                this.getForm().findField("mppe").enable()
            } else {
                this.getForm().findField("mppe").disable()
            }
        }
    },
    setData: function(d) {
        var c = this.getForm();
        for (var b = 0; b < d.size(); b++) {
            if (d[b].id === this.ownerCt.confid) {
                var a = d[b].prtl;
                var f;
                var e = {};
                if (a === "pptp") {
                    f = _T("vpnc", "type_pptp")
                } else {
                    if (a === "l2tp") {
                        f = _T("vpnc", "type_l2tp")
                    } else {
                        if (a === "ovpn") {
                            f = _T("vpnc", "type_ovpn")
                        }
                    }
                }
                e = {
                    method: f
                };
                c.setValues(Ext.apply(e, d[b]));
                break
            }
        }
        if (c.findField("auth") && c.findField("mppe") && ("pap" === c.findField("auth").getValue() || "chap" === c.findField("auth").getValue())) {
            c.findField("mppe").disable()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.UploadWin", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b;
        this.uploadForm = new SYNO.SDS.AdminCenter.Network.VPN.UploadForm({
            owner: this,
            confid: a.owner.confid
        });
        b = {
            title: _T("vpnc", "import_ca"),
            resizable: false,
            width: 570,
            height: 200,
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.uploadCert,
                disabled: _S("demo_mode"),
                tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
            }, {
                xtype: "syno_button",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.uploadForm]
        };
        Ext.apply(b, a);
        return b
    },
    uploadCert: function() {
        this.uploadForm.uploadCert()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.VPN.UploadForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            fileUpload: true,
            trackResetOnLoad: true,
            hideMode: "offsets",
            frame: false,
            border: false,
            height: 120,
            items: [{
                xtype: "syno_displayfield",
                value: _T("vpnc", "import_ca_desc")
            }, {
                xtype: "syno_filebutton",
                fieldLabel: _T("vpnc", "certificate"),
                name: "ca_file"
            }, {
                xtype: "syno_textfield",
                hidden: true,
                name: "id",
                value: a.confid
            }],
            webapi: {
                api: "SYNO.Core.Network.VPN.OpenVPN.CA",
                method: "upload",
                version: 1
            }
        };
        Ext.apply(b, a);
        return b
    },
    onApiSuccess: function() {
        this.owner.clearStatusBusy();
        this.owner.close()
    },
    onApiFailure: function(c, a) {
        this.owner.clearStatusBusy();
        var b = SYNO.API.getErrorString(a);
        this.owner.setStatusError({
            text: b
        })
    },
    uploadCert: function() {
        if (!this.getForm().findField("ca_file").getValue()) {
            this.owner.setStatusError({
                text: _T("vpnc", "ca_no_file"),
                clear: true
            });
            return
        }
        this.owner.setStatusBusy();
        this.upload()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.USBModem.CreateProfileWizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(c) {
        this.owner = c.owner;
        this.module = c.module;
        this.target = c.target;
        this.apnSimListStore = null;
        this.apnLocationStore = null;
        this.apnISPStore = null;
        var a = [];
        a.push(this.getSelectAPNStep({
            itemId: "apnStep",
            nextId: "settingStep"
        }));
        a.push(this.getSettingStep({
            itemId: "settingStep",
            nextId: "summaryStep"
        }));
        a.push(this.getSummaryStep({
            itemId: "summaryStep",
            nextId: null
        }));
        var b = Ext.apply({
            title: _T("mediaservice", "profile"),
            resizable: false,
            width: 460,
            height: 330,
            steps: a
        }, c);
        this.callParent([b]);
        this.mon(this, "afterlayout", function(d, e) {
            var f;
            f = new SYNO.ux.Utils.EnableRadioGroup(this.getStep("apnStep").getForm(), "method", {
                fromsim: ["simrecord"],
                auto: ["location", "isp"],
                manual: []
            })
        }, this, {
            single: true
        })
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.Network.USBModem.CreateProfileWizard.superclass.onOpen.apply(this, arguments);
        if ("apnStep" === this.getActiveStep().itemId) {
            this.setStatusBusy();
            this.sendWebAPI({
                compound: {
                    stopwhenerror: false,
                    params: [{
                        api: "SYNO.Core.Network.USBModem",
                        method: "get",
                        version: 2,
                        params: {
                            id: this.target
                        }
                    }, {
                        api: "SYNO.Core.Network.USBModem",
                        method: "getapn",
                        version: 1,
                        params: {
                            id: this.target
                        }
                    }]
                },
                scope: this,
                callback: this.loadDone
            })
        }
    },
    loadDone: function(i, e) {
        if (this.isDestroyed) {
            return
        }
        this.clearStatusBusy();
        if (!i || e.has_failed) {
            SYNO.Debug("Failed to get apn list");
            return
        }
        var g = e.result[0].data.profile;
        var d = e.result[1].data;
        var b = e.result[0].data.default_apn_list;
        if (!d) {
            SYNO.Debug("returned apn list is undefined");
            return
        }
        if ("apnStep" === this.getActiveStep().itemId) {
            var h = [];
            var f = [];
            var a = null;
            Ext.each(d, function(j) {
                Ext.each(j.isp, function(k) {
                    Ext.each(k.apn, function(l) {
                        var n = k.name;
                        var m = k.name;
                        if ("" !== l) {
                            n += (" - " + l);
                            m += (" - " + l)
                        }
                        f.push({
                            location: j.id,
                            proto: k.proto,
                            number: k.number,
                            user: k.user,
                            pass: k.pass,
                            apn: k.apn,
                            isp: k.name,
                            ispApn: n,
                            id: m
                        });
                        if ((k.name === g.isp) && (null === a)) {
                            a = m
                        }
                    })
                });
                h.push({
                    id: j.id,
                    country: _T("Country", j.id) ? _T("Country", j.id) : j.location
                })
            });
            this.apnLocationStore.loadData({
                success: true,
                devs: h
            }, false);
            this.apnISPStore.loadData({
                success: true,
                devs: f
            }, false);
            this.apnLocationStore.sort("country", "ASC");
            this.apnISPStore.sort("ispApn", "ASC");
            this.apnSimListStore.loadData({
                success: true,
                devs: b
            }, false);
            this.getStep("settingStep").getForm().setValues(g);
            var c = function(l, j) {
                var k = {};
                k.method = j;
                l.getActiveStep().getForm().setValues(k)
            };
            if (this.isManulProfile(g)) {
                if (this.isSimRecord(g, b)) {
                    c(this, "fromsim");
                    this.getActiveStep().getForm().findField("simrecord").setValue(g.number)
                } else {
                    c(this, "manual")
                }
            } else {
                c(this, "manual")
            }
        }
    },
    onApply: function() {
        var a = {
            target: this.target,
            location: (!this.country) ? this.location : this.country,
            isp: this.ispApn,
            apn: this.apn,
            number: this.number,
            user: this.user,
            pass: this.pass
        };
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "set",
            version: 1,
            params: {
                id: this.target,
                profile: JSON.stringify(a)
            },
            scope: this,
            callback: function(c) {
                if (this.isDestroyed) {
                    return
                }
                if (!c) {
                    this.clearStatusBusy();
                    SYNO.Debug("Failed when setting profile for usbmodem");
                    return
                }
                var b = new Ext.util.DelayedTask(function() {
                    this.clearStatusBusy();
                    this.close()
                }, this);
                b.delay(4000)
            }
        })
    },
    getSelectAPNStep: function(a) {
        var b = Ext.apply({
            headline: _T("network", "usbmodem_isp_setting"),
            description: _T("network", "usbmodem_apn_information"),
            xtype: "form",
            itemId: "apnform",
            trackResetOnLoad: true,
            border: false,
            scope: this,
            items: [{
                xtype: "syno_radio",
                boxLabel: _T("mediaservice", "default_profile"),
                itemId: "method_apnlist",
                name: "method",
                indent: 0,
                inputValue: "fromsim",
                checked: true
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("network", "usbmodem_apn"),
                name: "simrecord",
                id: this.APNSimListConfigId = Ext.id(),
                indent: 1,
                editable: false,
                store: this.apnSimListStore = new Ext.data.JsonStore({
                    autoDestroy: true,
                    root: "devs",
                    fields: ["apn", "number"]
                }),
                displayField: "apn",
                valueField: "number",
                lastQuery: "",
                triggerAction: "all",
                allowBlank: false,
                forceSelection: true,
                mode: "local"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("network", "usbmodem_choose_automatically"),
                itemId: "method_automatically",
                name: "method",
                indent: 0,
                hidden: true,
                inputValue: "auto"
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("network", "usbmodem_location"),
                name: "location",
                id: this.LocationConfigId = Ext.id(),
                indent: 1,
                editable: false,
                store: this.apnLocationStore = new Ext.data.JsonStore({
                    autoDestroy: true,
                    root: "devs",
                    fields: ["id", "country"]
                }),
                displayField: "country",
                valueField: "id",
                lastQuery: "",
                triggerAction: "all",
                allowBlank: false,
                forceSelection: true,
                mode: "local",
                hidden: true,
                listeners: {
                    scope: this,
                    select: function(g, c, e) {
                        this.apnISPStore.filter("location", c.id);
                        var d = this.getActiveStep().getForm().findField("isp");
                        var f = this.apnISPStore.getAt(0).data.id;
                        d.setValue(f)
                    }
                }
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("network", "usbmodem_isp"),
                name: "isp",
                id: this.ISPConfigId = Ext.id(),
                indent: 1,
                editable: false,
                store: this.apnISPStore = new Ext.data.JsonStore({
                    autoDestroy: true,
                    root: "devs",
                    fields: ["id", "apn", "location", "isp", "ispApn", "number", "user", "pass"]
                }),
                tpl: '<tpl for="."><div ext:qtip="{ispApn}" class="x-combo-list-item">{ispApn}</div></tpl>',
                displayField: "ispApn",
                valueField: "id",
                lastQuery: "",
                triggerAction: "all",
                allowBlank: false,
                forceSelection: true,
                hidden: true,
                mode: "local"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("network", "usbmodem_manual"),
                itemId: "method_manually",
                name: "method",
                indent: 0,
                inputValue: "manual"
            }],
            getNext: function() {
                if (!this.getForm().isValid()) {
                    return false
                }
                var c = this.nextId;
                var d = this.getForm().findField("method").getGroupValue();
                if ("auto" === d || "fromsim" === d) {
                    c = "summaryStep"
                }
                return c
            }
        }, a);
        return SYNO.LayoutConfig.fill(b)
    },
    getSettingStep: function(a) {
        var b = Ext.apply({
            headline: _T("network", "usbmodem_setting"),
            description: _T("network", "usbmodem_input_information"),
            xtype: "form",
            itemId: "settingform",
            border: false,
            items: [{
                xtype: "hidden",
                name: "location",
                value: "manual"
            }, {
                xtype: "hidden",
                name: "isp",
                value: "manual"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "usbmodem_apn"),
                maskRe: /[0-9a-zA-Z _]/,
                name: "apn",
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "usbmodem_phone_number"),
                name: "number",
                maskRe: /[0-9\*\#]/,
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "username"),
                name: "user",
                allowBlank: true
            }, {
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("common", "password"),
                name: "pass",
                allowBlank: true,
                maxlength: 256
            }],
            activate: function() {
                return
            },
            getNext: function() {
                if (!this.getForm().isValid()) {
                    return false
                }
                return this.nextId
            }
        }, a);
        return SYNO.LayoutConfig.fill(b)
    },
    getSummaryStep: function(a) {
        var b = Ext.apply({
            headline: _T("inetwizard", "summary_title"),
            description: _T("wizcommon", "summary_descr"),
            xtype: "form",
            itemId: "summaryform",
            border: false,
            items: [{
                xtype: "grid",
                border: false,
                stripeRows: true,
                height: 153,
                columns: [{
                    header: _T("status", "header_item"),
                    width: 100,
                    sortable: false,
                    dataIndex: "name",
                    renderer: function(e, d) {
                        var c = Ext.util.Format.htmlEncode(e);
                        d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                        return c
                    }
                }, {
                    header: _T("status", "header_value"),
                    width: 220,
                    sortable: false,
                    dataIndex: "value",
                    renderer: function(e, d) {
                        var c = Ext.util.Format.htmlEncode(e);
                        d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                        return c
                    }
                }],
                store: this.getSummaryStore()
            }],
            activate: function() {
                this.owner.loadInfo()
            },
            getNext: function() {
                this.owner.onApply();
                return false
            }
        }, a);
        return SYNO.LayoutConfig.fill(b)
    },
    loadInfo: function() {
        var m = this.getStep("apnStep");
        var j = (undefined !== m) ? this.getStep("apnStep").getForm() : undefined;
        if (undefined === j || "manual" === j.findField("method").getGroupValue()) {
            var i = this.getStep("settingStep").getForm();
            this.location = "";
            this.ispApn = "";
            this.isp = "";
            this.apn = i.findField("apn").getValue();
            this.number = i.findField("number").getValue();
            this.user = i.findField("user").getValue();
            this.pass = i.findField("pass").getValue();
            this.country = undefined
        } else {
            if ("fromsim" === j.findField("method").getGroupValue()) {
                var k = j.findField("simrecord");
                var d = k.getValue();
                var l = k.findRecord(k.valueField, d).data.apn;
                this.location = "";
                this.ispApn = "";
                this.isp = "";
                this.apn = l;
                this.number = d;
                this.user = "";
                this.pass = "";
                this.country = undefined
            } else {
                var c = j.findField("location");
                var b = j.findField("isp");
                var g = c.getValue();
                var f = b.getValue();
                var a = this.apnLocationStore.getById(g);
                var h = this.apnISPStore.getById(f);
                this.location = a.data.country;
                this.country = a.data.id;
                this.ispApn = h.data.ispApn;
                this.isp = h.data.isp;
                this.apn = h.data.apn;
                this.number = h.data.number;
                this.user = h.data.user;
                this.pass = h.data.pass
            }
        }
        var e = [{
            id: "location",
            name: _T("network", "usbmodem_location"),
            value: ("" === this.location) ? _T("network", "usbmodem_manual") : this.location
        }, {
            id: "isp",
            name: _T("network", "usbmodem_isp"),
            value: ("" === this.isp) ? _T("network", "usbmodem_manual") : this.isp
        }, {
            id: "apn",
            name: _T("network", "usbmodem_apn"),
            value: this.apn
        }, {
            id: "number",
            name: _T("network", "usbmodem_phone_number"),
            value: this.number
        }, {
            id: "user",
            name: _T("common", "username"),
            value: this.user
        }, {
            id: "pass",
            name: _T("common", "password"),
            value: ("" === this.pass) ? "" : "********"
        }];
        this.store.loadData({
            items: e
        })
    },
    isSimRecord: function(c, b) {
        var a = false;
        Ext.each(b, function(d) {
            if (c.number === d.number && c.apn === d.apn) {
                a = true;
                return false
            }
        });
        return a
    },
    isManulProfile: function(a) {
        return "" === a.location || "Unknown" === a.location || "" === a.isp || "Unknown" === a.isp
    },
    getSummaryStore: function() {
        this.store = new Ext.data.JsonStore({
            autoLoad: false,
            autoDestroy: true,
            root: "items",
            fields: ["id", "name", "value"]
        });
        return this.store
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.USBModem.SimPINUnlockDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var a = Ext.apply({
            title: _T("network", "usbmodem_sim_setting"),
            width: 480,
            height: 300,
            layout: "fit",
            plain: true,
            border: false,
            resizable: false,
            items: [this.configForm()],
            buttons: [{
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onSave
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    configForm: function(b) {
        var a = Ext.apply({
            xtype: "form",
            trackResetOnLoad: true,
            synodefaults: {
                width: 250
            },
            itemId: "pinform",
            items: [{
                xtype: "syno_displayfield",
                value: _T("network", "usbmodem_pin_protect_unlock_desc")
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_textfield",
                vtype: "digit",
                fieldLabel: _T("network", "usbmodem_current_pin"),
                minLength: 4,
                maxLength: 8,
                name: "pin_current",
                allowBlank: false
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("network", "usbmodem_remaining_attempt"),
                name: "pin_remains"
            }]
        }, b);
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    getForm: function() {
        return this.getComponent("pinform").getForm()
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.Network.USBModem.SimPINUnlockDialog.superclass.onOpen.apply(this);
        this.loadStatus(true)
    },
    loadStatus: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "get",
            version: 2,
            params: {
                id: this.record.get("id"),
                siminfo: true
            },
            callback: function(d, c) {
                this.clearStatusBusy();
                if (!d || !c) {
                    this.setStatus(_T("common", "loadsetting_fail"));
                    this.getForm().findField("pin_remains").setValue(String.format('<font class="red-status">{0}</font>', _T("status", "status_not_available")));
                    return
                }
                if (!a) {
                    if ("puk_protect" === c.sim_status) {
                        this.getMsgBox().alert(this.title, _T("network", "usbmodem_applyerror"), this.close, this);
                        return
                    }
                    this.getMsgBox().alert(this.title, _T("network", "usbmodem_error_pin"))
                }
                var b = c;
                if (0 > b.pin_remains) {
                    b.pin_remains = String.format('<font class="red-status">{0}</font>', _T("status", "status_not_available"))
                }
                this.getForm().setValues(b)
            },
            scope: this
        })
    },
    onSave: function() {
        if (!this.getForm().isValid()) {
            return
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "unlocksim",
            version: 1,
            params: Ext.apply({
                id: this.record.get("id")
            }, this.getForm().getValues()),
            callback: function(b, a) {
                this.clearStatusBusy();
                if (!b) {
                    this.loadStatus(false);
                    return
                }
                if ("connectBtn" === this.btnId) {
                    this.fireEvent("doconnect")
                }
                this.close()
            },
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.USBModem.SimPINDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var a = Ext.apply({
            title: _T("network", "usbmodem_sim_setting"),
            width: 480,
            height: 420,
            layout: "fit",
            plain: true,
            border: false,
            resizable: false,
            items: [this.configForm()],
            buttons: [{
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onSave
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a]);
        this.mon(this, "afterlayout", function() {
            var c;
            c = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "pin_new_enabled", ["pin_new", "pin_confirm"]);
            c = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "pin_protected", ["pin_new_enabled"])
        }, this, {
            single: true
        })
    },
    configForm: function(b) {
        var a = Ext.apply({
            trackResetOnLoad: true,
            synodefaults: {
                width: 250
            },
            itemId: "pinform",
            items: [{
                xtype: "syno_displayfield",
                value: _T("network", "usbmodem_input_pin_desc")
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_textfield",
                vtype: "digit",
                fieldLabel: _T("network", "usbmodem_current_pin"),
                name: "pin_current",
                maskRe: /[0-9]/,
                minLength: 4,
                maxLength: 8,
                allowBlank: false
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_pin_protect_enable"),
                name: "pin_protected",
                id: this.PINProtectEnabledId = Ext.id()
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("login", "forget_pass_new_password"),
                name: "pin_new_enabled",
                id: this.PINNewEnabled = Ext.id()
            }, {
                xtype: "syno_textfield",
                textType: "password",
                vtype: "digit",
                fieldLabel: _T("network", "usbmodem_new_pin"),
                name: "pin_new",
                minLength: 4,
                maxLength: 8,
                indent: 1,
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                textType: "password",
                vtype: "digit",
                fieldLabel: _T("network", "usbmodem_confirm_pin"),
                name: "pin_confirm",
                minLength: 4,
                maxLength: 8,
                indent: 1,
                allowBlank: false,
                validator: function(e) {
                    var c = this.ownerCt.getForm().findField("pin_new");
                    var d = c.getValue();
                    if (e !== d) {
                        return _T("pppoe", "error_password")
                    }
                    return true
                }
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("network", "usbmodem_remaining_attempt"),
                name: "pin_remains"
            }]
        }, b);
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    getForm: function() {
        return this.getComponent("pinform").getForm()
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.Network.USBModem.SimPINDialog.superclass.onOpen.apply(this);
        this.loadStatus(true)
    },
    loadStatus: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "get",
            version: 2,
            params: {
                id: this.record.get("id"),
                siminfo: true
            },
            callback: function(d, c) {
                this.clearStatusBusy();
                if (!d || !c) {
                    this.setStatus(_T("common", "loadsetting_fail"));
                    this.getForm().findField("pin_remains").setValue(String.format('<font class="red-status">{0}</font>', _T("status", "status_not_available")));
                    return
                }
                if (!a) {
                    if ("puk_protect" === c.sim_status) {
                        this.getMsgBox().alert(this.title, _T("network", "usbmodem_applyerror"), this.close, this);
                        return
                    }
                    this.getMsgBox().alert(this.title, _T("network", "usbmodem_error_pin"))
                }
                var b = c;
                if (0 > b.pin_remains) {
                    b.pin_remains = String.format('<font class="red-status">{0}</font>', _T("status", "status_not_available"))
                }
                this.getForm().setValues(b)
            },
            scope: this
        })
    },
    onSave: function() {
        var a = this.getForm();
        if (!a.isValid()) {
            return false
        }
        if (!a.findField("pin_protected").isDirty() && !a.findField("pin_new_enabled").isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject")
            });
            return false
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "modifypin",
            version: 1,
            params: Ext.apply({
                id: this.record.get("id")
            }, a.getValues()),
            callback: function(c, b) {
                this.clearStatusBusy();
                if (!c) {
                    this.loadStatus(false);
                    return
                }
                this.close()
            },
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.USBModem.SimPUKDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var a = Ext.apply({
            title: _T("network", "usbmodem_sim_setting"),
            width: 480,
            height: 370,
            layout: "fit",
            plain: true,
            border: false,
            resizable: false,
            items: [this.configForm()],
            buttons: [{
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onSave
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    configForm: function(b) {
        var a = Ext.apply({
            xtype: "form",
            trackResetOnLoad: true,
            synodefaults: {
                width: 250
            },
            itemId: "pukform",
            items: [{
                xtype: "syno_displayfield",
                value: _T("network", "usbmodem_input_puk_desc")
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_textfield",
                vtype: "digit",
                fieldLabel: _T("network", "usbmodem_puk"),
                name: "puk",
                minLength: 4,
                maxLength: 8,
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                textType: "password",
                vtype: "digit",
                fieldLabel: _T("network", "usbmodem_new_pin"),
                name: "pin_new",
                minLength: 4,
                maxLength: 8,
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                textType: "password",
                vtype: "digit",
                fieldLabel: _T("network", "usbmodem_confirm_pin"),
                name: "pin_confirm",
                minLength: 4,
                maxLength: 8,
                allowBlank: false,
                validator: function(e) {
                    var c = this.ownerCt.getForm().findField("pin_new");
                    var d = c.getValue();
                    if (e !== d) {
                        return _T("pppoe", "error_password")
                    }
                    return true
                }
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("network", "usbmodem_remaining_attempt"),
                name: "puk_remains"
            }]
        }, b);
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    setFaildPUKStatus: function() {
        var a = ["puk", "pin_new", "pin_confirm"];
        this.setStatusError(String.format('<font class="red-status">{0}</font>', _T("network", "usbmodem_error_puk_remaining")));
        Ext.each(a, function(b) {
            var c = this.getForm().findField(b);
            c.disable();
            if (Ext.isFunction(c.clearInvalid)) {
                c.clearInvalid()
            }
        }, this)
    },
    getForm: function() {
        return this.getComponent("pukform").getForm()
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.Network.USBModem.SimPUKDialog.superclass.onOpen.apply(this, arguments);
        this.loadStatus(true)
    },
    loadStatus: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "get",
            version: 2,
            params: {
                id: this.record.get("id"),
                siminfo: true
            },
            callback: function(d, c) {
                this.clearStatusBusy();
                if (!a) {
                    if (!d || !c || "puk_protect" !== c.sim_status) {
                        this.setFaildPUKStatus();
                        return
                    }
                    this.getMsgBox().alert(this.title, _T("network", "usbmodem_error_puk"));
                    this.getForm().setValues(c);
                    return
                }
                if (!d || !c) {
                    this.setStatus(_T("common", "loadsetting_fail"));
                    this.getForm().findField("puk_remains").setValue(String.format('<font class="red-status">{0}</font>', _T("status", "status_not_available")));
                    return
                }
                var b = c;
                if (0 > b.puk_remains) {
                    b.puk_remains = String.format('<font class="red-status">{0}</font>', _T("status", "status_not_available"))
                }
                this.getForm().setValues(b)
            },
            scope: this
        })
    },
    onSave: function() {
        if (!this.getForm().isValid()) {
            return
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "unlockpuk",
            version: 1,
            params: Ext.apply({
                id: this.record.get("id")
            }, this.getForm().getValues()),
            callback: function(b, a) {
                this.clearStatusBusy();
                if (!b) {
                    this.loadStatus(false);
                    return
                }
                this.close()
            },
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.USBModem.OptionDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var a = Ext.apply({
            title: _T("common", "webman_options"),
            width: 380,
            height: 220,
            layout: "fit",
            plain: true,
            border: false,
            resizable: false,
            items: [this.configForm()],
            buttons: [{
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onSave
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    configForm: function(b) {
        var a = Ext.apply({
            xtype: "form",
            trackResetOnLoad: true,
            synodefaults: {
                width: 250
            },
            itemId: "optionform",
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_set_as_default_gw"),
                name: "default_gw",
                id: this.DefaultGWEnabledId = Ext.id()
            }, {
                xtype: "syno_displayfield",
                value: _T("network", "usbmodem_set_as_default_gw_desc")
            }]
        }, b);
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    getForm: function() {
        return this.getComponent("optionform").getForm()
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.Network.USBModem.OptionDialog.superclass.onOpen.apply(this, arguments);
        this.loadStatus()
    },
    loadStatus: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "get",
            version: 2,
            params: {
                id: this.record.get("id"),
                siminfo: false
            },
            callback: function(b, a) {
                this.clearStatusBusy();
                if (!b || !a) {
                    this.setStatus(_T("common", "loadsetting_fail"));
                    return
                }
                this.getForm().setValues(a.profile)
            },
            scope: this
        })
    },
    onSave: function() {
        if (!this.getForm().isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject")
            });
            return false
        }
        if (!this.getForm().isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid")
            });
            return false
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.USBModem",
            method: "set",
            version: 1,
            params: {
                id: this.record.get("id"),
                profile: JSON.stringify(this.getForm().getValues())
            },
            callback: function(b, a) {
                this.clearStatusBusy();
                if (!b) {
                    this.setStatus(_T("network", "usbmodem_applyerror"));
                    return
                }
                this.close()
            },
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Network.USBModem");
SYNO.SDS.AdminCenter.Network.USBModem.getWebAPI = function() {
    var a = {
        api: "SYNO.Core.Network.USBModem",
        method: "list",
        version: 1,
        callback: function(b) {
            Ext.each(b, function(e, c, d) {
                d[c].type = "usbmodem";
                d[c].apn = e.profile.apn;
                d[c].roaming = e.profile.roaming;
                d[c].default_gw = e.profile.default_gw;
                if ("no_sim" === e.sim_status) {
                    d[c].signal_lvl = Math.round(e.signal / 20);
                    d[c].status = "disconnected_usbmodem_no_sim"
                } else {
                    if ("mute" === e.sim_status) {
                        d[c].signal_lvl = "NA";
                        d[c].status = e.net_status
                    } else {
                        d[c].signal_lvl = Math.round(e.signal / 20);
                        d[c].status = e.net_status
                    }
                }
                if ("connected" === e.net_status || "connecting" === e.net_status) {
                    d[c].cls = "net-usbmodem-connected"
                } else {
                    d[c].cls = "net-usbmodem-disconnected"
                }
            })
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.USBModem.getTpl = function(c, a) {
    a.PINButtonId = Ext.id();
    a.DefaultGWButtonId = Ext.id();
    var b = new Ext.XTemplate("<tpl if=\"values.type=='usbmodem'\">", String.format(c, _T("network", "usbmodem_signalstrength"), "{signal_lvl:this.getSignal}"), String.format(c, _T("network", "usbmodem_carrier"), "{carrier:this.toEmptyDash}"), String.format(c, _T("network", "usbmodem_apn"), "{apn:this.toEmptyDash}"), String.format(c, _T("bluetooth", "bluetooth_device_name"), "{product:this.toEmptyDash}"), String.format(c, _T("tcpip", "tcpip_ipaddr"), "{ip:this.toEmptyDash}"), String.format(c, _T("network", "usbmodem_roaming"), "{roaming:this.toYesNo}"), "<table><tbody><tr>", '<span id="' + a.PINButtonId + '"></span>', '<span id="' + a.DefaultGWButtonId + '"></span>', "</tr></tbody></table>", "</tpl>");
    return b.html
};
SYNO.SDS.AdminCenter.Network.USBModem.getUSBModemBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: SYNO.SDS.AdminCenter.Network.USBModem.dongleNotReady || SYNO.SDS.AdminCenter.Network.USBModem.hasMute,
            handler: SYNO.SDS.AdminCenter.Network.USBModem.onClickTopToolBtn
        },
        deleteBtn: {
            isDisabled: true,
            handler: null
        },
        connectBtn: {
            text: function() {
                switch (this.selectedRecord.get("status")) {
                    case "preconnecting":
                    case "connected":
                    case "connecting":
                        return _T("vpnc", "disconnect");
                    default:
                        return _T("vpnc", "connect")
                }
            },
            isDisabled: SYNO.SDS.AdminCenter.Network.USBModem.dongleNotReady,
            handler: SYNO.SDS.AdminCenter.Network.USBModem.onClickTopToolBtn
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.USBModem.dongleNotReady = function() {
    return this.selectedRecord && ("no_sim" === this.selectedRecord.get("sim_status") || "preconnecting" === this.selectedRecord.get("status") || "disconnecting" === this.selectedRecord.get("status") || "usbmodem" !== this.selectedRecord.get("type"))
};
SYNO.SDS.AdminCenter.Network.USBModem.hasMute = function() {
    return this.selectedRecord && ("mute" === this.selectedRecord.get("sim_status") || "usbmodem" !== this.selectedRecord.get("type"))
};
SYNO.SDS.AdminCenter.Network.USBModem.onClickTopToolBtn = function(b, a) {
    var c;
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    if (!this.selectedRecord) {
        this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
        SYNO.Debug("No record selected");
        return
    }
    c = this.selectedRecord.get("sim_status");
    switch (c) {
        case "pin_protect":
            SYNO.SDS.AdminCenter.Network.USBModem.onPINProtect.apply(this, arguments);
            break;
        case "ready":
        case "mute":
            if ("editBtn" === b.itemId) {
                SYNO.SDS.AdminCenter.Network.USBModem.onEdit.apply(this)
            } else {
                if ("connectBtn" === b.itemId) {
                    SYNO.SDS.AdminCenter.Network.USBModem.onConnect.apply(this)
                } else {
                    this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
                    SYNO.Debug("Unknown Btn ID [" + b.itemId + "]")
                }
            }
            break;
        case "puk_protect":
            SYNO.SDS.AdminCenter.Network.USBModem.onPUKProtect.apply(this);
            break;
        case "no_sim":
            this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
            SYNO.Debug("No sim card!");
            break;
        default:
            this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
            SYNO.Debug("Unknown sim status [" + c + "]");
            break
    }
};
SYNO.SDS.AdminCenter.Network.USBModem.onEdit = function() {
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.USBModem.CreateProfileWizard({
        owner: this.module.appWin,
        module: this.module,
        target: this.selectedRecord.get("id")
    });
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
SYNO.SDS.AdminCenter.Network.USBModem.onConnect = function() {
    var a = "";
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    this.module.stopPolling();
    this.module.startPolling.defer(500, this.module);
    switch (this.selectedRecord.get("status")) {
        case "connected":
        case "connecting":
            a = "disconnect";
            break;
        default:
            a = "connect";
            break
    }
    this.sendWebAPI({
        api: "SYNO.Core.Network.USBModem",
        method: a,
        version: 1,
        params: {
            id: this.selectedRecord.get("id")
        },
        callback: function() {
            this.module.stopPolling();
            this.module.startPolling()
        },
        scope: this
    });
    SYNO.SDS.AdminCenter.Network.USBModem.setProcessing(this.module.getStore(), a);
    this.renderUSBModemButton()
};
SYNO.SDS.AdminCenter.Network.USBModem.InnerBtnHandler = function(a) {
    var b;
    if (!this.selectedRecord) {
        this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
        SYNO.Debug("No record selected");
        return
    }
    b = this.selectedRecord.get("sim_status");
    switch (b) {
        case "pin_protect":
            SYNO.SDS.AdminCenter.Network.USBModem.onPINProtect.apply(this, arguments);
            break;
        case "ready":
        case "mute":
            if (this.PINBtn.getId() == a.getId()) {
                SYNO.SDS.AdminCenter.Network.USBModem.onSIMReady.apply(this)
            } else {
                if (this.DefaultGWBtn.getId() == a.getId()) {
                    SYNO.SDS.AdminCenter.Network.USBModem.onOption.apply(this)
                } else {
                    this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
                    SYNO.Debug("Unknown btn id [" + a.getId() + "]")
                }
            }
            break;
        case "puk_protect":
            SYNO.SDS.AdminCenter.Network.USBModem.onPUKProtect.apply(this);
            break;
        case "no_sim":
            this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
            SYNO.Debug("No sim card!");
            break;
        default:
            this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_error_system"));
            SYNO.Debug("Unknown sim status [" + b + "]");
            break
    }
};
SYNO.SDS.AdminCenter.Network.USBModem.onPINProtect = function(b) {
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.USBModem.SimPINUnlockDialog({
        owner: this.module.appWin,
        module: this.module,
        btnId: b.itemId,
        record: this.selectedRecord
    });
    a.addListener("doconnect", function() {
        SYNO.SDS.AdminCenter.Network.USBModem.onConnect.apply(this)
    }, this);
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
SYNO.SDS.AdminCenter.Network.USBModem.onSIMReady = function() {
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.USBModem.SimPINDialog({
        owner: this.module.appWin,
        module: this.module,
        record: this.selectedRecord
    });
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
SYNO.SDS.AdminCenter.Network.USBModem.onPUKProtect = function() {
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.USBModem.SimPUKDialog({
        owner: this.module.appWin,
        module: this.module,
        record: this.selectedRecord
    });
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
SYNO.SDS.AdminCenter.Network.USBModem.onOption = function() {
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.USBModem.OptionDialog({
        owner: this.module.appWin,
        module: this.module,
        record: this.selectedRecord
    });
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
SYNO.SDS.AdminCenter.Network.USBModem.setProcessing = function(a, e) {
    var d = a.reader.jsonData;
    var b;
    if (!d) {
        return
    }
    if ("disconnect" === e) {
        b = "disconnecting"
    } else {
        b = "preconnecting"
    }
    for (var c = 0; d.size() > c; c++) {
        if ("usbmodem" === d[c].type) {
            d[c].status = b;
            break
        }
    }
    a.loadData(d)
};
Ext.define("SYNO.SDS.AdminCenter.Network.Bond.CreateWizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(a) {
        this.ifname = "wizard";
        this.owner = a.owner;
        this.module = a.module;
        this.callParent([this.fillConfig(a)]);
        this.addListener("destroy", this.module.startPolling, this.module)
    },
    fillConfig: function(a) {
        this.store = new SYNO.SDS.AdminCenter.Network.InterfaceStore({
            module: this.module,
            autoDestroy: true,
            data: [],
            fields: ["enabled", "id", "status", "ip", "mask", "mtu", "mtu_config", "vlan_id", "use_dhcp", "enable_vlan", "link_status", "speed", "duplex", "ifname", "gateway", "dns", "is_default_gateway"],
            getWebAPIs: function() {
                var c = Ext.apply(SYNO.SDS.AdminCenter.Network.Ethernet.getWebAPI(), {
                    callback: function(d) {
                        if (d[0]) {
                            d[0].enabled = true
                        }
                        if (d[1]) {
                            d[1].enabled = true
                        }
                        SYNO.SDS.AdminCenter.Network.Ethernet.getWebAPI().callback(d)
                    }
                });
                return [c]
            },
            listeners: {
                update: function(c, d, e) {
                    if (Ext.data.Record.EDIT !== e) {
                        return
                    }
                    this.checkState()
                },
                scope: this
            }
        });
        var b = Ext.apply({
            title: _T("network", "linkaggr_enable"),
            resizable: false,
            width: 600,
            height: 550,
            steps: [this.modeStep = new SYNO.SDS.AdminCenter.Network.Bond.ModeStep({
                owner: this.owner,
                win: this
            }), this.linkStep = new SYNO.SDS.AdminCenter.Network.Bond.LinkStep({
                owner: this.owner,
                win: this
            }), this.ipconfigStep = new SYNO.SDS.AdminCenter.Network.Bond.IPConfigStep({
                owner: this.owner,
                win: this
            })]
        }, a);
        return b
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.Network.Bond.CreateWizard.superclass.onOpen.apply(this, arguments);
        SYNO.Debug("onOpen");
        this.store.load({
            scope: this,
            afterload: this.onLoad
        })
    },
    onApply: function() {
        SYNO.Debug("onApply");
        var a = this.getEnabledSlaves();
        var b = this.getIPConfig();
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Bond",
            version: 1,
            method: "create",
            params: {
                ipconfig: b,
                mode: this.modeStep.getForm().findField("mode").getGroupValue(),
                slaves: a
            },
            callback: function(c, h, g, d) {
                if (!c) {
                    this.getMsgBox().alert(_T("network", "linkaggr_enable"), SYNO.API.getErrorString(h.code), function(i) {
                        this.close()
                    }, this);
                    return
                }
                var f = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
                var e = this.findAppWindow().getOpenConfig("cms_self") === true;
                if ((!f || e) && h) {
                    this.removeListener("destroy", this.module.startPolling, this.module);
                    SYNO.SDS.AdminCenter.Network.Utils.Redirect.apply(this, [h.redirect, h.secure, h.ip_list, h.port, h.auth_key, "SYNO.SDS.AdminCenter.Network.Main", 60000])
                }
                this.clearStatusBusy();
                this.enable();
                this.close()
            },
            scope: this
        })
    },
    onClose: function() {
        SYNO.Debug("onClose")
    },
    onLoad: function() {
        SYNO.Debug("onLoad")
    },
    checkState: function() {
        if (this.isSelectTwo()) {
            this.getButton("next").enable()
        } else {
            this.getButton("next").disable()
        }
    },
    isSelectTwo: function() {
        var b = 0;
        for (var a = 0; a < this.store.getCount(); a++) {
            if (this.store.getAt(a).get("enabled")) {
                b += 1
            }
            if (2 <= b) {
                return true
            }
        }
        return false
    },
    getFirstEnabled: function() {
        var a = null;
        for (var b = 0; b < this.store.getCount(); b++) {
            if (this.store.getAt(b).get("enabled")) {
                a = this.store.getAt(b);
                break
            }
        }
        return a
    },
    getEnabledSlaves: function() {
        var a = [];
        this.store.each(function(b) {
            if (true === b.get("enabled")) {
                a.push(b.get("ifname"))
            }
        }, this);
        return a
    },
    getIPConfig: function() {
        var b = this.ipconfigStep.getForm();
        var a = {
            use_dhcp: b.findField("use_dhcp").getValue(),
            enable_vlan: b.findField("enable_vlan").getValue(),
            is_default_gateway: b.findField("is_default_gateway").getValue()
        };
        if (false === a.use_dhcp) {
            a.ip = b.findField("ip").getValue();
            a.mask = b.findField("mask").getValue();
            a.gateway = b.findField("gateway").getValue();
            a.dns = b.findField("dns").getValue()
        }
        if (true === b.findField("enable_jumbo_frame").getValue()) {
            a.mtu = b.findField("mtu_config").getValue()
        } else {
            a.mtu = 1500
        }
        if (true === a.enable_vlan) {
            a.vlan_id = b.findField("vlan_id").getValue()
        }
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.Bond.ModeStep", {
    extend: "SYNO.SDS.AdminCenter.Network.BondModeTab",
    constructor: function(a) {
        this.owner = a.owner;
        var b = Ext.apply({
            headline: _T("network", "linkaggr_mode"),
            itemId: "ModeStep",
            nextId: "LinkStep"
        }, a);
        this.callParent([b])
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.Bond.LinkStep", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var c = this;
        var d = new SYNO.ux.EnableColumn({
            dataIndex: "enabled",
            width: 40,
            align: "center",
            bindRowClick: true
        });
        var b = Ext.apply({
            headline: _T("network", "bond_slaves"),
            itemId: "LinkStep",
            nextId: "IPConfigStep",
            stripeRows: true,
            cls: "without-dirty-red-grid",
            enableHdMenu: false,
            autoExpandColumn: "link_status",
            selectable: false,
            columns: [d, {
                id: "id",
                dataIndex: "id",
                header: _T("common", "name"),
                align: "left",
                sortable: true,
                renderer: function(e) {
                    return SYNO.SDS.Utils.Network.idToString.apply(c, [e, "lan"])
                }
            }, {
                id: "link_status",
                dataIndex: "link_status",
                header: _T("tcpip", "link_status"),
                align: "left",
                sortable: true,
                renderer: function(f, e, g) {
                    return SYNO.SDS.AdminCenter.Network.Utils.GetLinkStatus(g.get("speed"), g.get("duplex"), g.get("mtu"))
                }
            }],
            plugins: [d],
            store: a.win.store
        }, a);
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.Bond.IPConfigStep", {
    extend: "SYNO.SDS.AdminCenter.Network.IPv4Tab",
    constructor: function(a) {
        this.owner = a.owner;
        var b = Ext.apply({
            headline: _T("setupwizard", "netinfo_title"),
            itemId: "IPConfigStep",
            nextId: null,
            disableNextInDemoMode: true,
            getNext: function() {
                if (!this.isValid()) {
                    this.win.setStatusError({
                        text: _T("common", "forminvalid")
                    });
                    return false
                }
                this.win.onApply();
                return false
            }
        }, a);
        this.callParent([b]);
        this.addListener("activate", function() {
            this.onActivate()
        }, this)
    },
    onActivate: function() {
        var a = this.win.getFirstEnabled();
        this.fillContent(a.data)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Network.Bond");
SYNO.SDS.AdminCenter.Network.Bond.getWebAPI = function() {
    var a = {
        api: "SYNO.Core.Network.Bond",
        method: "list",
        version: 1,
        callback: function(b) {
            Ext.each(b, function(e, c, d) {
                if ("connected" === e.status) {
                    d[c].cls = "net-bond-connected"
                } else {
                    d[c].cls = "net-bond-disconnected"
                }
                d[c].slaves.sort(SYNO.SDS.AdminCenter.Network.Utils.SortFunc)
            })
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.Bond.getBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.Bond.onEdit
        },
        deleteBtn: {
            isDisabled: (true === _S("ha_runnign")),
            handler: SYNO.SDS.AdminCenter.Network.Bond.onDelete
        },
        connectBtn: {
            isDisabled: true,
            handler: null
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.Bond.onCreate = function() {
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    if (true === this.module.glusterComputingOrStorage) {
        this.module.getGlusterBox();
        return
    }
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.Bond.CreateWizard({
        owner: this.module.appWin,
        module: this.module
    });
    a.open()
};
SYNO.SDS.AdminCenter.Network.Bond.onEdit = function() {
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.EditDialog({
        module: this.module,
        owner: this.module.appWin,
        ifname: this.selectedRecord.get("ifname"),
        tabs: ["bond_mode", "ipv4", "ipv6", "dhcpserver"]
    });
    a.open()
};
SYNO.SDS.AdminCenter.Network.Bond.onDelete = function() {
    SYNO.Debug("SYNO.SDS.AdminCenter.Network.Bond.onDelete");
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    if (true === this.module.glusterComputingOrStorage) {
        this.module.getGlusterBox();
        return
    }
    this.module.appWin.getMsgBox().confirmDelete(_T("network", "remove_bond"), _T("network", "remove_bond_confirm"), function(a) {
        if ("yes" !== a) {
            return
        }
        this.module.stopPolling();
        this.module.appWin.setStatusBusy({
            text: _T("common", "applying")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Bond",
            version: 1,
            method: "delete",
            params: {
                ifname: this.selectedRecord.get("ifname")
            },
            callback: function(b, g, f, c) {
                this.module.appWin.clearStatusBusy();
                if (!b) {
                    this.module.appWin.getMsgBox().alert(_T("network", "remove_bond"), SYNO.API.getErrorString(g.code));
                    return
                }
                var e = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
                var d = this.findAppWindow().getOpenConfig("cms_self") === true;
                if ((!e || d) && g) {
                    SYNO.SDS.AdminCenter.Network.Utils.Redirect.apply(this, [g.redirect, g.secure, g.ip_list, g.port, g.auth_key]);
                    return
                }
                this.module.startPolling()
            },
            scope: this
        })
    }, this)
};
Ext.ns("SYNO.SDS.AdminCenter.Network.Bridge");
SYNO.SDS.AdminCenter.Network.Bridge.getWebAPI = function() {
    var a = {
        api: "SYNO.Core.Network.Bridge",
        method: "list",
        version: 1,
        callback: function(b) {
            Ext.each(b, function(e, c, d) {
                if ("connected" === e.status) {
                    d[c].cls = "net-lan-connected"
                } else {
                    d[c].cls = "net-lan-disconnected"
                }
            })
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.Bridge.getBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.Bridge.onEdit
        },
        deleteBtn: {
            isDisabled: true,
            handler: null
        },
        connectBtn: {
            isDisabled: true,
            handler: null
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.Bridge.onEdit = function() {
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    this.module.stopPolling();
    var a = new SYNO.SDS.AdminCenter.Network.EditDialog({
        module: this.module,
        owner: this.module.appWin,
        ifname: this.selectedRecord.get("ifname"),
        tabs: ["ipv4", "ipv6"]
    });
    a.open()
};
Ext.ns("SYNO.SDS.AdminCenter.Network.LocalBridge");
SYNO.SDS.AdminCenter.Network.LocalBridge.getWebAPI = function() {
    var a = {
        api: "SYNO.Core.Network.LocalBridge",
        method: "list",
        params: {
            bridge_type: ["local_bridge"]
        },
        version: 1,
        callback: function(b) {
            Ext.each(b, function(e, c, d) {
                e.type = "local_bridge";
                if ("enabled" === e.status) {
                    d[c].cls = "net-local-lan-connected"
                } else {
                    d[c].cls = "net-local-lan-disconnected"
                }
                d[c].ip = e.ap_ip_address;
                d[c].mask = e.ap_netmask;
                d[c].use_dhcp = e.dhcp_enabled
            })
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.LocalBridge.getTpl = function(b) {
    var a = new Ext.XTemplate("<tpl if=\"values.type=='local_bridge'\">", String.format(b, _T("tcpip", "tcpip_ipaddr"), "{ip:this.toEmptyDash}"), String.format(b, _T("tcpip", "tcpip_mask"), "{mask:this.toEmptyDash}"), String.format(b, _T("dhcp_server", "enable_dhcpd"), "{use_dhcp:this.toYesNo}"), "</tpl>");
    return a.html
};
SYNO.SDS.AdminCenter.Network.LocalBridge.getBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.LocalBridge.onEdit
        },
        deleteBtn: {
            isDisabled: true,
            handler: null
        },
        connectBtn: {
            isDisabled: true,
            handler: null
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.LocalBridge.onEdit = function() {
    if (true === this._S("ha_running")) {
        this.module.getHAMsgBox();
        return
    }
    this.module.stopPolling();
    var a;
    if (this._S("version") > 4966) {
        a = new SYNO.SDS.AdminCenter.Network.EditDialog({
            module: this.module,
            owner: this.module.appWin,
            ifname: this.selectedRecord.get("ifname"),
            isLocalBridge: true,
            tabs: ["ipv4", "ipv6", "local_bridge_dhcpserver"]
        })
    } else {
        a = new SYNO.SDS.AdminCenter.Network.EditDialog({
            module: this.module,
            owner: this.module.appWin,
            ifname: this.selectedRecord.get("ifname"),
            isLocalBridge: true,
            tabs: ["ipv4"]
        })
    }
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
Ext.define("SYNO.SDS.AdminCenter.Network.LocalBridge.EditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.addListener("activate", this.onActivate, this)
    },
    fillConfig: function(a) {
        var b = {
            title: _T("common", "alt_edit"),
            width: 600,
            autoHeight: true,
            resizable: false,
            items: this.panel = new SYNO.SDS.AdminCenter.Network.LocalBridge.Panel({
                ifname: a.ifname,
                parentWin: this,
                owner: this.owner
            }),
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        };
        Ext.apply(b, a);
        return b
    },
    onApply: function() {
        if (!this.panel.getForm().isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return
        }
        if (!this.panel.getForm().isValid()) {
            this.setStatusError({
                text: _T("error", "error_bad_field"),
                clear: true
            });
            return
        }
        this.panel.applyData()
    },
    onCancel: function() {
        if (this.panel.getForm().isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    onActivate: function() {
        this.panel.loadData()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.LocalBridge.Panel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.createEnableGroup, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        var b = {
            autoScroll: true,
            height: 400,
            items: this.createLocalBridgeObj()
        };
        Ext.apply(b, a);
        return b
    },
    createLocalBridgeObj: function() {
        var b = this;
        var a = [{
            xtype: "syno_textfield",
            fieldLabel: _T("tcpip", "tcpip_ipaddr"),
            name: "ap_ip_address",
            width: 350,
            indent: 0,
            allowBlank: false,
            maxlength: 15,
            vtype: "v4ip"
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("tcpip", "tcpip_mask"),
            name: "ap_netmask",
            width: 350,
            indent: 0,
            allowBlank: false,
            maxlength: 15,
            vtype: "netmask"
        }, {
            xtype: "syno_displayfield"
        }, {
            xtype: "syno_checkbox",
            boxLabel: _T("dhcp_server", "dhcp_enabled"),
            name: "dhcp_enabled",
            indent: 0
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("dhcp_server", "dhcp_range_start"),
            name: "dhcp_range_begin",
            width: 350,
            indent: 1,
            allowBlank: false,
            maxlength: 15,
            vtype: "v4ip",
            scope: this,
            validator: this.validateIpMask
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("dhcp_server", "dhcp_range_end"),
            name: "dhcp_range_end",
            width: 350,
            indent: 1,
            allowBlank: false,
            maxlength: 15,
            vtype: "v4ip",
            scope: this,
            validator: this.validateIpMask
        }, {
            xtype: "syno_checkbox",
            boxLabel: _T("network", "pppoe_relay_enabled"),
            name: "enable_pppoe_relay"
        }, {
            xtype: "syno_combobox",
            fieldLabel: _T("network", "interface"),
            name: "pppoe_relay_server_config",
            indent: 1,
            editable: false,
            hidden: !SYNO.SDS.Utils.Network.isMultiLan.apply(b),
            store: this.PPPoERelayServerStore = new Ext.data.JsonStore({
                autoDestroy: true,
                root: "devs",
                fields: ["ifname", "ifstring"]
            }),
            displayField: "ifstring",
            valueField: "ifname"
        }, {
            xtype: "syno_checkbox",
            boxLabel: _T("network", "upnp_service_enabled"),
            name: "enable_upnp"
        }, {
            xtype: "syno_combobox",
            fieldLabel: _T("network", "interface"),
            name: "upnp_server_config",
            indent: 1,
            editable: false,
            store: this.UPnPServerStore = new Ext.data.JsonStore({
                autoDestroy: true,
                root: "devs",
                fields: ["ifname", "ifstring"]
            }),
            scope: this,
            displayField: "ifstring",
            valueField: "ifname"
        }];
        return a
    },
    validateIpMask: function(b) {
        var c = this.ownerCt.getForm().findField("ap_ip_address").getValue();
        var a = this.ownerCt.getForm().findField("ap_netmask").getValue();
        if (c && a && !SYNO.SDS.Utils.Network.GatewayMatchIP(b, c, a)) {
            return _T("common", "error_notmatch")
        } else {
            return true
        }
    },
    createEnableGroup: function() {
        var a;
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "dhcp_enabled", ["dhcp_range_begin", "dhcp_range_end"]);
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "enable_pppoe_relay", ["pppoe_relay_server_config"]);
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "enable_upnp", ["upnp_server_config"])
    },
    createAPIArray: function() {
        var a = [this.getLocalBridgeAPI(), this.getPPPoERelayAPI(), this.getUPnPAPI()];
        return a
    },
    getLocalBridgeAPI: function() {
        var a = {
            get: {
                api: "SYNO.Core.Network.LocalBridge",
                method: "get",
                params: {
                    ifname: this.ifname
                },
                version: 1
            },
            set: {
                api: "SYNO.Core.Network.LocalBridge",
                method: "set",
                params: {
                    ifname: this.ifname,
                    config: {
                        ap_ip_address: this.getForm().findField("ap_ip_address").getValue(),
                        ap_netmask: this.getForm().findField("ap_netmask").getValue(),
                        dhcp_enabled: this.getForm().findField("dhcp_enabled").getValue(),
                        dhcp_range_begin: this.getForm().findField("dhcp_range_begin").getValue(),
                        dhcp_range_end: this.getForm().findField("dhcp_range_end").getValue()
                    }
                },
                version: 1
            },
            postReturnData: function(b) {
                if (!b || !b[0]) {
                    return
                }
                this.data = Ext.apply(b[0], this.data)
            },
            isSetNeed: function() {
                var c = ["ap_ip_address", "ap_netmask", "dhcp_enabled", "dhcp_range_begin", "dhcp_range_end"];
                for (var b = 0; b < c.size(); b++) {
                    if (this.getForm().findField(c[b]).isDirty()) {
                        return true
                    }
                }
                return false
            }
        };
        return a
    },
    getPPPoERelayAPI: function() {
        var a = {
            get: {
                api: "SYNO.Core.Network.PPPoE.Relay",
                method: "get",
                version: 1,
                params: {
                    ifname: this.ifname
                }
            },
            set: {
                api: "SYNO.Core.Network.PPPoE.Relay",
                method: "set",
                version: 1,
                params: {
                    ifname: this.ifname,
                    enabled: this.getForm().findField("enable_pppoe_relay").getValue(),
                    server_interface: this.getForm().findField("pppoe_relay_server_config").getValue()
                }
            },
            postReturnData: function(c) {
                if (c.hasOwnProperty("enabled")) {
                    this.data.enable_pppoe_relay = c.enabled
                }
                if (c.hasOwnProperty("server_interface")) {
                    this.data.pppoe_relay_server_config = c.server_interface
                }
                if (c.hasOwnProperty("server_list")) {
                    var d = false;
                    for (var b = 0; b < c.server_list.size(); b++) {
                        if (this.data.pppoe_relay_server_config === c.server_list[b]) {
                            d = true
                        }
                    }
                    if (!d) {
                        this.data.pppoe_relay_server_config = c.server_list[0]
                    }
                    this.PPPoERelayServerStore.loadData({
                        success: true,
                        devs: this.getServerInterfaceMappingList(c.server_list)
                    }, false)
                }
            },
            isSetNeed: function() {
                var c = ["enable_pppoe_relay", "pppoe_relay_server_config"];
                for (var b = 0; b < c.size(); b++) {
                    if (this.getForm().findField(c[b]).isDirty()) {
                        return true
                    }
                }
                return false
            }
        };
        return a
    },
    getUPnPAPI: function() {
        var a = {
            get: {
                api: "SYNO.Core.Network.UPnPServer",
                method: "get",
                version: 1,
                params: {
                    ifname: this.ifname
                }
            },
            set: {
                api: "SYNO.Core.Network.UPnPServer",
                method: "set",
                version: 1,
                params: {
                    ifname: this.ifname,
                    enabled: this.getForm().findField("enable_upnp").getValue(),
                    server_interface: this.getForm().findField("upnp_server_config").getValue()
                }
            },
            postReturnData: function(c) {
                if (c.hasOwnProperty("enabled")) {
                    this.data.enable_upnp = c.enabled
                }
                if (c.hasOwnProperty("server_interface")) {
                    this.data.upnp_server_config = c.server_interface
                }
                if (c.hasOwnProperty("config_list")) {
                    this.data.upnp_server_config_list = c.config_list
                }
                if (c.hasOwnProperty("server_list")) {
                    var d = false;
                    for (var b = 0; b < c.server_list.size(); b++) {
                        if (this.data.upnp_server_config === c.server_list[b]) {
                            d = true
                        }
                    }
                    if (!d) {
                        this.data.upnp_server_config = c.server_list[0]
                    }
                    this.UPnPServerStore.loadData({
                        success: true,
                        devs: this.getServerInterfaceMappingList(c.server_list, this.ifname, c.upnp_server_config_list)
                    }, false)
                }
            },
            isSetNeed: function() {
                var c = ["enable_upnp", "upnp_server_config"];
                for (var b = 0; b < c.size(); b++) {
                    if (this.getForm().findField(c[b]).isDirty()) {
                        return true
                    }
                }
                return false
            }
        };
        return a
    },
    getServerInterfaceMappingList: function(d, b, a) {
        var c = this;
        var f = [];
        var e = [];
        if (a) {
            Ext.each(a, function(g) {
                if (g.inn_ifname !== b) {
                    e.push(g.ext_ifname)
                }
            })
        }
        Ext.each(d, function(g) {
            if (0 > e.indexOf(g)) {
                f.push({
                    ifname: g,
                    ifstring: SYNO.SDS.Utils.Network.idToString.apply(c, [g])
                })
            }
        });
        return f
    },
    loadData: function() {
        var b = this.createAPIArray();
        var c = [];
        for (var a = 0; a < b.length; a++) {
            c.push(b[a].get)
        }
        this.parentWin.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            scope: this,
            compound: {
                stopwhenerror: false,
                params: c
            },
            callback: function(d, g, f, e) {
                this.parentWin.clearStatusBusy();
                if (!d) {
                    return
                }
                Ext.each(g.result, function(j, i, h) {
                    if (!j.success) {
                        SYNO.Debug("Failed on " + j.api + " " + j.method);
                        return
                    }
                    b[i].postReturnData.apply(this, [j.data])
                }, this);
                this.getForm().setValues(this.data)
            }
        })
    },
    applyData: function() {
        var b = this.createAPIArray();
        var c = [];
        for (var a = 0; a < b.length; a++) {
            if (b[a].isSetNeed.apply(this)) {
                c.push(b[a].set)
            }
        }
        this.parentWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            scope: this,
            compound: {
                stopwhenerror: false,
                params: c
            },
            callback: function(d, g, f, e) {
                this.parentWin.clearStatusBusy();
                if (!d) {
                    SYNO.Debug("Failed to saving local bridge info");
                    return
                }
                this.parentWin.close()
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.InterfaceStore", {
    extend: "Ext.data.JsonStore",
    constructor: function(a) {
        this.owner = a.owner;
        var b = Ext.apply({
            fields: ["title", "status", "ifname", "type", "cls", "iconCls", "id", "ip", "ipv6", "mask", "mtu", "mtu_config", "vlan_id", "use_dhcp", "enable_ha_ip", "enable_vlan", "link_status", "speed", "duplex", "mode", "error", "slaves", "real_ifname", "username", "guest_enabled", "carrier", "product", "signal", "signal_lvl", "apn", "roaming", "default_gw", "sim_status", "confname", "prtl", "uptime", "virtual_ip", "vpn_gateway", "tx", "rx", "err_msg", "real_status", "tunnel_enable", "is_default_gateway", "tunnel_isp", "tunnel_auth", "tunnel_username", "tunnel_password", "tunnel_connected", "tunnel_ip"]
        }, a);
        this.callParent([b])
    },
    getWebAPIs: function() {
        if (!this.webapis) {
            this.webapis = [SYNO.SDS.AdminCenter.Network.Bond.getWebAPI(), SYNO.SDS.AdminCenter.Network.Bridge.getWebAPI(), SYNO.SDS.AdminCenter.Network.Ethernet.getWebAPI(), SYNO.SDS.AdminCenter.Network.LocalBridge.getWebAPI(), SYNO.SDS.AdminCenter.Network.USBModem.getWebAPI(), SYNO.SDS.AdminCenter.Network.PPPoE.getWebAPI(), SYNO.SDS.AdminCenter.Network.IPv6Tunnel.getWebAPI()].concat(SYNO.SDS.AdminCenter.Network.VPN.getWebAPI())
        }
        return this.webapis
    },
    load: function(b) {
        var a = null;
        this.callback = b;
        if (!b.scope) {
            SYNO.Debug("no scope");
            return
        }
        if (b.scope.ifname && "wizard" === b.scope.ifname) {
            a = b.scope
        } else {
            a = b.scope.appWin
        }
        a.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: this.getWebAPIs()
            },
            callback: this.onLoad,
            scope: this
        })
    },
    onLoad: function(a, f, e, b) {
        if (this.module.connectingFlag) {
            return
        }
        var d = this.getWebAPIs();
        var c = [];
        if (!a || !f || !f.result) {
            SYNO.Debug("Failed to load interface info");
            return false
        }
        Ext.each(f.result, function(i, g, h) {
            if (!i.data) {
                if (i.api) {
                    SYNO.Debug("Failed to get data from [" + i.api + "]")
                } else {
                    SYNO.Debug("Failed to get data from [" + g + "]")
                }
                return
            }
            d[g].callback(i.data);
            Ext.each(i.data, function(l, j, k) {
                if (!l.id) {
                    if (l.ifname) {
                        k[j].id = l.ifname
                    } else {
                        if (l.interface_name) {
                            k[j].id = l.interface_name
                        }
                    }
                }
            }, this);
            c = c.concat(i.data)
        }, this);
        this.loadData(c, true);
        this.singleSort("id", "ASC");
        this.each(function(g) {
            var h = false;
            Ext.each(c, function(k, i, j) {
                if (k.id === g.get("id")) {
                    h = true
                }
            }, this);
            if (!h) {
                SYNO.Debug("Remove " + g.get("id"));
                this.remove(g)
            }
        }, this);
        if (this.callback && this.callback.afterload && this.callback.afterload instanceof Function) {
            this.callback.afterload.apply(this.callback.scope)
        }
    },
    createSortFunction: function(c, b) {
        b = b || "ASC";
        var a = b.toUpperCase() === "DESC" ? -1 : 1;
        return function(e, d) {
            var k = 0;
            var i = /^([a-z]+)([0-9]*)(\.?)([0-9]*)$/;
            var h = i.exec(e.data[c]);
            var g = i.exec(d.data[c]);
            if (h instanceof Array && g instanceof Array) {
                k = (h[1] > g[1] ? 1 : (h[1] < g[1] ? -1 : 0));
                if (0 === k) {
                    var j = parseInt(h[2], 10) || 0;
                    var f = parseInt(g[2], 10) || 0;
                    k = (j > f ? 1 : (j < f ? -1 : 0))
                }
            }
            return a * k
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.ExpandableListView", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.owner = a.owner;
        var b = Ext.apply({
            innerTpl: this.getInnerTpl(a),
            trackResetOnLoad: false,
            singleSelect: true,
            multiSelect: false,
            cls: "syno-network-interfacelist"
        }, a);
        this.callParent([b]);
        this.addTplRenderer()
    },
    createTpl: function() {
        var a = new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap {cls}">', '<div class="item-summary">', '<div class="item-icon {iconCls}"></div>', "<div>", '<div class="item-title">{title:this.getTitle}</div>', '<div class="item-status">{status:this.getStatus}</div>', "</div>", (this.innerTpl) ? '<div class="item-toggle"><div class="item-toggle-img"></div></div>' : "", "</div>", '<div class="item-detail" style="display:none">', (this.innerTpl) ? this.innerTpl.html : "", "</div>", "</div>", "</tpl>", '<div class="x-clear"></div>');
        return a
    },
    getInnerTpl: function(a) {
        var c = '<td class="syno-network-interfacelist-key">{0}</td>';
        var d = '<td class="syno-network-interfacelist-value">{1}</td>';
        var e = "<tr>" + c + d + "</tr>";
        var b = new Ext.XTemplate('<div class="item-detail-inner">', '<table class="syno-network-interfacelist-row">', SYNO.SDS.AdminCenter.Network.Ethernet.getTpl(e), SYNO.SDS.AdminCenter.Network.LocalBridge.getTpl(e), SYNO.SDS.AdminCenter.Network.PPPoE.getTpl(e), SYNO.SDS.AdminCenter.Network.VPN.getTpl(e), SYNO.SDS.AdminCenter.Network.USBModem.getTpl(e, a.panel), SYNO.SDS.AdminCenter.Network.IPv6Tunnel.getTpl(e), "</table>", "</div>");
        return b
    },
    addTplRenderer: function() {
        var a = this.tpl;
        var b = this;
        a.toYesNo = function(d, c) {
            if (true === d) {
                return _T("common", "yes")
            }
            return _T("common", "no")
        };
        a.toEmptyDash = function(d, c) {
            if (!d || "" === d) {
                return "--"
            }
            return d
        };
        a.toMultiLine = function(d, c) {
            var e = "";
            if (!d || 0 === d.length) {
                return "--"
            }
            Ext.each(d, function(f) {
                e += f + "<br>"
            }, this);
            return e
        };
        a.getLinkStatus = function(d, c) {
            return this.toEmptyDash(SYNO.SDS.AdminCenter.Network.Utils.GetLinkStatus(c.speed, c.duplex, c.mtu, c.error), c)
        };
        a.getTitle = function(e, c) {
            if ("vpnc" == c.type) {
                return ("VPN - " + c.confname)
            } else {
                if ("ipv6tunnel" == c.type) {
                    return _T("tcpip", "ipv6_tsp_tunnel")
                }
            }
            var d = c.id ? c.id : c.ifname;
            return SYNO.SDS.Utils.Network.idToString.apply(b, [d, c.type])
        };
        a.getStatus = function(f, c) {
            var d = {
                connected: _T("network", "status_connected"),
                disconnected: _T("network", "status_disconnected"),
                connection_failed: _T("download", "download_err_network"),
                disconnected_usbmodem_no_sim: _T("network", "usbmodem_no_sim_warning"),
                connection_lost: _T("download", "download_err_network"),
                preconnecting: _T("pppoe", "pppoe_connecting"),
                disconnecting: _T("bluetooth", "state_disconnecting"),
                connecting: _T("pppoe", "pppoe_connecting"),
                enabled: _T("common", "enabled"),
                disabled: _T("common", "disabled")
            };
            var e = {
                connected: "blue-status",
                disconnected: "disable-font",
                connection_failed: "disable-font",
                disconnected_usbmodem_no_sim: "red-status",
                connecting: "blue-status",
                enabled: "blue-status",
                disabled: "disable-font"
            };
            return String.format('<font class="{0}">{1}</font>', e[f], d[f])
        };
        a.getSignal = function(d, c) {
            if ("NA" === d) {
                return '<div class="usbmodem-signal-icon usbmodem-signal-NA">' + _T("network", "usbmodem_signal_na") + "</div>"
            }
            return '<div class="usbmodem-signal-icon usbmodem-signal-' + d + '"></div>'
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.ServiceOrderGridPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.IpType = "ipv4";
        this.GridStore = this.createGridStore();
        this.tbar = new Ext.Toolbar({
            defaultType: "syno_button",
            items: this.configToolBar()
        });
        var a = Ext.apply({
            tbar: this.tbar,
            store: this.GridStore,
            viewConfig: {
                markDirty: false
            },
            columns: [{
                header: _T("network", "interface"),
                dataIndex: "ifname",
                width: 100,
                align: "center",
                renderer: function(g, d, c, h, f, e) {
                    if ("vpn-client" === c.data["class"]) {
                        return "VPN"
                    } else {
                        if ("ipv6tunnel" === c.data["class"]) {
                            return _T("tcpip", "ipv6_tsp_tunnel")
                        } else {
                            return SYNO.SDS.Utils.Network.idToString(g)
                        }
                    }
                }
            }, {
                header: _T("network", "route_gateway"),
                dataIndex: "gateway",
                width: 300,
                align: "center"
            }],
            enableDragDrop: false,
            enableColumnMove: false,
            enableHdMenu: false,
            monitorWindowResize: true,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true,
                listeners: {
                    selectionchange: {
                        fn: this.onChgButtonStatus,
                        buffer: 50,
                        scope: this
                    }
                }
            })
        }, b);
        this.callParent([a])
    },
    onActivate: function(a) {
        this.parentDialog.setStatusBusy({
            text: _T("common", "loading")
        });
        this.onChgButtonStatus();
        this.GridStore.load();
        this.parentDialog.clearStatusBusy()
    },
    configToolBar: function() {
        return [{
            text: _T("common", "up"),
            itemId: "up",
            tooltip: _T("common", "up"),
            scope: this,
            handler: function() {
                this.onMoveRow(true)
            }
        }, {
            text: _T("common", "down"),
            itemId: "down",
            tooltip: _T("common", "down"),
            scope: this,
            handler: function() {
                this.onMoveRow(false)
            }
        }, "->", {
            xtype: "syno_combobox",
            id: this.ipTypeId = Ext.id(),
            editable: false,
            allowBlank: false,
            store: [
                ["ipv4", "IPv4"],
                ["ipv6", "IPv6"]
            ],
            value: "ipv4",
            listeners: {
                scope: this,
                select: this.onTypeChange
            }
        }]
    },
    createGridStore: function() {
        var a = new SYNO.SDS.AdminCenter.Network.ServiceOrderStore({
            module: this.module,
            owner: this
        });
        return a
    },
    onMoveRow: function(a) {
        var d = this.getStore();
        var c = this.getSelectionModel().getSelected();
        var b = d.indexOf(c);
        b += a ? -1 : 1;
        if (b < 0 || b > d.getCount() - 1) {
            return
        }
        d.remove(c);
        d.insert(b, c);
        this.getSelectionModel().selectRecords([c])
    },
    onTypeChange: function(a) {
        this.IpType = a.getValue();
        this.parentDialog.setStatusBusy({
            text: _T("common", "loading")
        });
        this.getStore().load({
            params: {
                iptype: this.IpType,
                type: "wan"
            },
            scope: this
        });
        this.parentDialog.clearStatusBusy();
        return
    },
    onChgButtonStatus: function() {
        var a = this.getSelectionModel().getCount();
        this.setButton("up", 1 === a);
        this.setButton("down", 1 === a)
    },
    getButton: function(c) {
        var b = this.getTopToolbar();
        var a;
        if (b) {
            a = b.getComponent(c)
        }
        return a
    },
    setButton: function(c, a) {
        var b = this.getButton(c);
        if (b) {
            b[a ? "enable" : "disable"]()
        }
    },
    isDirty: function() {
        return this.GridStore.isDirty()
    },
    onApply: function() {
        var b = this.GridStore.getRange();
        var a = [];
        if (!this.isDirty()) {
            this.parentDialog.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return
        }
        this.parentDialog.setStatusBusy({
            text: _T("common", "saving")
        });
        Ext.each(b, function(c) {
            a.push(c.data.ifname)
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Gateway.List",
            method: "set",
            version: 1,
            scope: this,
            params: {
                iptype: this.IpType,
                ifnames: a
            },
            callback: this.onSaveDone
        })
    },
    onSaveDone: function(d, c, b) {
        this.parentDialog.clearStatusBusy();
        var a = _T("common", "error_system");
        if (!d) {
            if (c && c.code) {
                a = SYNO.API.getErrorString(c.code)
            }
            this.parentTab.setStatusError({
                text: a,
                clear: true
            });
            return
        }
        this.parentDialog.close();
        return
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.ServiceOrderStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        var a = Ext.apply({
            api: "SYNO.Core.Network.Router.Gateway.List",
            appWindow: this.owner,
            method: "get",
            baseParams: {
                iptype: "ipv4",
                type: "wan"
            },
            version: 1,
            autoDestroy: true,
            root: "configs",
            fields: ["ifname", "gateway", "class"],
            listeners: {
                load: this.onAfterLoad
            }
        }, b);
        this.callParent([a])
    },
    onAfterLoad: function(b, a, c) {
        if (0 >= a.length) {
            this.owner.getView().el.mask(_T("network", "route_gateway_order_intro"))
        } else {
            this.owner.getView().el.unmask()
        }
    },
    isDirty: function() {
        return (this.getModifiedRecords().length > 0)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.ServiceOrderDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.ServiceOrderGridPanel = new SYNO.SDS.AdminCenter.Network.ServiceOrderGridPanel({
            module: this.module,
            appWin: this.module.appWin,
            owner: this.owner,
            itemId: "ServiceOrderGridPanel",
            parentDialog: this
        });
        var a = Ext.apply({
            title: _T("network", "route_gateway_order"),
            autoDestroy: true,
            width: 400,
            height: 350,
            layout: "fit",
            border: false,
            items: [this.ServiceOrderGridPanel],
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a]);
        this.onActivate()
    },
    onActivate: function() {
        this.ServiceOrderGridPanel.onActivate()
    },
    onApply: function() {
        this.ServiceOrderGridPanel.onApply()
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.InterfaceTab", {
    extend: "Ext.Panel",
    constructor: function(a) {
        if (a.module) {
            this.module = a.module
        }
        this.owner = a.module.appWin;
        this.callParent([this.fillConfig(a)]);
        this.getView().addListener("afterrender", function() {
            if (0 === this.module.getStore().getCount()) {
                this.el.mask(_T("common", "loading"), "x-mask-loading")
            }
        }, this);
        this.addListener("activate", function() {
            this.activated = true;
            this.module.stopPolling();
            this.module.startPolling()
        }, this);
        this.addListener("deactivate", function() {
            this.activated = false
        }, this)
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("network", "interface"),
            layout: "fit",
            tbar: this.getToolbar(),
            items: [this.getView()]
        }, a);
        return b
    },
    getToolbar: function() {
        if (!this.tbar) {
            this.tbar = new Ext.Toolbar({
                defaultType: "syno_button",
                items: [{
                    xtype: "syno_button",
                    text: _T("common", "create"),
                    itemId: "create_dropdown",
                    name: "create_dropdown",
                    disabled: true,
                    menu: new Ext.menu.Menu({
                        cls: "client-menu-cls",
                        items: [{
                            text: _T("network", "create_bond"),
                            scope: this,
                            id: this.createBondBtnId = Ext.id(),
                            handler: SYNO.SDS.AdminCenter.Network.Bond.onCreate,
                            disabled: true,
                            hidden: !SYNO.SDS.Utils.Network.isMultiLan.apply(this)
                        }, {
                            text: _T("vpnc", "create_vpn"),
                            scope: this,
                            id: this.createVPNBtnId = Ext.id(),
                            handler: SYNO.SDS.AdminCenter.Network.VPN.onCreate,
                            hidden: false
                        }]
                    })
                }, {
                    text: _T("common", "alt_edit"),
                    itemId: "editBtn",
                    scope: this,
                    disabled: true,
                    handler: null
                }, {
                    text: _T("common", "delete"),
                    itemId: "deleteBtn",
                    scope: this,
                    disabled: true,
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    handler: null
                }, {
                    text: _T("vpnc", "connect"),
                    itemId: "connectBtn",
                    scope: this,
                    disabled: true,
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    handler: null
                }, {
                    text: _T("network", "route_gateway_order"),
                    itemId: "orderBtn",
                    scope: this,
                    hidden: (this._S("version") < 4966),
                    handler: this.onServiceOrder
                }]
            })
        }
        return this.tbar
    },
    getView: function() {
        if (!this.view) {
            this.view = new SYNO.SDS.AdminCenter.Network.ExpandableListView({
                panel: this,
                owner: this.owner,
                store: this.module.getStore()
            });
            this.view.mon(this.view, "selectionchange", function(a) {
                this.updateSelectedRecord();
                this.updateToolbarStatus();
                this.updateUSBModemButton()
            }, this)
        }
        return this.view
    },
    isUSBModemConnected: function() {
        if (!this.selectedRecord || "usbmodem" !== this.selectedRecord.get("type")) {
            return false
        }
        var a = this.selectedRecord.get("status");
        var b = "preconnected" === a || "connected" === a || "connecting" === a;
        return b
    },
    renderUSBModemButton: function() {
        var c = false;
        var b = false;
        var a = true;
        if (!Ext.get(this.PINButtonId) || !Ext.get(this.DefaultGWButtonId)) {
            return
        }
        c = SYNO.SDS.AdminCenter.Network.USBModem.dongleNotReady.apply(this);
        b = SYNO.SDS.AdminCenter.Network.USBModem.hasMute.apply(this);
        a = this.isUSBModemConnected();
        this.PINBtn = new SYNO.ux.Button({
            renderTo: this.PINButtonId,
            text: _T("network", "usbmodem_sim_setting"),
            disabled: c || b,
            listeners: {
                click: SYNO.SDS.AdminCenter.Network.USBModem.InnerBtnHandler,
                scope: this
            }
        });
        this.DefaultGWBtn = new SYNO.ux.Button({
            renderTo: this.DefaultGWButtonId,
            text: _T("common", "webman_options"),
            disabled: c || a,
            listeners: {
                click: SYNO.SDS.AdminCenter.Network.USBModem.InnerBtnHandler,
                scope: this
            }
        })
    },
    updateUSBModemButton: function() {
        var c = false;
        var b = false;
        var a = true;
        if (!this.PINBtn || !this.DefaultGWBtn) {
            return
        }
        c = SYNO.SDS.AdminCenter.Network.USBModem.dongleNotReady.apply(this);
        b = SYNO.SDS.AdminCenter.Network.USBModem.hasMute.apply(this);
        a = this.isUSBModemConnected();
        this.PINBtn.setDisabled(c || b);
        this.DefaultGWBtn.setDisabled(c || a)
    },
    afterLoad: function() {
        this.updateSelectedRecord();
        this.updateToolbarStatus();
        this.renderUSBModemButton();
        this.enableTopToolbar();
        this.el.unmask()
    },
    enableTopToolbar: function() {
        var a = this.getTopToolbar();
        var b = ["create_dropdown"];
        if (!a) {
            SYNO.Debug("failed to get toptoolbar");
            return
        }
        Ext.each(b, function(d) {
            var c = a.getComponent(d);
            if (c) {
                c.enable()
            }
        }, this)
    },
    updateSelectedRecord: function() {
        var a = this.getView().getSelectedRecords();
        if (a && a[0]) {
            this.selectedRecord = a[0]
        } else {
            this.selectedRecord = null
        }
    },
    updateToolbarStatus: function() {
        var c = ["editBtn", "deleteBtn", "connectBtn"];
        var b = this.getBtnTable();
        var a = null;
        if (this.selectedRecord) {
            a = this.selectedRecord.get("type")
        } else {
            a = "default"
        }
        this.updateCreateBondBtnStatus();
        this.updateCreateVPNBtnStatus();
        Ext.each(c, function(g) {
            var e = this.getTopToolbar().getComponent(g);
            if (e) {
                var d = false;
                var f = "";
                switch (typeof b[a][g].isDisabled) {
                    case "boolean":
                        d = b[a][g].isDisabled;
                        break;
                    case "function":
                        d = b[a][g].isDisabled.apply(this);
                        break;
                    default:
                        SYNO.Debug("no isDisabled");
                        return
                }
                switch (typeof b[a][g].text) {
                    case "string":
                        f = b[a][g].text;
                        break;
                    case "function":
                        f = b[a][g].text.apply(this);
                        break;
                    default:
                        break
                }
                if ("" !== f) {
                    e.setText(f)
                }
                e.setDisabled(d);
                e.handler = b[a][g].handler
            }
        }, this)
    },
    getBtnTable: function() {
        if (this.btnTable) {
            return this.btnTable
        }
        this.btnTable = {
            "default": {
                editBtn: {
                    isDisabled: true,
                    handler: null
                },
                deleteBtn: {
                    isDisabled: true,
                    handler: null
                },
                connectBtn: {
                    isDisabled: true,
                    handler: null
                }
            },
            lan: SYNO.SDS.AdminCenter.Network.Ethernet.getBtnConfig(),
            wan: SYNO.SDS.AdminCenter.Network.Ethernet.getBtnConfig(),
            bond: SYNO.SDS.AdminCenter.Network.Bond.getBtnConfig(),
            bridge: SYNO.SDS.AdminCenter.Network.Bridge.getBtnConfig(),
            local_bridge: SYNO.SDS.AdminCenter.Network.LocalBridge.getBtnConfig(),
            vpnc: SYNO.SDS.AdminCenter.Network.VPN.getBtnConfig(),
            pppoe: SYNO.SDS.AdminCenter.Network.PPPoE.getBtnConfig(),
            usbmodem: SYNO.SDS.AdminCenter.Network.USBModem.getUSBModemBtnConfig(),
            ipv6tunnel: SYNO.SDS.AdminCenter.Network.IPv6Tunnel.getBtnConfig()
        };
        if (this._S("demo_mode")) {
            Ext.iterate(this.btnTable, function(c, a, d) {
                var e = d[c].deleteBtn;
                var b = d[c].connectBtn;
                e.isDisabled = true;
                b.isDisabled = true
            }, this)
        }
        return this.btnTable
    },
    updateCreateBondBtnStatus: function() {
        var a = Ext.getCmp(this.createBondBtnId);
        var b = 0;
        this.module.store.each(function(c) {
            switch (c.get("type")) {
                case "lan":
                case "wan":
                    b += 1;
                    break;
                default:
                    break
            }
        }, this);
        a.setDisabled(2 > b)
    },
    updateCreateVPNBtnStatus: function() {
        return
    },
    onServiceOrder: function(a, b) {
        var c = new SYNO.SDS.AdminCenter.Network.ServiceOrderDialog({
            module: this.module,
            owner: this.module.appWin
        });
        c.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.SimpleIFStore", {
    extend: "Ext.data.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.apiGetIFArray = this.createAPIGetIFArray();
        var a = Ext.apply({
            fields: ["id", "type", "status", "display"]
        }, b);
        this.callParent([a])
    },
    createAPIGetIFArray: function() {
        var a = [{
            webapi: {
                api: "SYNO.Core.Network.Interface",
                method: "list",
                version: 1
            }
        }];
        return a
    },
    loadInterface: function() {
        var b = [];
        for (var a = 0; a < this.apiGetIFArray.length; a++) {
            b.push(this.apiGetIFArray[a].webapi)
        }
        this.owner.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: false,
                params: b
            },
            callback: this.loadIFStore
        })
    },
    loadIFStore: function(c, b, a) {
        if (c) {
            this.fillIFStore(b, a)
        } else {
            this.module.appWin.getMsgBox().alert(_T("common", "note"), _T("common", "commfail"))
        }
    },
    fillIFRecords: function(b) {
        var a = [];
        Ext.each(b, function(d) {
            var c = {};
            c.id = d.ifname;
            c.type = d.type;
            c.status = d.status;
            c.display = SYNO.SDS.Utils.Network.idToString.apply(this.module.appWin, [d.ifname, d.type]);
            a.push(c)
        }, this);
        return a
    },
    fillIFStore: function(e, d) {
        var f = false;
        var a = [];
        for (var c = 0; c < e.result.length; c++) {
            f = false;
            for (var b = 0; b < this.apiGetIFArray.length; b++) {
                if (true === SYNO.ux.Utils.checkApiConsistency(this.apiGetIFArray[b].webapi, e.result[c])) {
                    f = true;
                    break
                }
            }
            if (true !== f) {
                continue
            }
            if (true !== e.result[c].success) {
                this.module.appWin.getMsgBox().alert(_T("common", "note"), _T("common", "commfail"));
                return
            }
            if (d.compound[c].api === "SYNO.Core.Network.Interface") {
                e.result[c].data.sort(SYNO.SDS.AdminCenter.Network.Utils.SortFunc);
                a = this.fillIFRecords(e.result[c].data)
            }
        }
        this.loadData(a, false)
    },
    isDirty: function() {
        return (this.getModifiedRecords().length > 0)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Utils.Dialog.ServPortsGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        if (b.serverPorts) {
            this.serverPorts = b.serverPorts
        }
        this.enabledPorts = [];
        this.serverPorts = [];
        this.nonEditable = [];
        var f = function(k, j) {
            j.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(k) + '"';
            return k
        };
        var g = function(l, k, j) {
            k.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j.data.port_num) + '"';
            return j.data.port_num
        };
        var i = function(k, j) {
            j.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(k) + '"';
            return k
        };
        var c = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["port_id", "name", "port_num", "desc", "protocol", "enabled"],
            data: []
        });
        var d = {
            header: _T("common", "enabled"),
            nonEditable: this.nonEditable,
            dataIndex: "enabled",
            id: "enabled",
            width: 120,
            menuDisabled: true,
            align: "center"
        };
        var e = new SYNO.SDS.AdminCenter.Utils.Dialog.EnableColumn(d);
        var h = new Ext.grid.ColumnModel([e, {
            id: "desc",
            width: 150,
            header: _T("firewall", "firewall_system_port_column_desc"),
            dataIndex: "desc",
            align: "left",
            sortable: true,
            renderer: i
        }, {
            header: _T("firewall", "firewall_ports"),
            dataIndex: "port_num",
            sortable: true,
            renderer: g,
            align: "left",
            width: 150
        }, {
            header: _T("firewall", "firewall_protocol"),
            dataIndex: "name",
            align: "left",
            sortable: true,
            renderer: f,
            width: 150
        }]);
        h.defaultSortable = false;
        var a = {
            ds: c,
            cm: h,
            loadMask: false,
            viewConfig: {
                markDirty: false
            },
            enableColLock: true,
            enableColumnMove: false,
            autoExpandColumn: "desc",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({}),
            plugins: [e]
        };
        this.hdrChkboxColumn = e;
        Ext.apply(a, b);
        SYNO.LayoutConfig.fill(a);
        this.callParent([a])
    },
    setVal: function(a) {
        if ("" === a) {
            this.enabledPorts.length = 0
        } else {
            this.enabledPorts = a.split(",")
        }
        this.getStore().loadData(this.serverPorts, false);
        this.onEnableServices(this.enabledPorts);
        this.hdrChkboxColumn.checkSelectAll(this.getStore())
    },
    onEnableServices: function(f) {
        var d = this.getStore();
        var c = d.getCount();
        var e;
        for (var a = 0; a < f.length; a++) {
            for (var b = 0; b < c; b++) {
                e = d.getAt(b);
                if (f[a] == e.get("port_id")) {
                    e.set("enabled", true);
                    break
                }
            }
        }
        d.commitChanges()
    },
    setNonEditable: function(a) {
        this.getColumnModel().getColumnById("enabled").setNonEditable(a)
    },
    getEnabledPortsProtocol: function() {
        var g = "all";
        var f;
        var e = this.getStore().getCount();
        var c = 0;
        var b = 0;
        var a = 0;
        for (var d = 0; d < e; d++) {
            f = this.getStore().getAt(d);
            if (f.get("enabled")) {
                switch (f.get("protocol")) {
                    case "tcp":
                        c++;
                        break;
                    case "udp":
                        b++;
                        break;
                    default:
                        a++
                }
            }
        }
        if (0 < a || (0 < c && 0 < b)) {
            g = "all"
        } else {
            if (0 < c) {
                g = "tcp"
            } else {
                if (0 < b) {
                    g = "udp"
                }
            }
        }
        return g
    },
    getEnabledPorts: function() {
        var c;
        var d = [];
        var b = this.getStore().getCount();
        for (var a = 0; a < b; a++) {
            c = this.getStore().getAt(a);
            if (c.get("enabled")) {
                d.push(c.get("port_id"))
            }
        }
        this.enabledPorts = d;
        return d.join(",")
    }
});
Ext.define("SYNO.SDS.AdminCenter.Utils.Dialog.EnableColumn", {
    extend: "SYNO.ux.EnableColumn",
    constructor: function(a) {
        this.nonEditable = a.nonEditable;
        this.callParent([a])
    },
    isIgnore: function(c, b) {
        for (var a = 0; a < this.nonEditable.length; a++) {
            if (this.nonEditable[a] === b.get("port_id")) {
                return true
            }
        }
        return false
    },
    setNonEditable: function(a) {
        if ("" === a) {
            this.nonEditable.length = 0;
            return
        } else {
            this.nonEditable = a.split(",")
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Utils.Dialog.ServPortsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.grid = new SYNO.SDS.AdminCenter.Utils.Dialog.ServPortsGrid({
            serverPorts: b.serverPorts
        });
        var a = {
            width: 650,
            height: 430,
            title: _T("firewall", "firewall_system_port_title"),
            layout: "fit",
            items: [this.grid],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        this.callParent([a])
    },
    onApply: function() {
        this.onDumpEnabledPorts();
        this.onDumpEnabledPortsProtocol();
        this.close()
    },
    onDumpEnabledPortsProtocol: function() {
        this.owner.setServicesProtocol(this.grid.getEnabledPortsProtocol())
    },
    onDumpEnabledPorts: function() {
        this.owner.setServices(this.grid.getEnabledPorts())
    },
    setVal: function(a) {
        this.grid.setVal(a)
    },
    onActivate: function() {
        this.callParent(arguments);
        this.grid.getView().onLayout()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Utils.Validator");
SYNO.SDS.AdminCenter.Utils.Validator.MarkPortsExceed = function(d, e, b) {
    var f = d.findField(e).getValue().split(",");
    var a = SYNO.SDS.AdminCenter.Security.Utils.FW_MAX_PORTS_IN_A_RULE;
    if ("TC" === b) {
        a = SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_PORTS_IN_A_RULE
    }
    if (f.length > a) {
        var c = String.format(_T("firewall", "firewall_field_exceed_multiports"), a);
        d.findField(e).markInvalid(c);
        return false
    }
    return true
};
SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField = function(c, a) {
    for (var b = 0; b < a.length; b++) {
        if ("" === c.findField(a[b]).getValue()) {
            c.findField(a[b]).markInvalid(_T("firewall", "firewall_field_blank_alert"));
            return false
        }
    }
    return true
};
SYNO.SDS.AdminCenter.Utils.Validator.ExchgLessThanField = function(b, a, e) {
    var d = parseInt(b.findField(a).getValue(), 10);
    var c = parseInt(b.findField(e).getValue(), 10);
    if (d >= c) {
        b.findField(a).setValue(c);
        b.findField(e).setValue(d)
    }
};
Ext.define("SYNO.SDS.AdminCenter.Network.TcCustomPortsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        var a = {
            width: 560,
            height: 280,
            title: _T("firewall", "firewall_ports_self_defined"),
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.DefineBehaviors()
    },
    createPanel: function() {
        var a = {
            border: false,
            items: [{
                xtype: "syno_combobox",
                name: "protocol",
                labelWidth: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_LABEL_WIDTH + 50,
                fieldLabel: _T("firewall", "firewall_protocol"),
                fields: ["value", "display"],
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                displayField: "display",
                valueField: "value",
                value: "tcp",
                scope: this,
                store: new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["tcp", _T("firewall", "firewall_protocol_tcp")],
                        ["udp", _T("firewall", "firewall_protocol_udp")],
                        ["all", _T("firewall", "firewall_ports_all")]
                    ]
                })
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                labelWidth: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_LABEL_WIDTH,
                fieldLabel: _T("firewall", "firewall_ports") + _T("firewall", "firewall_split_by_common"),
                itemId: "firewall_ports_container",
                defaultMargins: "0 0 0 0",
                items: [{
                    xtype: "syno_radio",
                    name: "self_port_choose",
                    boxLabel: _T("firewall", "firewall_ports") + _T("firewall", "firewall_split_by_common") + _T("common", "colon"),
                    itemId: "firewall_ports",
                    id: this.firewall_ports_id = Ext.id(),
                    width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_LABEL_WIDTH + 50,
                    inputValue: "ports"
                }, {
                    xtype: "syno_textfield",
                    name: "self_ports_value",
                    width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                    validateOnBlur: true,
                    vtype: "fwports"
                }]
            }, {
                xtype: "syno_radio",
                boxLabel: _T("firewall", "firewall_ports_range"),
                name: "self_port_choose",
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_LABEL_WIDTH * 2,
                itemId: "firewall_ports_range",
                id: this.firewall_ports_range_id = Ext.id(),
                inputValue: "ports_range"
            }, {
                xtype: "syno_numberfield",
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                indent: 1,
                labelWidth: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_LABEL_WIDTH + 50,
                fieldLabel: _T("ftp", "ftp_port_from"),
                validateOnBlur: true,
                name: "self_ports_range_from",
                maxlength: 5,
                vtype: "port"
            }, {
                xtype: "syno_numberfield",
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                indent: 1,
                labelWidth: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_LABEL_WIDTH + 50,
                fieldLabel: _T("ftp", "ftp_port_to"),
                validateOnBlur: true,
                name: "self_ports_range_to",
                maxlength: 5,
                vtype: "port"
            }]
        };
        return new SYNO.ux.FormPanel(a)
    },
    DefineBehaviors: function() {
        this.enableRadioGroipDummy = new SYNO.ux.Utils.EnableRadioGroup(this.form, "self_port_choose", {
            ports_range: ["self_ports_range_from", "self_ports_range_to"],
            ports: ["self_ports_value"]
        });
        this.radioPortsRange = Ext.getCmp(this.firewall_ports_range_id);
        this.radioPorts = Ext.getCmp(this.firewall_ports_id)
    },
    onApply: function() {
        if (!this.validateForm(this.form)) {
            return
        }
        this.owner.setCustom(this.getValue());
        this.close()
    },
    validateForm: function(a) {
        var b = a.findField("self_port_choose").getGroupValue();
        if (!a.isValid()) {
            return false
        }
        if ("ports" == b) {
            if (!SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(a, ["self_ports_value"]) || !SYNO.SDS.AdminCenter.Utils.Validator.MarkPortsExceed(a, "self_ports_value", "TC")) {
                return false
            }
        } else {
            if ("ports_range" == b) {
                SYNO.SDS.AdminCenter.Utils.Validator.ExchgLessThanField(a, "self_ports_range_from", "self_ports_range_to");
                if (!SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(a, ["self_ports_range_from", "self_ports_range_to"])) {
                    return false
                }
            }
        }
        return true
    },
    getSelfPorts: function() {
        var b = this.form.findField("self_port_choose").getGroupValue();
        var a = "";
        if ("ports" == b) {
            a = this.form.findField("self_ports_value").getValue()
        } else {
            if ("ports_range" == b) {
                a = String.format("{0}-{1}", this.form.findField("self_ports_range_from").getValue(), this.form.findField("self_ports_range_to").getValue())
            }
        }
        return a
    },
    getValue: function() {
        var a = {
            protocol: "",
            port_num: ""
        };
        a.protocol = this.form.findField("protocol").getValue();
        a.port_num = this.getSelfPorts();
        return a
    },
    setValue: function(a, b) {
        var d = "";
        var c = "";
        if (a.indexOf("-") > 0) {
            d = a.split("-")[0];
            c = a.split("-")[1];
            this.form.findField("self_port_choose").setValue("ports_range");
            this.form.findField("self_ports_range_from").setValue(d);
            this.form.findField("self_ports_range_to").setValue(c)
        } else {
            this.form.findField("self_port_choose").setValue("ports");
            this.form.findField("self_ports_value").setValue(a)
        }
        this.form.findField("protocol").setValue(b)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.TcRuleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.portInfo = b.portInfo;
        this.direction = b.direction;
        this.winHeight = b.winHeight;
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        this.tips = {
            tc_rate_max: {
                info: _T("firewall", "firewall_tc_rate_desc")
            }
        };
        var a = {
            dsmStyle: "v5",
            width: 630,
            height: this.winHeight,
            resizable: false,
            title: _T("firewall", "firewall_tc_rule_add"),
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onUpdateRuleGrid
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }],
            tips: this.tips
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.DefineBehaviors()
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            for (var a in this.tips) {
                if (this.tips.hasOwnProperty(a)) {
                    SYNO.SDS.Utils.AddTip(this.form.findField("tc_rate_max").getEl(), this.tips[a].info)
                }
            }
        }, this, {
            single: true
        })
    },
    DefineBehaviors: function() {
        this.btnChoose = Ext.getCmp(this.btnChooseId);
        this.btnSelfDefine = Ext.getCmp(this.btnSelfDefineId);
        this.btnSrcDefine = Ext.getCmp(this.btnSrcDefineId)
    },
    createPanel: function() {
        var e = [{
            xtype: "syno_radio",
            itemId: "firewall_ports_all",
            boxLabel: _T("firewall", "firewall_ports_all"),
            name: "ports",
            inputValue: "all",
            checked: true,
            scope: this,
            handler: this.onCheckPorts
        }, {
            xtype: "syno_compositefield",
            hideLabel: true,
            id: this.servPortFieldID = Ext.id(),
            items: [{
                xtype: "syno_radio",
                itemId: "firewall_ports_system",
                boxLabel: _T("firewall", "firewall_ports_system"),
                name: "ports",
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH * 1.7,
                inputValue: "system",
                checked: false,
                scope: this,
                handler: this.onCheckPorts
            }, {
                xtype: "syno_button",
                text: _T("common", "choose"),
                scope: this,
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                id: this.btnChooseId = Ext.id(),
                handler: function(h, g) {
                    var i = new SYNO.SDS.AdminCenter.Utils.Dialog.ServPortsDialog({
                        module: this.module,
                        owner: this,
                        serverPorts: this.portInfo
                    });
                    i.setVal(this.serviceChoose);
                    i.open()
                }
            }]
        }, {
            xtype: "syno_compositefield",
            itemId: "custom_ports_fieldset",
            hideLabel: true,
            items: [{
                xtype: "syno_radio",
                boxLabel: _T("firewall", "firewall_ports_self_defined"),
                name: "ports",
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH * 1.7,
                checked: false,
                inputValue: "self-defined",
                scope: this,
                handler: this.onCheckPorts
            }, {
                xtype: "syno_button",
                id: this.btnSelfDefineId = Ext.id(),
                text: _T("firewall", "firewall_ports_self_defined"),
                scope: this,
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                handler: function(i, h) {
                    var g = new SYNO.SDS.AdminCenter.Network.TcCustomPortsDialog({
                        module: this.module,
                        owner: this
                    });
                    g.setValue(this.customVal.port_num, this.customVal.protocol);
                    g.open()
                }
            }]
        }];
        var f = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_ports"),
            itemId: "firewall_ports",
            hideLabel: true,
            items: e
        };
        var b = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_tc_bandwidth_settings"),
            itemId: "bandwidth_settings",
            items: [{
                xtype: "syno_numberfield",
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                labelWidth: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH * 1.7,
                fieldLabel: _T("firewall", "firewall_tc_rate_min"),
                name: "tc_rate_min",
                itemId: "tc_rate_min",
                maxlength: 6,
                vtype: "number"
            }, {
                xtype: "syno_numberfield",
                width: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH,
                labelWidth: SYNO.SDS.AdminCenter.Network.Utils.TC_DEFAULT_INPUT_WIDTH * 1.7,
                fieldLabel: _T("firewall", "firewall_tc_rate_max"),
                name: "tc_rate_max",
                itemId: "tc_rate_max",
                maxlength: 6
            }]
        };
        var d = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_source"),
            itemId: "firewall_source",
            id: this.ipFieldID = Ext.id(),
            items: [{
                xtype: "syno_radio",
                name: "source",
                itemId: "firewall_ports_all",
                boxLabel: _T("firewall", "firewall_ports_all"),
                inputValue: "all",
                scope: this,
                checked: true,
                handler: this.onCheckSrc
            }, {
                xtype: "syno_compositefield",
                itemId: "specific_source_fieldset",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    name: "source",
                    boxLabel: _T("firewall", "firewall_specific_ip"),
                    inputValue: "specific_source",
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                    scope: this,
                    handler: this.onCheckSrc
                }, {
                    xtype: "syno_button",
                    id: this.btnSrcDefineId = Ext.id(),
                    text: _T("common", "choose"),
                    scope: this,
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                    handler: function(h, g) {
                        var i = new SYNO.SDS.AdminCenter.Security.FwSrcIpDialog({
                            module: this.module,
                            owner: this,
                            GridStore: this.GridStore
                        });
                        i.open(this.source_ip)
                    }
                }]
            }]
        };
        var c = [f, d, b];
        var a = {
            border: false,
            width: 600,
            height: 450,
            items: c
        };
        return new SYNO.ux.FormPanel(a)
    },
    onOpen: function() {
        this.setStatusBusy();
        var b;
        var a = this.module.getPanel().getActiveTab();
        this.setDefault();
        if ("add" == this.mode) {
            this.setTitle(_T("firewall", "firewall_tc_rule_add"))
        } else {
            if ("edit" == this.mode) {
                this.setTitle(_T("firewall", "firewall_tc_rule_edit"));
                b = a.getSelectionModel().getSelected();
                this.setValue(b)
            }
        }
        this.onCheckPorts();
        this.onCheckSrc(this.panel.getForm().findField("source"));
        this.gridRules = a;
        this.clearStatusBusy();
        this.callParent(arguments)
    },
    setDefault: function() {
        this.customVal = {
            port_num: "",
            protocol: "tcp"
        };
        this.source_ip = "";
        this.source_subnet_mask = "";
        this.serviceChoose = "";
        this.ruleRecord = new SYNO.SDS.AdminCenter.Network.Utils.TcRULERecord({
            id: 0,
            enabled: true,
            port_type: "",
            port_num: "",
            protocol: "",
            minrate: -1,
            maxrate: -1
        });
        this.ipDirection = "dest";
        this.portDirection = "src";
        Ext.getCmp(this.ipFieldID).hide()
    },
    getRecordInForm: function() {
        var d;
        var c;
        var b;
        var a;
        var e;
        var f;
        c = this.getPorts();
        b = this.getRate();
        a = this.getIpDirection();
        f = this.getPortDirection();
        e = this.getSrc();
        d = new SYNO.SDS.AdminCenter.Network.Utils.TcRULERecord({
            id: this.ruleRecord.get("id"),
            enabled: this.ruleRecord.get("enabled"),
            port_type: c.port_type,
            port_num: c.port_num,
            protocol: c.protocol,
            minrate: b.min,
            maxrate: b.max,
            source: e,
            ip_direction: a,
            port_direction: f
        });
        return d
    },
    onUpdateRuleGrid: function() {
        var a;
        var b;
        var c = this.gridRules.GridStore;
        if (!this.validateForm(this.form)) {
            return
        }
        a = this.getRecordInForm();
        if ("add" == this.mode) {
            c.add(a)
        } else {
            if ("edit" == this.mode) {
                b = this.gridRules.getSelectionModel().getSelected();
                b.set("enabled", a.get("enabled"));
                b.set("port_type", a.get("port_type"));
                b.set("port_num", a.get("port_num"));
                b.set("protocol", a.get("protocol"));
                b.set("minrate", a.get("minrate"));
                b.set("maxrate", a.get("maxrate"));
                b.set("source", a.get("source"));
                b.set("ip_direction", a.get("ip_direction"));
                b.set("port_direction", a.get("port_direction"))
            }
        }
        this.close()
    },
    setValue: function(a) {
        this.ruleRecord = a;
        this.setPorts(a.get("port_type"), a.get("port_num"), a.get("protocol"));
        this.setRate(a.get("minrate"), a.get("maxrate"));
        this.setDirection(a.get("ip_direction"), a.get("port_direction"));
        this.setSrc(a.get("source"))
    },
    setRate: function(b, a) {
        this.form.findField("tc_rate_min").setValue(b);
        this.form.findField("tc_rate_max").setValue(a)
    },
    getRate: function() {
        var a = {
            min: "",
            max: ""
        };
        a.min = this.form.findField("tc_rate_min").getValue();
        a.max = this.form.findField("tc_rate_max").getValue();
        return a
    },
    setPorts: function(b, a, c) {
        var d = "";
        if ("ALL" == b) {
            d = "all"
        } else {
            if ("SYS" == b) {
                d = "system";
                this.serviceChoose = a
            } else {
                if ("SELF" == b) {
                    d = "self-defined";
                    this.customVal = {
                        port_num: a,
                        protocol: c
                    }
                } else {
                    return
                }
            }
        }
        this.form.findField("ports").setValue(d);
        this.setServicesProtocol(c)
    },
    getPorts: function() {
        var c = this.form.findField("ports").getGroupValue();
        var a = {
            port_type: "",
            port_num: "",
            protocol: ""
        };
        var b = "";
        a.protocol = "";
        if ("all" == c) {
            a.port_type = "ALL";
            a.protocol = "all"
        } else {
            if ("system" == c) {
                a.port_type = "SYS";
                a.port_num = this.getServices();
                a.protocol = this.getServicesProtocol()
            } else {
                if ("self-defined" == c) {
                    b = this.getCustom();
                    a.port_type = "SELF";
                    a.port_num = b.port_num;
                    a.protocol = b.protocol
                }
            }
        }
        return a
    },
    getSrc: function() {
        var a;
        var b = this.form.findField("source").getGroupValue();
        if ("all" == b) {
            a = "all"
        } else {
            if ("subnet" == b) {
                a = String.format("{0}/{1}", this.srouce_ip, this.source_subnet_mask)
            } else {
                a = this.source_ip
            }
        }
        return a
    },
    setSrc: function(d) {
        var c = "";
        var a = "";
        var e = "";
        if (!d) {
            d = "all"
        }
        if (d === "all") {
            this.source_ip = "all";
            e = "all"
        } else {
            if (d.indexOf("-") > 0) {
                this.source_ip = d;
                e = "specific_source"
            } else {
                if (d.indexOf("/") > 0) {
                    var b = d.split("/");
                    c = b[0];
                    a = b[1];
                    this.source_ip = d;
                    this.source_subnet_mask = a;
                    e = "specific_source"
                } else {
                    this.source_ip = d;
                    e = "specific_source"
                }
            }
        }
        this.form.findField("source").setValue(e)
    },
    onCheckSrc: function(a) {
        if (!a.checked) {
            return
        }
        if ("specific_source" === a.value) {
            this.btnSrcDefine.enable()
        } else {
            this.btnSrcDefine.disable()
        }
        return
    },
    setDirection: function(b, a) {
        if ("" !== b) {
            this.ipDirection = b
        }
        if ("" !== a) {
            this.portDirection = a
        }
    },
    getIpDirection: function() {
        return this.ipDirection
    },
    getPortDirection: function() {
        return this.portDirection
    },
    getServices: function() {
        return this.serviceChoose
    },
    setServices: function(a) {
        this.serviceChoose = a
    },
    getServicesProtocol: function() {
        return this.servicesProtocol
    },
    setServicesProtocol: function(a) {
        this.servicesProtocol = a
    },
    getCustom: function() {
        return this.customVal
    },
    setCustom: function(a) {
        this.customVal = a
    },
    onCheckPorts: function() {
        var a = this.panel.getForm().findField("ports").getGroupValue();
        if ("system" == a) {
            this.btnChoose.enable()
        } else {
            this.btnChoose.disable()
        }
        if ("self-defined" == a) {
            this.btnSelfDefine.enable()
        } else {
            this.btnSelfDefine.disable()
        }
    },
    validateBlank: function(b) {
        var a = b.findField("ports").getGroupValue();
        var c = b.findField("source").getGroupValue();
        if ("system" == a && "" === this.serviceChoose) {
            this.getMsgBox().alert(_T("firewall", "firewall_tc"), _T("firewall", "firewall_no_choose_service"));
            return false
        } else {
            if ("self-defined" == a && "" === this.customVal.port_num) {
                this.getMsgBox().alert(_T("firewall", "firewall_tc"), _T("firewall", "firewall_no_set_ports"));
                return false
            }
        }
        if ("all" !== c && "" === this.source_ip) {
            this.getMsgBox().alert(_T("firewall", "firewall_tc"), _T("firewall", "firewall_no_set_ip"));
            return false
        }
        return true
    },
    validateForm: function(c) {
        var a = c.findField("tc_rate_min").getValue();
        var b = c.findField("tc_rate_max").getValue();
        if (!c.isValid()) {
            return false
        }
        if (!this.validateBlank(c)) {
            return false
        }
        if (0 !== b && a > b) {
            this.getMsgBox().alert(_T("firewall", "firewall_tc"), _T("firewall", "firewall_tc_warning"));
            return false
        }
        if (SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_RATE < b) {
            this.getMsgBox().alert(_T("firewall", "firewall_tc"), String.format(_T("firewall", "firewall_tc_ceil_limit"), SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_RATE));
            return false
        }
        return true
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Utils.Render");
SYNO.SDS.AdminCenter.Utils.Render.PROTOCOL = [
    ["tcp", _T("firewall", "firewall_protocol_tcp")],
    ["udp", _T("firewall", "firewall_protocol_udp")],
    ["icmp", _T("firewall", "firewall_protocol_icmp")],
    ["all", _T("firewall", "firewall_ports_all")]
];
SYNO.SDS.AdminCenter.Utils.Render.ServerPortsParsing = function(l, h, g) {
    var e = 0,
        d = 0;
    if (!l) {
        return false
    }
    if (!l.port_info) {
        return false
    }
    var f = l.port_info;
    var n;
    var b = "";
    var k = "";
    var a = "";
    var c = "";
    var m = "";
    h.length = 0;
    for (e = 0; e < f.length; e++) {
        n = f[e];
        a = "";
        c = "";
        m = "";
        b = "";
        k = "";
        if (null !== n.dst_port) {
            for (d = 0; d < n.dst_port.length; d++) {
                if ("" !== m) {
                    m += ","
                }
                m += n.dst_port[d]
            }
        }
        if (!g && null !== n.src_port) {
            for (d = 0; d < n.src_port.length; d++) {
                if ("" !== c) {
                    c += ","
                }
                c += n.src_port[d]
            }
        }
        if ("" !== m) {
            a += m
        }
        if ("" !== c) {
            if ("" !== a) {
                a += ","
            }
            a += String.format("{0} ({1})", c, _T("firewall", "firewall_port_type_source"))
        }
        b = n.name;
        k = n.desc;
        h.push([n.port_id, b, a, k, n.protocol, false])
    }
    return true
};
SYNO.SDS.AdminCenter.Utils.Render.Render_Protocol = function(d, c) {
    var b = SYNO.SDS.AdminCenter.Utils.Render.PROTOCOL;
    for (var a = 0; a < b.length; a++) {
        if (d == b[a][0]) {
            c.attr = 'ext:qtip="' + b[a][1] + '"';
            return b[a][1]
        }
    }
    return "-"
};
SYNO.SDS.AdminCenter.Utils.Render.FindServiceName = function(c, b) {
    for (var a = 0; a < b.length; a++) {
        if (c == b[a][0]) {
            return b[a][3]
        }
    }
    return ""
};
SYNO.SDS.AdminCenter.Utils.Render.Render_Ports = function(b, h, f) {
    var e = [];
    var j = f.data.port_type;
    var k = f.data.port_num;
    var a = "dest";
    var g = "-";
    var c = "";
    var l = [];
    if ("ALL" == j) {
        g = _T("firewall", "firewall_ports_all")
    } else {
        if ("SYS" == j || "RESERVED" == j) {
            e = k.split(",");
            for (var d = 0; d < e.length; d++) {
                c = SYNO.SDS.AdminCenter.Utils.Render.FindServiceName(e[d], f.store.appWindow.portInfo);
                l.push(c)
            }
            g = l.join(", ")
        } else {
            if ("SELF" == j) {
                if ("" !== f.data.port_direction) {
                    a = f.data.port_direction
                }
                if ("" !== k) {
                    if ("src" == a) {
                        g = String.format("{0} ({1})", k, _T("firewall", "firewall_port_type_source"))
                    } else {
                        g = k
                    }
                }
            }
        }
    }
    h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(g) + '"';
    return g
};
Ext.define("SYNO.SDS.AdminCenter.Network.TcGridPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.portInfo = this.owner.portInfo;
        this.IFStore = b.IFStore;
        this.ifname = "";
        this.enableColumn = new SYNO.ux.EnableColumn({
            header: _T("common", "enabled"),
            dataIndex: "enabled",
            enableFastSelectAll: true,
            menuDisabled: true,
            sortable: false,
            width: 120,
            align: "center",
            tooltip: _T("common", "enabled"),
            listeners: {
                selectall: {
                    fn: this.onChgButtonStatus,
                    scope: this
                }
            }
        });
        this.GridStore = this.createGridStore();
        this.tbar = new Ext.Toolbar({
            defaultType: "syno_button",
            items: this.configToolBar()
        });
        var a = Ext.apply({
            tbar: this.tbar,
            store: this.GridStore,
            viewConfig: {
                markDirty: false
            },
            plugins: [this.enableColumn],
            columns: [this.enableColumn, {
                id: "tc_service",
                header: _T("firewall", "firewall_ports"),
                dataIndex: "port_num",
                width: 150,
                align: "center",
                tooltip: _T("firewall", "firewall_ports"),
                renderer: SYNO.SDS.AdminCenter.Utils.Render.Render_Ports
            }, {
                header: _T("firewall", "firewall_protocol"),
                dataIndex: "protocol",
                width: 120,
                align: "center",
                tooltip: _T("firewall", "firewall_protocol"),
                renderer: SYNO.SDS.AdminCenter.Utils.Render.Render_Protocol
            }, {
                header: _T("firewall", "firewall_tc_header_rate_min"),
                dataIndex: "minrate",
                width: 165,
                align: "center",
                tooltip: _T("firewall", "firewall_tc_header_rate_min"),
                renderer: SYNO.SDS.AdminCenter.Network.Utils.Render_Min_Rate
            }, {
                header: _T("firewall", "firewall_tc_header_rate_max"),
                dataIndex: "maxrate",
                width: 140,
                align: "center",
                tooltip: _T("firewall", "firewall_tc_header_rate_max"),
                renderer: SYNO.SDS.AdminCenter.Network.Utils.Render_Max_Rate
            }],
            enableDragDrop: true,
            ddGroup: "TcRulesDD",
            enableColumnMove: false,
            enableHdMenu: false,
            autoExpandColumn: "tc_service",
            monitorWindowResize: true,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: {
                        fn: this.onChgButtonStatus,
                        buffer: 50,
                        scope: this
                    }
                }
            }),
            ddText: _T("firewall", "firewall_rules_drag_drop_text"),
            listeners: {
                rowdblclick: function() {
                    this.openRuleDialog("edit")
                },
                rowcontextmenu: this.onRowContextMenu,
                scope: this
            }
        }, b);
        this.callParent([a]);
        this.clearDirty()
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.IFStore, "load", this.onIFAfterLoad, this);
        this.mon(this.GridStore, "load", this.onGridAfterLoad, this);
        this.mon(this.GridStore, "update", this.onChgButtonStatus, this);
        this.mon(this.GridStore, "add", this.onStoreAdd, this);
        this.mon(this.GridStore, "remove", this.onStoreRemove, this);
        this.mon(this, "afterlayout", function() {
            this.ddrow = new Ext.dd.DropTarget(this.getView().mainBody, {
                ddGroup: "TcRulesDD",
                copy: false,
                scope: this,
                notifyDrop: function(a, c, b) {
                    return this.scope.mvRules(a.getDragData(c).rowIndex, b.selections, b.grid.getStore())
                }
            })
        }, this, {
            single: true
        })
    },
    onIFAfterLoad: function(b, a, c) {
        this.ifname = a[0].id;
        this.ifnamebak = this.ifname;
        Ext.getCmp(this.IFComboId).setValue(this.ifname);
        this.GridStore.load({
            params: {
                adapter: this.ifname
            },
            scope: this
        })
    },
    onGridAfterLoad: function(b, a, c) {
        this.onChgButtonStatus();
        this.clearDirty()
    },
    onStoreAdd: function(b, a, c) {
        this.isRuleUpdated = true;
        this.onChgButtonStatus()
    },
    onStoreRemove: function(b, a, c) {
        this.isRuleUpdated = true;
        this.onChgButtonStatus()
    },
    configToolBar: function() {
        return [{
            text: _T("common", "create"),
            itemId: "create",
            tooltip: _T("common", "create"),
            scope: this,
            handler: function(b, a) {
                this.openRuleDialog("add")
            }
        }, {
            text: _T("common", "alt_edit"),
            itemId: "edit",
            tooltip: _T("common", "alt_edit"),
            scope: this,
            handler: function(b, a) {
                this.openRuleDialog("edit")
            }
        }, {
            text: _T("common", "delete"),
            itemId: "remove",
            tooltip: _T("common", "delete"),
            scope: this,
            handler: function() {
                var a = this.getSelectionModel().getSelections();
                var c = this.getStore();
                var b = 0;
                for (b = 0; b < a.length; b++) {
                    c.remove(a[b])
                }
            }
        }, {
            text: _T("common", "save"),
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : _T("common", "save"),
            itemId: "save",
            scope: this,
            handler: this.onSaveRules
        }, {
            text: _T("common", "up"),
            itemId: "up",
            tooltip: _T("common", "up"),
            scope: this,
            handler: function() {
                this.onMoveRow(true)
            }
        }, {
            text: _T("common", "down"),
            itemId: "down",
            tooltip: _T("common", "down"),
            scope: this,
            handler: function() {
                this.onMoveRow(false)
            }
        }, "->", {
            xtype: "syno_combobox",
            id: this.IFComboId = Ext.id(),
            displayField: "display",
            valueField: "id",
            store: this.IFStore,
            listeners: {
                select: this.onIFSelect,
                scope: this
            }
        }]
    },
    createGridStore: function() {
        var a = new SYNO.SDS.AdminCenter.Network.TcStore({
            module: this.module,
            owner: this
        });
        return a
    },
    onIFSelect: function(c, a, b) {
        if (a.id == this.ifname) {
            return
        }
        if (!this.isDirty()) {
            this.ifnamebak = this.ifname;
            this.ifname = a.id;
            this.module.appWin.setStatusBusy({
                text: _T("common", "loading")
            });
            this.GridStore.load({
                params: {
                    adapter: this.ifname
                },
                scope: this
            });
            this.module.appWin.clearStatusBusy();
            return
        }
        this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(d) {
            if ("yes" !== d) {
                Ext.getCmp(this.IFComboId).setValue(this.IFStore.getById(this.ifname).data.display);
                return false
            } else {
                this.ifnamebak = this.ifname;
                this.ifname = a.id;
                this.module.appWin.setStatusBusy({
                    text: _T("common", "loading")
                });
                this.GridStore.load({
                    params: {
                        adapter: this.ifname
                    },
                    scope: this
                });
                this.module.appWin.clearStatusBusy()
            }
        }, this)
    },
    clearIFSelect: function() {
        Ext.getCmp(this.IFComboId).clearValue();
        this.getSelectionModel().clearSelections();
        this.getStore().removeAll();
        this.clearDirty();
        this.onChgButtonStatus()
    },
    onSaveRules: function() {
        var b = this.getStore().getRange();
        var a = [];
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        b.each(function(c) {
            a.push(c.data)
        }, this);
        this.sendWebAPI({
            api: "SYNO.Core.Network.TrafficControl.Rules",
            method: "save",
            version: 1,
            scope: this,
            params: {
                adapter: this.ifname,
                rules: a
            },
            callback: this.onSaveDone
        })
    },
    onSaveDone: function(c, b, a) {
        if (c) {
            this.clearDirty();
            this.onChgButtonStatus();
            this.module.appWin.getMsgBox().alert(_T("firewall", "firewall_tc"), _T("firewall", "firewall_tc_save_success"));
            this.module.appWin.clearStatusBusy();
            return
        }
        this.module.appWin.getMsgBox().alert(_T("firewall", "firewall_tc"), SYNO.API.getErrorString(b.code));
        this.module.appWin.clearStatusBusy()
    },
    onMoveRow: function(a) {
        var d = this.getStore();
        var c = this.getSelectionModel().getSelected();
        var b = d.indexOf(c);
        b += a ? -1 : 1;
        if (b < 0 || b > d.getCount() - 1) {
            return
        }
        d.remove(c);
        d.insert(b, c);
        this.getSelectionModel().selectRecords([c])
    },
    openRuleDialog: function(a) {
        var b = new SYNO.SDS.AdminCenter.Network.TcRuleDialog({
            owner: this.module.appWin,
            module: this.module,
            portInfo: this.portInfo,
            winHeight: 380,
            mode: a
        });
        b.open()
    },
    onRowContextMenu: function(c, f, a) {
        var b = [];
        var e = c.getSelectionModel();
        e.suspendEvents(false);
        e.selectRow(f, e.isSelected(f));
        this.onChgButtonStatus();
        e.resumeEvents();
        if (!this.getButton("edit").disabled) {
            b.push(this.getButton("edit").initialConfig)
        }
        if (!this.getButton("remove").disabled) {
            b.push(this.getButton("remove").initialConfig)
        }
        var d = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        d.showAt(a.getXY());
        a.preventDefault()
    },
    mvRules: function(b, c, d) {
        if (undefined === b) {
            return false
        }
        for (var a = 0; a < c.length; a++) {
            d.remove(c[a])
        }
        if (b >= d.getCount()) {
            d.add(c)
        } else {
            d.insert(b, c)
        }
        this.isRuleUpdated = true;
        return true
    },
    clearDirty: function() {
        this.isRuleUpdated = false;
        this.getStore().commitChanges()
    },
    onChgButtonStatus: function() {
        var b = this.getStore().getCount();
        var a = this.getSelectionModel().getCount();
        this.setButton("create", b < SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_RULE);
        this.setButton("edit", 1 === a);
        this.setButton("remove", 0 < a);
        this.setButton("save", !this._S("demo_mode") && this.isDirty());
        this.setButton("up", 1 === a);
        this.setButton("down", 1 === a)
    },
    getButton: function(c) {
        var b = this.getTopToolbar();
        var a;
        if (b) {
            a = b.getComponent(c)
        }
        return a
    },
    setButton: function(c, a) {
        var b = this.getButton(c);
        if (b) {
            b[a ? "enable" : "disable"]()
        }
    },
    isDirty: function() {
        return this.GridStore.isDirty() || this.isRuleUpdated
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.TcStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        var a = Ext.apply({
            api: "SYNO.Core.Network.TrafficControl.Rules",
            appWindow: this.owner,
            method: "load",
            baseParams: {
                adapter: this.owner.ifname
            },
            version: 1,
            autoDestroy: true,
            root: "rules",
            fields: ["id", "enabled", "port_type", "port_num", "protocol", "minrate", "maxrate"],
            listeners: {
                exception: {
                    scope: this,
                    fn: function(f, g, h, e, d, c) {
                        this.module.appWin.getMsgBox().alert(_T("firewall", "firewall_tc"), SYNO.API.getErrorString(d.code));
                        Ext.getCmp(this.owner.IFComboId).setValue(this.owner.IFStore.getById(this.owner.ifnamebak).data.display);
                        this.owner.ifname = this.owner.ifnamebak;
                        this.module.appWin.clearStatusBusy()
                    }
                }
            }
        }, b);
        this.callParent([a])
    },
    isDirty: function() {
        return (this.getModifiedRecords().length > 0)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.RouterTcRuleDialog", {
    extend: "SYNO.SDS.AdminCenter.Network.TcRuleDialog",
    constructor: function(a) {
        this.callParent([a])
    },
    setDefault: function() {
        this.customVal = {
            port_num: "",
            protocol: "tcp"
        };
        this.source_ip = "";
        this.source_subnet_mask = "";
        this.serviceChoose = "";
        this.ruleRecord = new SYNO.SDS.AdminCenter.Network.Utils.TcRULERecord({
            id: 0,
            enabled: true,
            port_type: "",
            port_num: "",
            protocol: "",
            minrate: -1,
            maxrate: -1
        });
        if ("upload" === this.direction) {
            this.ipDirection = "src";
            this.portDirection = "dest"
        } else {
            this.ipDirection = "dest";
            this.portDirection = "src"
        }
        Ext.getCmp(this.servPortFieldID).hide()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.RouterTcGridPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.enableColumn = new SYNO.ux.EnableColumn({
            header: _T("common", "enabled"),
            dataIndex: "enabled",
            enableFastSelectAll: true,
            menuDisabled: true,
            sortable: false,
            width: 120,
            align: "center",
            tooltip: _T("common", "enabled"),
            listeners: {
                selectall: {
                    fn: this.onChgButtonStatus,
                    scope: this
                }
            }
        });
        this.GridStore = this.createGridStore();
        this.tbar = new Ext.Toolbar({
            defaultType: "syno_button",
            items: this.configToolBar()
        });
        var a = Ext.apply({
            tbar: this.tbar,
            store: this.GridStore,
            viewConfig: {
                markDirty: false
            },
            plugins: [this.enableColumn],
            columns: [this.enableColumn, {
                id: "tc_service",
                header: _T("firewall", "firewall_ports"),
                dataIndex: "port_num",
                width: 150,
                align: "center",
                tooltip: _T("firewall", "firewall_ports"),
                renderer: SYNO.SDS.AdminCenter.Utils.Render.Render_Ports
            }, {
                header: _T("firewall", "firewall_source"),
                dataIndex: "source",
                width: 150,
                align: "center",
                tooltip: _T("firewall", "firewall_source"),
                renderer: SYNO.SDS.AdminCenter.Security.Utils.Render_Source
            }, {
                header: _T("firewall", "firewall_protocol"),
                dataIndex: "protocol",
                width: 120,
                align: "center",
                tooltip: _T("firewall", "firewall_protocol"),
                renderer: SYNO.SDS.AdminCenter.Utils.Render.Render_Protocol
            }, {
                header: _T("firewall", "firewall_tc_header_rate_min"),
                dataIndex: "minrate",
                width: 165,
                align: "center",
                tooltip: _T("firewall", "firewall_tc_header_rate_min"),
                renderer: SYNO.SDS.AdminCenter.Network.Utils.Render_Min_Rate
            }, {
                header: _T("firewall", "firewall_tc_header_rate_max"),
                dataIndex: "maxrate",
                width: 140,
                align: "center",
                tooltip: _T("firewall", "firewall_tc_header_rate_max"),
                renderer: SYNO.SDS.AdminCenter.Network.Utils.Render_Max_Rate
            }],
            enableDragDrop: true,
            ddGroup: "TcRulesDD",
            enableColumnMove: false,
            enableHdMenu: false,
            autoExpandColumn: "tc_service",
            monitorWindowResize: true,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: {
                        fn: this.onChgButtonStatus,
                        buffer: 50,
                        scope: this
                    }
                }
            }),
            ddText: _T("firewall", "firewall_rules_drag_drop_text"),
            listeners: {
                rowdblclick: function() {
                    this.openRuleDialog("edit")
                },
                rowcontextmenu: this.onRowContextMenu,
                scope: this
            }
        }, b);
        this.callParent([a]);
        this.clearDirty()
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.GridStore, "load", this.onGridAfterLoad, this);
        this.mon(this.GridStore, "update", this.onChgButtonStatus, this);
        this.mon(this.GridStore, "add", this.onStoreAdd, this);
        this.mon(this.GridStore, "remove", this.onStoreRemove, this);
        this.mon(this, "afterlayout", function() {
            this.ddrow = new Ext.dd.DropTarget(this.getView().mainBody, {
                ddGroup: "TcRulesDD",
                copy: false,
                scope: this,
                notifyDrop: function(a, c, b) {
                    return this.scope.mvRules(a.getDragData(c).rowIndex, b.selections, b.grid.getStore())
                }
            })
        }, this, {
            single: true
        })
    },
    onGridAfterLoad: function(b, a, c) {
        Ext.getCmp(this.DirectComboId).setValue(this.direction);
        this.onChgButtonStatus();
        this.clearDirty()
    },
    onStoreAdd: function(b, a, c) {
        this.isRuleUpdated = true;
        this.onChgButtonStatus()
    },
    onStoreRemove: function(b, a, c) {
        this.isRuleUpdated = true;
        this.onChgButtonStatus()
    },
    configToolBar: function() {
        this.rateDirectStore = new Ext.data.ArrayStore({
            fields: ["id", "display"],
            data: [
                ["download", _T("bandwidth", "bandwidth_download")],
                ["upload", _T("bandwidth", "bandwidth_upload")]
            ]
        });
        return [{
            text: _T("common", "create"),
            itemId: "create",
            tooltip: _T("common", "create"),
            scope: this,
            handler: function(b, a) {
                this.openRuleDialog("add")
            }
        }, {
            text: _T("common", "alt_edit"),
            itemId: "edit",
            tooltip: _T("common", "alt_edit"),
            scope: this,
            handler: function(b, a) {
                this.openRuleDialog("edit")
            }
        }, {
            text: _T("common", "delete"),
            itemId: "remove",
            tooltip: _T("common", "delete"),
            scope: this,
            handler: function() {
                var a = this.getSelectionModel().getSelections();
                var c = this.getStore();
                var b = 0;
                for (b = 0; b < a.length; b++) {
                    c.remove(a[b])
                }
            }
        }, {
            text: _T("common", "save"),
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : _T("common", "save"),
            itemId: "save",
            scope: this,
            handler: this.onSaveRules
        }, {
            text: _T("common", "up"),
            itemId: "up",
            tooltip: _T("common", "up"),
            scope: this,
            handler: function() {
                this.onMoveRow(true)
            }
        }, {
            text: _T("common", "down"),
            itemId: "down",
            tooltip: _T("common", "down"),
            scope: this,
            handler: function() {
                this.onMoveRow(false)
            }
        }, "->", {
            xtype: "syno_combobox",
            id: this.DirectComboId = Ext.id(),
            displayField: "display",
            valueField: "id",
            value: "download",
            store: this.rateDirectStore,
            listeners: {
                select: this.onDirectSelect,
                scope: this
            }
        }]
    },
    createGridStore: function() {
        var a = new SYNO.SDS.AdminCenter.Network.RouterTcStore({
            module: this.module,
            direction: this.direction,
            owner: this
        });
        return a
    },
    onSaveRules: function() {
        var b = this.getStore().getRange();
        var a = [];
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        b.each(function(c) {
            a.push(c.data)
        }, this);
        this.sendWebAPI({
            api: "SYNO.Core.Network.TrafficControl.RouterRules",
            method: "save",
            version: 1,
            scope: this,
            params: {
                rules: a,
                direction: this.direction
            },
            callback: this.onSaveDone
        })
    },
    onSaveDone: function(c, b, a) {
        if (c) {
            this.clearDirty();
            this.onChgButtonStatus();
            this.module.appWin.getMsgBox().alert(_T("firewall", "firewall_tc"), _T("firewall", "firewall_tc_save_success"));
            this.module.appWin.clearStatusBusy();
            return
        }
        this.module.appWin.getMsgBox().alert(_T("firewall", "firewall_tc"), SYNO.API.getErrorString(b.code));
        this.module.appWin.clearStatusBusy()
    },
    onMoveRow: function(a) {
        var d = this.getStore();
        var c = this.getSelectionModel().getSelected();
        var b = d.indexOf(c);
        b += a ? -1 : 1;
        if (b < 0 || b > d.getCount() - 1) {
            return
        }
        d.remove(c);
        d.insert(b, c);
        this.getSelectionModel().selectRecords([c])
    },
    onGridStoreLoad: function(a) {
        this.direction = a;
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        this.GridStore.load({
            params: {
                direction: this.direction
            },
            scope: this
        });
        this.module.appWin.clearStatusBusy()
    },
    onDirectSelect: function(c, a, b) {
        if (a.get("id") == this.direction) {
            return
        }
        if (!this.isDirty()) {
            this.onGridStoreLoad(a.get("id"));
            return
        }
        this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(d) {
            if ("yes" !== d) {
                Ext.getCmp(this.DirectComboId).setValue(this.direction);
                return false
            } else {
                this.onGridStoreLoad(a.get("id"))
            }
        }, this)
    },
    openRuleDialog: function(a) {
        var b = new SYNO.SDS.AdminCenter.Network.RouterTcRuleDialog({
            owner: this.module.appWin,
            module: this.module,
            direction: this.direction,
            winHeight: 450,
            mode: a
        });
        b.open()
    },
    onRowContextMenu: function(c, f, a) {
        var b = [];
        var e = c.getSelectionModel();
        e.suspendEvents(false);
        e.selectRow(f, e.isSelected(f));
        this.onChgButtonStatus();
        e.resumeEvents();
        if (!this.getButton("edit").disabled) {
            b.push(this.getButton("edit").initialConfig)
        }
        if (!this.getButton("remove").disabled) {
            b.push(this.getButton("remove").initialConfig)
        }
        var d = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        d.showAt(a.getXY());
        a.preventDefault()
    },
    mvRules: function(b, c, d) {
        if (undefined === b) {
            return false
        }
        for (var a = 0; a < c.length; a++) {
            d.remove(c[a])
        }
        if (b >= d.getCount()) {
            d.add(c)
        } else {
            d.insert(b, c)
        }
        this.isRuleUpdated = true;
        return true
    },
    clearDirty: function() {
        this.isRuleUpdated = false;
        this.getStore().commitChanges()
    },
    onChgButtonStatus: function() {
        var b = this.getStore().getCount();
        var a = this.getSelectionModel().getCount();
        this.setButton("create", b < SYNO.SDS.AdminCenter.Network.Utils.TC_MAX_RULE);
        this.setButton("edit", 1 === a);
        this.setButton("remove", 0 < a);
        this.setButton("save", !this._S("demo_mode") && this.isDirty());
        this.setButton("up", 1 === a);
        this.setButton("down", 1 === a)
    },
    getButton: function(c) {
        var b = this.getTopToolbar();
        var a;
        if (b) {
            a = b.getComponent(c)
        }
        return a
    },
    setButton: function(c, a) {
        var b = this.getButton(c);
        if (b) {
            b[a ? "enable" : "disable"]()
        }
    },
    isDirty: function() {
        return this.GridStore.isDirty() || this.isRuleUpdated
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.RouterTcStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        var c = b.direction;
        var a = Ext.apply({
            api: "SYNO.Core.Network.TrafficControl.RouterRules",
            appWindow: this.owner,
            method: "load",
            baseParams: {
                direction: c
            },
            version: 1,
            autoDestroy: true,
            root: "rules",
            fields: ["id", "enabled", "port_type", "port_num", "protocol", "minrate", "maxrate", "source", "ip_direction", "port_direction"],
            listeners: {
                exception: {
                    scope: this,
                    fn: function(g, h, i, f, e, d) {
                        this.module.appWin.getMsgBox().alert(_T("firewall", "firewall_tc"), SYNO.API.getErrorString(e));
                        this.module.appWin.clearStatusBusy()
                    }
                }
            }
        }, b);
        this.callParent([a])
    },
    isDirty: function() {
        return (this.getModifiedRecords().length > 0)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.DSMSettingTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.dsmSetAPI = {
            api: "SYNO.Core.Web.DSM",
            method: "set",
            version: 1
        }
    },
    fillConfig: function(a) {
        var d;
        var c = function() {
            if ("yes" !== this._D("supportHTTPS")) {
                return
            }
            if ("yes" === this._D("support_spdy")) {
                if (this._S("version") >= 4966) {
                    d = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https", ["https_port", "enable_https_redirect", "enable_hsts", "enable_hsts_desc", "enable_spdy", "enable_spdy_desc"])
                } else {
                    d = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https", ["https_port", "enable_https_redirect", "enable_spdy", "enable_spdy_desc"])
                }
            } else {
                if (this._S("version") >= 4966) {
                    d = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https", ["https_port", "enable_https_redirect", "enable_hsts", "enable_hsts_desc"])
                } else {
                    d = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https", ["https_port", "enable_https_redirect"])
                }
            }
        };
        var b = {
            title: _T("tree", "leaf_dsm"),
            autoFlexcroll: true,
            trackResetOnLoad: true,
            webapi: {
                api: "SYNO.Core.Web.DSM",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [this.getHttpServiceObj()],
            listeners: {
                afterlayout: {
                    single: true,
                    scope: this,
                    fn: c
                }
            }
        };
        Ext.apply(b, a);
        return b
    },
    getHttpServiceObj: function() {
        return this.getHttpServiceItems()
    },
    getHttpServiceItems: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("tcpip", "admin_port")
        }, {
            xtype: "syno_numberfield",
            vtype: "port",
            validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("dsm"),
            indent: 1,
            fieldLabel: "HTTP",
            disabled: this._S("ha_running"),
            name: "http_port"
        });
        if ("yes" === this._D("supportHTTPS")) {
            a.push({
                xtype: "syno_numberfield",
                vtype: "port",
                validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("dsm"),
                indent: 1,
                fieldLabel: "HTTPS",
                name: "https_port"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("service", "service_secureui"),
                name: "enable_https"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("service", "service_desc_secureui")
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("service", "redirect_secureui"),
                indent: 1,
                name: "enable_https_redirect"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                id: this.btnUploadCertId = Ext.id(),
                value: String.format(_T("certificate", "goto_certificate"), '<a class="link-font" href="javascript: void(0)" onclick="SYNO.SDS.AdminCenter.PublicAccess.Utils.onClickCertificate(\'' + this.getId() + "');\">" + _T("certificate", "certificate") + "</a>")
            });
            if ("yes" === this._D("support_spdy")) {
                a.push({
                    xtype: "syno_checkbox",
                    boxLabel: _T("service", "enable_spdy"),
                    indent: 1,
                    name: "enable_spdy"
                }, {
                    xtype: "syno_displayfield",
                    indent: 2,
                    name: "enable_spdy_desc",
                    value: _T("service", "enable_spdy_desc")
                })
            }
            if (this._S("version") >= 4966) {
                a.push({
                    xtype: "syno_checkbox",
                    boxLabel: _T("service", "enable_hsts"),
                    indent: 1,
                    name: "enable_hsts"
                }, {
                    xtype: "syno_displayfield",
                    indent: 2,
                    name: "enable_hsts_desc",
                    value: _T("service", "enable_hsts_desc")
                })
            }
        }
        a.push({
            xtype: "syno_checkbox",
            boxLabel: _T("service", "enable_ssdp"),
            name: "enable_ssdp"
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            value: _T("service", "enable_ssdp_desc")
        });
        return a
    },
    onBeforeRequest: function(a) {
        if ("set" === a) {
            if (this.getForm().findField("http_port").getValue() === this.getForm().findField("https_port").getValue()) {
                this.module.panel.setStatusError({
                    text: _T("error", "error_bad_field"),
                    clear: true
                });
                this.getForm().findField("http_port").markInvalid(_T("error", "error_port_conflict"));
                return false
            }
        }
        return true
    },
    processParams: function(b, a) {
        if ("get" === b) {
            return this.callParent(arguments)
        }
        this.ownerCt.restartHttpd = false;
        Ext.each(a, function(c) {
            if (SYNO.ux.Utils.checkApiConsistency(c, this.dsmSetAPI)) {
                var e = this.getForm();
                var g = e.findField.createDelegate(e);
                var d = g("http_port").isDirty();
                if ("yes" === this._D("supportHTTPS")) {
                    d = d || g("https_port").isDirty() || g("enable_https").isDirty()
                }
                if ("yes" === this._D("support_spdy")) {
                    d = d || g("enable_spdy").isDirty()
                }
                this.ownerCt.restartHttpd = d
            }
        }, this);
        return a
    },
    processPortParam: function(a) {
        return Ext.isNumber(a) ? a : null
    },
    getHelpParam: function() {
        return "AdminCenter/connection_public_access_advanced.html"
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.RoutingTable.RuleGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.appWin = b.appWin;
        this.ifClass = b.ifClass;
        this.width = 600;
        this.height = 300;
        this.frame = false;
        this.border = false;
        this.title = _T("network", "route_table");
        this.tables = [];
        this.TableStore = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: []
        });
        var a = this.fillConfig(b);
        this.callParent([a])
    },
    fillConfig: function(c) {
        var b = new Ext.grid.ColumnModel({
            defaults: {
                width: 120,
                sortable: true
            },
            columns: [{
                header: _T("network", "route_network"),
                dataIndex: "ip"
            }, {
                header: _T("network", "route_gateway"),
                dataIndex: "gateway"
            }, {
                header: _T("network", "route_mask"),
                dataIndex: "mask"
            }, {
                header: _T("network", "route_metric"),
                dataIndex: "metric"
            }, {
                header: _T("network", "route_interface"),
                dataIndex: "ifname",
                width: 150,
                renderer: {
                    fn: function(d) {
                        var e = SYNO.SDS.Utils.Network.idToString.apply(this, [d]);
                        if ("vpn-client" === this.ifClass[d]) {
                            e = "VPN"
                        } else {
                            if ("ipv6tunnel" === this.ifClass[d]) {
                                e = _T("tcpip", "ipv6_tsp_tunnel")
                            }
                        }
                        return e
                    },
                    scope: this
                }
            }]
        });
        var a = {
            colModel: b,
            store: new SYNO.SDS.AdminCenter.Network.RoutingTable.RuleStore({
                module: this.module,
                appWin: this.appWin
            }),
            tbar: {
                items: [{
                    xtype: "syno_combobox",
                    id: this.TableComboId = Ext.id(),
                    displayField: "display",
                    valueField: "value",
                    store: this.TableStore,
                    listeners: {
                        select: this.onTableSelect,
                        scope: this
                    }
                }]
            },
            listeners: {
                scope: this,
                activate: this.onActivate
            }
        };
        Ext.apply(a, c);
        return a
    },
    onTableSelect: function(c, a, b) {
        Ext.each(this.tables, function(d) {
            if (d.name === a.data.value) {
                this.getStore().loadData(d.rules)
            }
        }, this)
    },
    loadTables: function(c, b, a) {
        this.parentDialog.clearStatusBusy();
        if (!c) {
            return
        }
        this.tables = b.tables;
        this.TableStore.loadData(this.getDisplayedTableString());
        Ext.getCmp(this.TableComboId).setValue(this.tables[0].name);
        this.getStore().loadData(this.tables[0].rules)
    },
    getDisplayedTableString: function() {
        var a = [];
        Ext.each(this.tables, function(c) {
            var e = c.name.indexOf("-");
            if (1 > e) {
                SYNO.Debug("error on getting table");
                return false
            }
            var d = c.name.substring(0, e);
            var b;
            if ("static" === d) {
                b = _T("network", "route_static_table")
            } else {
                if ("main" === d) {
                    b = _T("network", "route_main_table")
                } else {
                    if ("vpn-client" === c["class"]) {
                        b = "VPN " + _T("network", "route_table_prefix")
                    } else {
                        if ("ipv6tunnel" === c["class"]) {
                            b = _T("tcpip", "ipv6_tsp_tunnel") + " " + _T("network", "route_table_prefix")
                        } else {
                            b = SYNO.SDS.Utils.Network.idToString(d) + " " + _T("network", "route_table_prefix")
                        }
                    }
                }
            }
            a.push([c.name, b])
        }, this);
        return a
    },
    onActivate: function() {
        this.parentDialog.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Static.Route",
            method: "tablesget",
            params: {
                type: "ipv4"
            },
            version: 1,
            scope: this,
            callback: this.loadTables
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.RoutingTableV6.RuleGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.appWin = b.appWin;
        this.ifClass = b.ifClass;
        this.width = 600;
        this.height = 300;
        this.frame = false;
        this.border = false;
        this.title = _T("network", "route_table");
        this.tables = [];
        this.TableStore = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: []
        });
        var a = this.fillConfig(b);
        this.callParent([a])
    },
    fillConfig: function(c) {
        var b = new Ext.grid.ColumnModel({
            defaults: {
                width: 120,
                sortable: true
            },
            columns: [{
                header: _T("network", "route_network"),
                dataIndex: "ip"
            }, {
                header: _T("network", "route_next_hop"),
                dataIndex: "gateway"
            }, {
                header: _T("network", "route_metric"),
                dataIndex: "metric"
            }, {
                header: _T("network", "route_interface"),
                dataIndex: "ifname",
                width: 150,
                renderer: {
                    fn: function(d) {
                        var e = SYNO.SDS.Utils.Network.idToString.apply(this, [d]);
                        if ("vpn-client" === this.ifClass[d]) {
                            e = "VPN"
                        } else {
                            if ("ipv6tunnel" === this.ifClass[d]) {
                                e = _T("tcpip", "ipv6_tsp_tunnel")
                            }
                        }
                        return e
                    },
                    scope: this
                }
            }]
        });
        var a = {
            colModel: b,
            store: new SYNO.SDS.AdminCenter.Network.RoutingTable.RuleStore({
                module: this.module,
                appWin: this.appWin
            }),
            tbar: {
                items: [{
                    xtype: "syno_combobox",
                    id: this.TableComboId = Ext.id(),
                    displayField: "display",
                    valueField: "value",
                    store: this.TableStore,
                    listeners: {
                        select: this.onTableSelect,
                        scope: this
                    }
                }]
            },
            listeners: {
                scope: this,
                activate: this.onActivate
            }
        };
        Ext.apply(a, c);
        return a
    },
    onTableSelect: function(c, a, b) {
        Ext.each(this.tables, function(d) {
            if (d.name === a.data.value) {
                this.getStore().loadData(d.rules)
            }
        }, this)
    },
    loadTables: function(d, b, a) {
        this.parentDialog.clearStatusBusy();
        if (!d) {
            return
        }
        var c = [];
        this.tables = b.tables;
        Ext.each(this.tables, function(e) {
            c.push([e.name, e.name])
        }, this);
        this.TableStore.loadData(this.getDisplayedTableString());
        Ext.getCmp(this.TableComboId).setValue(this.tables[0].name);
        this.getStore().loadData(this.tables[0].rules)
    },
    getDisplayedTableString: function() {
        var a = [];
        Ext.each(this.tables, function(c) {
            var e = c.name.indexOf("-");
            if (1 > e) {
                SYNO.Debug("error on getting table");
                return false
            }
            var d = c.name.substring(0, e);
            var b;
            if ("static" === d) {
                b = _T("network", "route_static_table")
            } else {
                if ("main" === d) {
                    b = _T("network", "route_main_table")
                } else {
                    if ("vpn-client" === c["class"]) {
                        b = "VPN " + _T("network", "route_table_prefix")
                    } else {
                        if ("ipv6tunnel" === c["class"]) {
                            b = _T("tcpip", "ipv6_tsp_tunnel") + " " + _T("network", "route_table_prefix")
                        } else {
                            b = SYNO.SDS.Utils.Network.idToString(d) + " " + _T("network", "route_table_prefix")
                        }
                    }
                }
            }
            a.push([c.name, b])
        }, this);
        return a
    },
    onActivate: function() {
        this.parentDialog.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Static.Route",
            method: "tablesget",
            params: {
                type: "ipv6"
            },
            version: 1,
            scope: this,
            callback: this.loadTables
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.RoutingTable.RuleStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.ruleFields = ["gateway", "mask", "ifname", "ip", "metric"];
        if (!Ext.isDefined(b.module)) {
            throw Error("module is undefined")
        }
        var a = Ext.apply({
            method: "get",
            version: 1,
            autoDestroy: true,
            idProperty: "destination",
            fields: this.ruleFields,
            listeners: {}
        }, b);
        this.callParent([a])
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.RoutingTable.Window", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.ip_type = b.ip_type;
        this.ifClass = b.ifClass;
        if ("ipv4" === this.ip_type) {
            this.StaticRoutingTab = new SYNO.SDS.AdminCenter.Network.RoutingTable.RuleGrid({
                parentDialog: this,
                module: this.module,
                appWin: this.module.appWin,
                owner: this.owner,
                ifClass: this.ifClass,
                itemId: "RoutingTableGrid"
            })
        } else {
            if ("ipv6" === this.ip_type) {
                this.StaticRoutingTab = new SYNO.SDS.AdminCenter.Network.RoutingTableV6.RuleGrid({
                    parentDialog: this,
                    module: this.module,
                    appWin: this.module.appWin,
                    owner: this.owner,
                    ifClass: this.ifClass,
                    itemId: "RoutingTableGrid"
                })
            }
        }
        var a = Ext.apply({
            title: _T("network", "route_table"),
            autoDestroy: true,
            width: 600,
            height: 400,
            layout: "fit",
            border: false,
            items: [this.StaticRoutingTab],
            listeners: {
                scope: this,
                activate: this.onActivate
            },
            buttons: [{
                text: _T("common", "close"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    onActivate: function() {
        this.StaticRoutingTab.onActivate()
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.StaticRouting.AddRuleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.ifClass = b.ifClass;
        this.rule_store = b.rule_store;
        this.selectModel = b.selectModel;
        this.ip_type = b.ip_type;
        this.isRuleValid = false;
        var a = Ext.apply({
            title: _T("network", "route_static"),
            autoDestroy: true,
            width: 450,
            height: 290,
            layout: "fit",
            border: false,
            items: [this.configForm({
                border: false,
                itemId: "formpanel"
            })],
            buttons: [{
                disabled: this._S("demo_mode"),
                text: _T("common", "create"),
                btnStyle: "blue",
                scope: this,
                handler: this.onAddRule
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            trackResetOnLoad: true,
            synodefaults: {
                width: 200
            },
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("network", "route_network"),
                name: "ip",
                allowBlank: false,
                vtype: ("ipv4" === this.ip_type) ? "v4ip" : "v6ip"
            }, {
                xtype: "syno_textfield",
                fieldLabel: ("ipv4" === this.ip_type) ? _T("network", "route_mask") : _T("network", "route_prefix_length"),
                name: "mask",
                allowBlank: false,
                vtype: ("ipv4" === this.ip_type) ? "netmask" : null
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("network", "route_gateway"),
                name: "gateway",
                allowBlank: false,
                vtype: ("ipv4" === this.ip_type) ? "v4ip" : "v6ip"
            }, {
                xtype: "syno_combobox",
                name: "ifname",
                width: 200,
                valueField: "value",
                displayField: "display",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: []
                }),
                fieldLabel: _T("network", "route_interface")
            }]
        }, a))
    },
    getForm: function() {
        return this.getComponent("formpanel").getForm()
    },
    addRuleCallback: function(e, d, c) {
        this.clearStatusBusy();
        var b = this.getForm();
        var a = function(h) {
            var g = b.findField(h);
            return g ? g.getValue() : undefined
        };
        if (!e) {
            this.setStatusError({
                text: _T("network", "route_static_rule_error"),
                clear: true
            });
            return false
        }
        this.rule_store.add(new this.rule_store.recordType({
            enable: true,
            ip: d.ip,
            mask: a("mask"),
            gateway: a("gateway"),
            ifname: a("ifname")
        }));
        this.close();
        return true
    },
    onAddRule: function() {
        var b = this.getForm();
        var c = {};
        var a = function(e) {
            var d = b.findField(e);
            return d ? d.getValue() : undefined
        };
        if (!b.isDirty()) {
            this.close();
            return true
        }
        if (!b.isValid()) {
            return false
        }
        c.enable = true;
        c.ip = a("ip");
        if ("ipv4" === this.ip_type) {
            c.mask = a("mask")
        } else {
            if ("ipv6" === this.ip_type) {
                c.prefix_length = a("mask")
            }
        }
        c.gateway = a("gateway");
        c.ifname = a("ifname");
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Static.Route",
            method: "test",
            params: {
                rule: c,
                type: this.ip_type
            },
            version: 1,
            scope: this,
            callback: this.addRuleCallback
        })
    },
    onCancel: function() {
        if (this.getForm().isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    onOpen: function() {
        var c = [];
        var a = {};
        for (var b in this.ifClass) {
            if (this.ifClass.hasOwnProperty(b)) {
                if ("vpn-client" === this.ifClass[b]) {
                    c.push([b, "VPN"])
                } else {
                    if ("ipv6tunnel" === this.ifClass[b]) {
                        c.push([b, _T("tcpip", "ipv6_tsp_tunnel")])
                    } else {
                        c.push([b, SYNO.SDS.Utils.Network.idToString(b)])
                    }
                }
            }
        }
        this.getForm().findField("ifname").store.loadData(c);
        a.ifname = this.getForm().findField("ifname").store.getAt(0).get("value");
        this.getForm().setValues(a);
        this.callParent([arguments])
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.StaticRouting.RuleStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.ruleFields = ["enable", "ip", "mask", "gateway", "ifname", "active"];
        if (!Ext.isDefined(b.module)) {
            throw Error("module is undefined")
        }
        var a = Ext.apply({
            api: "SYNO.Core.Network.Router.Static.Route",
            appWindow: b.appWin,
            method: "get",
            version: 1,
            autoDestroy: true,
            baseParams: {
                type: "ipv4"
            },
            root: "rules",
            fields: this.ruleFields,
            listeners: {
                exception: this.onStoreException,
                beforeload: this.onBeforeLoad,
                load: this.onAfterLoad,
                add: this.onRuleChanged,
                update: this.onUpdate,
                remove: this.onRuleChanged,
                scope: this
            }
        }, b);
        this.callParent([a])
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", c);
        this.module.appWin.unmask();
        this.module.appWin.setStatusError()
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy()
    },
    onAfterLoad: function(b, a, c) {
        this.module.appWin.clearStatusBusy();
        this.isRuleChanged = false;
        this.commitChanges()
    },
    onRuleChanged: function(b, c, a) {
        this.isRuleChanged = true;
        this.grid.checkOnRuleChanged();
        this.grid.getView().onLayout()
    },
    onUpdate: function(b, c, a) {
        this.grid.checkOnRuleChanged()
    },
    onSelectAll: function() {
        this.grid.checkOnRuleChanged()
    },
    getRules: function() {
        var c = [];
        var a = 0;
        var b = {};
        for (a = 0; a < this.getCount(); a++) {
            b = this.getAt(a).data;
            c.push(b)
        }
        return c
    },
    isDirty: function() {
        return this.isRuleChanged || this.getModifiedRecords().length > 0
    },
    clearDirty: function() {
        this.commitChanges();
        this.isRuleChanged = false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.StaticRoutingTab", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.appWin = b.appWin;
        this.enableColumn = new SYNO.ux.EnableColumn({
            header: _T("common", "commit"),
            dataIndex: "enable",
            width: 80,
            align: "center",
            enableFastSelectAll: true,
            listeners: {
                selectall: {
                    fn: function() {
                        this.getStore().onSelectAll()
                    },
                    scope: this
                }
            },
            commitChanges: false
        });
        this.renderer = {
            qtip: function(d, c) {
                c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(d) + '"';
                return d
            },
            qtip_interface: function(e, c) {
                var d = SYNO.SDS.Utils.Network.idToString(e);
                if ("vpn-client" === this.ifClass[e]) {
                    d = "VPN"
                } else {
                    if ("ipv6tunnel" === this.ifClass[e]) {
                        d = _T("tcpip", "ipv6_tsp_tunnel")
                    }
                }
                c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(d) + '"';
                return d
            },
            status: function(e, c) {
                var d = ("Enabled" === e) ? _T("common", "enabled") : _T("common", "disabled");
                c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(d) + '"';
                return d
            }
        };
        var a = Ext.apply({
            width: 600,
            height: 300,
            frame: false,
            border: false,
            title: _T("network", "route_static"),
            plugins: this.enableColumn,
            columns: [this.enableColumn, {
                header: _T("network", "route_network"),
                dataIndex: "ip",
                width: 120,
                align: "left",
                renderer: this.renderer.qtip
            }, {
                header: _T("network", "route_mask"),
                dataIndex: "mask",
                width: 120,
                align: "left",
                renderer: this.renderer.qtip
            }, {
                header: _T("network", "route_gateway"),
                dataIndex: "gateway",
                width: 120,
                align: "left",
                renderer: this.renderer.qtip
            }, {
                header: _T("network", "route_interface"),
                dataIndex: "ifname",
                width: 120,
                align: "left",
                scope: this,
                renderer: this.renderer.qtip_interface
            }, {
                header: _T("common", "status"),
                dataIndex: "active",
                width: 120,
                align: "left",
                renderer: this.renderer.status
            }],
            enableHdMenu: false,
            loadMask: false,
            cls: "without-dirty-red-grid",
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: this.checkOnSelectionChanged,
                    scope: this
                }
            }),
            store: new SYNO.SDS.AdminCenter.Network.StaticRouting.RuleStore({
                module: this.module,
                appWin: this.appWin,
                grid: this
            }),
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "create"),
                handler: this.onCreateRule,
                scope: this,
                itemId: "create"
            }, {
                xtype: "syno_button",
                text: _T("common", "delete"),
                handler: this.onDeleteRule,
                scope: this,
                itemId: "del"
            }, {
                xtype: "syno_button",
                text: _T("common", "save"),
                handler: this.onSave,
                scope: this,
                itemId: "save"
            }, {
                xtype: "syno_button",
                text: _T("network", "route_table"),
                handler: this.onRouteTable,
                scope: this,
                itemId: "routingTable"
            }, "->", {
                xtype: "syno_combobox",
                itemId: "ip_type_combobox",
                editable: false,
                allowBlank: false,
                store: [
                    ["ipv4", "IPv4"],
                    ["ipv6", "IPv6"]
                ],
                value: "ipv4",
                listeners: {
                    scope: this,
                    beforeselect: this.onBeforeSelect,
                    select: this.onTypeChange
                }
            }],
            listeners: {
                scope: this,
                activate: this.onActivate,
                deactivate: this.onDeactivate
            }
        }, b);
        this.callParent([a])
    },
    getButton: function(a) {
        var b = this.getTopToolbar();
        return b.getComponent(a)
    },
    enableButton: function(d, a) {
        var b = this.getButton(d);
        var c;
        if (!Ext.isObject(b)) {
            SYNO.Debug("enableButton failed: no button object of ", d);
            return
        }
        c = a ? b.enable() : b.disable()
    },
    disableAllButton: function() {
        Ext.each(["create", "del", "save"], function(a) {
            this.getButton(a).disable()
        }, this)
    },
    enableNecessaryButton: function() {
        this.enableButton("create", true)
    },
    checkOnRuleChanged: function() {
        this.enableButton("save", this.isDirty())
    },
    checkOnSelectionChanged: function(a) {
        if (0 < a.getCount()) {
            this.enableButton("del", true)
        } else {
            this.enableButton("del", false)
        }
    },
    onActivate: function() {
        if (this.isDirty()) {
            return
        }
        if (!Ext.isDefined(this.ipTypeCombo)) {
            this.ipTypeCombo = this.getTopToolbar().getComponent("ip_type_combobox")
        }
        this.ipTypeCombo.setValue("ipv4");
        this.disableAllButton();
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Gateway.List",
            method: "get",
            params: {
                iptype: this.ipTypeCombo.getValue(),
                type: "all"
            },
            version: 1,
            scope: this,
            callback: this.onLoadIfClass
        })
    },
    onLoadIfClass: function(c, b, a) {
        if (!c) {
            this.module.appWin.clearStatusBusy();
            return
        }
        this.ifClass = [];
        Ext.each(b.configs, function(d) {
            this.ifClass[d.ifname] = d["class"]
        }, this);
        this.getStore().load({
            callback: function(e, d, f) {
                this.module.appWin.clearStatusBusy();
                if (!f) {
                    return
                }
                this.enableNecessaryButton()
            },
            scope: this
        })
    },
    onDeactivate: function() {
        this.el.unmask()
    },
    onChangeConfirm: function(a) {
        if (a === "yes") {
            this.clearDirty()
        }
    },
    onCreateRule: function(a, b) {
        var c = new SYNO.SDS.AdminCenter.Network.StaticRouting.AddRuleDialog({
            module: this.module,
            owner: this.module.appWin,
            ifClass: this.ifClass,
            rule_store: this.getStore(),
            selectModel: this.getSelectionModel(),
            ip_type: this.ipTypeCombo.getValue()
        });
        c.open()
    },
    onDeleteRule: function() {
        var b = this.getSelectionModel().getSelections();
        var a = this.getStore();
        var c = 0;
        for (c = 0; c < b.length; c++) {
            a.remove(b[c])
        }
    },
    onSave: function() {
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.getSelectionModel().clearSelections();
        this.disableAllButton();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Static.Route",
            method: "set",
            params: {
                rules: this.getStore().getRules(),
                type: this.ipTypeCombo.getValue()
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.module.appWin.clearStatusBusy();
                if (!c) {
                    return
                }
                this.clearDirty();
                this.getStore().load({
                    params: {
                        type: this.ipTypeCombo.getValue()
                    },
                    callback: function(e, d, f) {
                        this.module.appWin.clearStatusBusy();
                        if (!f) {
                            return
                        }
                        this.disableAllButton();
                        this.enableNecessaryButton()
                    },
                    scope: this
                })
            }
        })
    },
    onRouteTable: function(a, b) {
        var c = new SYNO.SDS.AdminCenter.Network.RoutingTable.Window({
            module: this.module,
            owner: this.module.appWin,
            ifClass: this.ifClass,
            ip_type: this.ipTypeCombo.getValue()
        });
        c.open()
    },
    onBeforeSelect: function(c, a, b) {
        if (this.isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(d) {
                if ("yes" === d) {
                    this.clearDirty();
                    c.setValue(c.getStore().getAt(b).get(c.valueField));
                    c.fireEvent("select", c)
                }
            }, this);
            return false
        }
        return true
    },
    isDirty: function() {
        return this.getStore().isDirty()
    },
    clearDirty: function() {
        this.getStore().clearDirty()
    },
    onTypeChange: function(a) {
        this.disableAllButton();
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        this.getStore().load({
            params: {
                type: a.getValue()
            },
            scope: this
        });
        this.getColumnModel().setColumnHeader(2, ("ipv4" === a.getValue()) ? _T("network", "route_mask") : _T("network", "route_prefix_length"));
        this.module.appWin.clearStatusBusy();
        this.enableNecessaryButton()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function() {
        this.glusterComputingOrStorage = false;
        this.old_support_net_topology = "none";
        this.callParent(arguments)
    },
    getPanel: function() {
        if (!this.panel) {
            this.panel = new SYNO.SDS.AdminCenter.Network.TabPanel({
                module: this,
                owner: this.appWin
            })
        }
        return this.panel
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "GeneralTab":
                return "AdminCenter/connection_network_general.html";
            case "InterfaceTab":
                return "AdminCenter/connection_network_desc.html";
            case "TcTab":
                return "AdminCenter/connection_network_trafficcontrol.html";
            case "RouterTcTab":
                return "AdminCenter/connection_network_router_trafficcontrol.html";
            case "DSMSettingTab":
                return "AdminCenter/connection_network_dsmsetting.html";
            default:
                return "AdminCenter/connection_network_desc.html"
        }
    },
    getWebAPIs: function() {
        if (this.webAPIs) {
            return this.webAPIs
        }
        this.webAPIs = [];
        this.webAPIs.push({
            api: "SYNO.Core.CMS.Info",
            method: "get",
            version: 1,
            additional: ["gluster_role"]
        });
        Ext.each(this.getWifiStore().getWebAPIs(), function(a) {
            this.webAPIs.push(Ext.apply({
                api: a.api,
                method: a.method,
                version: a.version
            }, a.params))
        }, this);
        Ext.each(this.getStore().getWebAPIs(), function(a) {
            this.webAPIs.push(Ext.apply({
                api: a.api,
                method: a.method,
                version: a.version
            }, a.params))
        }, this);
        this.webAPIs.push({
            api: "SYNO.Core.Network.Router.Topology",
            method: "get",
            version: 2
        });
        return this.webAPIs
    },
    confirmCallback: function(a) {
        this.panel.StaticRoutingTab.onChangeConfirm(a)
    },
    activate: function(a) {
        this.panel.resetAllForm();
        this.startPolling();
        this.getWifiStore();
        this.panel.DSMSettingTab.loadForm();
        if ("yes" === this.panel._D("supportTc")) {
            this.panel.loadPortInfo();
            this.panel.IFStore.loadInterface()
        }
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    deactivate: function() {
        this.stopPolling();
        if ("yes" === this.appWin._D("supportTc")) {
            if (this.panel.getComponent("TcTab").isDirty()) {
                return false
            }
        }
        if (this.appWin._S("version") >= 4966 && Ext.isDefined(this.panel.RouterTcPanel) && !this.panel.RouterTcPanel.disabled) {
            if (this.panel.getComponent("RouterTcTab").isDirty()) {
                return false
            }
        }
        this.old_support_net_topology = "none";
        if (this.panel.generalTab.isDirty()) {
            return false
        }
        if (this.appWin._S("version") >= 4966) {
            if (this.panel.StaticRoutingTab.isDirty()) {
                return false
            }
        }
        if (this.panel.DSMSettingTab.getForm().isDirty()) {
            return false
        }
        return true
    },
    startPolling: function() {
        if (this.pollMainId) {
            return
        }
        this.pollMainId = this.appWin.pollReg({
            scope: this,
            webapi: {
                api: "SYNO.Entry.Request",
                version: 1,
                method: "request",
                params: {
                    stopwhenerror: false,
                    compound: this.getWebAPIs()
                }
            },
            interval: 5,
            immediate: true,
            status_callback: function(f, e, d, a) {
                var c = true;
                var b = {
                    has_fail: false,
                    result: []
                };
                Ext.each(e.result, function(j, g, i) {
                    if ("SYNO.Core.CMS.Info" === j.api) {
                        if (!j.success) {
                            var h = _T("common", "error_system");
                            if (e.error && e.error.code) {
                                h = SYNO.API.getErrorString(e.error.code)
                            }
                            this.appWin.setStatusError({
                                text: h,
                                clear: true
                            });
                            this.glusterComputingOrStorage = false;
                            return
                        }
                        if ((j.data.additional.gluster_role & 1) || (j.data.additional.gluster_role & 2)) {
                            this.glusterComputingOrStorage = true
                        } else {
                            this.glusterComputingOrStorage = false
                        }
                    } else {
                        if ("SYNO.Core.Network.Wifi.Client" === j.api) {
                            var k = {
                                has_fail: e.has_fail,
                                result: [j]
                            };
                            this.getWifiStore().onLoad.call(this.getWifiStore(), j.success, k, d.compound, a.params)
                        } else {
                            if ("SYNO.Core.Network.Router.Topology" === j.api) {
                                if (Ext.isDefined(this.panel.RouterTcPanel)) {
                                    if ("router" === j.data.net_topology && j.data.support_net_topology) {
                                        this.panel.RouterTcPanel.setDisabled(false);
                                        if (this.old_support_net_topology !== j.data.support_net_topology) {
                                            this.panel.RouterTcPanel.onGridStoreLoad("download")
                                        }
                                    } else {
                                        this.panel.RouterTcPanel.setDisabled(true)
                                    }
                                    this.old_support_net_topology = j.data.support_net_topology
                                }
                            } else {
                                c = c && j.success;
                                b.result.push(j)
                            }
                        }
                    }
                }, this);
                if (b) {
                    b.has_fail = c;
                    this.getStore().onLoad.call(this.getStore(), c, b, d.compound, a.params);
                    b = undefined
                }
                this.panel.generalTab.loadFormNoMask()
            }
        })
    },
    stopPolling: function() {
        if (!this.pollMainId) {
            return
        }
        this.appWin.pollUnreg(this.pollMainId);
        this.pollMainId = null
    },
    getStore: function() {
        if (this.store) {
            return this.store
        }
        this.store = new SYNO.SDS.AdminCenter.Network.InterfaceStore({
            owner: this.appWin,
            module: this,
            callback: {
                afterload: function() {
                    if (this.appWin && !this.appWin.isVisible()) {
                        return
                    }
                    if (this.appWin._S("version") < 4966) {
                        this.panel.generalTab.afterLoad()
                    }
                    if (this.panel.interfaceTab.activated) {
                        this.panel.interfaceTab.afterLoad()
                    }
                },
                scope: this
            }
        });
        return this.store
    },
    getWifiStore: function() {
        if (!this.wifiStore) {
            this.wifiStore = new SYNO.SDS.AdminCenter.Network.InterfaceStore({
                owner: this.appWin,
                module: this,
                autoDestroy: true,
                data: [],
                fields: ["id", "ip", "mask", "use_dhcp"],
                getWebAPIs: function() {
                    return [{
                        api: "SYNO.Core.Network.Wifi.Client",
                        method: "list",
                        version: 1,
                        callback: function(a) {
                            Ext.each(a, function(d, b, c) {
                                c[b].mask = d.netmask;
                                c[b].use_dhcp = d.is_dhcp
                            })
                        }
                    }]
                },
                scope: this
            });
            this.wifiStore.load({
                scope: this
            })
        }
        return this.wifiStore
    },
    getHAMsgBox: function() {
        var b = _T("mainmenu", "leaf_control_panel");
        var a = _TT("SYNO.SDS.HA.Instance", "ui", "not_allow_network_setting");
        this.appWin.getMsgBox().alert(b, a)
    },
    getGlusterBox: function() {
        var b = _T("status", "status_gluster");
        var a = _T("network", "need_disjoin_gluster");
        this.appWin.getMsgBox().alert(b, a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        var b = [];
        this.module = a.module;
        this.owner = a.owner;
        this.showOldUI = (this._S("version") < 4966);
        this.IFStore = this.createIFStore();
        this.portInfo = [];
        b.push(this.generalTab = new SYNO.SDS.AdminCenter.Network.GeneralTab({
            module: a.module,
            owner: this,
            itemId: "GeneralTab"
        }));
        b.push(this.interfaceTab = new SYNO.SDS.AdminCenter.Network.InterfaceTab({
            module: a.module,
            owner: this,
            itemId: "InterfaceTab"
        }));
        if ("yes" === this._D("supportTc")) {
            this.TcPanel = new SYNO.SDS.AdminCenter.Network.TcGridPanel({
                module: a.module,
                title: _T("firewall", "firewall_tc"),
                owner: this,
                itemId: "TcTab",
                IFStore: this.IFStore
            });
            b.push(this.TcPanel)
        }
        if (!this.showOldUI && "router" == this._S("net_topology")) {
            this.RouterTcPanel = new SYNO.SDS.AdminCenter.Network.RouterTcGridPanel({
                module: a.module,
                title: _T("firewall", "firewall_router_tc"),
                owner: this,
                itemId: "RouterTcTab"
            });
            b.push(this.RouterTcPanel)
        }
        if (!this.showOldUI) {
            this.StaticRoutingTab = new SYNO.SDS.AdminCenter.Network.StaticRoutingTab({
                module: a.module,
                appWin: a.module.appWin,
                owner: this,
                itemId: "StaticRoutingTab"
            });
            b.push(this.StaticRoutingTab)
        }
        b.push(this.DSMSettingTab = new SYNO.SDS.AdminCenter.Network.DSMSettingTab({
            module: a.module,
            owner: this,
            itemId: "DSMSettingTab"
        }));
        var c = Ext.apply({
            activeTab: 0,
            deferredRender: false,
            module: a.module,
            items: b
        }, a);
        this.callParent([c])
    },
    applyHandler: function(b, a) {
        if (this.showOldUI) {
            if (this.generalTab.isGatewayDirty() && this.generalTab.isGatewayEmpty()) {
                this.module.appWin.getMsgBox().confirm("", _T("common", "error_nogate"), function(c) {
                    if ("yes" !== c) {
                        return false
                    }
                    this.module.stopPolling();
                    this.applyAllForm()
                }, this)
            } else {
                this.module.stopPolling();
                this.applyAllForm()
            }
        } else {
            this.module.stopPolling();
            this.applyAllForm()
        }
    },
    onApiSuccess: function(d, b, a) {
        if ("set" === d) {
            if (!b.has_fail) {
                this.setStatusOK();
                this.module.startPolling();
                this.checkRedirectOrRestart(b.result)
            } else {
                var c = SYNO.API.getErrorString(b);
                this.setStatusError({
                    text: c,
                    clear: true
                })
            }
        }
        this.processReturnData(d, b, a)
    },
    checkRedirectOrRestart: function(b) {
        var c = {
            api: "SYNO.Core.Web.DSM",
            version: 1,
            method: "set"
        };
        var a;
        Ext.each(b, function(g) {
            if (SYNO.ux.Utils.checkApiConsistency(g, c)) {
                if (g.data && g.data.redirect_url) {
                    a = g.data.redirect_url
                }
                return false
            }
        });
        var f = !this.module.appWin.IsAllowRelay() || this.findAppWindow().getOpenConfig("cms_self") === true;
        if (f && Ext.isString(a) && -1 !== a.indexOf("://127.0.0.1")) {
            a = a.replace("://127.0.0.1", "://" + this.module.appWin.getDsmHost())
        }
        if (Ext.isString(a) && f) {
            if (this.restartHttpd) {
                this.showMsgBox(_T("service", "restart_apache"))
            }
            Ext.defer(this.redirectTo, this.restartHttpd ? 30000 : 1000, this, [a])
        } else {
            if (this.restartHttpd) {
                var e = (function() {
                    if (this.IsAllowRelay()) {
                        this.close()
                    }
                }).createDelegate(this.module.appWin);
                var d = SYNO.SDS.AdminCenter.Utils.WaitHttpdRestart(this.module.appWin, e);
                d()
            }
        }
    },
    redirectTo: function(a) {
        this.showMsgBox(_T("tcpip", "connect_new_ip"));
        window.onbeforeunload = null;
        window.location.href = a
    },
    showMsgBox: function(a) {
        if (!this.gMsgBox || this.gMsgBox.isDestroyed) {
            this.gMsgBox = new SYNO.SDS.MessageBoxV5({
                modal: true,
                draggable: false,
                renderTo: document.body
            })
        }
        this.gMsgBox.getWrapper().show({
            closable: false,
            msg: a || _T("common", "msg_waiting")
        })
    },
    createIFStore: function() {
        var a = new SYNO.SDS.AdminCenter.Network.SimpleIFStore({
            module: this.module,
            owner: this
        });
        return a
    },
    loadPortInfo: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Service.PortInfo",
            method: "load",
            params: {
                target: ["traffic_control"]
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                if (c) {
                    SYNO.SDS.AdminCenter.Utils.Render.ServerPortsParsing(b, this.portInfo, true);
                    if (this.TcPanel.getView) {
                        this.TcPanel.getView().refresh()
                    }
                } else {
                    this.module.appWin.getMsgBox().alert(_T("firewall", "firewall_tc"), _T("common", "commfail"))
                }
                this.clearStatusBusy()
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.TopologyTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)]);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "deactivate", this.onDeactivate, this)
    },
    fillConfig: function(b) {
        var a = this.createTopologyView();
        var c = {
            title: _T("network", "network_topology_configuration"),
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_displayfield",
                name: "topology_desc",
                value: _T("network", "network_topology_selection")
            }, {
                xtype: "syno_textfield",
                hidden: true,
                name: "net_topology",
                allowBlank: true,
                listeners: {
                    scope: this,
                    valid: function(f) {
                        var e = Ext.getCmp(this.topologyListId);
                        var d = e.getSelectedRecords();
                        if ((0 === d.size()) || (f.value !== d[0].get("id"))) {
                            e.select(e.store.find("id", f.value))
                        }
                    }
                }
            }, a]
        };
        Ext.apply(c, b);
        return c
    },
    getStoreData: function() {
        var a = [
            ["bridge", _T("network", "network_topology_ap"), _T("network", "network_topology_ap_desc"), "wrapper-ez-1"],
            ["router", _T("network", "network_topology_router"), _T("network", "network_topology_router_desc"), "wrapper-ez-2"],
            ["client", _T("network", "network_topology_sta"), _T("network", "network_topology_sta_desc"), "wrapper-ez-3"]
        ];
        return a
    },
    createTopologyView: function() {
        var b = new Ext.data.SimpleStore({
            data: this.getStoreData(),
            id: "id",
            autoLoad: true,
            fields: ["id", "title", "desc", "imgSrc"]
        });
        var c = '<table class="syno-wireless-network-topology-table"><tbody><tr><td><div class="table-left"></div></td><td class="table-content"><div class="title">{title}</div><div class="desc">{desc}</div><div class="{imgSrc}"></div><td><div class="table-right"></div></td></tr></tbody></table>';
        var a = new Ext.list.ListView({
            cls: "syno-wireless-network-topology-list",
            store: b,
            split: false,
            minWidth: 496,
            maxWidth: 500,
            autoScroll: false,
            hideHeaders: true,
            id: this.topologyListId = Ext.id(),
            plain: true,
            flex: 1,
            singleSelect: true,
            columns: [{
                dataIndex: "id",
                height: 148,
                tpl: c
            }],
            listeners: {
                scope: this,
                beforeclick: this.onBeforeClick,
                selectionchange: this.onListSelect
            }
        });
        return a
    },
    onBeforeClick: function(b, a, c) {
        if (0 > a) {
            return false
        }
        var d = this.getAllTopologyList()[a];
        return (0 <= this.getSupportedList().indexOf(d))
    },
    onListSelect: function(c, b) {
        var a = c.getSelectedIndexes();
        var d = c.store.getAt(a).get("id");
        this.getForm().findField("net_topology").setValue(d)
    },
    onActivate: function() {
        this.load();
        if (this.isTopologyTabNeedMask) {
            this.el.mask(_T("wireless_ap", "ap_support_condition"), "syno-ux-mask-info");
            this.parentTab.getFooterToolbar().hide()
        } else {
            this.el.unmask();
            this.parentTab.getFooterToolbar().show()
        }
    },
    load: function() {
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Topology",
            method: "get",
            version: 2,
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    this.module.appWin.clearStatusBusy();
                    return
                }
                this.getForm().setValues(b);
                this.ori_net_topology = b.net_topology;
                this.bridge_mode_forbidden = b.bridge_mode_forbidden;
                this.module.appWin.clearStatusBusy()
            }
        })
    },
    onDeactivate: function() {
        this.getForm().findField("net_topology").setValue(this.ori_net_topology);
        this.el.unmask();
        this.parentTab.getFooterToolbar().show()
    },
    applyHandler: function(b, a) {
        if (this.ori_net_topology === this.getForm().findField("net_topology").getValue()) {
            this.parentTab.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return
        }
        if ((this.getForm().findField("net_topology").getValue() === "bridge") && (this.bridge_mode_forbidden === true)) {
            this.module.appWin.getMsgBox().alert("still not showing title", _T("wireless_ap", "bridge_mode_forbidden"));
            return
        }
        this.parentTab.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.Topology",
            method: "set",
            version: 1,
            scope: this,
            params: {
                net_topology: this.getForm().findField("net_topology").getValue()
            },
            callback: function(h, e, d) {
                this.parentTab.clearStatusBusy();
                var c = _T("common", "error_system");
                if (!h) {
                    if (e && e.code) {
                        c = SYNO.API.getErrorString(e.code)
                    }
                    this.parentTab.setStatusError({
                        text: c,
                        clear: true
                    });
                    return
                }
                var g = this.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application";
                var f = this.findAppWindow().getOpenConfig("cms_self") === true;
                if ((!g || f) && e) {
                    SYNO.SDS.AdminCenter.Network.Utils.Redirect.apply(this, [e.redirect, e.secure, e.ip_list, e.port, e.auth_key, "SYNO.SDS.AdminCenter.Wireless.Main", 40000])
                }
            }
        })
    },
    getAllTopologyList: function() {
        var a = [];
        Ext.each(this.getStoreData(), function(d, b, c) {
            if (!d instanceof Array) {
                return true
            }
            a.push(d[0])
        });
        return a
    },
    updateSelectionLayout: function(a) {
        var b = this.getAllTopologyList();
        Ext.each(b, function(e, c, d) {
            if (0 > a.indexOf(e)) {
                this.disableTopologySelection(c)
            } else {
                this.enableTopologySelection(c)
            }
        }, this);
        this.setSupportedList(a)
    },
    getSupportedList: function() {
        return this.SupportedList
    },
    setSupportedList: function(a) {
        this.SupportedList = a
    },
    enableTopologySelection: function(a) {
        Ext.getCmp(this.topologyListId).getNode(a).setOpacity(1)
    },
    disableTopologySelection: function(a) {
        Ext.getCmp(this.topologyListId).getNode(a).setOpacity(0.5)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.WPSPinDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.panel = new SYNO.SDS.Utils.FormPanel({
            height: 286,
            width: 640,
            cls: "wps-form",
            layout: {
                type: "hbox",
                pack: "start",
                align: "stretch"
            },
            items: [{
                xtype: "syno_fieldset",
                title: _T("wireless_ap", "ap_wps_pbc_title"),
                collapsible: false,
                cls: "wps-fieldset",
                items: [{
                    xtype: "syno_displayfield",
                    cls: "wps-description",
                    value: _T("wireless_ap", "ap_wps_pbc_guide")
                }, {
                    xtype: "syno_button",
                    btnStyle: "blue",
                    cls: "wps-pbc-button",
                    disabled: this._S("demo_mode"),
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    scope: this,
                    handler: this.onPush
                }]
            }, {
                xtype: "syno_panel",
                width: 16
            }, {
                xtype: "syno_fieldset",
                title: _T("wireless_ap", "ap_wps_pin_title"),
                collapsible: false,
                cls: "wps-fieldset",
                items: [{
                    xtype: "syno_displayfield",
                    cls: "wps-description",
                    value: _T("wireless_ap", "ap_wps_pin_guide")
                }, {
                    xtype: "syno_textfield",
                    hideLabel: true,
                    name: "wps_pin",
                    width: 250
                }, {
                    xtype: "syno_panel",
                    height: 16
                }, {
                    xtype: "syno_button",
                    btnStyle: "blue",
                    text: _T("wireless_ap", "ap_wps_pin_register"),
                    disabled: this._S("demo_mode"),
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    scope: this,
                    handler: this.onRegister
                }]
            }]
        });
        var b = {
            title: _T("wireless_ap", "ap_wps_setting"),
            width: 640,
            height: 400,
            border: false,
            layout: {
                type: "vbox",
                pack: "start",
                align: "stretch"
            },
            cls: "wps-window",
            items: [{
                xtype: "syno_displayfield",
                value: _T("wireless_ap", "ap_wps_instruction")
            }, this.panel],
            buttons: [{
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        };
        Ext.apply(b, a);
        return b
    },
    WpsPinValidator: function(b) {
        var a = 0;
        if (8 != b.length) {
            return false
        }
        a += 3 * (Math.floor(b / 10000000) % 10);
        a += 1 * (Math.floor(b / 1000000) % 10);
        a += 3 * (Math.floor(b / 100000) % 10);
        a += 1 * (Math.floor(b / 10000) % 10);
        a += 3 * (Math.floor(b / 1000) % 10);
        a += 1 * (Math.floor(b / 100) % 10);
        a += 3 * (Math.floor(b / 10) % 10);
        a += 1 * ((b) % 10);
        return (0 === (a % 10))
    },
    onPush: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.WPS",
            method: "start_pbc",
            params: {
                netif: this.adapter
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    this.module.appWin.getMsgBox().alert("still not showing title", _T("common", "forminvalid"));
                    return
                }
                this.module.appWin.getMsgBox().alert("still not showing title", _T("wireless_ap", "ap_wps_pbc_instruction"));
                this.close()
            }
        })
    },
    onRegister: function() {
        var a = this.panel.getForm().findField("wps_pin").getValue();
        if (!this.WpsPinValidator(a)) {
            this.setStatusError({
                text: _T("wireless_ap", "ap_wps_pin_err"),
                clear: true
            });
            return
        }
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.WPS",
            method: "start_pin",
            params: {
                netif: this.adapter,
                pin: a
            },
            version: 1,
            scope: this,
            callback: function(d, c, b) {
                if (!d) {
                    this.module.appWin.getMsgBox().alert("still not showing title", _T("common", "forminvalid"));
                    return
                }
                this.owner.getMsgBox().alert("still not showing title", _T("wireless_ap", "ap_wps_pbc_instruction"));
                this.close()
            }
        })
    },
    onSave: function() {},
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.SecurityBase", {
    extend: "SYNO.SDS.Utils.FormPanel",
    isGuestNet: false,
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            xtype: "syno_fieldset",
            items: []
        };
        Ext.apply(b, a);
        return b
    },
    createSecurityID: function() {
        if (false === this.isGuestNet) {
            this.wep_radio.push(Ext.id());
            this.wpa_psk_radio.push(Ext.id());
            this.wps_button.push(Ext.id());
            this.wpa_eap_radio.push(Ext.id())
        } else {
            this.guest_wep_radio.push(Ext.id());
            this.guest_wpa_psk_radio.push(Ext.id())
        }
    },
    getSecurityItemList: function() {
        var a = [];
        var b = this.isGuestNet ? 0 : 0;
        a.push({
            xtype: "syno_combobox",
            name: "security",
            indent: b + 1,
            width: 200,
            hidden: false,
            valueField: "value",
            displayField: "display",
            value: "none",
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: (this.isGuestNet) ? [
                    ["none", "None"],
                    ["wep", _T("wireless_ap", "ap_encrypt_wep")],
                    ["wpa_psk", _T("wireless_ap", "ap_wpa_type_personal")]
                ] : [
                    ["none", "None"],
                    ["wep", _T("wireless_ap", "ap_encrypt_wep")],
                    ["wpa_psk", _T("wireless_ap", "ap_wpa_type_personal")],
                    ["wpa_eap", _T("wireless_ap", "ap_wpa_type_enterprise")]
                ]
            }),
            fieldLabel: _T("wireless_ap", "ap_security_setting"),
            listeners: {
                scope: this,
                disable: this.disableSecurityGroup,
                enable: function(c) {
                    this.setSecurityGroup(c.value)
                },
                select: function(e, c, d) {
                    this.setSecurityGroup(c.data.value);
                    this.doLayout()
                }
            }
        });
        a.push({
            indent: b,
            xtype: "hidden",
            name: "is_dirty_key"
        });
        a.push({
            indent: b + 1,
            xtype: "syno_textfield",
            textType: "password",
            fieldLabel: _T("common", "password"),
            width: 200,
            allowBlank: false,
            name: "wep_key",
            hidden: false,
            validator: function(c) {
                if (!c.match(/^[0-9a-fA-F]{10}$/) && !c.match(/^[0-9a-fA-F]{26}$/) && !c.match(/^[0-9a-zA-Z]{5}$/) && !c.match(/^[0-9a-zA-Z]{13}$/)) {
                    return _T("tcpip", "wireless_password_wep_limit")
                }
                return true
            },
            listeners: {}
        });
        a.push({
            xtype: "syno_combobox",
            name: "wpa_psk_type",
            indent: b + 1,
            width: 200,
            valueField: "value",
            displayField: "display",
            hidden: false,
            value: 2,
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: [
                    [1, _T("wireless_ap", "ap_wpa_type_wpa")],
                    [2, _T("wireless_ap", "ap_wpa_type_wpa2")],
                    [3, _T("wireless_ap", "ap_wpa_type_mixed")]
                ]
            }),
            fieldLabel: _T("wireless_ap", "ap_security_mode")
        });
        a.push({
            xtype: "syno_combobox",
            name: "wpa_psk_encryption",
            indent: b + 1,
            width: 200,
            hidden: false,
            valueField: "value",
            displayField: "display",
            value: "AES",
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: [
                    ["TKIP", _T("wireless_ap", "ap_wpa_encryption_TKIP")],
                    ["AES", _T("wireless_ap", "ap_wpa_encryption_AES")],
                    ["TKIP_AES", _T("wireless_ap", "ap_wpa_encryption_TKIP_AES")]
                ]
            }),
            fieldLabel: _T("tcpip", "wireless_encrypt")
        });
        a.push({
            indent: b + 1,
            xtype: "syno_textfield",
            textType: "password",
            fieldLabel: _T("common", "password"),
            width: 200,
            allowBlank: true,
            hidden: false,
            name: "wpa_psk_pwd",
            validator: function(c) {
                if (c.match(/^[\w\$\@\^\`\,\|\%\;\.\~\(\)\/\\\{\}\:\?\[\]\=\-\+\_\#\!]{8,63}$/)) {
                    return true
                }
                return _T("tcpip", "wireless_password_wpa_limit")
            },
            listeners: {}
        });
        if (!this.isGuestNet) {
            a = a.concat(this.getEnterpriseItemList())
        } else {
            Ext.each(a, function(c) {
                if (c.hasOwnProperty("name")) {
                    c.name = "guest_" + c.name
                }
            })
        }
        return a
    },
    getEnterpriseItemList: function() {
        var a = [];
        var b = true;
        if ("yes" === this._D("support_pci_wifi")) {
            b = false
        }
        a.push({
            xtype: "syno_combobox",
            name: "wpa_eap_type",
            hidden: b,
            indent: 1,
            width: 200,
            valueField: "value",
            displayField: "display",
            value: 2,
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: [
                    [1, _T("wireless_ap", "ap_wpa_type_wpa")],
                    [2, _T("wireless_ap", "ap_wpa_type_wpa2")],
                    [3, _T("wireless_ap", "ap_wpa_type_mixed")]
                ]
            }),
            fieldLabel: _T("wireless_ap", "ap_security_mode")
        });
        a.push({
            xtype: "syno_combobox",
            name: "wpa_eap_encryption",
            hidden: b,
            indent: 1,
            width: 200,
            valueField: "value",
            displayField: "display",
            value: "AES",
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: [
                    ["TKIP", _T("wireless_ap", "ap_wpa_encryption_TKIP")],
                    ["AES", _T("wireless_ap", "ap_wpa_encryption_AES")],
                    ["TKIP_AES", _T("wireless_ap", "ap_wpa_encryption_TKIP_AES")]
                ]
            }),
            fieldLabel: _T("tcpip", "wireless_encrypt")
        });
        a.push({
            xtype: "syno_displayfield",
            name: "wpa_eap_desc",
            hidden: false,
            value: _T("wireless_ap", "ap_auth_server_desc"),
            indent: 1
        });
        a.push({
            xtype: "syno_textfield",
            name: "auth_ip",
            hidden: b,
            indent: 1,
            width: 200,
            maxlength: 15,
            allowBlank: false,
            fieldLabel: _T("wireless_ap", "ap_auth_server_ip"),
            vtype: "v4ip"
        });
        a.push({
            xtype: "syno_textfield",
            name: "auth_port",
            hidden: b,
            indent: 1,
            width: 200,
            maxlength: 5,
            vtype: "port",
            allowBlank: false,
            fieldLabel: _T("wireless_ap", "ap_auth_server_port")
        });
        a.push({
            indent: 1,
            xtype: "syno_textfield",
            name: "auth_shared_secret",
            textType: "password",
            hidden: b,
            fieldLabel: _T("wireless_ap", "ap_auth_server_shared_secret"),
            width: 200,
            maxlength: 128,
            allowBlank: false
        });
        return a
    },
    loadSecurityData: function(a) {
        var b = this.isGuestNet ? "guest_" : "";
        switch (a[b + "security"]) {
            case "disabled":
                a[b + "security"] = "none";
                break;
            case "WEP":
                a[b + "security"] = "wep";
                a[b + "wep_key"] = a[b + "password"];
                break;
            case "PERSONAL_WPA":
                a[b + "security"] = "wpa_psk";
                a[b + "wpa_psk_type"] = 1;
                a[b + "wpa_psk_encryption"] = a[b + "encryption"];
                a[b + "wpa_psk_pwd"] = a[b + "password"];
                break;
            case "PERSONAL_WPA2":
                a[b + "security"] = "wpa_psk";
                a[b + "wpa_psk_type"] = 2;
                a[b + "wpa_psk_encryption"] = a[b + "encryption"];
                a[b + "wpa_psk_pwd"] = a[b + "password"];
                break;
            case "PERSONAL_WPA_MIXED":
                a[b + "security"] = "wpa_psk";
                a[b + "wpa_psk_type"] = 3;
                a[b + "wpa_psk_encryption"] = a[b + "encryption"];
                a[b + "wpa_psk_pwd"] = a[b + "password"];
                break;
            case "ENTERPRISE_WPA":
                a[b + "security"] = "wpa_eap";
                a[b + "wpa_eap_type"] = 1;
                a[b + "wpa_eap_encryption"] = a[b + "encryption"];
                a[b + "auth_ip"] = a[b + "auth_server_ip"];
                a[b + "auth_port"] = a[b + "auth_server_Port"];
                a[b + "auth_shared_secret"] = a[b + "auth_server_shared_secret"];
                break;
            case "ENTERPRISE_WPA2":
                a[b + "security"] = "wpa_eap";
                a[b + "wpa_eap_type"] = 2;
                a[b + "wpa_eap_encryption"] = a[b + "encryption"];
                a[b + "auth_ip"] = a[b + "auth_server_ip"];
                a[b + "auth_port"] = a[b + "auth_server_Port"];
                a[b + "auth_shared_secret"] = a[b + "auth_server_shared_secret"];
                break;
            case "ENTERPRISE_WPA_MIXED":
                a[b + "security"] = "wpa_eap";
                a[b + "wpa_eap_type"] = 3;
                a[b + "wpa_eap_encryption"] = a[b + "encryption"];
                a[b + "auth_ip"] = a[b + "auth_server_ip"];
                a[b + "auth_port"] = a[b + "auth_server_Port"];
                a[b + "auth_shared_secret"] = a[b + "auth_server_shared_secret"];
                break;
            default:
                break
        }
        return a
    },
    isArray: function(a) {
        return Object.prototype.toString.call(a) === "[object Array]"
    },
    showSecurityGroup: function(c) {
        if (!this.isArray(c)) {
            return false
        }
        var b;
        for (var a = 0; a < c.length; a++) {
            b = this.getForm().findField(c[a]);
            if (b) {
                b.show();
                b.enable()
            }
        }
        return true
    },
    hideSecurityGroup: function(c) {
        if (!this.isArray(c)) {
            return false
        }
        var b;
        for (var a = 0; a < c.length; a++) {
            b = this.getForm().findField(c[a]);
            if (b) {
                b.hide();
                b.disable()
            }
        }
    },
    hideAll: function() {
        var b = this.isGuestNet ? "guest_" : "";
        var a = [b + "wep_key", b + "wpa_psk_type", b + "wpa_psk_encryption", b + "wpa_psk_pwd", b + "wpa_eap_type", b + "wpa_eap_encryption", b + "wpa_eap_desc", b + "auth_ip", b + "auth_port", b + "auth_shared_secret"];
        this.hideSecurityGroup(a)
    },
    setSecurityGroup: function(c) {
        var b = this.isGuestNet ? "guest_" : "";
        var a = [];
        this.hideAll();
        switch (c) {
            case "wep":
                a = [b + "wep_key"];
                break;
            case "wpa_psk":
                a = [b + "wpa_psk_type", b + "wpa_psk_encryption", b + "wpa_psk_pwd"];
                break;
            case "wpa_eap":
                a = [b + "wpa_eap_type", b + "wpa_eap_encryption", b + "wpa_eap_desc", b + "auth_ip", b + "auth_port", b + "auth_shared_secret"];
                break;
            default:
                break
        }
        this.showSecurityGroup(a)
    },
    disableSecurityGroup: function() {
        var b = this.isGuestNet ? "guest_" : "";
        var d = [b + "wep_key", b + "wpa_psk_type", b + "wpa_psk_encryption", b + "wpa_psk_pwd", b + "wpa_eap_type", b + "wpa_eap_encryption", b + "wpa_eap_desc", b + "auth_ip", b + "auth_port", b + "auth_shared_secret"];
        for (var a = 0; a < d.length; a++) {
            var c = this.getForm().findField(d[a]);
            if (c) {
                c.disable()
            }
        }
    },
    isSecurityFieldDirty: function() {
        var b = false;
        var d = this.isGuestNet ? "guest_" : "";
        var a = [];
        switch (this.getForm().findField(d + "security").getValue()) {
            case "none":
                a = [d + "security"];
                break;
            case "wep":
                a = [d + "security", d + "wep_key"];
                break;
            case "wpa_psk":
                a = [d + "security", d + "wpa_psk_type", d + "wpa_psk_encryption", d + "wpa_psk_pwd"];
                break;
            case "wpa_eap":
                a = [d + "security", d + "wpa_eap_type", d + "wpa_eap_encryption", d + "wpa_eap_desc", d + "auth_ip", d + "auth_port", d + "auth_shared_secret"];
                break;
            default:
                break
        }
        for (var c = 0; c < a.size(); c++) {
            if (this.getForm().findField(a[c]).isDirty()) {
                b = true
            }
        }
        if (b) {
            this.dirty_fields.push("security_group")
        }
        return b
    },
    transSecurityParam: function(b) {
        var a = this.isGuestNet ? "guest_" : "";
        switch (this.getForm().findField(a + "security").getValue()) {
            case "none":
                b[a + "security"] = "disabled";
                break;
            case "wep":
                b[a + "security"] = "WEP";
                b[a + "password"] = this.getForm().findField(a + "wep_key").getValue();
                break;
            case "wpa_psk":
                if (1 == this.getForm().findField(a + "wpa_psk_type").getValue()) {
                    b[a + "security"] = "PERSONAL_WPA"
                } else {
                    if (2 == this.getForm().findField(a + "wpa_psk_type").getValue()) {
                        b[a + "security"] = "PERSONAL_WPA2"
                    } else {
                        b[a + "security"] = "PERSONAL_WPA_MIXED"
                    }
                }
                b[a + "encryption"] = this.getForm().findField(a + "wpa_psk_encryption").getValue();
                b[a + "password"] = this.getForm().findField(a + "wpa_psk_pwd").getValue();
                break;
            case "wpa_eap":
                if (1 == this.getForm().findField(a + "wpa_eap_type").getValue()) {
                    b[a + "security"] = "ENTERPRISE_WPA"
                } else {
                    if (2 == this.getForm().findField(a + "wpa_eap_type").getValue()) {
                        b[a + "security"] = "ENTERPRISE_WPA2"
                    } else {
                        b[a + "security"] = "ENTERPRISE_WPA_MIXED"
                    }
                }
                b[a + "encryption"] = this.getForm().findField(a + "wpa_eap_encryption").getValue();
                b[a + "auth_server_ip"] = this.getForm().findField(a + "auth_ip").getValue();
                b[a + "auth_server_Port"] = this.getForm().findField(a + "auth_port").getValue();
                b[a + "auth_server_shared_secret"] = this.getForm().findField(a + "auth_shared_secret").getValue();
                break;
            default:
                break
        }
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.ScheduleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    scheduleField: null,
    parentForm: null,
    scheduleTable: null,
    title: _T("schedule", "schedule_title"),
    btn_label_1: "",
    btn_label_2: "",
    mask_label: "",
    mask: "",
    constructor: function(a) {
        this.module = a.module;
        Ext.apply(this, a || {});
        this.scheduleTable = new SYNO.ux.ScheduleTable({
            height: 380,
            buttons: [{
                label: this.btn_label_1
            }, {
                label: this.btn_label_2
            }, {
                label: this.mask_label,
                disabled: true
            }],
            listeners: {
                scope: this,
                beforecellchange: function(c, e, f, d) {
                    if ("0" === this.mask[e]) {
                        return false
                    }
                    return true
                }
            }
        });
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            height: 380,
            width: 678,
            resizable: false,
            padding: "0 20px",
            layout: "anchor",
            items: [this.scheduleTable],
            buttons: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.okHandler
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: function() {
                    this.close()
                }
            }]
        };
        Ext.apply(b, a);
        return b
    },
    getMaskValue: function() {
        var a = "";
        if (null === this.parentForm) {
            return ""
        }
        if (this.parentForm.schedMaskEnable) {
            a = this.parentForm.schedMask
        }
        var b = this.parentForm.host_panel;
        if (!b || undefined === b.findField("schedule").getValue()) {
            SYNO.Debug("Mask from response: " + a);
            return a
        }
        if (b.findField("schedule_enabled").getValue()) {
            a = b.findField("schedule").getValue();
            SYNO.Debug("Mask enabled from AP form: " + a)
        } else {
            a = "";
            SYNO.Debug("Mask disabled from AP form")
        }
        return a
    },
    okHandler: function() {
        var a = this.getScheduleValueWithMask(this.scheduleTable.getSchedule(), this.mask, "0");
        this.scheduleField.setValue(a);
        this.close()
    },
    onShow: function() {
        var a = this.getMaskValue();
        var b = this.getScheduleValueWithMask(this.scheduleField.getValue(), a, "2");
        this.scheduleTable.setSchedule(b);
        this.mask = a
    },
    getScheduleValueWithMask: function(d, a, c) {
        var b = d.split("");
        Ext.each(b, function(g, e, f) {
            if ("0" === a[e]) {
                f[e] = c
            }
        }, this);
        return b.join("")
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.WirelessTab", {
    extend: "SYNO.SDS.AdminCenter.Wireless.SecurityBase",
    adapter: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.dirty_fields = [];
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.createEnableGroup, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        var b = {
            title: _T("wireless_ap", "ap_general_setting"),
            autoScroll: true,
            height: 500,
            items: this.createGeneralTabObj()
        };
        Ext.apply(b, a);
        return b
    },
    loadFormData: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.Hotspot",
            method: "get",
            params: {
                netif: this.adapter,
                additional: ["general", "security", "capability"]
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    return
                }
                this.loadCapabilityStoreData(b.additional);
                this.loadWirelessData(b.additional);
                this.setWirelessWidthComboStatus(true);
                this.doLayout()
            }
        })
    },
    loadCapabilityStoreData: function(a) {
        this.setSupportChannelStore(a.cap_channel);
        this.setSupportModeStore(a.cap_mode);
        this.setSupportBandwidthStore(a.cap_mode);
        this.loadChannelStore(a.mode);
        this.loadBandwidthStore(a.mode)
    },
    loadWirelessData: function(a) {
        a = this.loadSecurityData(a);
        a.wifi_possibly_on = (a.enabled || a.schedule_enabled);
        this.getForm().setValues(a);
        this.setSecurityGroup(a.security);
        this.getForm().findField("enabled").setDisabled(false);
        this.getForm().findField("schedule_enabled").setDisabled(false)
    },
    addTip: function(a) {
        if (a) {
            return '&nbsp;<img src="/webman/resources/images/information.png" style="vertical-align:sub;" border="0" ext:qtip="' + Ext.util.Format.htmlEncode(a) + '">'
        }
        return ""
    },
    chkWifiSchedStatus: function(a) {
        this.getComponent("schedule_button").setDisabled(!a)
    },
    setWifiPossiblyOn: function() {
        var c = this.getForm();
        var b = c.findField("enabled");
        var a = c.findField("schedule_enabled");
        if (!b || !a) {
            return
        }
        c.findField("wifi_possibly_on").setValue(b.getValue() || a.getValue())
    },
    createGeneralTabObj: function() {
        var a = [{
            xtype: "syno_displayfield",
            value: _T("wireless_ap", "ap_intr")
        }, {
            xtype: "syno_checkbox",
            name: "enabled",
            index: Ext.id(),
            boxLabel: _T("wireless_ap", "ap_general_wifi_switch"),
            disabled: true,
            listeners: {
                scope: this,
                check: function(c, b) {
                    this.setWifiPossiblyOn()
                }
            }
        }, {
            xtype: "syno_compositefield",
            name: "ssid_field",
            indent: 1,
            items: [{
                xtype: "syno_textfield",
                width: 200,
                name: "ssid",
                fieldLabel: _T("wireless_ap", "ap_ssid"),
                maxlength: 32,
                allowBlank: false
            }, {
                xtype: "syno_combobox",
                name: "display_ssid",
                width: 80,
                value: true,
                valueField: "value",
                displayField: "display",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: [
                        [true, _T("wireless_ap", "ap_sside_show")],
                        [false, _T("wireless_ap", "ap_ssid_hide")]
                    ]
                })
            }]
        }, {
            xtype: "syno_combobox",
            name: "mode",
            indent: 1,
            width: 200,
            valueField: "value",
            displayField: "display",
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: []
            }),
            fieldLabel: _T("wireless_ap", "ap_mode"),
            scope: this,
            listeners: {
                scope: this,
                select: function(d, b, c) {
                    this.loadChannelStore(b.data.value);
                    this.loadBandwidthStore(b.data.value)
                }
            }
        }, {
            xtype: "syno_combobox",
            name: "bandwidth",
            indent: 1,
            width: 200,
            value: "20_40MHZ",
            valueField: "value",
            displayField: "display",
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: []
            }),
            fieldLabel: _T("wireless_ap", "ap_channel_width")
        }, {
            xtype: "syno_combobox",
            name: "channel",
            indent: 1,
            width: 200,
            valueField: "value",
            displayField: "display",
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: []
            }),
            fieldLabel: _T("wireless_ap", "ap_channel")
        }, {
            xtype: "syno_combobox",
            name: "tx_power",
            indent: 1,
            width: 200,
            valueField: "value",
            displayField: "display",
            store: new Ext.data.SimpleStore({
                fields: ["value", "display"],
                data: [
                    ["low", _T("wireless_ap", "ap_txpower_low")],
                    ["medium", _T("wireless_ap", "ap_txpower_middle")],
                    ["high", _T("wireless_ap", "ap_txpower_high")]
                ]
            }),
            fieldLabel: _T("wireless_ap", "ap_tx_power"),
            value: "high"
        }, {
            xtype: "syno_numberfield",
            name: "max_num_client",
            fieldLabel: _T("wireless_ap", "max_sta_num") + this.addTip(_T("wireless_ap", "connection_notify")),
            vtype: "number",
            hidden: true,
            indent: 1,
            width: 200,
            value: 256,
            minValue: 1,
            maxValue: 256,
            allowDecimals: false,
            allowBlank: false,
            allowNegative: false
        }, {
            xtype: "syno_checkbox",
            indent: 1,
            name: "wmm_enabled",
            boxLabel: _T("wireless_ap", "ap_advanced_qos_wmm_switch")
        }];
        a = a.concat(this.getSecurityItemList());
        a.push({
            xtype: "hidden",
            name: "schedule"
        });
        a.push({
            xtype: "syno_checkbox",
            name: "schedule_enabled",
            boxLabel: _T("schedule", "schedule_enable"),
            hidden: false,
            disabled: true,
            index: Ext.id(),
            listeners: {
                scope: this,
                check: function(c, b) {
                    this.chkWifiSchedStatus(b);
                    this.setWifiPossiblyOn()
                }
            }
        });
        a.push({
            xtype: "syno_button",
            synotype: "indent_no_label",
            disabled: true,
            indent: "1",
            itemId: "schedule_button",
            text: _T("wireless_ap", "ap_set_schedule"),
            autoWidth: true,
            handler: function() {
                var b = new SYNO.SDS.AdminCenter.Wireless.ScheduleDialog({
                    scheduleField: this.getForm().findField("schedule"),
                    btn_label_1: _T("wireless_ap", "ap_wifi_off"),
                    btn_label_2: _T("wireless_ap", "ap_wifi_on"),
                    parentForm: null,
                    module: this.module,
                    owner: this.findWindow()
                });
                b.show()
            },
            scope: this
        });
        a.push({
            xtype: "syno_displayfield",
            value: '<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + _T("wireless_ap", "country_code_hint"),
            style: {
                marginTop: "10px"
            }
        });
        a.push({
            xtype: "syno_checkbox",
            value: undefined,
            hidden: true,
            name: "wifi_possibly_on"
        });
        return a
    },
    createEnableGroup: function() {
        var a;
        var b = ["ssid_field", "mode", "bandwidth", "channel", "tx_power", "max_num_client", "wmm_enabled", "security"];
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "wifi_possibly_on", b)
    },
    modeMatch: function(b, c) {
        for (var a = 0; a < c.length; a++) {
            if (b === c[a]) {
                return true
            }
        }
        return false
    },
    setSupportModeStore: function(c) {
        var a;
        if (1 < this.Freq5GHZ.length) {
            a = [
                ["a", "11a"],
                ["b", "11b"],
                ["g", "11g"],
                ["n", "11n"],
                ["an", "11a+11n"],
                ["bn", "11b+11n"],
                ["gn", "11g+11n"],
                ["an+ac", "11an+11ac"]
            ]
        } else {
            a = [
                ["b", "11b"],
                ["g", "11g"],
                ["n", "11n"],
                ["bn", "11b+11n"],
                ["gn", "11g+11n"]
            ]
        }
        var b = [];
        Ext.each(a, function(d) {
            if (this.modeMatch(d[0], c)) {
                b.push(d)
            }
        }, this);
        this.getForm().findField("mode").store.loadData(b, false)
    },
    setSupportChannelStore: function(a) {
        this.Freq24MHZ = [
            [0, _T("common", "auto")]
        ];
        this.Freq5GHZ = [
            [0, _T("common", "auto")]
        ];
        Ext.each(a, function(b) {
            var c = _T("wireless_ap", "ap_channel") + " " + b.id;
            if (b.frequency) {
                c += ", " + b.frequency
            }
            if (b.id > 14) {
                this.Freq5GHZ.push([b.id, c])
            } else {
                this.Freq24MHZ.push([b.id, c])
            }
        }, this)
    },
    setSupportBandwidthStore: function(a) {
        this.BW204080MHZ = [
            ["20_40_80MHZ", "20/40/80MHz"],
            ["20_40MHZ", _T("wireless_ap", "ap_width_20_40MHz")],
            ["20MHZ", _T("wireless_ap", "ap_width_20MHz")]
        ];
        this.BW2040MHZ = [
            ["20_40MHZ", _T("wireless_ap", "ap_width_20_40MHz")],
            ["20MHZ", _T("wireless_ap", "ap_width_20MHz")]
        ]
    },
    loadChannelStore: function(b) {
        var a = this.getForm().findField("channel").getValue();
        if (!b) {
            b = this.getForm().findField("mode").getValue()
        }
        this.getForm().findField("channel").store.removeAll();
        if (("a" === b) || ("an" === b) || ("an+ac" === b)) {
            this.getForm().findField("channel").store.loadData(this.Freq5GHZ)
        } else {
            this.getForm().findField("channel").store.loadData(this.Freq24MHZ)
        }
        this.getForm().findField("channel").store.sort("value", "ASC");
        if (0 > this.getForm().findField("channel").store.findExact("value", a)) {
            this.getForm().findField("channel").setValue(this.getForm().findField("channel").store.getAt(0).get("value"))
        }
    },
    loadBandwidthStore: function(d) {
        var a = this.getForm().findField("bandwidth");
        var c = a.store;
        var b = a.getValue();
        if (!d) {
            d = this.getForm().findField("mode").getValue()
        }
        c.removeAll();
        if ("an+ac" === d) {
            c.loadData(this.BW204080MHZ)
        } else {
            c.loadData(this.BW2040MHZ)
        }
        if (0 > c.findExact("value", b)) {
            a.setValue(c.getAt(0).get("value"))
        }
    },
    setWirelessWidthComboStatus: function(d) {
        var b = this.getForm().findField("mode").getValue();
        var a = this.getForm().findField("bandwidth");
        var c = this.getForm().findField("wmm_enabled");
        if (("a" === b) || ("b" === b) || ("g" === b)) {
            a.setDisabled(true)
        } else {
            if (!this.getForm().findField("mode").disabled) {
                a.setDisabled(false)
            }
            if (!d) {
                c.setValue(true)
            }
        }
    },
    isFieldDirty: function(a) {
        if (this.getForm().findField(a).isDirty()) {
            this.dirty_fields.push(a);
            return true
        }
        return false
    },
    isDirty: function() {
        var d = this.getForm();
        var b = false;
        var a = ["enabled", "ssid", "display_ssid", "mode", "bandwidth", "channel", "tx_power", "max_num_client", "wmm_enabled", "schedule", "schedule_enabled"];
        if (!d.isDirty()) {
            return b
        }
        for (var c = 0; c < a.size(); c++) {
            if (this.isFieldDirty(a[c])) {
                b = true
            }
        }
        if (this.isSecurityFieldDirty()) {
            b = true
        }
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.GuestNetworkTab", {
    extend: "SYNO.SDS.AdminCenter.Wireless.SecurityBase",
    isGuestNet: true,
    constructor: function(a) {
        this.owner = a.owner;
        this.dirty_fields = [];
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.createEnableGroup, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        var b = {
            title: _T("wireless_ap", "ap_guest_network"),
            autoScroll: true,
            height: 500,
            items: this.createGeneralTabObj(),
            listeners: {
                scope: this,
                activate: this.onActivate
            }
        };
        Ext.apply(b, a);
        return b
    },
    onActivate: function() {
        var a = this.parentForm.GeneralPanel.getForm().findField("wifi_possibly_on").getValue();
        this.getForm().findField("guest_enabled").setDisabled(!a);
        this.getForm().findField("guest_schedule_enabled").setDisabled(!a);
        this.getForm().findField("guest_wifi_possibly_on").setDisabled(!a)
    },
    loadFormData: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.Hotspot",
            method: "get",
            params: {
                netif: this.adapter,
                additional: ["guest"]
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    return
                }
                this.loadGuestNetworkData(b.additional);
                this.doLayout()
            }
        })
    },
    addTip: function(a) {
        if (a) {
            return '&nbsp;<img src="/webman/resources/images/information.png" style="vertical-align:sub;" border="0" ext:qtip="' + Ext.util.Format.htmlEncode(a) + '">'
        }
        return ""
    },
    createEnableGroup: function() {
        var b;
        var a = ["guest_ssid_field", "guest_max_num_client", "guest_allow_access_guest", "guest_allow_access_lan", "guest_allow_access_http_https_only", "guest_security"];
        b = new SYNO.SDS.Utils.EnableCheckGroup(this.getForm(), "guest_wifi_possibly_on", a)
    },
    chkSchedStatus: function(a) {
        this.getComponent("guest_schedule_button").setDisabled(!a)
    },
    setGuestNetPossiblyOn: function() {
        var c = this.getForm();
        var b = c.findField("guest_enabled");
        var a = c.findField("guest_schedule_enabled");
        if (!b || !a) {
            return
        }
        c.findField("guest_wifi_possibly_on").setValue(b.getValue() || a.getValue())
    },
    createGeneralTabObj: function() {
        var a = [{
            xtype: "syno_checkbox",
            boxLabel: _T("wireless_ap", "ap_guest_enable_ssid"),
            name: "guest_enabled",
            disabled: true,
            listeners: {
                scope: this,
                check: function(b) {
                    this.setGuestNetPossiblyOn()
                }
            }
        }, {
            xtype: "syno_compositefield",
            name: "guest_ssid_field",
            indent: 1,
            items: [{
                xtype: "syno_textfield",
                width: 200,
                name: "guest_ssid",
                fieldLabel: _T("wireless_ap", "ap_ssid"),
                maxlength: 32,
                allowBlank: false
            }, {
                xtype: "syno_combobox",
                name: "guest_display_ssid",
                width: 80,
                value: true,
                valueField: "value",
                displayField: "display",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: [
                        [true, _T("wireless_ap", "ap_sside_show")],
                        [false, _T("wireless_ap", "ap_ssid_hide")]
                    ]
                })
            }]
        }, {
            xtype: "syno_numberfield",
            name: "guest_max_num_client",
            fieldLabel: _T("wireless_ap", "max_sta_num") + this.addTip(_T("wireless_ap", "connection_notify")),
            vtype: "number",
            hidden: true,
            indent: 1,
            width: 200,
            minValue: 1,
            maxValue: 256,
            allowDecimals: false,
            allowBlank: false,
            allowNegative: false
        }];
        a = a.concat(this.getSecurityItemList());
        a.push({
            xtype: "syno_displayfield",
            indent: 1,
            value: _T("wireless_ap", "ap_guest_access_rule_desc")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "guest_allow_access_guest",
            indent: 1,
            boxLabel: _T("wireless_ap", "ap_guest_ap_non_isolate")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "guest_allow_access_lan",
            indent: 1,
            boxLabel: _T("wireless_ap", "ap_guest_allow_lan_access")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "guest_allow_access_http_https_only",
            indent: 1,
            boxLabel: _T("wireless_ap", "ap_guest_allow_http_https_only")
        });
        a.push({
            xtype: "syno_checkbox",
            boxLabel: _T("wireless_ap", "ap_guest_enable_schedule_plan"),
            name: "guest_schedule_enabled",
            disabled: true,
            index: Ext.id(),
            listeners: {
                scope: this,
                check: function(c, b) {
                    this.chkSchedStatus(b);
                    this.setGuestNetPossiblyOn()
                },
                disable: function() {
                    this.chkSchedStatus(false)
                },
                enable: function(b) {
                    this.chkSchedStatus(b.getValue())
                }
            }
        });
        a.push({
            xtype: "syno_button",
            synotype: "indent_no_label",
            disabled: true,
            indent: "1",
            autoWidth: true,
            itemId: "guest_schedule_button",
            text: _T("wireless_ap", "ap_guest_set_schedule"),
            listeners: {
                scope: this,
                click: function() {
                    this.host_panel = this.parentForm.GeneralPanel.getForm();
                    this.schedMaskEnable = this.host_panel.findField("schedule_enabled");
                    this.schedMask = this.host_panel.findField("schedule");
                    var b = new SYNO.SDS.AdminCenter.Wireless.ScheduleDialog({
                        title: _T("wireless_ap", "ap_guest_network_schedule_plan"),
                        scheduleField: this.getForm().findField("guest_schedule"),
                        btn_label_1: _T("wireless_ap", "ap_guest_network_off"),
                        btn_label_2: _T("wireless_ap", "ap_guest_network_on"),
                        mask_label: _T("wireless_ap", "ap_wifi_off"),
                        parentForm: this,
                        module: this.module,
                        owner: this.findWindow()
                    });
                    b.show()
                }
            }
        });
        a.push({
            xtype: "hidden",
            name: "guest_schedule"
        });
        a.push({
            xtype: "syno_checkbox",
            value: false,
            hidden: true,
            name: "guest_wifi_possibly_on"
        });
        return a
    },
    loadGuestNetworkData: function(a) {
        a = this.loadSecurityData(a);
        a.guest_wifi_possibly_on = (a.guest_enabled || a.guest_schedule_enabled);
        this.getForm().setValues(a);
        this.setSecurityGroup(a.guest_security);
        this.getForm().findField("guest_enabled").setDisabled(false);
        this.getForm().findField("guest_schedule_enabled").setDisabled(false)
    },
    isFieldDirty: function(a) {
        if (this.getForm().findField(a).isDirty()) {
            this.dirty_fields.push(a);
            return true
        }
        return false
    },
    isDirty: function() {
        var d = this.getForm();
        var b = false;
        var a = ["guest_enabled", "guest_ssid", "guest_display_ssid", "guest_max_num_client", "guest_allow_access_guest", "guest_allow_access_lan", "guest_allow_access_http_https_only", "guest_schedule", "guest_schedule_enabled"];
        if (!d.isDirty()) {
            return b
        }
        for (var c = 0; c < a.size(); c++) {
            if (this.isFieldDirty(a[c])) {
                b = true
            }
        }
        if (this.isSecurityFieldDirty()) {
            b = true
        }
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.WifiEditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.isLoaded = false;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var d = this.getWifiEditItem(a);
        var c = new SYNO.ux.TabPanel({
            deferredRender: false,
            layoutOnTabChange: true,
            activeTab: 0,
            plain: true,
            height: 500,
            items: d
        });
        var b = {
            title: _T("network", "if_hotspot"),
            width: 550,
            autoHeight: true,
            items: c,
            buttons: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                xtype: "syno_button",
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }],
            listeners: {
                scope: this,
                activate: this.onActivate
            }
        };
        Ext.apply(b, a);
        return b
    },
    getWifiEditItem: function(a) {
        var b = [];
        b.push(this.GeneralPanel = new SYNO.SDS.AdminCenter.Wireless.WirelessTab({
            owner: a.owner,
            module: a.module,
            appWin: a.appWin,
            adapter: a.adapter
        }));
        if (a.guest_support) {
            b.push(this.GuestNetPanel = new SYNO.SDS.AdminCenter.Wireless.GuestNetworkTab({
                owner: a.owner,
                module: a.module,
                appWin: a.appWin,
                adapter: a.adapter,
                parentForm: this
            }))
        }
        return b
    },
    onActivate: function() {
        if (this.isLoaded) {
            return
        }
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        if (this.GeneralPanel) {
            this.GeneralPanel.loadFormData()
        }
        if (this.GuestNetPanel) {
            this.GuestNetPanel.loadFormData()
        }
        this.clearStatusBusy();
        this.isLoaded = true
    },
    onApply: function() {
        var f = {};
        var b = 0;
        if (!this.isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return
        }
        if (!this.isValid()) {
            this.setStatusError({
                text: _T("error", "error_bad_field"),
                clear: true
            });
            return
        }
        if (this.GeneralPanel) {
            var d = this.GeneralPanel.getForm();
            var e = this.GeneralPanel.dirty_fields;
            for (b = 0; b < e.size(); b++) {
                if ("security_group" === e[b]) {
                    f = this.GeneralPanel.transSecurityParam(f)
                } else {
                    f[e[b]] = d.findField(e[b]).getValue()
                }
            }
        }
        if (this.GuestNetPanel) {
            var c = this.GuestNetPanel.getForm();
            var a = this.GuestNetPanel.dirty_fields;
            for (b = 0; b < a.size(); b++) {
                if ("security_group" === a[b]) {
                    f = this.GuestNetPanel.transSecurityParam(f)
                } else {
                    f[a[b]] = c.findField(a[b]).getValue()
                }
            }
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.Hotspot",
            method: "set",
            params: {
                netif: this.adapter,
                config: f
            },
            version: 1,
            scope: this,
            callback: function(i, h, g) {
                this.clearStatusBusy();
                if (!i) {
                    this.setStatusError({
                        text: _T("common", "forminvalid"),
                        clear: true
                    })
                }
                this.close()
            }
        })
    },
    onCancel: function() {
        if (this.isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    isDirty: function() {
        var a = false;
        if (this.GeneralPanel && this.GeneralPanel.isDirty()) {
            a = true
        }
        if (this.GuestNetPanel && this.GuestNetPanel.isDirty()) {
            a = true
        }
        return a
    },
    isValid: function() {
        var a = true;
        if (this.GeneralPanel && !this.GeneralPanel.getForm().isValid()) {
            a = false
        }
        if (this.GuestNetPanel && !this.GuestNetPanel.getForm().isValid()) {
            a = false
        }
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.Client.IPv6", {
    extend: "SYNO.SDS.AdminCenter.Network.IPv6Tab",
    constructor: function(a) {
        this.isWifiClient = true;
        this.prefix = "ipv6_";
        var b = {
            defaults: {
                width: 200
            },
            win: {
                ifname: a.adapter
            }
        };
        Ext.apply(b, a);
        this.callParent([b])
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.Client.IPv4", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.prefix = "";
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.createEnableGroup, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        var b = {
            title: "IPv4",
            hideMode: "offsets",
            module: a.module,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "tcpip_dhcp"),
                name: "is_dhcp",
                indent: 0,
                checked: true,
                inputValue: "yes"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "tcpip_manual"),
                name: "is_dhcp",
                indent: 0,
                inputValue: "no"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "tcpip_ipaddr"),
                name: "ip",
                indent: 1,
                allowBlank: false,
                maxlength: 15,
                vtype: "v4ip",
                validator: this.ipValidator
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "tcpip_mask"),
                name: "netmask",
                indent: 1,
                allowBlank: false,
                maxlength: 15,
                vtype: "netmask",
                validator: this.ipValidator
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "tcpip_gateway"),
                name: "gateway",
                indent: 1,
                allowBlank: true,
                maxlength: 15,
                vtype: "v4ip",
                validator: function(d) {
                    var c = this.ownerCt.getForm().getValues();
                    if ("" !== d && !SYNO.SDS.Utils.Network.GatewayMatchIP(d, c.ip, c.netmask)) {
                        return _T("common", "error_notmatch")
                    }
                    return true
                }
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "primary_dns"),
                name: "dns",
                allowBlank: true,
                maxlength: 15,
                indent: 1,
                vtype: "v4ip"
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_set_as_default_gw"),
                name: "is_default_gateway",
                checked: false
            }]
        };
        Ext.apply(b, a);
        return b
    },
    ipValidator: function(f) {
        var d = this.ownerCt.getForm().findField("ip");
        var c = d.getValue().split(".");
        var b = this.ownerCt.getForm().findField("netmask");
        var g = b.getValue().split(".");
        if (c.size() !== 4 || g.size() !== 4 || !b.getActiveError().empty()) {
            return true
        }
        var h = parseInt(c[0], 10) << 24 | parseInt(c[1], 10) << 16 | parseInt(c[2], 10) << 8 | parseInt(c[3], 10);
        var a = parseInt(g[0], 10) << 24 | parseInt(g[1], 10) << 16 | parseInt(g[2], 10) << 8 | parseInt(g[3], 10);
        var e = h | ~a;
        if (h == e) {
            return _T("network", "error_bad_broadcast_ip")
        }
        return true
    },
    createEnableGroup: function() {
        var a = this.getForm();
        this.checkGroupDHCP = new SYNO.ux.Utils.EnableRadioGroup(a, "is_dhcp", {
            no: ["ip", "netmask", "gateway", "dns"]
        })
    },
    fillContent: function(a) {
        if (false === a.is_dhcp) {
            a.is_dhcp = "no"
        } else {
            a.is_dhcp = "yes"
        }
        this.getForm().setValues(a)
    },
    getWebAPISetData: function() {
        var b = this.getForm();
        var d = {};
        var c = ["is_dhcp", "ip", "netmask", "gateway", "dns", "is_default_gateway"];
        Ext.each(c, function(e) {
            d[e] = b.findField(e).getValue()
        });
        d.interface_name = this.adapter;
        var a = {
            api: "SYNO.Core.Network.Wifi.Client",
            version: 1,
            method: "set",
            params: d
        };
        return a
    },
    getWebAPIGetData: function() {
        var a = {
            api: "SYNO.Core.Network.Wifi.Client",
            version: 1,
            method: "get",
            params: {
                interface_name: this.adapter
            }
        };
        return a
    },
    isDirty: function() {
        return this.getForm().isDirty()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.WifiClientDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.isLoaded = false;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.IPv4Panel = new SYNO.SDS.AdminCenter.Wireless.Client.IPv4({
            module: a.module,
            appWin: a.appWin,
            adapter: a.adapter
        });
        this.IPv6Panel = new SYNO.SDS.AdminCenter.Wireless.Client.IPv6({
            module: a.module,
            appWin: a.appWin,
            adapter: a.adapter
        });
        this.PanelArray = [this.IPv4Panel, this.IPv6Panel];
        var c = new SYNO.ux.TabPanel({
            deferredRender: false,
            layoutOnTabChange: true,
            activeTab: 0,
            plain: true,
            items: this.PanelArray
        });
        var b = {
            title: _T("network", "if_wireless"),
            width: 460,
            height: 400,
            items: c,
            buttons: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                xtype: "syno_button",
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }],
            listeners: {
                scope: this,
                activate: this.onActivate
            }
        };
        Ext.apply(b, a);
        return b
    },
    getWebAPIGetDatas: function() {
        var a = [];
        Ext.each(this.PanelArray, function(b) {
            var c = b.getWebAPIGetData();
            if (c instanceof Array) {
                Ext.each(c, function(d) {
                    a.push(d)
                })
            } else {
                a.push(b.getWebAPIGetData())
            }
        });
        return a
    },
    getWebAPISetDatas: function() {
        var a = [];
        Ext.each(this.PanelArray, function(b) {
            if (b.getWebAPISetData && b.isDirty()) {
                var c = b.getWebAPISetData();
                if (c instanceof Array) {
                    Ext.each(c, function(d) {
                        a.push(d)
                    })
                } else {
                    a.push(c)
                }
            }
        });
        return a
    },
    loadData: function() {
        var a = this.getWebAPIGetDatas();
        this.setStatusBusy();
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: a
            },
            callback: function(b, g, f, e) {
                var c = {};
                var d = {};
                Ext.each(g.result, function(h, i, j) {
                    if (!h.success) {
                        SYNO.Debug("Failed on " + h.api + " " + h.method);
                        return
                    }
                    switch (h.api) {
                        case "SYNO.Core.Network.Wifi.Client":
                            Ext.iterate(h.data, function(k) {
                                c[this.IPv4Panel.prefix + k] = h.data[k]
                            }, this);
                            break;
                        case "SYNO.Core.Network.IPv6":
                            Ext.iterate(h.data, function(k) {
                                d[this.IPv6Panel.prefix + k] = h.data[k]
                            }, this);
                            break
                    }
                }, this);
                this.IPv4Panel.fillContent(c);
                this.IPv6Panel.fillContent(d);
                this.clearStatusBusy()
            },
            scope: this
        })
    },
    onActivate: function() {
        if (this.isLoaded) {
            return
        }
        this.setStatusBusy();
        this.loadData();
        this.clearStatusBusy();
        this.isLoaded = true
    },
    onApply: function() {
        var a = this.getWebAPISetDatas();
        var b = false;
        Ext.each(this.PanelArray, function(c) {
            if (!c.getForm().isValid()) {
                b = true;
                return false
            }
        }, this);
        if (b) {
            this.setStatusError({
                text: _T("common", "forminvalid")
            });
            return
        }
        this.setStatusBusy();
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: a
            },
            callback: function(c, h, g, f) {
                if (!c || h.has_fail) {
                    var e = _T("common", "error_system");
                    this.enable();
                    Ext.each(h.result, function(i) {
                        if (i.error && i.error.code) {
                            e = SYNO.API.getErrorString(i.error.code);
                            return false
                        }
                    }, this);
                    this.setStatusError({
                        text: e,
                        clear: true
                    });
                    return
                }
                if (h.result instanceof Array) {
                    for (var d = 0; h.result.length > d; d++) {
                        if (h.result[d].data && h.result[d].data.redirect) {
                            this.doRedirect(h.result[0].data);
                            break
                        }
                    }
                }
                this.clearStatusBusy();
                this.close()
            },
            scope: this
        })
    },
    doRedirect: function(a) {
        SYNO.SDS.AdminCenter.Network.Utils.Redirect.apply(this, [a.redirect, a.secure, a.ip_list, a.port, a.auth_key, "SYNO.SDS.AdminCenter.Wireless.Main", 10000])
    },
    onCancel: function() {
        if (this.isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    isDirty: function() {
        var a = false;
        Ext.each(this.PanelArray, function(b) {
            a = a || b.getForm().isDirty()
        });
        return a
    }
});
SYNO.SDS.AdminCenter.Wireless.WirelessGrid = Ext.extend(SYNO.ux.GridPanel, {
    constructor: function(c) {
        var a = c.store;
        var b = Ext.apply({
            store: a,
            cls: "syno-wireless-client",
            cm: new Ext.grid.ColumnModel({
                columns: [{
                    header: "",
                    dataIndex: "security",
                    width: 35,
                    renderer: function(d) {
                        if ("disabled" != d) {
                            return '<div class="wifi-security-icon"></div>'
                        }
                    }
                }, {
                    id: "essid",
                    header: _T("tcpip", "wireless_essid"),
                    sortable: true,
                    dataIndex: "essid"
                }, {
                    header: _T("tcpip", "wireless_signal"),
                    dataIndex: "signal",
                    width: 100,
                    sortable: true,
                    renderer: function(e) {
                        var d = Math.round(e / 20);
                        return '<div class="wifi-signal-icon wifi-signal-' + d + '"></div>'
                    }
                }, {
                    header: _T("tcpip", "wireless_protocol"),
                    dataIndex: "hwmode",
                    width: 90
                }, {
                    header: _T("wireless_ap", "ap_channel"),
                    sortable: true,
                    dataIndex: "channel",
                    width: 50
                }],
                getTotalWidth: function(f) {
                    var h = Ext.isChrome ? parseInt((/chrome\/(\d{2})/).exec(navigator.userAgent.toLowerCase())[1], 10) : NaN;
                    if (!this.totalWidth) {
                        var e = (Ext.isChrome && h > 18 ? 2 : 0);
                        this.totalWidth = 0;
                        for (var g = 0, d = this.config.length; g < d; g++) {
                            if (f || !this.isHidden(g)) {
                                this.totalWidth += (this.getColumnWidth(g) + e)
                            }
                        }
                    }
                    return this.totalWidth
                }
            }),
            autoExpandColumn: "essid",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            })
        }, c);
        SYNO.SDS.AdminCenter.Wireless.WirelessGrid.superclass.constructor.call(this, b)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.WifiClientWizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.ifname = b.ifname;
        var a = Ext.apply({
            title: _T("tcpip", "wireless_setup"),
            width: 600,
            height: 550,
            steps: []
        }, b);
        this.getScanResultStore(this.ifname);
        a.steps.push(this.configChooser({
            itemId: "chooser",
            nextId: ["normal", "eap", "hidden", "adhoc"]
        }));
        a.steps.push(this.configNormal({
            itemId: "normal",
            nextId: null
        }));
        a.steps.push(this.configEap({
            itemId: "eap",
            nextId: null
        }));
        a.steps.push(this.configHidden({
            itemId: "hidden",
            nextId: null
        }));
        a.steps.push(this.configAdHoc({
            itemId: "adhoc",
            nextId: null
        }));
        this.callParent([a])
    },
    getScanResultStore: function(a) {
        if (!this.scanStore) {
            this.scanStore = new Ext.data.JsonStore({
                root: "wlan_configs",
                fields: [{
                    name: "essid",
                    mapping: "essid"
                }, {
                    name: "bssid",
                    mapping: "bssid"
                }, {
                    name: "opmode",
                    mapping: "opmode"
                }, {
                    name: "channel",
                    mapping: "channel"
                }, {
                    name: "security",
                    mapping: "security"
                }, {
                    name: "encryption",
                    mapping: "encryption"
                }, {
                    name: "hwmode",
                    mapping: "hwmode"
                }, {
                    name: "signal",
                    mapping: "signal"
                }],
                remoteSort: false,
                sortInfo: {
                    field: "signal",
                    direction: "DESC"
                },
                idIndex: 0
            })
        }
        return this.scanStore
    },
    configChooser: function(b) {
        this.refreshLinkId = Ext.id();
        var a = Ext.apply({
            headline: _T("tcpip", "wireless_title_setup"),
            xtype: "form",
            title: "",
            items: [{
                xtype: "syno_radio",
                boxLabel: String.format('{0} <a href="#" id="{1}" class="link-font">{2}</a> )', _T("tcpip", "wireless_setup_normal") + " (", this.refreshLinkId, _T("common", "alt_refresh")),
                name: "wlan_source",
                inputValue: "normal",
                checked: true,
                listeners: {
                    scope: this,
                    afterrender: function(c) {
                        Ext.get(this.refreshLinkId).on("click", function() {
                            this.scanWireless()
                        }, this)
                    },
                    check: function(d, c) {
                        if (c) {
                            d.ownerCt.getComponent("wireless_grid").enable()
                        } else {
                            d.ownerCt.getComponent("wireless_grid").disable()
                        }
                    }
                }
            }, new SYNO.SDS.AdminCenter.Wireless.WirelessGrid({
                module: this.module,
                store: this.scanStore,
                owner: this,
                itemId: "wireless_grid",
                indent: 1,
                header: false,
                border: true,
                width: 560,
                height: 200
            }), {
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "wireless_setup_manual"),
                name: "wlan_source",
                inputValue: "hidden"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("tcpip", "wireless_setup_adhoc"),
                name: "wlan_source",
                inputValue: "adhoc"
            }],
            getSelect: function() {
                var c = this.getComponent("wireless_grid");
                var d = c.getSelectionModel().getSelections();
                if (d.length > 0) {
                    return d[0]
                } else {
                    return null
                }
            },
            getNext: function() {
                var c = this.getForm().getValues().wlan_source;
                var d = this.getSelect();
                if ("normal" === c && !d) {
                    this.owner.getMsgBox().alert(this.owner.title, _T("tcpip", "wireless_request_network"));
                    return false
                }
                if ("normal" === c && "disabled" === d.get("security")) {
                    this.owner.connect.call(this.owner, {
                        essid: d.get("essid"),
                        bssid: d.get("bssid"),
                        user: "",
                        password: "",
                        security: d.get("security"),
                        encryption: d.get("encryption"),
                        opmode: d.get("opmode"),
                        hwmode: d.get("hwmode")
                    });
                    return false
                }
                if ("normal" === c && (("ENTERPRISE_WPA" === d.get("security")) || ("ENTERPRISE_WPA2" === d.get("security")) || ("ENTERPRISE_WPA_MIXED" === d.get("security")))) {
                    c = "eap"
                }
                return c
            }
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    wepPasswordValidation: function(a) {
        if (5 != a.length && 13 != a.length) {
            if (!a.match(/^[0-9a-fA-F]{10}$/) && !a.match(/^[0-9a-fA-F]{26}$/)) {
                return _T("tcpip", "wireless_password_wep_limit")
            }
        }
        return true
    },
    configNormal: function(b) {
        var c = this;
        var a = Ext.apply({
            headline: _T("tcpip", "wireless_title_password"),
            xtype: "form",
            items: [{
                xtype: "syno_displayfield",
                value: _T("tcpip", "wireless_request_password")
            }, {
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("common", "password"),
                name: "password",
                width: 250,
                validator: function(e) {
                    var d = c.getStep("chooser").getSelect().get("security");
                    if ("WEP" === d) {
                        return c.wepPasswordValidation(e)
                    } else {
                        if (e.length < 8 || e.length > 63) {
                            return _T("tcpip", "wireless_password_wpa_limit")
                        }
                    }
                    return true
                }
            }],
            activate: function() {
                this.getForm().clearInvalid();
                this.getForm().findField("password").focus()
            },
            getNext: function() {
                var d = this.owner.getStep("chooser").getSelect();
                if (!this.getForm().isValid()) {
                    return false
                }
                this.owner.connect.call(this.owner, {
                    essid: d.get("essid"),
                    bssid: d.get("bssid"),
                    user: "",
                    password: this.getForm().findField("password").getValue(),
                    security: d.get("security"),
                    encryption: d.get("encryption"),
                    opmode: d.get("opmode"),
                    hwmode: d.get("hwmode")
                });
                return false
            }
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    configEap: function(b) {
        var a = Ext.apply({
            headline: _T("tcpip", "wireless_title_password"),
            xtype: "form",
            items: [{
                xtype: "syno_displayfield",
                value: _T("tcpip", "wireless_request_eap")
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "username"),
                maxlength: 256,
                allowBlank: false,
                width: 250,
                name: "user"
            }, {
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("common", "password"),
                allowBlank: false,
                width: 250,
                name: "password"
            }],
            getNext: function() {
                var c = this.owner.getStep("chooser").getSelect();
                if (!this.getForm().isValid()) {
                    return false
                }
                this.owner.connect.call(this.owner, {
                    essid: c.get("essid"),
                    bssid: c.get("bssid"),
                    user: this.getForm().findField("user").getValue(),
                    password: this.getForm().findField("password").getValue(),
                    security: c.get("security"),
                    encryption: c.get("encryption"),
                    opmode: c.get("opmode"),
                    hwmode: c.get("hwmode")
                });
                return false
            }
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    configHidden: function(b) {
        var c = this;
        var a = Ext.apply({
            headline: _T("tcpip", "wireless_title_manual"),
            xtype: "form",
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "wireless_essid"),
                name: "essid",
                minLength: 1,
                maxlength: 32,
                width: 250,
                allowBlank: false
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("wireless_ap", "ap_security_mode"),
                name: "security",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: [
                        ["disabled", _T("wireless_ap", "ap_encrypt_open")],
                        ["WEP", "WEP"],
                        ["PERSONAL_WPA", "PERSONAL_WPA"],
                        ["PERSONAL_WPA2", "PERSONAL_WPA2"],
                        ["PERSONAL_WPA_MIXED", "PERSONAL_WPA_MIXED"],
                        ["ENTERPRISE_WPA", "ENTERPRISE_WPA"],
                        ["ENTERPRISE_WPA2", "ENTERPRISE_WPA2"],
                        ["ENTERPRISE_WPA_MIXED", "ENTERPRISE_WPA_MIXED"]
                    ]
                }),
                value: "disabled",
                valueField: "value",
                displayField: "display",
                width: 250,
                itemId: "security",
                editable: false,
                triggerAction: "all",
                allowBlank: false,
                forceSelection: true,
                listeners: {
                    select: function(h) {
                        var e = h.getValue();
                        var i = this.ownerCt.getComponent("encryption");
                        var g = this.ownerCt.getComponent("user");
                        var d = this.ownerCt.getComponent("password");
                        switch (e) {
                            case "disabled":
                                i.setValue("");
                                i.disable();
                                g.setValue("");
                                g.disable();
                                d.clearInvalid();
                                d.disable();
                                break;
                            case "WEP":
                                i.setValue("");
                                i.disable();
                                g.setValue("");
                                g.disable();
                                d.enable();
                                break;
                            case "PERSONAL_WPA":
                            case "PERSONAL_WPA2":
                            case "PERSONAL_WPA_MIXED":
                                i.setValue("AES");
                                i.enable();
                                g.setValue("");
                                g.disable();
                                d.enable();
                                break;
                            case "ENTERPRISE_WPA":
                            case "ENTERPRISE_WPA2":
                            case "ENTERPRISE_WPA_MIXED":
                                i.setValue("AES");
                                i.enable();
                                g.setValue("");
                                g.enable();
                                d.enable();
                                break;
                            default:
                                SYNO.DEBUG("unknown security selected");
                                break
                        }
                    }
                }
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("tcpip", "wireless_encrypt"),
                name: "encryption",
                store: ["AES", "TKIP"],
                value: "",
                width: 250,
                itemId: "encryption",
                editable: false,
                triggerAction: "all",
                allowBlank: false,
                forceSelection: true,
                disabled: true
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "username"),
                allowBlank: false,
                name: "user",
                itemId: "user",
                width: 250,
                disabled: true
            }, {
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("common", "password"),
                name: "password",
                itemId: "password",
                width: 250,
                allowBlank: false,
                validator: function(d) {
                    if ("disabled" === this.ownerCt.getComponent("security").getValue() || "ENTERPRISE_WPA" === this.ownerCt.getComponent("security").getValue() || "ENTERPRISE_WPA2" === this.ownerCt.getComponent("security").getValue() || "ENTERPRISE_WPA_MIXED" === this.ownerCt.getComponent("security").getValue()) {
                        return true
                    } else {
                        if ("WEP" === this.ownerCt.getComponent("security").getValue()) {
                            return c.wepPasswordValidation(d)
                        } else {
                            if (d.length < 8 || d.length > 63) {
                                return _T("tcpip", "wireless_password_wpa_limit")
                            }
                        }
                    }
                    return true
                },
                disabled: true
            }],
            getNext: function() {
                var e = this.getForm();
                var d;
                if (!e.isValid()) {
                    return false
                }
                switch (e.findField("security").getValue()) {
                    case "disabled":
                    case "WEP":
                        d = "NONE";
                        break;
                    default:
                        d = e.findField("encryption").getValue();
                        break
                }
                this.owner.connect.call(this.owner, {
                    essid: e.findField("essid").getValue(),
                    bssid: "00:00:00:00:00:00",
                    user: e.findField("user").getValue(),
                    password: e.findField("password").getValue(),
                    security: e.findField("security").getValue(),
                    encryption: d,
                    opmode: "Master",
                    hwmode: ""
                });
                return false
            }
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    configAdHoc: function(b) {
        var c = this;
        var a = Ext.apply({
            headline: _T("tcpip", "wireless_setup_adhoc"),
            xtype: "form",
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "wireless_essid"),
                name: "essid",
                value: "Adhoc",
                minLength: 1,
                maxlength: 32,
                width: 250,
                allowBlank: false
            }, {
                xtype: "syno_combobox",
                fieldLabel: _T("tcpip", "wireless_auth"),
                name: "security",
                itemId: "security",
                store: new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["disabled", "NONE"],
                        ["WEP", "WEP"]
                    ]
                }),
                displayField: "display",
                valueField: "value",
                value: "disabled",
                width: 250,
                listeners: {
                    select: function(d) {
                        if ("disabled" === d.getValue()) {
                            this.ownerCt.getComponent("password").disable();
                            this.ownerCt.getComponent("password").clearInvalid()
                        } else {
                            this.ownerCt.getComponent("password").enable()
                        }
                    }
                }
            }, {
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("common", "password"),
                name: "password",
                itemId: "password",
                disabled: true,
                width: 250,
                validator: function(e) {
                    var d = this.ownerCt.getComponent("security").getValue();
                    if ("disabled" === d) {
                        return true
                    } else {
                        if ("WEP" === d) {
                            return c.wepPasswordValidation(e)
                        } else {
                            if (e.length < 8 || e.length > 63) {
                                return _T("tcpip", "wireless_password_wpa_limit")
                            }
                        }
                    }
                    return true
                }
            }],
            getNext: function() {
                var d = this.getForm();
                if (!d.isValid()) {
                    return false
                }
                this.owner.createAdHoc.call(this.owner, {
                    essid: d.findField("essid").getValue(),
                    password: d.findField("password").getValue(),
                    security: d.findField("security").getValue()
                });
                return false
            }
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    createAdHoc: function(a) {
        this.setStatusBusy();
        var b = Ext.apply({
            interface_name: this.ifname
        }, a);
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.Client",
            version: 1,
            method: "create_adhoc",
            params: b,
            callback: function(f, d, e, c) {
                this.clearStatusBusy();
                if (f) {
                    this.owner.setStatusOK({
                        text: _T("tcpip", "wireless_connection_success")
                    });
                    this.close()
                } else {
                    this.decodeResponse(false, d, this.close, this)
                }
            },
            scope: this
        })
    },
    scanWireless: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.Client",
            version: 1,
            method: "scan",
            params: {
                interface_name: this.ifname
            },
            callback: function(d, b, c, a) {
                if (d) {
                    if (0 < b.wlan_configs.length) {
                        this.scanStore.loadData(b)
                    }
                }
                this.clearStatusBusy()
            },
            scope: this
        })
    },
    connect: function(a) {
        this.setStatusBusy();
        var b = Ext.apply({
            interface_name: this.ifname
        }, a);
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.Client",
            version: 1,
            method: "connect",
            params: b,
            callback: function(f, d, e, c) {
                this.clearStatusBusy();
                if (f) {
                    this.owner.setStatusOK({
                        text: _T("tcpip", "wireless_connection_success")
                    });
                    this.close()
                } else {
                    this.decodeResponse(false, d, this.close, this)
                }
            },
            scope: this
        })
    },
    decodeResponse: function(d, c, b, a) {
        this.getMsgBox().alert(this.title, _T("common", "commfail"), b, a)
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.Wireless.WifiClientWizard.superclass.onOpen.call(this);
        if ("chooser" === this.getActiveStep().itemId) {
            this.scanWireless()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.AdapterTab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        this.callParent([this.fillConfig(a)])
    },
    createAPIGetArray: function() {
        if (!this.apiGetArray) {
            this.apiGetArray = [this.getWifiAPI(), this.getWifiClientAPI()]
        }
        return this.apiGetArray
    },
    getWifiTitle: function(a, b, c) {
        var d = a;
        if ("wifiap" === b && true === c) {
            d = _T("network", "if_hotspot") + " 2.4G"
        } else {
            d = SYNO.SDS.Utils.Network.idToString.apply(this, [a, b])
        }
        return d
    },
    getWifiAPI: function() {
        var a = {
            webapi: {
                api: "SYNO.Core.Network.Wifi.Hotspot",
                version: 1,
                method: "list",
                params: {
                    additional: ["general", "guest", "security"]
                }
            },
            loadStoreData: function(d) {
                var b = [];
                for (var c = 0; c < d.length; c++) {
                    b.push({
                        title: this.getWifiTitle(d[c].netif, "wifiap", d[c].additional.is_pci_interface),
                        oriStatus: d[c].status,
                        status: (d[c].status === "Enabled") ? _T("common", "enabled") : _T("common", "disabled"),
                        cls: (d[c].status === "Enabled") ? "net-hotspot-enabled" : "net-hotspot-disabled",
                        type: "wifiap",
                        adapter: d[c].netif,
                        ssid: d[c].additional.ssid,
                        mode: this.renderMode(d[c].additional.mode),
                        oriSecurity: d[c].additional.security,
                        security: this.renderSecurity(d[c].additional.security),
                        is_pci_interface: d[c].additional.is_pci_interface,
                        device: ("" === d[c].additional.wireless_device) ? _T("usb", "usb_type_unknown") : d[c].additional.wireless_device,
                        id: d[c].netif
                    })
                }
                this.supportWifiAP = (0 < b.length);
                return b
            }
        };
        return a
    },
    renderSecurity: function(a) {
        switch (a) {
            case "disabled":
                return "None";
            case "WEP":
                return _T("wireless_ap", "ap_encrypt_wep");
            case "PERSONAL_WPA":
            case "PERSONAL_WPA2":
            case "PERSONAL_WPA_MIXED":
                return _T("wireless_ap", "ap_wpa_type_personal");
            case "ENTERPRISE_WPA":
            case "ENTERPRISE_WPA2":
            case "ENTERPRISE_WPA_MIXED":
                return _T("wireless_ap", "ap_wpa_type_enterprise")
        }
    },
    renderMode: function(c) {
        if (!c || 0 >= c.length || "error" === c) {
            return ""
        }
        var b = "802.11" + c[0];
        for (var a = 1; a < c.length; a++) {
            b += "/" + c[a]
        }
        return b
    },
    getWifiClientAPI: function() {
        var a = {
            webapi: {
                api: "SYNO.Core.Network.Wifi.Client",
                version: 1,
                method: "list"
            },
            loadStoreData: function(g) {
                var b = [];
                for (var f = 0; f < g.length; f++) {
                    var e = g[f];
                    var d;
                    var c;
                    var h;
                    switch (e.status) {
                        case "Enabled":
                            c = _T("network", "status_connected");
                            h = "net-client-enabled";
                            d = "Enabled";
                            break;
                        case "Disabled":
                            c = _T("network", "status_disconnected");
                            h = "net-client-disabled";
                            d = "Disabled";
                            break;
                        case "Enabling":
                            c = _T("bluetooth", "state_connecting");
                            h = "net-client-enabled";
                            d = "Enabled";
                            break;
                        case "AutoEnabling":
                            c = _T("common", "loading_text");
                            h = "net-client-enabled";
                            d = "Enabled";
                            break;
                        case "IPFailed":
                            c = e.is_dhcp ? _T("network", "wireless_connect_success_ip_failed") : _T("tcpip", "tcpip_setting_failed");
                            h = "net-client-enabled";
                            d = "Enabled";
                            break;
                        case "IPConflict":
                            c = _T("tcpip", "tcpip_ip_used");
                            h = "net-client-enabled";
                            d = "Enabled";
                            break;
                        default:
                            SYNO.Debug("Unknown Status for Wifi Client");
                            c = _T("network", "status_disconnected");
                            h = "net-client-disabled";
                            d = "Disabled";
                            break
                    }
                    b.push({
                        title: this.getWifiTitle(e.interface_name, "wificlient", false),
                        oriStatus: d,
                        status: c,
                        cls: h,
                        type: e.type,
                        adapter: e.interface_name,
                        ssid: e.essid,
                        mode: this.renderMode(e.hwmode).empty() ? "" : "(" + this.renderMode(e.hwmode) + ")",
                        channel: e.channel,
                        oriSecurity: e.security,
                        security: this.renderSecurity(e.security),
                        encryption: e.encryption,
                        signal: e.signal,
                        ip: e.ip,
                        netmask: e.netmask,
                        gateway: e.gateway,
                        device: ("" === e.wireless_device) ? _T("usb", "usb_type_unknown") : e.wireless_device,
                        id: e.interface_name
                    })
                }
                this.supportWifiClient = (0 < b.length);
                return b
            }
        };
        return a
    },
    fillConfig: function(a) {
        var b = {
            title: _T("wireless_ap", "ap_symbol"),
            layout: "fit",
            tbar: this.getToolbar(),
            items: [this.getView()],
            listeners: {
                activate: this.onActivate,
                deactivate: this.onDeactivate
            }
        };
        Ext.apply(b, a);
        return b
    },
    getToolbar: function() {
        if (!this.tbar) {
            this.tbar = new Ext.Toolbar({
                defaultType: "syno_button",
                items: [{
                    xtype: "syno_button",
                    text: _T("common", "alt_edit"),
                    itemId: "edit",
                    disabled: true,
                    scope: this,
                    handler: this.editHandler
                }, {
                    xtype: "syno_button",
                    text: _T("wireless_ap", "ap_wps_setting"),
                    itemId: "wps_setting",
                    disabled: true,
                    scope: this,
                    handler: this.onStartWPS
                }, {
                    xtype: "syno_button",
                    text: _T("tcpip", "wireless_setup"),
                    itemId: "client_connect",
                    handler: this.handleConnectButton,
                    disabled: true,
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    scope: this
                }]
            })
        }
        return this.tbar
    },
    getView: function() {
        if (!this.view) {
            var a = {
                multiSelect: false,
                singleSelect: true,
                store: this.getStore(),
                innerTpl: this.getInnerTpl(),
                cls: "syno-wireless-adapterlist"
            };
            this.view = new SYNO.ux.ExpandableListView(a);
            this.view.mon(this.view, "selectionchange", function(c, d) {
                var b = c.getSelectedRecords();
                if (b && b[0]) {
                    this.selectedRecord = b[0]
                } else {
                    this.selectedRecord = null
                }
                this.updateToolbarStatus()
            }, this)
        }
        return this.view
    },
    getStore: function() {
        if (!this.store) {
            this.store = new Ext.data.JsonStore({
                fields: ["id", "title", "is_pci_interface", "status", "cls", "iconCls", "type", "adapter", "ssid", "mode", "oriSecurity", "security", "signal", "encryption", "oriStatus", "ip", "netmask", "gateway", "device"],
                idIndex: 0
            })
        }
        return this.store
    },
    getInnerTpl: function() {
        var b = '<td class="syno-wireless-adapterlist-key">{0}</td>';
        var c = '<td class="syno-wireless-adapterlist-value">{1}</td>';
        var d = "<tr>" + b + c + "</tr>";
        var a = new Ext.XTemplate('<div class="item-detail-inner">', '<table class="syno-wireless-adapterlist-row">', "<tpl if=\"type == 'wifiap'\">", String.format(d, _T("wireless_ap", "ap_ssid"), "{ssid}"), String.format(d, _T("wireless_ap", "ap_mode"), "{mode}"), String.format(d, _T("wireless_ap", "ap_security_setting"), "{security}"), String.format(d, _T("wireless_ap", "ap_device"), "{device}"), "</tpl>", "<tpl if=\"type == 'wificlient'\">", String.format(d, _T("wireless_ap", "ap_ssid"), "{ssid} {mode}"), String.format(d, _T("tcpip", "wireless_signal"), "{signal}"), String.format(d, _T("tcpip", "tcpip_ipaddr"), "{ip}"), String.format(d, _T("tcpip", "tcpip_mask"), "{netmask}"), String.format(d, _T("tcpip", "tcpip_gateway"), "{gateway}"), String.format(d, _T("wireless_ap", "ap_security_setting"), "{security}"), String.format(d, _T("tcpip", "wireless_encrypt"), "{encryption}"), String.format(d, _T("wireless_ap", "ap_device"), "{device}"), "</tpl>", "</table>", "</div>");
        return a
    },
    openTipForCountryCode: function(d, c, b) {
        if (c.country_code_tip) {
            var a = new SYNO.SDS.AdminCenter.Wireless.FirstTimeNotify({
                owner: this.module.appWin,
                module: this.module,
                generalSetting: this
            });
            a.open()
        }
    },
    onActivate: function() {
        this.startPolling();
        if (this.isNeedMask) {
            this.el.mask(_T("wireless_ap", "ap_support_condition"), "syno-ux-mask-info");
            return
        } else {
            this.el.unmask();
            this.module.appWin.setStatusBusy();
            this.sendWebAPI({
                api: "SYNO.Core.Network.Router.CountryCode",
                method: "get_tip",
                version: 1,
                scope: this,
                callback: this.openTipForCountryCode
            })
        }
    },
    onDeactivate: function() {
        this.stopPolling();
        this.el.unmask()
    },
    startPolling: function() {
        if (this.pollDeviceId) {
            return
        }
        this.createAPIGetArray();
        var b = [];
        for (var a = 0; a < this.apiGetArray.length; a++) {
            b.push(Ext.apply({
                api: this.apiGetArray[a].webapi.api,
                version: this.apiGetArray[a].webapi.version,
                method: this.apiGetArray[a].webapi.method
            }, this.apiGetArray[a].webapi.params))
        }
        this.pollDeviceId = this.pollReg({
            scope: this,
            webapi: {
                api: "SYNO.Entry.Request",
                version: 1,
                method: "request",
                params: {
                    stopwhenerror: false,
                    compound: b
                }
            },
            interval: 3,
            immediate: true,
            status_callback: this.loadAllStoreData
        })
    },
    loadAllStoreData: function(e, d, c) {
        var a = [];
        this.module.appWin.clearStatusBusy();
        for (var b = 0; b < this.apiGetArray.length; b++) {
            a = a.concat(this.apiGetArray[b].loadStoreData.call(this, d.result[b].data))
        }
        this.store.loadData(a);
        this.updateToolbarStatus()
    },
    stopPolling: function() {
        this.module.appWin.clearStatusBusy();
        if (!this.pollDeviceId) {
            return
        }
        this.pollUnreg(this.pollDeviceId);
        this.pollDeviceId = null
    },
    editHandler: function() {
        var a = this.view.getSelectedRecords();
        if (0 === a.length) {
            return
        }
        var b = a[0].data;
        switch (b.type) {
            case "wifiap":
                this.createWifiDialog(a[0].data);
                break;
            case "wificlient":
                this.createWifiClientDialog(a[0].data);
                break;
            default:
                break
        }
    },
    createWifiDialog: function(b) {
        this.onDeactivate();
        var a = new SYNO.SDS.AdminCenter.Wireless.WifiEditDialog({
            owner: this.module.appWin,
            module: this.module,
            adapter: b.adapter,
            guest_support: b.is_pci_interface
        });
        a.mon(a, "close", function() {
            this.onActivate()
        }, this);
        a.open()
    },
    createWifiClientDialog: function(b) {
        this.onDeactivate();
        var a = new SYNO.SDS.AdminCenter.Wireless.WifiClientDialog({
            owner: this.module.appWin,
            module: this.module,
            adapter: b.adapter
        });
        a.mon(a, "close", function() {
            this.onActivate()
        }, this);
        a.open()
    },
    onStartWPS: function() {
        var a = new SYNO.SDS.AdminCenter.Wireless.WPSPinDialog({
            owner: this.module.appWin,
            module: this.module,
            adapter: this.selectedRecord.get("adapter")
        });
        a.mon(a, "close", function() {
            this.onActivate()
        }, this);
        a.open()
    },
    isWpaPsk: function(a) {
        if ("PERSONAL_WPA" === a || "PERSONAL_WPA2" === a || "PERSONAL_WPA_MIXED" === a) {
            return true
        }
        return false
    },
    isWpsDisabled: function() {
        if (("wifiap" === this.selectedRecord.get("type")) && ("Enabled" === this.selectedRecord.get("oriStatus")) && this.isWpaPsk(this.selectedRecord.get("oriSecurity"))) {
            return false
        }
        return true
    },
    updateToolbarStatus: function() {
        var a = this.getTopToolbar().getComponent("edit");
        var b = this.getTopToolbar().getComponent("wps_setting");
        var c = this.getTopToolbar().getComponent("client_connect");
        if (this.supportWifiAP) {
            b.show()
        } else {
            b.hide()
        }
        if (this.supportWifiClient) {
            c.show()
        } else {
            c.hide()
        }
        if (this.supportWifiAP || this.supportWifiClient) {
            a.show()
        } else {
            a.hide();
            return
        }
        if (!this.selectedRecord) {
            c.setDisabled(true);
            a.disable();
            b.disable();
            return
        }
        a.enable();
        b.setDisabled(this.isWpsDisabled());
        if (true === this._S("demo_mode")) {
            c.disable()
        } else {
            if ("wificlient" === this.selectedRecord.get("type")) {
                c.enable();
                if ("Enabled" === this.selectedRecord.get("oriStatus")) {
                    c.setText(_T("tcpip", "wireless_disconnect"));
                    a.setDisabled(false)
                } else {
                    c.setText(_T("tcpip", "wireless_setup"));
                    a.setDisabled(true)
                }
            }
        }
    },
    handleConnectButton: function(a) {
        var b = this.getTopToolbar().getComponent("client_connect");
        if (!this.selectedRecord) {
            b.setDisabled(true);
            return
        }
        if ("Enabled" === this.selectedRecord.get("oriStatus")) {
            this.disconnectClient()
        } else {
            this.setupClientConnection()
        }
    },
    setupClientConnection: function() {
        this.onDeactivate();
        var a = new SYNO.SDS.AdminCenter.Wireless.WifiClientWizard({
            owner: this.module.appWin,
            module: this,
            ifname: this.selectedRecord.get("adapter")
        });
        a.mon(a, "close", function() {
            this.onActivate()
        }, this);
        a.open()
    },
    disconnectClient: function() {
        this.onDeactivate();
        this.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Wifi.Client",
            method: "disconnect",
            params: {
                interface_name: this.selectedRecord.get("adapter")
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.appWin.clearStatusBusy();
                this.startPolling();
                if (!c) {
                    return
                }
            }
        });
        this.onActivate()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.FirstTimeNotify", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.generalSetting = a.generalSetting;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = Ext.apply({
            title: _T("wireless_ap", "ap_symbol"),
            width: 400,
            height: 150,
            resizable: false,
            closable: false,
            padding: "0px 20px 0px 20px",
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }],
            items: this.createNotify()
        }, a);
        return b
    },
    createNotify: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("wireless_ap", "country_code_notify")
        });
        return a
    },
    onActivate: function() {
        SYNO.SDS.AdminCenter.Wireless.FirstTimeNotify.superclass.onActivate.call(this)
    },
    onApply: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.CountryCode",
            method: "set_tip",
            params: {
                country_code_tip: false
            },
            version: 1,
            scope: this
        });
        this.close();
        this.findAppWindow().startModule("SYNO.SDS.AdminCenter.Region.Main")
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.MacFilter.AddRuleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.rule_store = b.rule_store;
        this.mode = b.mode;
        this.selectModel = b.selectModel;
        this.isSupportChangePort = true;
        var a = Ext.apply({
            title: _T("wireless_ap", "ap_mac_filter_setting"),
            autoDestroy: true,
            width: 450,
            height: 290,
            layout: "fit",
            border: false,
            items: [this.configForm({
                border: false,
                itemId: "formpanel"
            })],
            buttons: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: ("create" === this.mode) ? _T("common", "create") : _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onAddRule
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    configForm: function(a) {
        return SYNO.LayoutConfig.fill(Ext.apply({
            xtype: "syno_formpanel",
            trackResetOnLoad: true,
            synodefaults: {
                width: 200
            },
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("wireless_ap", "ap_mac_filter_desc"),
                name: "desc"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("wireless_ap", "ap_mac_filter_mac"),
                name: "mac",
                validator: function(d) {
                    var c = "";
                    var b = 0;
                    if (d.match(/^[0-9a-fA-F]{12}$/)) {
                        c = d.substr(0, 2);
                        for (b = 2; b < d.length; b += 2) {
                            c = c + ":" + d.substr(b, 2)
                        }
                        d = c;
                        this.setValue(d)
                    }
                    if (0 === d.length || !d.match(/^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$/)) {
                        return _T("wireless_ap", "ap_mac_filter_mac_err")
                    }
                    if (true === this.ownerCt.ownerCt.isMacUsed(d)) {
                        return _T("wireless_ap", "ap_mac_filter_mac_used")
                    }
                    if (!d.match(/^([0-9A-F]{2}:){5}[0-9A-F]{2}$/)) {
                        d = d.toUpperCase();
                        this.setValue(d)
                    }
                    return true
                }
            }]
        }, a))
    },
    getForm: function() {
        return this.getComponent("formpanel").getForm()
    },
    onAddRule: function() {
        var c = this.getForm();
        var b = function(e) {
            var d = c.findField(e);
            return d ? d.getValue() : undefined
        };
        if (!c.isDirty()) {
            this.close();
            return true
        }
        if (!c.isValid()) {
            return false
        }
        if ("edit" === this.mode) {
            var a = this.rule_store.getById(this.editRec.id);
            a.set("desc", b("desc"));
            a.set("mac", b("mac"))
        } else {
            this.rule_store.add(new this.rule_store.recordType({
                mac_filter_enabled: true,
                desc: b("desc"),
                mac: b("mac")
            }))
        }
        this.close();
        return true
    },
    onCancel: function() {
        if (this.getForm().isDirty()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    isMacUsed: function(d) {
        var b = false;
        var a = this.rule_store.find("mac", d);
        var c = this.selectModel.getSelected();
        switch (this.mode) {
            case "create":
                if (-1 !== a) {
                    b = true
                }
                break;
            case "edit":
                if ((-1 !== a) && (this.rule_store.indexOf(c) !== a)) {
                    b = true
                }
                break;
            default:
                break
        }
        return b
    },
    onOpen: function() {
        this.setStatusBusy();
        if ("edit" === this.mode) {
            this.editRec = this.selectModel.getSelected();
            this.getForm().setValues(this.editRec.data)
        }
        this.clearStatusBusy();
        this.callParent([arguments])
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.MacFilter.RuleStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.ruleFields = ["mac_filter_enabled", "desc", "mac"];
        if (!Ext.isDefined(b.module)) {
            throw Error("module is undefined")
        }
        var a = Ext.apply({
            api: "SYNO.Core.Network.Router.MacFilter",
            appWindow: b.appWin,
            method: "get",
            version: 1,
            autoDestroy: true,
            root: "mac_filter_list",
            fields: this.ruleFields,
            listeners: {
                exception: this.onStoreException,
                beforeload: this.onBeforeLoad,
                load: this.onAfterLoad,
                add: this.onRuleChanged,
                update: this.onRuleChanged,
                remove: this.onRuleChanged,
                scope: this
            }
        }, b);
        this.callParent([a])
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", c);
        this.module.appWin.unmask();
        this.module.appWin.setStatusError()
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy()
    },
    onAfterLoad: function(b, a, c) {
        this.module.appWin.clearStatusBusy();
        this.isRuleChanged = false;
        this.commitChanges()
    },
    onRuleChanged: function(b, c, a) {
        this.isRuleChanged = true;
        this.grid.checkOnRuleChanged();
        this.grid.getView().onLayout()
    },
    getRules: function() {
        var e = [];
        var c = 0,
            b = 0;
        var a = this.ruleFields;
        var d = null;
        for (c = 0; c < this.getCount(); c++) {
            d = {
                id: c
            };
            for (b = 0; b < a.length; b++) {
                d[a[b]] = this.getAt(c).get(a[b])
            }
            e.push(d)
        }
        return e
    },
    isDirty: function() {
        return this.isRuleChanged || this.getModifiedRecords().length > 0
    },
    clearDirty: function() {
        this.commitChanges();
        this.isRuleChanged = false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.MacFilter.RuleGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.appWin = b.appWin;
        this.policyDirty = false;
        var c = this.createColumnModel();
        var a = Ext.apply({
            width: 600,
            height: 300,
            frame: false,
            border: false,
            title: _T("wireless_ap", "ap_mac_filter_setting"),
            cm: c,
            plugins: c.config[0],
            enableHdMenu: false,
            loadMask: false,
            cls: "without-dirty-red-grid",
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: this.checkOnSelectionChanged,
                    scope: this
                }
            }),
            store: new SYNO.SDS.AdminCenter.Wireless.MacFilter.RuleStore({
                module: this.module,
                appWin: this.appWin,
                grid: this
            }),
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "create"),
                handler: this.onCreateRule,
                scope: this,
                itemId: "create"
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_edit"),
                handler: this.onCreateRule,
                scope: this,
                itemId: "edit"
            }, {
                xtype: "syno_button",
                text: _T("common", "delete"),
                handler: this.onDeleteRule,
                scope: this,
                itemId: "del"
            }, {
                xtype: "syno_button",
                text: _T("common", "save"),
                handler: this.onSave,
                scope: this,
                itemId: "save"
            }],
            bbar: [{
                xtype: "syno_displayfield",
                value: _T("wireless_ap", "ap_mac_filter_policy") + ": "
            }, {
                xtype: "syno_radio",
                name: "policy",
                itemId: "deny",
                boxLabel: _T("firewall", "firewall_policy_drop"),
                listeners: {
                    scope: this,
                    check: this.onPolicyRadioCheck
                }
            }, {
                xtype: "syno_radio",
                name: "policy",
                itemId: "allow",
                boxLabel: _T("firewall", "firewall_policy_allow"),
                listeners: {
                    scope: this,
                    check: this.onPolicyRadioCheck
                }
            }],
            listeners: {
                scope: this,
                activate: this.onActivate,
                deactivate: this.onDeactivate
            }
        }, b);
        this.callParent([a])
    },
    createColumnModel: (function() {
        var c = {
            qtip: function(e, d) {
                d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(e) + '"';
                return e
            }
        };
        var b = new SYNO.ux.EnableColumn({
            header: _T("common", "commit"),
            dataIndex: "mac_filter_enabled",
            width: 80,
            align: "center",
            commitChanges: false
        });
        var a = [b, {
            header: _T("wireless_ap", "ap_mac_filter_desc"),
            dataIndex: "desc",
            width: 120,
            align: "left",
            renderer: c.qtip
        }, {
            header: _T("wireless_ap", "ap_mac_filter_mac"),
            dataIndex: "mac",
            width: 120,
            align: "left",
            renderer: c.qtip
        }];
        return function() {
            return new Ext.grid.ColumnModel(a)
        }
    }()),
    getButton: function(a) {
        var b = this.getTopToolbar();
        return b.getComponent(a)
    },
    enableButton: function(d, a) {
        var b = this.getButton(d);
        var c;
        if (!Ext.isObject(b)) {
            SYNO.Debug("enableButton failed: no button object of ", d);
            return
        }
        c = a ? b.enable() : b.disable()
    },
    disableAllButton: function() {
        Ext.each(["create", "edit", "del", "save"], function(a) {
            this.getButton(a).disable()
        }, this);
        this.getBottomToolbar().getComponent("deny").disable();
        this.getBottomToolbar().getComponent("allow").disable()
    },
    enableNecessaryButton: function() {
        this.enableButton("create", true);
        this.getBottomToolbar().getComponent("deny").enable();
        this.getBottomToolbar().getComponent("allow").enable()
    },
    checkOnRuleChanged: function() {
        this.enableButton("save", this.isDirty())
    },
    checkOnSelectionChanged: function(a) {
        if (0 < a.getCount()) {
            this.enableButton("del", true);
            this.enableButton("edit", true)
        } else {
            this.enableButton("del", false);
            this.enableButton("edit", false)
        }
    },
    initEvents: function() {
        this.callParent([arguments]);
        this.mon(this.getStore(), "update", this.checkOnRuleChanged, this);
        this.mon(this, "rowdblclick", this.onRowDblClick, this)
    },
    onActivate: function() {
        if (this.isNeedMask) {
            this.el.mask(_T("wireless_ap", "ap_support_condition"), "syno-ux-mask-info");
            return
        } else {
            this.el.unmask()
        }
        this.disableAllButton();
        this.module.appWin.setStatusBusy();
        this.getStore().load({
            callback: function(b, a, c) {
                this.module.appWin.clearStatusBusy();
                if (!c) {
                    return
                }
                this.updatePolicyRadio();
                this.enableNecessaryButton()
            },
            scope: this
        })
    },
    onDeactivate: function() {
        this.el.unmask()
    },
    onPolicyRadioCheck: function(a, b) {
        if (!b) {
            return
        }
        if (a.itemId === this.getStore().reader.jsonData.mac_filter_policy) {
            this.policyDirty = false
        } else {
            this.policyDirty = true
        }
        this.checkOnRuleChanged()
    },
    onRowDblClick: function() {
        var b = "edit";
        var a = {
            itemId: b
        };
        this.onCreateRule(a)
    },
    onCreateRule: function(a, b) {
        var c = new SYNO.SDS.AdminCenter.Wireless.MacFilter.AddRuleDialog({
            module: this.module,
            owner: this.module.appWin,
            mode: a.itemId,
            rule_store: this.getStore(),
            selectModel: this.getSelectionModel(),
            isSupportChangePort: true
        });
        c.open()
    },
    onDeleteRule: function() {
        var b = this.getSelectionModel().getSelections();
        var a = this.getStore();
        var c = 0;
        for (c = 0; c < b.length; c++) {
            a.remove(b[c])
        }
    },
    onSave: function() {
        var a;
        if (this.getBottomToolbar().getComponent("allow").getValue()) {
            a = "allow"
        } else {
            a = "deny"
        }
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.getSelectionModel().clearSelections();
        this.disableAllButton();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.MacFilter",
            method: "set",
            params: {
                mac_filter_policy: a,
                mac_filter_list: JSON.parse(JSON.stringify(this.getStore().getRules()))
            },
            version: 1,
            scope: this,
            callback: function(d, c, b) {
                this.module.appWin.clearStatusBusy();
                if (!d) {
                    return
                }
                this.clearDirty();
                this.getStore().load({
                    callback: function(f, e, g) {
                        this.module.appWin.clearStatusBusy();
                        if (!g) {
                            return
                        }
                        this.updatePolicyRadio();
                        this.enableNecessaryButton()
                    },
                    scope: this
                })
            }
        })
    },
    isDirty: function() {
        return this.getStore().isDirty() || this.policyDirty
    },
    clearDirty: function() {
        this.getStore().clearDirty();
        this.policyDirty = false
    },
    updatePolicyRadio: function() {
        if ("allow" == this.getStore().reader.jsonData.mac_filter_policy) {
            this.getBottomToolbar().getComponent("allow").setValue(true)
        } else {
            this.getBottomToolbar().getComponent("deny").setValue(true)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.Parental.RuleGrid", {
    extend: "SYNO.ux.GridPanel",
    record: Ext.data.Record.create({
        name: "clientname"
    }, {
        name: "mac"
    }, {
        name: "schedule"
    }, {
        name: "status"
    }),
    constructor: function(b) {
        this.module = b.module;
        this.appWin = b.appWin;
        var c = this.createColumnModel();
        var a = Ext.apply({
            title: _T("wireless_ap", "ap_time_ctrl_setup"),
            height: 350,
            enableHdMenu: false,
            cls: "syno-checkbox",
            cm: c,
            plugins: c.config[0],
            store: new SYNO.SDS.AdminCenter.Wireless.Parental.RuleStore({
                module: this.module,
                appWin: this.appWin,
                grid: this
            }),
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "add"),
                handler: this.onCreateRule,
                scope: this,
                itemId: "add"
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_edit"),
                handler: this.onEditRule,
                scope: this,
                itemId: "edit"
            }, {
                xtype: "syno_button",
                text: _T("common", "delete"),
                handler: this.onDeleteRule,
                scope: this,
                itemId: "del"
            }, {
                xtype: "syno_button",
                text: _T("common", "save"),
                handler: this.onSave,
                scope: this,
                itemId: "save"
            }],
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: this.checkOnSelectionChanged,
                    scope: this
                }
            }),
            listeners: {
                scope: this,
                activate: this.onActivate,
                deactivate: this.onDeactivate
            }
        }, b);
        this.callParent([a])
    },
    createColumnModel: (function() {
        var c = {
            qtip: function(e, d) {
                if ("-" !== e && 0 < e.length) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(e) + '"'
                }
                return e
            },
            netstatus: function(e, d) {
                e = 1 === e ? _T("wireless_ap", "ap_time_ctrl_allow") : 0 === e ? _T("wireless_ap", "ap_time_ctrl_disallow") : e;
                return e
            }
        };
        var b = new SYNO.ux.EnableColumn({
            dataIndex: "tcenable",
            header: _T("common", "commit"),
            width: 80,
            align: "center",
            commitChanges: false
        });
        var a = [b, {
            dataIndex: "clientname",
            header: _T("wireless_ap", "ap_client_name"),
            sortable: true,
            width: 200,
            renderer: c.qtip
        }, {
            dataIndex: "mac",
            header: _T("wireless_ap", "ap_assoc_list_mac"),
            sortable: true,
            width: 175
        }, {
            dataIndex: "status",
            header: _T("common", "status"),
            sortable: true,
            width: 135,
            renderer: c.netstatus
        }];
        return function() {
            return new Ext.grid.ColumnModel(a)
        }
    }()),
    disableAllButton: function() {
        Ext.each(["add", "edit", "del", "save"], function(a) {
            this.getTopToolbar().getComponent(a).disable()
        }, this)
    },
    checkOnSelectionChanged: function(a) {
        if (0 < a.getCount()) {
            this.getTopToolbar().getComponent("del").enable();
            this.getTopToolbar().getComponent("edit").enable()
        } else {
            this.getTopToolbar().getComponent("del").disable();
            this.getTopToolbar().getComponent("edit").disable()
        }
    },
    checkOnRuleChanged: function() {
        this.getTopToolbar().getComponent("add").enable();
        this.getTopToolbar().getComponent("save").setDisabled(!this.getStore().isDirty())
    },
    onCreateRule: function(a, b) {
        if (this.dialog) {
            delete this.dialog;
            this.dialog = null
        }
        this.dialog = new SYNO.SDS.AdminCenter.Wireless.Parental.AddRuleDialog({
            module: this.module,
            owner: this.module.appWin,
            mode: SYNO.SDS.AdminCenter.Wireless.Parental.AddRuleDialog.prototype.DIALOG_MODE_ENUM.ADD,
            parentForm: this,
            time_ctrl_sched: this.getDefaultSched()
        });
        this.dialog.show()
    },
    onEditRule: function() {
        var c = "";
        var f = "";
        var a = 0;
        var b = 0;
        var e = this.getSelectedList();
        if (1 === e.length) {
            c = e[0].clientname;
            f = e[0].mac;
            a = SYNO.SDS.AdminCenter.Wireless.Parental.AddRuleDialog.prototype.DIALOG_MODE_ENUM.EDIT;
            b = 510
        } else {
            if (1 < e.length) {
                for (var d = 0; d < e.length; d++) {
                    c += ("; " + e[d].clientname)
                }
                a = SYNO.SDS.AdminCenter.Wireless.Parental.AddRuleDialog.prototype.DIALOG_MODE_ENUM.MULTI_EDIT;
                b = 530
            }
        }
        if (this.dialog) {
            delete this.dialog;
            this.dialog = null
        }
        this.dialog = new SYNO.SDS.AdminCenter.Wireless.Parental.AddRuleDialog({
            module: this.module,
            owner: this.module.appWin,
            mode: a,
            parentForm: this,
            time_ctrl_sched: e[0].schedule,
            default_cli: c,
            default_mac: f,
            height: b
        });
        this.dialog.show()
    },
    onDeleteRule: function() {
        var a = this.getStore();
        var c = this.getSelectionModel().getSelections();
        for (var b = 0; b < c.length; b++) {
            a.remove(c[b])
        }
    },
    onSave: function() {
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.getSelectionModel().clearSelections();
        this.disableAllButton();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.ParentalControl",
            method: "set",
            params: {
                rules: JSON.parse(JSON.stringify(this.getStore().getRules()))
            },
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.module.appWin.clearStatusBusy();
                if (!c) {
                    return
                }
                this.getStore().clearDirty();
                this.disableAllButton();
                this.getStore().load();
                this.checkOnRuleChanged()
            }
        })
    },
    onRowDblClick: function() {
        this.onEditRule()
    },
    onActivate: function() {
        this.disableAllButton();
        this.module.appWin.setStatusBusy();
        this.getStore().load({
            callback: function() {
                this.checkOnRuleChanged();
                this.module.appWin.clearStatusBusy()
            },
            scope: this
        })
    },
    onDeactivate: function() {
        if (this.getStore().isDirty()) {
            if (!window.confirm(_T("common", "confirm_lostchange"))) {
                return false
            }
        }
        this.getStore().clearDirty();
        this.getSelectionModel().clearSelections();
        this.el.unmask();
        this.getView().el.unmask();
        return true
    },
    initEvents: function() {
        this.callParent([arguments]);
        this.mon(this.getStore(), "update", this.checkOnRuleChanged, this);
        this.mon(this, "rowdblclick", this.onRowDblClick, this)
    },
    getSelectedList: function() {
        var c = [];
        var b = this.getSelectionModel().getSelections();
        for (var a = 0; a < b.length; a++) {
            c.push({
                mac: b[a].data.mac,
                clientname: b[a].data.clientname,
                schedule: b[a].data.schedule
            })
        }
        return c
    },
    getDefaultSched: function() {
        var a = new Array(7 * 24 + 1);
        return a.join("0")
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.Parental.RuleStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.ruleFields = ["tcenable", "clientname", "mac", "schedule", "status"];
        this.isRuleChanged = false;
        if (!Ext.isDefined(b.module)) {
            throw Error("module is undefined")
        }
        var a = Ext.apply({
            api: "SYNO.Core.Network.Router.ParentalControl",
            appWindow: b.appWin,
            method: "get",
            version: 1,
            autoDestroy: true,
            root: "rules",
            idProperty: "mac",
            fields: this.ruleFields,
            listeners: {
                exception: this.onStoreException,
                beforeload: this.onBeforeLoad,
                load: this.onAfterLoad,
                add: this.onRuleChanged,
                update: this.onRuleChanged,
                remove: this.onRuleChanged,
                scope: this
            }
        }, b);
        this.callParent([a])
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", c);
        this.module.appWin.unmask();
        this.module.appWin.setStatusError()
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy()
    },
    onAfterLoad: function(b, a, c) {
        this.module.appWin.clearStatusBusy();
        this.isRuleChanged = false;
        this.commitChanges()
    },
    onRuleChanged: function(b, c, a) {
        this.isRuleChanged = true;
        this.grid.checkOnRuleChanged();
        this.grid.getView().onLayout()
    },
    getRules: function() {
        var e = [];
        var c = 0,
            b = 0;
        var a = this.ruleFields;
        var d = null;
        for (c = 0; c < this.getCount(); c++) {
            d = {
                id: c
            };
            for (b = 0; b < a.length; b++) {
                d[a[b]] = this.getAt(c).get(a[b])
            }
            e.push(d)
        }
        return e
    },
    isDirty: function() {
        return this.isRuleChanged
    },
    clearDirty: function() {
        this.commitChanges();
        this.isRuleChanged = false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.Parental.AddRuleDialog", {
    extend: "SYNO.SDS.AdminCenter.Wireless.ScheduleDialog",
    title: _T("wireless_ap", "ap_time_ctrl_setup"),
    btn_label_1: _T("wireless_ap", "ap_time_ctrl_disallow"),
    btn_label_2: _T("wireless_ap", "ap_time_ctrl_allow"),
    default_cli: null,
    default_mac: null,
    time_ctrl_sched: null,
    DIALOG_MODE_ENUM: {
        ADD: 1,
        EDIT: 2,
        MULTI_EDIT: 3
    },
    mode: null,
    fillConfig: function(a) {
        this.firstPolled = false;
        var b = {
            height: 530,
            width: 678,
            padding: "0 20px",
            layout: "form",
            items: [SYNO.LayoutConfig.fill({
                xtype: "form",
                border: false,
                labelWidth: 250,
                items: [{
                    xtype: "syno_displayfield",
                    height: 20
                }, {
                    xtype: "syno_combobox",
                    fieldLabel: _T("wireless_ap", "ap_client_name"),
                    width: 200,
                    allowBlank: false,
                    editable: true,
                    name: "client_name",
                    valueField: "mac",
                    displayField: "displayname",
                    maxlength: 64,
                    store: this.getConnectionStore(),
                    validator: function(c) {
                        if (true === c.blank()) {
                            return false
                        }
                        return true
                    },
                    tpl: '<tpl for="."><div ext:qtip="{hostname}" class="x-combo-list-item">{displayname}</div></tpl>',
                    listeners: {
                        scope: this,
                        select: this.setSelectedMac,
                        beforequery: this.onBeforeQuery
                    }
                }, {
                    xtype: "syno_displayfield",
                    name: "blank_line"
                }, {
                    xtype: "syno_textfield",
                    fieldLabel: _T("wireless_ap", "ap_assoc_list_mac"),
                    width: 200,
                    allowBlank: false,
                    name: "mac_address",
                    maxlength: 32,
                    scope: this,
                    validator: function(e) {
                        var d = "";
                        var c = 0;
                        if (e.match(/^[0-9a-fA-F]{12}$/)) {
                            d = e.substr(0, 2);
                            for (c = 2; c < e.length; c += 2) {
                                d = d + ":" + e.substr(c, 2)
                            }
                            e = d;
                            this.setValue(e)
                        }
                        if (0 === e.length || !e.match(/^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$/)) {
                            return _T("wireless_ap", "ap_mac_filter_mac_err")
                        }
                        if (true === this.ownerCt.ownerCt.isMacUsed(e)) {
                            return _T("wireless_ap", "ap_mac_filter_mac_used")
                        }
                        if (!e.match(/^([0-9A-F]{2}:){5}[0-9A-F]{2}$/)) {
                            e = e.toUpperCase();
                            this.setValue(e)
                        }
                        return true
                    }
                }, {
                    xtype: "syno_displayfield",
                    hidden: true,
                    name: "multi_client_title",
                    value: _T("wireless_ap", "ap_client_name") + ":"
                }, {
                    xtype: "syno_displayfield",
                    name: "multi_client_name"
                }, {
                    xtype: "syno_displayfield",
                    value: _T("wireless_ap", "ap_set_schedule") + ":"
                }]
            }), this.scheduleTable],
            buttons: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.okHandler
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.cancelHandler
            }]
        };
        Ext.apply(b, a);
        return b
    },
    startPolling: function() {
        this.getEl().mask(_T("common", "msg_waiting"), "x-mask-loading");
        if (this.pollDeviceId) {
            return
        }
        this.pollDeviceId = this.pollReg({
            webapi: {
                api: "SYNO.Core.Network.Router.ConnectionList",
                version: 1,
                method: "get"
            },
            interval: 3,
            immediate: true,
            scope: this,
            status_callback: this.pollingCallBack
        })
    },
    pollingCallBack: function(c, b) {
        if (!c && b.code) {
            var a = SYNO.API.getErrorString(b.code);
            this.module.appWin.getMsgBox().alert(this.title, a);
            SYNO.Debug("Failed on connection list webapi");
            return
        }
        if (!this.firstPolled && b.task_id) {
            return
        }
        this.getEl().unmask();
        this.firstPolled = true;
        if (b.data && b.data.stations) {
            this.setConnectionStore(b.data.stations)
        }
    },
    stopPolling: function() {
        if (!this.pollDeviceId) {
            return
        }
        this.pollUnreg(this.pollDeviceId);
        this.pollDeviceId = null
    },
    getConnectionStore: function() {
        if (!this.connectionStore) {
            this.connectionStore = new Ext.data.JsonStore({
                fields: ["hostname", "displayname", "mac"],
                root: "data"
            })
        }
        return this.connectionStore
    },
    setConnectionStore: function(a) {
        var e = [];
        if (!a) {
            return
        }
        for (var b = 0; b < a.size(); b++) {
            var d;
            var c;
            if (0 < a[b].hostname.length && 0 < a[b].ip.length) {
                d = a[b].hostname + "(" + a[b].ip + ")";
                c = Ext.util.Format.ellipsis(a[b].hostname, 20, false).concat("(", a[b].ip, ")")
            } else {
                d = a[b].mac;
                c = a[b].mac
            }
            e.push({
                hostname: d,
                displayname: c,
                mac: a[b].mac
            })
        }
        this.storeData = e
    },
    setSelectedMac: function() {
        var a = this.items.itemAt(0).form;
        var b = a.findField("client_name").getValue();
        a.findField("mac_address").setValue(b)
    },
    onBeforeQuery: function() {
        if (this.storeData) {
            this.connectionStore.loadData({
                success: true,
                data: this.storeData
            }, false)
        }
        return true
    },
    isMacUsed: function(e) {
        var c = false;
        var b = this.parentForm.getStore();
        var a = b.find("mac", e);
        var d = this.parentForm.getSelectionModel().getSelected();
        switch (this.mode) {
            case this.DIALOG_MODE_ENUM.ADD:
                if (-1 !== a) {
                    c = true
                }
                break;
            case this.DIALOG_MODE_ENUM.EDIT:
                if ((-1 !== a) && (b.indexOf(d) !== a)) {
                    c = true
                }
                break;
            default:
                break
        }
        return c
    },
    getMultiClientHtml: function() {
        var c = this.parentForm.getSelectedList();
        var b = this.items.itemAt(0).form.findField("multi_client_name").el;
        var a = new Ext.XTemplate('<div class="syno-multi-client">', '<tpl for=".">', "<div>{clientname}</div>", "</tpl>", "</div>");
        a.overwrite(b, c)
    },
    okHandler: function() {
        if (false === this.items.itemAt(0).form.isValid()) {
            return
        }
        var b = new this.parentForm.record({
            clientname: this.items.itemAt(0).form.findField("client_name").getRawValue(),
            mac: this.items.itemAt(0).form.findField("mac_address").getValue(),
            schedule: this.scheduleTable.getSchedule(),
            status: null
        });
        if (this.DIALOG_MODE_ENUM.ADD === this.mode) {
            this.parentForm.getStore().add(b)
        } else {
            if (this.DIALOG_MODE_ENUM.EDIT === this.mode) {
                var e = this.parentForm.getSelectionModel().getSelected();
                e.set("clientname", b.get("clientname"));
                e.set("mac", b.get("mac"));
                e.set("schedule", b.get("schedule"))
            } else {
                if (this.DIALOG_MODE_ENUM.MULTI_EDIT === this.mode) {
                    var d = this.parentForm.getSelectionModel().getSelections();
                    var a = b.get("schedule");
                    for (var c = 0; c < d.length; c++) {
                        d[c].set("schedule", a)
                    }
                }
            }
        }
        this.stopPolling();
        this.close()
    },
    cancelHandler: function() {
        this.stopPolling();
        this.close()
    },
    onShow: function() {
        var a = this.items.itemAt(0).form;
        if (this.DIALOG_MODE_ENUM.ADD === this.mode) {
            this.startPolling()
        } else {
            if (this.DIALOG_MODE_ENUM.EDIT === this.mode) {
                a.findField("client_name").setValue(this.parentForm.getSelectionModel().getSelected().data.clientname);
                a.findField("mac_address").setValue(this.parentForm.getSelectionModel().getSelected().data.mac);
                this.startPolling()
            } else {
                if (this.DIALOG_MODE_ENUM.MULTI_EDIT === this.mode) {
                    a.findField("client_name").hide();
                    a.findField("client_name").disable(true);
                    a.findField("mac_address").hide();
                    a.findField("mac_address").disable(true);
                    a.findField("blank_line").hide();
                    a.findField("multi_client_title").show();
                    this.getMultiClientHtml()
                }
            }
        }
        this.scheduleTable.setSchedule(this.time_ctrl_sched, "")
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.ConnectionListTab.RuleGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.width = 600;
        this.height = 300;
        this.frame = false;
        this.border = false;
        this.title = _T("wireless_ap", "ap_assoc_list");
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.module = a.module;
        this.appWin = a.appWin;
        var c = new Ext.grid.ColumnModel({
            defaults: {
                width: 120,
                sortable: true
            },
            columns: [{
                header: _T("network", "interface"),
                dataIndex: "netif",
                renderer: {
                    fn: function(d) {
                        return SYNO.SDS.Utils.Network.idToString.apply(this, [d])
                    },
                    scope: this
                }
            }, {
                header: _T("wireless_ap", "ap_assoc_list_hostname"),
                dataIndex: "hostname"
            }, {
                header: _T("wireless_ap", "ap_assoc_list_ip"),
                dataIndex: "ip",
                groupable: false,
                renderer: function(d) {
                    if ("255.255.255.255" == d) {
                        d = "-"
                    }
                    return d
                }
            }, {
                header: _T("wireless_ap", "ap_assoc_list_mac"),
                dataIndex: "mac",
                groupable: false,
                width: 150
            }, {
                header: _T("wireless_ap", "ap_assoc_list_time"),
                dataIndex: "asso_time",
                width: 250
            }]
        });
        var b = {
            colModel: c,
            store: new SYNO.SDS.AdminCenter.Wireless.ConnectionListTab.RuleStore({
                module: this.module,
                appWin: this.appWin
            }),
            tbar: {
                items: [{
                    disabled: this._S("demo_mode"),
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    xtype: "syno_button",
                    text: _T("wireless_ap", "ap_assoc_list_mac_filter"),
                    itemId: "addmf",
                    scope: this,
                    handler: this.onAddMacFilter
                }]
            },
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: this.checkOnSelectionChanged,
                    scope: this
                }
            }),
            listeners: {
                scope: this,
                activate: this.onActivate,
                deactivate: this.onDeactivate
            }
        };
        Ext.apply(b, a);
        return b
    },
    startPolling: function() {
        this.module.appWin.setStatusBusy();
        if (this.pollDeviceId) {
            return
        }
        this.pollDeviceId = this.pollReg({
            webapi: {
                api: "SYNO.Core.Network.Router.ConnectionList",
                version: 1,
                method: "get"
            },
            interval: 3,
            immediate: true,
            scope: this,
            status_callback: this.pollingCallBack
        })
    },
    pollingCallBack: function(c, b) {
        this.module.appWin.clearStatusBusy();
        if (!c && b.code) {
            var a = SYNO.API.getErrorString(b.code);
            this.module.appWin.getMsgBox().alert(this.title, a);
            SYNO.Debug("Failed on connection list webapi");
            return
        }
        if (b.data && b.data.stations) {
            this.getStore().loadData(b.data)
        }
        if (0 === this.getStore().getCount()) {
            this.getEl().mask(_T("common", "loading_text"))
        } else {
            this.getEl().unmask()
        }
    },
    stopPolling: function() {
        this.module.appWin.clearStatusBusy();
        if (!this.pollDeviceId) {
            return
        }
        this.pollUnreg(this.pollDeviceId);
        this.pollDeviceId = null
    },
    onAddMacFilter: function() {
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.MacFilter",
            method: "get",
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.module.appWin.clearStatusBusy();
                if (!c) {
                    SYNO.Debug("get macfilter exception: " + b);
                    return
                }
                this.setMFRules(b)
            }
        })
    },
    setMFRules: function(d) {
        var a = this.getSelectionModel().getSelections();
        for (var c = 0; a.length > c; c++) {
            for (var b = 0; d.mac_filter_list.length > b; b++) {
                if (a[c].data.mac === d.mac_filter_list[b].mac) {
                    this.module.appWin.getMsgBox().alert(_T("wireless_ap", "ap_mac_filter_setting"), _T("wireless_ap", "ap_mac_filter_mac_used"));
                    return
                }
            }
            d.mac_filter_list.push({
                desc: a[c].data.hostname,
                mac: a[c].data.mac,
                mac_filter_enabled: true
            })
        }
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.Network.Router.MacFilter",
            method: "set",
            params: {
                mac_filter_enabled: d.mac_filter_enabled,
                mac_filter_policy: d.mac_filter_policy,
                mac_filter_list: JSON.parse(JSON.stringify(d.mac_filter_list))
            },
            version: 1,
            scope: this,
            callback: function(g, f, e) {
                this.module.appWin.clearStatusBusy();
                if (!g) {
                    SYNO.Debug("set macfilter exception: " + f);
                    return
                }
            }
        })
    },
    checkOnSelectionChanged: function(a) {
        if (0 < a.getCount()) {
            this.getTopToolbar().getComponent("addmf").enable()
        } else {
            this.getTopToolbar().getComponent("addmf").disable()
        }
    },
    onActivate: function() {
        this.getTopToolbar().getComponent("addmf").disable();
        this.startPolling()
    },
    onDeactivate: function() {
        this.getSelectionModel().clearSelections();
        this.stopPolling()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.ConnectionListTab.RuleStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.ruleFields = ["netif", "hostname", {
            name: "ip",
            sortType: function(d) {
                var c = d.split(".");
                return parseInt(c[0], 10) * 256 * 256 * 256 + parseInt(c[1], 10) * 256 * 256 + parseInt(c[2], 10) * 256 + parseInt(c[3], 10)
            }
        }, "mac", "asso_time"];
        if (!Ext.isDefined(b.module)) {
            throw Error("module is undefined")
        }
        var a = Ext.apply({
            api: "SYNO.Core.Network.Router.ConnectionList",
            appWindow: b.appWin,
            method: "get",
            version: 1,
            autoDestroy: true,
            root: "stations",
            idProperty: "mac",
            fields: this.ruleFields,
            listeners: {
                exception: this.onStoreException,
                beforeload: this.onBeforeLoad,
                load: this.onAfterLoad,
                scope: this
            }
        }, b);
        this.callParent([a])
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", c);
        this.module.appWin.unmask();
        this.module.appWin.setStatusError()
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy()
    },
    onAfterLoad: function(b, a, c) {
        this.module.appWin.clearStatusBusy()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.BluetoothSettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.enableAutoConnectColumn = new SYNO.ux.EnableColumn({
            dataIndex: "AutoConnect",
            header: _T("common", "enabled"),
            width: 60,
            align: "center",
            disableSelectAll: true,
            bindRowClick: true
        });
        this.callParent([this.fillConfig(a)]);
        this.enableDongleCheckbox = Ext.getCmp(this.enableDongleCheckboxId);
        this.autoConnectCheckbox = Ext.getCmp(this.autoConnectCheckboxId)
    },
    fillConfig: function(b) {
        var a = new SYNO.ux.FormPanel({
            height: 250,
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("bluetooth", "bluetooth_enable_dongle"),
                id: this.enableDongleCheckboxId = Ext.id(),
                checked: b.powered,
                listeners: {
                    check: this.syncMask,
                    scope: this
                }
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("bluetooth", "auto_connect_label"),
                id: this.autoConnectCheckboxId = Ext.id(),
                checked: false,
                indent: 1,
                listeners: {
                    check: this.syncMask,
                    scope: this
                }
            }, this.grid = new SYNO.ux.GridPanel({
                width: 500,
                autoHeight: true,
                enableDragDrop: false,
                enableColumnMove: false,
                enableHdMenu: false,
                cls: "without-dirty-red-grid",
                plugins: [this.enableAutoConnectColumn],
                columns: [this.enableAutoConnectColumn, {
                    dataIndex: "Name",
                    header: _T("bluetooth", "bluetooth_device_name"),
                    width: 400,
                    align: "left",
                    renderer: this.renderer,
                    scope: this
                }],
                sm: new Ext.grid.RowSelectionModel({
                    singleSelect: false
                }),
                store: this.getStore(b.adapterId)
            })]
        });
        var c = {
            title: _T("bluetooth", "bluetooth_name"),
            width: 580,
            height: 350,
            resizable: false,
            items: [a],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.onCancel
            }]
        };
        Ext.apply(c, b);
        return c
    },
    syncMask: function() {
        if (this.enableDongleCheckbox.getValue()) {
            this.autoConnectCheckbox.enable();
            if (this.autoConnectCheckbox.getValue()) {
                this.grid.el.unmask()
            } else {
                this.grid.el.mask()
            }
        } else {
            this.autoConnectCheckbox.setValue(false);
            this.autoConnectCheckbox.disable();
            this.grid.el.mask();
            this.grid.getSelectionModel().clearSelections()
        }
    },
    renderer: function(c, b, a) {
        if ("" === c) {
            return a.get("Address")
        }
        return c
    },
    getStore: function(a) {
        if (!this.store) {
            this.store = new Ext.data.JsonStore({
                fields: ["AutoConnect", "Name", "Address"],
                idIndex: 0
            });
            this.sendWebAPI({
                api: "SYNO.Core.ExternalDevice.Bluetooth.Settings",
                version: 1,
                method: "get",
                params: {
                    adapter_id: a
                },
                callback: function(f, d, e, b) {
                    if (!f) {
                        return
                    }
                    this.enableDongleCheckbox.setValue(d.adapter_powered);
                    this.autoConnectCheckbox.setValue(d.adapter_autoconnect);
                    if (0 < d.devices.length) {
                        var c = [];
                        Ext.each(d.devices, function(g) {
                            c.push({
                                AutoConnect: g.device_autoconnect,
                                Name: g.name,
                                Address: g.device_id
                            })
                        });
                        this.store.loadData(c)
                    }
                    this.syncMask()
                },
                scope: this
            })
        }
        return this.store
    },
    onApply: function() {
        this.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Bluetooth.Settings",
            version: 1,
            method: "set",
            params: {
                adapter_id: this.adapterId,
                adapter_powered: this.enableDongleCheckbox.getValue(),
                adapter_autoconnect: this.autoConnectCheckbox.getValue(),
                devices: this.getDevices()
            },
            callback: function(d, b, c, a) {
                if (!d) {
                    this.setStatusError({
                        text: _T("bluetooth", "set_settings_err")
                    });
                    return
                }
                this.close()
            },
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    },
    getDevices: function() {
        var a = [];
        if (this.autoConnectCheckbox.getValue() && 0 < this.store.getCount()) {
            this.store.each(function(b) {
                a.push({
                    device_id: b.get("Address"),
                    name: b.get("Name"),
                    device_autoconnect: b.get("AutoConnect")
                })
            })
        }
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.BluetoothPinDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)]);
        this.pinTextField = Ext.getCmp(this.pinTextId)
    },
    fillConfig: function(a) {
        var b = {
            title: _T("bluetooth", "bluetooth_name"),
            width: 500,
            autoHeight: true,
            resizable: false,
            items: [{
                xtype: "syno_displayfield",
                value: _T("bluetooth", "desc_manual_pin"),
                indent: 1
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("bluetooth", "desc_manual_pin"),
                id: this.pinTextId = Ext.id(),
                indent: 1,
                vtype: "digit",
                maxLength: 4,
                minLength: 4
            }],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.onCancel
            }]
        };
        Ext.apply(b, a);
        return b
    },
    onApply: function() {
        var a = this.pinTextField.getValue();
        if (this.pinTextField.isValid()) {
            this.parentDialog.connectDevice(this.selectedRecord, a, true);
            this.close()
        } else {
            this.setStatusError({
                text: _T("bluetooth", "bluetooth_pin_error")
            })
        }
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.ExpandableListView", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.callParent([a])
    },
    createTpl: function() {
        var a = new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap {cls}">', '<div class="item-summary">', '<div class="item-icon {iconCls}"></div>', '<div class="item-status-icon"></div>', "<div>", '<div class="item-title">{title:htmlEncode}</div>', '<div class="item-status">{status:htmlEncode}</div>', "</div>", (this.innerTpl) ? '<div class="item-toggle"><div class="item-toggle-img"></div></div>' : "", "</div>", '<div class="item-detail" style="display:none">', (this.innerTpl) ? this.innerTpl.html : "", "</div>", "</div>", "</tpl>", '<div class="x-clear"></div>');
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.BluetoothTab", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)]);
        this.connectButton = Ext.getCmp(this.connectButtonId);
        this.removeButton = Ext.getCmp(this.removeButtonId);
        this.refreshButton = Ext.getCmp(this.refreshButtonId);
        this.advanceButton = Ext.getCmp(this.advanceButtonId);
        this.adapterFilter = Ext.getCmp(this.adapterFilterId);
        this.view.mon(this.view, "selectionchange", this.syncButtonStatus, this)
    },
    fillConfig: function(a) {
        var b = {
            title: _T("bluetooth", "bluetooth_name"),
            layout: "fit",
            items: [this.getView()],
            tbar: {
                items: [{
                    xtype: "syno_button",
                    text: _T("bluetooth", "connect"),
                    disabled: true,
                    id: this.connectButtonId = Ext.id(),
                    scope: this,
                    handler: this.onClickConnectButton
                }, {
                    xtype: "syno_button",
                    text: _T("common", "remove"),
                    disabled: true,
                    id: this.removeButtonId = Ext.id(),
                    scope: this,
                    handler: this.onClickRemoveButton
                }, {
                    xtype: "syno_button",
                    text: _T("log", "log_reload"),
                    id: this.refreshButtonId = Ext.id(),
                    scope: this,
                    handler: this.onClickRefreshButton
                }, {
                    xtype: "syno_button",
                    text: _T("common", "advanced"),
                    id: this.advanceButtonId = Ext.id(),
                    scope: this,
                    handler: this.onClickAdvanceButton
                }, "->", {
                    xtype: "syno_combobox",
                    id: this.adapterFilterId = Ext.id(),
                    valueField: "adapterId",
                    displayField: "display",
                    store: {
                        xtype: "arraystore",
                        autoDestroy: true,
                        fields: ["adapterId", "display"]
                    },
                    editable: false,
                    forceSelection: true,
                    width: 200,
                    listeners: {
                        select: function(e, c, d) {
                            this.stopPollingDevice();
                            this.view.el.unmask();
                            this.getDevices(c.get("adapterId"))
                        },
                        scope: this
                    }
                }]
            },
            listeners: {
                activate: function() {
                    this.startPollingAdapter()
                },
                deactivate: function() {
                    this.stopPollingAdapter();
                    this.stopPollingDevice()
                },
                scope: this
            }
        };
        Ext.apply(b, a);
        return b
    },
    getView: function() {
        if (!this.view) {
            var a = {
                singleSelect: true,
                multiSelect: false,
                store: this.getStore(),
                innerTpl: this.getInnerTpl(),
                cls: "syno-wireless-bluetooth"
            };
            this.view = new SYNO.SDS.AdminCenter.Wireless.ExpandableListView(a)
        }
        return this.view
    },
    getStore: function() {
        if (!this.store) {
            var a = {
                fields: ["title", "status", "cls", "address", "type", "paired", "connected"],
                idIndex: 0
            };
            this.store = new Ext.data.JsonStore(a);
            this.pairDeviceStore = new Ext.data.JsonStore(a);
            this.pairFinishStore = new Ext.data.JsonStore(a)
        }
        return this.store
    },
    getInnerTpl: function() {
        var b = "<tr><td><b>{0}</b></td><td>{1}</td></tr>";
        var a = new Ext.XTemplate('<div class="item-detail-inner">', '<table style="width: 100%;">', String.format(b, _T("bluetooth", "bluetooth_address"), "{address}"), "<tpl if=\"type === 'audio-card'\">", String.format(b, _T("bluetooth", "bluetooth_device_type"), _T("bluetooth", "icon_audiocard")), "</tpl>", "<tpl if=\"type !== 'audio-card'\">", String.format(b, _T("bluetooth", "bluetooth_device_type"), _T("status", "status_not_available")), "</tpl>", '<tpl if="paired === true">', String.format(b, _T("bluetooth", "bluetooth_paired"), _T("common", "yes")), "</tpl>", '<tpl if="paired === false">', String.format(b, _T("bluetooth", "bluetooth_paired"), _T("common", "no")), "</tpl>", "</table>", "</div>");
        return a
    },
    getDevices: function(a) {
        this.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Bluetooth",
            version: 1,
            method: "get",
            params: {
                adapter_id: a
            },
            callback: function(e, c, d, b) {
                if (!e) {
                    this.appWin.getMsgBox().alert("", SYNO.API.getErrorString(c.code));
                    SYNO.Debug("get data error: " + c.code);
                    return
                }
                if (c.powered && 0 < c.devices.length) {
                    this.currentData = this.parseDeviceData(c.devices);
                    this.store.loadData(this.currentData)
                }
                this.adapterPowered = c.powered;
                if (c.powered && !c.discovering) {
                    this.setDiscovery(true, false)
                }
                this.startPollingDevice(a)
            },
            scope: this
        })
    },
    maskNoAdapterFound: function() {
        this.currentData = [];
        this.store.loadData(this.currentData);
        this.adapterFilter.clearValue();
        this.connectButton.disable();
        this.removeButton.disable();
        this.refreshButton.disable();
        this.advanceButton.disable();
        this.adapterFilter.disable();
        this.view.el.mask(_T("bluetooth", "no_dongle_desc"), "syno-ux-mask-info")
    },
    getStateString: function(a) {
        switch (a) {
            case "connected":
                return _T("bluetooth", "state_connected");
            case "connecting":
                return _T("bluetooth", "state_connecting");
            case "disconnected":
                return _T("bluetooth", "state_disconnected")
        }
        return _T("status", "status_not_available")
    },
    parseDeviceData: function(a) {
        var b = [];
        this.updatePairFinishStore(a);
        this.fillDataFromStore(b, this.pairDeviceStore);
        if (0 === a.length) {
            return b
        }
        Ext.each(a, function(c) {
            if (!this.isInPairDeviceStore(c.Address)) {
                if (c.Paired) {
                    this.fillDataFromDevice(b, c)
                } else {
                    this.addToPairDeviceStore(c)
                }
            }
        }, this);
        return b
    },
    fillDataFromStore: function(b, a) {
        if (0 === a.getCount()) {
            return
        }
        a.each(function(c) {
            b.push({
                title: c.get("title"),
                status: c.get("status"),
                cls: c.get("cls"),
                address: c.get("address"),
                type: c.get("type"),
                paired: c.get("paired"),
                connected: c.get("connected")
            })
        })
    },
    fillDataFromDevice: function(b, a) {
        if (!a) {
            return
        }
        var c = (a.Name && 0 < a.Name.length) ? a.Name : a.Address;
        b.push({
            title: c,
            status: this.getStatus(a),
            cls: this.getCls(a),
            address: a.Address,
            type: a.Icon,
            paired: a.Paired,
            connected: a.Connected
        })
    },
    getStatus: function(a) {
        if ("audio-card" !== a.Icon) {
            return _T("status", "status_not_available")
        }
        if (a.Playing) {
            return _T("bluetooth", "state_playing")
        }
        return a.Paired ? this.getStateString(a.State) : _T("bluetooth", "state_unpaired")
    },
    getCls: function(a) {
        if ("audio-card" !== a.Icon) {
            return "bluetooth-device-unknown"
        }
        if (a.Playing) {
            return "bluetooth-device-playing"
        }
        return "bluetooth-device-" + (a.Paired ? a.State : "unpaired")
    },
    addToPairDeviceStore: function(a) {
        if (!a) {
            return
        }
        var b = (a.Name && 0 < a.Name.length) ? a.Name : a.Address;
        this.pairDeviceStore.loadData([{
            title: b,
            status: this.getStatus(a),
            cls: this.getCls(a),
            address: a.Address,
            type: a.Icon,
            paired: a.Paired,
            connected: a.Connected
        }], true)
    },
    isInPairDeviceStore: function(b) {
        var a = false;
        this.pairDeviceStore.each(function(c) {
            if (b === c.get("address")) {
                a = true
            }
        });
        return a
    },
    updatePairFinishStore: function(a) {
        if (0 === this.pairFinishStore.getCount() || 0 === a.length) {
            return
        }
        this.pairFinishStore.each(function(b) {
            for (var c = 0; c < a.length; c++) {
                if (b.get("address") === a[c].Address) {
                    this.removePairDeviceByAddr(b.get("address"));
                    this.pairFinishStore.remove(b);
                    break
                }
            }
        }, this)
    },
    onClickConnectButton: function() {
        this.setDiscovery(false, false);
        var a = this.view.getSelectedRecords();
        if (0 === a.length) {
            return
        }
        var b = a[0].data;
        if ("audio-card" != b.type) {
            this.appWin.getMsgBox().alert("", _T("bluetooth", "device_not_valid"));
            return
        }
        this.connectDevice(a[0], "0000", false)
    },
    onClickRemoveButton: function() {
        this.setDiscovery(false, false);
        var a = this.view.getSelectedRecords();
        if (0 === a.length) {
            return
        }
        var b = a[0].data;
        this.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Bluetooth.Device",
            version: 1,
            method: "delete",
            params: {
                adapter_id: this.adapterFilter.getValue(),
                device_id: b.address
            },
            callback: function(f, d, e, c) {
                if (!f) {
                    SYNO.Debug("remove device error")
                }
                this.removePairDeviceByAddr(b.address)
            },
            scope: this
        })
    },
    onClickRefreshButton: function() {
        if (this.currentData) {
            this.store.loadData(this.currentData)
        }
        this.currentData = [];
        this.store.loadData(this.currentData);
        this.setDiscovery(true, true)
    },
    onClickAdvanceButton: function() {
        var a = new SYNO.SDS.AdminCenter.Wireless.BluetoothSettingDialog({
            owner: this.appWin,
            module: this.module,
            adapterId: this.adapterFilter.getValue(),
            powered: this.adapterPowered
        });
        a.open()
    },
    connectDevice: function(b, c, a) {
        var d = b.data;
        this.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Bluetooth.Device",
            version: 1,
            method: "create",
            params: {
                adapter_id: this.adapterFilter.getValue(),
                device_id: d.address,
                pin: c
            },
            callback: function(i, g, h, e) {
                if (!i) {
                    this.appWin.getMsgBox().alert("", _T("bluetooth", "pair_fail"));
                    return
                }
                if (g && g.retry) {
                    if (a) {
                        this.appWin.getMsgBox().alert("", _T("bluetooth", "pair_fail"));
                        return
                    }
                    if ("0000" === h.pin) {
                        this.connectDevice(b, "1234", false)
                    } else {
                        if ("1234" === h.pin) {
                            this.connectDevice(b, "1111", false)
                        } else {
                            var f = new SYNO.SDS.AdminCenter.Wireless.BluetoothPinDialog({
                                owner: this.appWin,
                                module: this.module,
                                selectedRecord: b,
                                parentDialog: this
                            });
                            f.open()
                        }
                    }
                } else {
                    if (!d.paired) {
                        this.pairFinishStore.insert(0, b)
                    }
                }
            },
            scope: this
        })
    },
    removePairDeviceByAddr: function(a) {
        this.pairDeviceStore.each(function(b) {
            if (a === b.get("address")) {
                this.pairDeviceStore.remove(b)
            }
        }, this)
    },
    setDiscovery: function(a, b) {
        this.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Bluetooth",
            version: 1,
            method: "set_discovery",
            params: {
                adapter_id: this.adapterFilter.getValue(),
                enable_discovery: a,
                force: b
            }
        })
    },
    startPollingAdapter: function() {
        if (this.pollAdapterId) {
            return
        }
        this.pollAdapterId = this.pollReg({
            webapi: {
                api: "SYNO.Core.ExternalDevice.Bluetooth",
                version: 1,
                method: "list"
            },
            interval: 3,
            immediate: true,
            status_callback: function(e, c, d, a) {
                if (!e || 0 === c.adapters.length) {
                    this.currentAdapterData = undefined;
                    this.maskNoAdapterFound();
                    this.stopPollingDevice();
                    return
                }
                this.advanceButton.enable();
                this.adapterFilter.enable();
                var b = [];
                c.adapters.forEach(function(f) {
                    b.push([f.adapter_id, f.name])
                });
                if (JSON.stringify(b) === JSON.stringify(this.currentAdapterData)) {
                    return
                }
                this.currentAdapterData = b;
                this.adapterFilter.getStore().loadData(b);
                if (0 < b.length) {
                    this.adapterFilter.setValue(b[0][0]);
                    this.stopPollingDevice();
                    this.getDevices(b[0][0])
                }
            },
            scope: this
        })
    },
    startPollingDevice: function(a) {
        if (this.pollDeviceId) {
            return
        }
        this.pollDeviceId = this.pollReg({
            webapi: {
                api: "SYNO.Core.ExternalDevice.Bluetooth",
                version: 1,
                method: "get",
                params: {
                    adapter_id: a
                }
            },
            interval: 1,
            immediate: true,
            status_callback: function(f, c, e, b) {
                if (!f) {
                    SYNO.Debug("polling get data failed");
                    return
                }
                this.adapterPowered = c.powered;
                if (!this.adapterPowered) {
                    if (this.currentData) {
                        this.store.loadData(this.currentData)
                    }
                    this.currentData = [];
                    this.store.loadData(this.currentData);
                    this.view.el.mask(_T("bluetooth", "msg_dongle_disabled"), "syno-ux-mask-info");
                    this.refreshButton.disable();
                    return
                }
                var d = this.parseDeviceData(c.devices);
                if (0 < d.length) {
                    this.view.el.unmask();
                    if ((JSON.stringify(d) != JSON.stringify(this.currentData))) {
                        if (this.currentData) {
                            this.store.loadData(this.currentData)
                        }
                        this.currentData = d;
                        this.store.loadData(this.currentData)
                    }
                } else {
                    if (!c.discovering) {
                        if (this.currentData) {
                            this.store.loadData(this.currentData)
                        }
                        this.currentData = [];
                        this.store.loadData(this.currentData);
                        this.view.el.mask(_T("bluetooth", "bottom_desc"), "syno-ux-mask-info")
                    }
                }
                this.refreshButton.setDisabled(c.discovering)
            },
            scope: this
        })
    },
    stopPollingDevice: function() {
        if (this.pollDeviceId) {
            this.pollUnreg(this.pollDeviceId);
            this.pollDeviceId = undefined
        }
    },
    stopPollingAdapter: function() {
        if (this.pollAdapterId) {
            this.pollUnreg(this.pollAdapterId);
            this.pollAdapterId = undefined
        }
    },
    syncButtonStatus: function() {
        var a = this.view.getSelectedRecords();
        if (0 === a.length) {
            this.connectButton.disable();
            this.removeButton.disable();
            return
        }
        var d = a[0].data;
        var c = true;
        var b = true;
        if (d.address && 0 < d.address.length) {
            b = false;
            if ("audio-card" === d.type && !d.connected) {
                c = false
            }
        }
        this.connectButton.setDisabled(c);
        this.removeButton.setDisabled(b)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent([a])
    },
    getPanel: function() {
        if (!this.panel) {
            this.panel = new SYNO.SDS.AdminCenter.Wireless.TabPanel({
                module: this
            })
        }
        return this.panel
    },
    getHelpParam: function() {
        if ("bluetoothTab" === this.panel.getActiveTab().itemId) {
            return "AdminCenter/connection_bluetooth.html"
        } else {
            return "AdminCenter/connection_network_wireless_desc.html"
        }
    },
    activate: function(a) {
        this.panel.loadAllForm();
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    deactivate: function() {
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Wireless.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = Ext.apply({
            items: this.wireless_items = this.getWirelessItems(a)
        }, a);
        this.callParent([b]);
        this.mon(this, "activate", this.startPolling, this);
        this.mon(this, "deactivate", this.stopPolling, this)
    },
    getWirelessItems: function(a) {
        var b = [];
        b.push(this.topologyTab = new SYNO.SDS.AdminCenter.Wireless.TopologyTab({
            module: a.module,
            parentTab: this,
            itemId: "topologyTab"
        }));
        b.push(this.adapterTab = new SYNO.SDS.AdminCenter.Wireless.AdapterTab({
            module: a.module,
            appWin: a.module.appWin,
            itemId: "adapter"
        }));
        if (("router" === this._S("net_topology")) || ("bridge" === this._S("net_topology"))) {
            b.push(this.macfilterTab = new SYNO.SDS.AdminCenter.Wireless.MacFilter.RuleGrid({
                module: a.module,
                appWin: a.module.appWin,
                itemId: "macfilterTab"
            }));
            b.push(new SYNO.SDS.AdminCenter.Wireless.Parental.RuleGrid({
                module: a.module,
                appWin: a.module.appWin,
                itemId: "parentalTab"
            }));
            b.push(new SYNO.SDS.AdminCenter.Wireless.ConnectionListTab.RuleGrid({
                module: a.module,
                appWin: a.module.appWin,
                itemId: "connectionListTab"
            }))
        }
        b.push(new SYNO.SDS.AdminCenter.Wireless.BluetoothTab({
            module: a.module,
            appWin: a.module.appWin,
            itemId: "bluetoothTab"
        }));
        return b
    },
    startPolling: function() {
        this.pollDeviceId = this.pollReg({
            scope: this,
            webapi: {
                api: "SYNO.Core.Network.Router.Topology",
                version: 2,
                method: "get"
            },
            interval: 3,
            immediate: true,
            status_callback: this.checkMaskStatus
        });
        if (this.getActiveTab()) {
            this.getActiveTab().onActivate()
        }
    },
    checkMaskStatus: function(e, d, c) {
        if (!e) {
            SYNO.Debug("load topology failed");
            return
        }
        var f = ("none" === d.net_topology) ? true : false;
        var a = (f || !d.has_wifi_dongle);
        var b = (f || !d.support_net_topology);
        if (this.topologyTab) {
            this.topologyTab.isTopologyTabNeedMask = a;
            this.topologyTab.updateSelectionLayout(d.supported_mode)
        }
        if (this.adapterTab) {
            this.adapterTab.isNeedMask = b
        }
        if (this.macfilterTab) {
            this.macfilterTab.isNeedMask = b
        }
        if (a !== this.isTopologyTabNeedMask || b !== this.isNeedMask) {
            this.getActiveTab().onActivate();
            this.isTopologyTabNeedMask = a;
            this.isNeedMask = b
        }
    },
    stopPolling: function() {
        if (this.pollDeviceId) {
            this.pollUnreg(this.pollDeviceId)
        }
        Ext.each(this.wireless_items, function(c, b, a) {
            if (c.stopPolling) {
                c.stopPolling()
            }
        }, this)
    },
    applyHandler: function() {
        if (this.topologyTab === this.getActiveTab()) {
            this.topologyTab.applyHandler()
        } else {
            SYNO.SDS.AdminCenter.Wireless.TabPanel.superclass.applyHandler.apply(this)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.DSM.WhitelistDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var c = Ext.apply({
            dialog: this
        }, a);
        var b = {
            width: 620,
            height: 540,
            layout: "fit",
            title: _T("dsmsetting", "allowurls"),
            items: [this.grid = new SYNO.SDS.AdminCenter.Security.DSM.WhitelistGrid(c)],
            buttons: [{
                text: _T("common", "ok"),
                btnStyle: "blue",
                scope: this,
                handler: this.onOkClick
            }, {
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(b, a);
        return b
    },
    onOkClick: function() {
        var b = this.module.whitelist;
        var a = this.grid.store.collect("hostname").sort();
        if (this.isWhitelistChanged(b, a)) {
            this.module.getForm().findField("whitelist").setValue(a);
            this.module.whitelist = a;
            this.module.ownerCt.restartHttpd = true
        }
        this.close()
    },
    isWhitelistChanged: function(c, a) {
        if (c.length !== a.length) {
            return true
        }
        for (var b = 0; b < c.length; ++b) {
            if (c[b] !== a[b]) {
                return true
            }
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.DSM.WhitelistGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        this.dialog = a.dialog;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.store = this.createStore();
        this.readWhitelist(this.module.whitelist);
        this.store.loadData(this.whitelist);
        var a = {
            border: false,
            store: this.store,
            autoFlexcroll: true,
            tbar: {
                xtype: "syno_toolbar",
                defaultType: "syno_button",
                items: [{
                    text: _T("common", "add"),
                    handler: this.addUrl,
                    scope: this
                }, {
                    text: _T("common", "delete"),
                    handler: this.deleteUrl,
                    scope: this
                }]
            },
            columns: [{
                header: _T("service", "service_host_name"),
                dataIndex: "hostname",
                renderer: Ext.util.Format.htmlEncode
            }],
            selModel: new Ext.grid.RowSelectionModel(),
            listeners: {
                scope: this,
                viewready: this.updateScroller,
                afterrender: {
                    single: true,
                    fn: function() {
                        var c = this.getView();
                        this.mon(c, "rowremoved", this.updateScroller, this);
                        this.mon(c, "rowsinserted", this.updateScroller, this)
                    }
                }
            }
        };
        return Ext.apply(a, b)
    },
    createStore: function() {
        var a = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["hostname"]
        });
        this.addManagedComponent(a);
        return a
    },
    addUrl: function() {
        var a = new SYNO.SDS.AdminCenter.Security.DSM.URLDialog({
            module: this.module,
            owner: this.dialog,
            grid: this
        });
        this.addManagedComponent(a);
        a.show()
    },
    deleteUrl: function() {
        this.store.remove(this.getSelectionModel().getSelections())
    },
    readWhitelist: function(b) {
        var c = [];
        for (var a = 0; a < b.length; ++a) {
            c.push([b[a]])
        }
        this.whitelist = c
    },
    updateScroller: function() {
        this.getView().updateScroller()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.DSM.URLDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            layout: "fit",
            width: 540,
            height: 128,
            resizable: false,
            title: _T("service", "service_host_name"),
            items: [this.form = this.createForm()],
            buttons: [{
                text: _T("common", "ok"),
                btnStyle: "blue",
                scope: this,
                handler: this.onOkClick
            }, {
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(b, a);
        return b
    },
    createForm: function() {
        return new SYNO.ux.FormPanel({
            xtype: "syno_formpanel",
            items: [{
                xtype: "syno_textfield",
                maxlength: 1000,
                name: "url",
                width: 490,
                emptyText: _T("download", "download_empty_input_url"),
                allowBlank: false,
                validator: this.validateURL.createDelegate(this),
                hideLabel: true
            }]
        })
    },
    onOkClick: function() {
        var b = this.form.getForm();
        if (!b.isValid()) {
            return false
        }
        var a = b.findField("url").getValue().replace(/\s/g, "");
        if (Ext.isEmpty(a)) {
            return false
        }
        this.grid.store.add(new Ext.data.Record({
            hostname: a
        }));
        this.close()
    },
    validateURL: function(b) {
        var a = b.replace(/\s/g, "");
        return Ext.isString(a) && !Ext.isEmpty(a) && (-1 === b.indexOf(","))
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.DSM.Form", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.owner = a.owner;
        this.dsmAPI = {
            api: "SYNO.Core.Security.DSM",
            methods: {
                get: "get",
                set: "set"
            },
            version: 1
        };
        if (this._S("majorversion") >= 5 && this._S("minorversion") >= 1) {
            this.dsmAPI.version = 2
        }
        this.embedAPI = {
            api: "SYNO.Core.Security.DSM.Embed",
            methods: {
                get: "get",
                set: "set"
            },
            version: 1
        };
        var b = {
            title: _T("dsmsetting", "session_legend"),
            autoFlexcroll: true,
            trackResetOnLoad: true,
            webapi: this.dsmAPI,
            items: this.getDSMSecurityItems()
        };
        Ext.apply(b, a);
        return b
    },
    getDSMSecurityItems: function() {
        var a = [{
            xtype: "syno_displayfield",
            value: _T("dsmsetting", "timeout_desc")
        }, {
            xtype: "syno_numberfield",
            indent: 1,
            fieldLabel: _T("dsmsetting", "timeout_field"),
            name: "timeout",
            maxlength: 5,
            minValue: 1,
            maxValue: 65535
        }, {
            xtype: "syno_checkbox",
            boxLabel: _T("dsmsetting", "disable_session_srcip"),
            name: "skip_ip_checking"
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            value: _T("dsmsetting", "session_security_desc")
        }, {
            xtype: "syno_checkbox",
            boxLabel: _T("dsmsetting", "dsm_token"),
            name: "enable_csrf_protection"
        }, {
            webapi: this.embedAPI,
            xtype: "syno_checkbox",
            boxLabel: _T("dsmsetting", "check_frame_options"),
            name: "enable_block",
            handler: function(c, b) {
                this.getComponent("whitelist_btn").setDisabled(!b)
            },
            scope: this
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            value: _T("dsmsetting", "frame_options_allow_url")
        }, {
            itemId: "whitelist_btn",
            xtype: "syno_button",
            text: _T("dsmsetting", "allowurls"),
            indent: 1,
            disabled: true,
            handler: this.showWhitelistDialog.createDelegate(this)
        }, {
            webapi: this.embedAPI,
            name: "whitelist",
            xtype: "hidden"
        }];
        if (this._S("majorversion") >= 5 && this._S("minorversion") >= 1) {
            a.push({
                xtype: "syno_checkbox",
                boxLabel: _T("dsmsetting", "restart_clean_session"),
                name: "restart_clean_session"
            })
        }
        return a
    },
    showWhitelistDialog: function() {
        var a = new SYNO.SDS.AdminCenter.Security.DSM.WhitelistDialog({
            owner: this.module.appWin,
            module: this
        });
        this.addManagedComponent(a);
        a.show()
    },
    processParams: function(c, b) {
        if ("get" === c) {
            return this.callParent(arguments)
        }
        var a = Ext.applyIf({
            method: "set"
        }, this.embedAPI);
        Ext.each(b, function(d) {
            if (SYNO.ux.Utils.checkApiConsistency(d, a)) {
                if (this.getForm().findField("enable_block").isDirty()) {
                    this.ownerCt.restartHttpd = true
                }
                d.params.whitelist = this.whitelist;
                return false
            }
        }, this);
        return b
    },
    processReturnData: function(d, c, b) {
        if (c && Ext.isArray(c.result)) {
            var a = Ext.applyIf({
                method: "get"
            }, this.embedAPI);
            Ext.each(c.result, function(e) {
                if (SYNO.ux.Utils.checkApiConsistency(e, a)) {
                    this.ownerCt.restartHttpd = false;
                    this.whitelist = e.data.whitelist.sort();
                    return false
                }
            }, this)
        }
        this.callParent(arguments)
    },
    isDirty: function() {
        return this.getForm().isDirty()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwCustomPortsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        var a = {
            width: 560,
            height: 330,
            title: _T("firewall", "firewall_ports_self_defined"),
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.DefineBehaviors()
    },
    createPanel: function() {
        var a = {
            border: false,
            items: [{
                xtype: "syno_combobox",
                name: "port_type",
                hiddenName: "port_type",
                fieldLabel: _T("firewall", "firewall_port_type"),
                displayField: "display",
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH + 50,
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                valueField: "value",
                value: "dest",
                store: new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["src", _T("firewall", "firewall_port_type_source")],
                        ["dest", _T("firewall", "firewall_port_type_dest")]
                    ]
                })
            }, {
                xtype: "syno_combobox",
                name: "protocol",
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH + 50,
                fieldLabel: _T("firewall", "firewall_protocol"),
                fields: ["value", "display"],
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                displayField: "display",
                valueField: "value",
                value: "tcp",
                scope: this,
                store: new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["tcp", _T("firewall", "firewall_protocol_tcp")],
                        ["udp", _T("firewall", "firewall_protocol_udp")],
                        ["icmp", _T("firewall", "firewall_protocol_icmp")],
                        ["all", _T("firewall", "firewall_ports_all")]
                    ]
                }),
                listeners: {
                    scope: this,
                    select: this.onCheckCustomPort
                }
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH,
                fieldLabel: _T("firewall", "firewall_ports") + _T("firewall", "firewall_split_by_common"),
                itemId: "firewall_ports_container",
                defaultMargins: "0 0 0 0",
                items: [{
                    xtype: "syno_radio",
                    name: "self_port_choose",
                    boxLabel: _T("firewall", "firewall_ports") + _T("firewall", "firewall_split_by_common") + _T("common", "colon"),
                    itemId: "firewall_ports",
                    id: this.firewall_ports_id = Ext.id(),
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH + 50,
                    inputValue: "ports"
                }, {
                    xtype: "syno_textfield",
                    name: "self_ports_value",
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                    validateOnBlur: true,
                    vtype: "fwports"
                }]
            }, {
                xtype: "syno_radio",
                boxLabel: _T("firewall", "firewall_ports_range"),
                name: "self_port_choose",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH * 2,
                itemId: "firewall_ports_range",
                id: this.firewall_ports_range_id = Ext.id(),
                inputValue: "ports_range"
            }, {
                xtype: "syno_numberfield",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                indent: 1,
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH + 50,
                fieldLabel: _T("ftp", "ftp_port_from"),
                validateOnBlur: true,
                name: "self_ports_range_from",
                maxlength: 5,
                vtype: "port"
            }, {
                xtype: "syno_numberfield",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                indent: 1,
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH + 50,
                fieldLabel: _T("ftp", "ftp_port_to"),
                validateOnBlur: true,
                name: "self_ports_range_to",
                maxlength: 5,
                vtype: "port"
            }]
        };
        return new SYNO.ux.FormPanel(a)
    },
    DefineBehaviors: function() {
        this.enableRadioGroupDummy = new SYNO.ux.Utils.EnableRadioGroup(this.form, "self_port_choose", {
            ports_range: ["self_ports_range_from", "self_ports_range_to"],
            ports: ["self_ports_value"]
        });
        this.radioPortsRange = Ext.getCmp(this.firewall_ports_range_id);
        this.radioPorts = Ext.getCmp(this.firewall_ports_id);
        this.comboPortType = this.form.findField("port_type")
    },
    onCheckCustomPort: function() {
        if ("icmp" == this.form.findField("protocol").getValue()) {
            this.comboPortType.disable();
            this.radioPorts.disable();
            this.radioPortsRange.disable()
        } else {
            this.comboPortType.enable();
            this.radioPorts.enable();
            this.radioPortsRange.enable()
        }
    },
    onApply: function() {
        if (!this.validateForm(this.form)) {
            return
        }
        this.owner.setCustom(this.getValue());
        this.close()
    },
    validateForm: function(a) {
        var b = a.findField("self_port_choose").getGroupValue();
        if (!a.isValid()) {
            return false
        }
        if ("icmp" === a.findField("protocol").getValue()) {
            return true
        }
        if ("ports" == b) {
            if (!SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(a, ["self_ports_value"]) || !SYNO.SDS.AdminCenter.Utils.Validator.MarkPortsExceed(a, "self_ports_value", "FW")) {
                return false
            }
        } else {
            if ("ports_range" == b) {
                SYNO.SDS.AdminCenter.Utils.Validator.ExchgLessThanField(a, "self_ports_range_from", "self_ports_range_to");
                if (!SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(a, ["self_ports_range_from", "self_ports_range_to"])) {
                    return false
                }
            }
        }
        return true
    },
    getSelfPorts: function() {
        var b = this.form.findField("self_port_choose").getGroupValue();
        var a = "";
        if ("ports" == b) {
            a = this.form.findField("self_ports_value").getValue()
        } else {
            if ("ports_range" == b) {
                a = String.format("{0}-{1}", this.form.findField("self_ports_range_from").getValue(), this.form.findField("self_ports_range_to").getValue())
            }
        }
        return a
    },
    getValue: function() {
        var a = {
            protocol: "",
            port_num: "",
            port_direction: ""
        };
        a.protocol = this.form.findField("protocol").getValue();
        if ("icmp" != a.protocol) {
            a.port_num = this.getSelfPorts();
            a.port_direction = this.comboPortType.getValue()
        }
        return a
    },
    setValue: function(a, b, c) {
        var e = "";
        var d = "";
        if (a.indexOf("-") > 0) {
            e = a.split("-")[0];
            d = a.split("-")[1];
            this.form.findField("self_port_choose").setValue("ports_range");
            this.form.findField("self_ports_range_from").setValue(e);
            this.form.findField("self_ports_range_to").setValue(d)
        } else {
            this.form.findField("self_port_choose").setValue("ports");
            this.form.findField("self_ports_value").setValue(a)
        }
        if ("icmp" == c) {
            b = "dest"
        }
        this.form.findField("port_type").setValue(b);
        this.form.findField("protocol").setValue(c);
        this.onCheckCustomPort()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwSrcIpDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        var a = {
            width: 680,
            height: 380,
            title: _T("firewall", "firewall_source"),
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        this.setDefault();
        Ext.apply(a, b);
        this.callParent([a]);
        this.OnSourceRadioClick(this.form.findField("source"), true)
    },
    createPanel: function() {
        var a = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_source"),
            itemId: "firewall_source",
            items: [{
                xtype: "syno_displayfield"
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                defaults: {
                    flex: 1
                },
                items: [{
                    xtype: "syno_radio",
                    name: "source",
                    itemId: "nfs_fieldtitle_host",
                    boxLabel: _T("nfs", "nfs_fieldtitle_host"),
                    inputValue: "single",
                    scope: this,
                    checked: true,
                    handler: this.OnSourceRadioClick
                }, {
                    xtype: "syno_radio",
                    name: "source",
                    itemId: "firewall_source_network",
                    boxLabel: _T("firewall", "firewall_source_network"),
                    inputValue: "subnet",
                    scope: this,
                    handler: this.OnSourceRadioClick
                }]
            }, {
                xtype: "syno_textfield",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                fieldLabel: _T("tcpip", "tcpip_ipaddr"),
                name: "source_ip",
                itemId: "tcpip_ipaddr",
                vtype: "fwLooseip",
                validator: function(b) {
                    if (Ext.form.VTypes.fwLooseip(b)) {
                        this.nextSibling().validate();
                        return true
                    } else {
                        return false
                    }
                }
            }, {
                xtype: "syno_textfield",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                fieldLabel: _T("tcpip", "tcpip_mask") + "/" + _T("tcpip", "ipv6_prefixleng"),
                name: "source_subnet_mask",
                itemId: "tcpip_mask",
                maskRe: /[.0-9]/,
                invalidText: _JSLIBSTR("vtype", "bad_mask"),
                allowBlank: false,
                validator: function(b) {
                    var c = this.previousSibling().getValue();
                    if (Ext.form.VTypes.fwLoosev6ipVal.test(c)) {
                        if (b >= 0 && b <= 128) {
                            return true
                        } else {
                            return _JSLIBSTR("vtype", "bad_ipv6prefixLeng")
                        }
                    } else {
                        if (Ext.form.VTypes.netmaskVal.test(b)) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                xtype: "syno_displayfield"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("firewall", "firewall_ip_range"),
                name: "source",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH * 2,
                itemId: "firewall_source_range",
                inputValue: "range",
                scope: this,
                handler: this.OnSourceRadioClick
            }, {
                xtype: "syno_textfield",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                fieldLabel: _T("ftp", "ftp_port_from"),
                name: "source_ip_begin",
                itemId: "tcpip_ipaddr_begin",
                vtype: "fwLooseip",
                validator: function(b) {
                    if (Ext.form.VTypes.fwLooseip(b)) {
                        return true
                    } else {
                        return false
                    }
                }
            }, {
                xtype: "syno_textfield",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                labelWidth: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                fieldLabel: _T("ftp", "ftp_port_to"),
                name: "source_ip_end",
                itemId: "tcpip_ipaddr_end",
                vtype: "fwLooseip",
                validator: function(b) {
                    if (Ext.form.VTypes.fwLooseip(b)) {
                        return true
                    } else {
                        return false
                    }
                }
            }]
        };
        return new SYNO.ux.FormPanel(a)
    },
    onApply: function() {
        if (!this.validateBlank(this.form)) {
            var a = this.form.findField("source").getGroupValue();
            if ("range" === a) {
                this.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("firewall", "firewall_error_ip_range"))
            } else {
                this.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("common", "forminvalid"))
            }
            return
        }
        if (!this.form.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        this.setSource(this.getSrc());
        this.owner.setSrc(this.getSrc());
        this.close()
    },
    getSrc: function() {
        var a;
        var d = this.form.findField("source").getGroupValue();
        if ("single" === d) {
            a = this.form.findField("source_ip").getValue()
        } else {
            if ("range" === d) {
                var c = this.form.findField("source_ip_begin").getValue();
                var b = this.form.findField("source_ip_end").getValue();
                a = c + "-" + b
            } else {
                if ("subnet" === d) {
                    a = String.format("{0}/{1}", this.form.findField("source_ip").getValue(), this.form.findField("source_subnet_mask").getValue())
                }
            }
        }
        return a
    },
    onOpen: function(a) {
        this.setStatusBusy();
        if (a && "" !== a) {
            this.setSource(a)
        } else {
            this.form.findField("source").setValue("single")
        }
        this.clearStatusBusy();
        this.callParent(arguments)
    },
    setDefault: function() {
        this.form.findField("source_ip").enable();
        this.form.findField("source_subnet_mask").disable();
        this.form.findField("source_ip_begin").disable();
        this.form.findField("source_ip_end").disable()
    },
    setSource: function(f) {
        var e = "";
        var a = "";
        var g = "";
        var c = "";
        var b = "";
        if (0 <= f.indexOf("GEOIP:") || 0 <= f.indexOf("all")) {
            g = "single"
        } else {
            if (0 < f.indexOf("-")) {
                c = f.split("-")[0];
                b = f.split("-")[1];
                g = "range";
                this.form.findField("source_ip_begin").setValue(c);
                this.form.findField("source_ip_end").setValue(b)
            } else {
                if (f.indexOf("/") > 0) {
                    var d = f.split("/");
                    e = d[0];
                    a = d[1];
                    g = "subnet";
                    this.form.findField("source_ip").setValue(e);
                    this.form.findField("source_subnet_mask").setValue(a)
                } else {
                    this.form.findField("source_ip").setValue(f);
                    g = "single"
                }
            }
        }
        this.form.findField("source").setValue(g)
    },
    OnSourceRadioClick: function(a, b) {
        if (!a.checked) {
            return
        }
        switch (a.value) {
            case "single":
                this.form.findField("source_ip").enable();
                this.form.findField("source_subnet_mask").disable();
                this.form.findField("source_ip_begin").disable();
                this.form.findField("source_ip_end").disable();
                break;
            case "subnet":
                this.form.findField("source_ip").enable();
                this.form.findField("source_subnet_mask").enable();
                this.form.findField("source_ip_begin").disable();
                this.form.findField("source_ip_end").disable();
                break;
            case "range":
                this.form.findField("source_ip").disable();
                this.form.findField("source_subnet_mask").disable();
                this.form.findField("source_ip_begin").enable();
                this.form.findField("source_ip_end").enable();
                break;
            default:
                this.form.findField("source_ip").enable();
                this.form.findField("source_subnet_mask").disable();
                this.form.findField("source_ip_begin").disable();
                this.form.findField("source_ip_end").disable();
                break
        }
    },
    validateBlank: function(b) {
        var j = true;
        var g = 0;
        var h = 0;
        var l = "";
        var e = b.findField("source").getGroupValue();
        var k;
        var d;
        var a;
        var c;
        var f;
        if ("single" == e) {
            j = SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(b, ["source_ip"])
        } else {
            if ("subnet" == e) {
                j = SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(b, ["source_ip"]);
                if (j) {
                    j = SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(b, ["source_subnet_mask"])
                }
            } else {
                if (!SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(b, ["source_ip_begin"]) || !SYNO.SDS.AdminCenter.Utils.Validator.MarkBlankField(b, ["source_ip_end"])) {
                    j = false
                } else {
                    d = b.findField("source_ip_begin").getValue().toString();
                    a = b.findField("source_ip_end").getValue().toString();
                    if (0 < d.indexOf(".") && 0 < a.indexOf(".")) {
                        l = /([0-9]+).([0-9]+).([0-9]+).([0-9]+)/;
                        if (null === (c = d.match(l)) || null === (f = a.match(l))) {
                            return false
                        }
                        for (g = 1; g < c.length; g++) {
                            if (parseInt(f[g], 10) > parseInt(c[g], 10)) {
                                j = true;
                                break
                            } else {
                                if (parseInt(f[g], 10) < parseInt(c[g], 10)) {
                                    j = false;
                                    break
                                }
                            }
                            j = false
                        }
                    } else {
                        if (0 < d.indexOf(":") && 0 < a.indexOf(":")) {
                            if (0 < d.indexOf("::")) {
                                h = d.match(/:/g).length;
                                k = "::";
                                for (g = 0; g < 7 - h; g++) {
                                    k += ":"
                                }
                                d = d.replace("::", k)
                            }
                            if (0 < a.indexOf("::")) {
                                h = a.match(/:/g).length;
                                k = "::";
                                for (g = 0; g < 7 - h; g++) {
                                    k += ":"
                                }
                                a = a.replace("::", k)
                            }
                            l = /([0-9A-Fa-f]*):([0-9A-Fa-f]*):([0-9A-Fa-f]*):([0-9A-Fa-f]*):([0-9A-Fa-f]*):([0-9A-Fa-f]*):([0-9A-Fa-f]*):([0-9A-Fa-f]*)/;
                            if (null === (c = d.match(l)) || null === (f = a.match(l))) {
                                return false
                            }
                            for (g = 1; g < c.length; g++) {
                                if ("" === c[g]) {
                                    c[g] = 0
                                }
                                if ("" === f[g]) {
                                    f[g] = 0
                                }
                                if (parseInt(f[g], 16) > parseInt(c[g], 16)) {
                                    j = true;
                                    break
                                } else {
                                    if (parseInt(f[g], 16) < parseInt(c[g], 16)) {
                                        j = false;
                                        break
                                    }
                                }
                                j = false
                            }
                        } else {
                            j = false
                        }
                    }
                }
            }
        }
        if (!j) {
            return false
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwGeoipDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.grid = new SYNO.SDS.AdminCenter.Security.GeoipGrid({
            module: this.module,
            owner: this.owner,
            father: this
        });
        var a = {
            width: 650,
            height: 430,
            title: _T("firewall", "firewall_country_name"),
            layout: "fit",
            items: [this.grid],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        this.callParent([a])
    },
    onActivate: function() {
        return this.callParent(arguments)
    },
    onApply: function() {
        var b = this.grid.getSrc();
        var a = this.validSrc(b);
        if (-1 == a) {
            this.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("firewall", "firewall_no_set_countries"));
            return
        } else {
            if (-2 == a) {
                this.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("firewall", "firewall_over_set_countries"));
                return
            }
        }
        this.owner.setSrc(b);
        this.close()
    },
    setVal: function(a) {
        this.grid.setVal(a)
    },
    validSrc: function(b) {
        var a = /^GEOIP:([A-Z0-9]{2},)*[A-Z0-9]{2}$/;
        if (null === b.match(a)) {
            return -1
        }
        if (15 < b.split(",").length) {
            return -2
        }
        return 0
    },
    openDetaiIpDialog: function() {
        var a = new SYNO.SDS.AdminCenter.Security.FwGeoipDetailDialog({
            module: this.module,
            grid: this.grid,
            owner: this
        });
        a.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.GeoipGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(c) {
        this.module = c.module;
        this.owner = c.owner;
        this.father = c.father;
        this.enabledCountries = [];
        this.enableColumn = new SYNO.ux.EnableColumn({
            header: _T("common", "enabled"),
            dataIndex: "enabled",
            enableFastSelectAll: true,
            menuDisabled: true,
            sortable: true,
            width: 120,
            resizable: true,
            align: "center",
            tooltip: _T("common", "enabled")
        });
        this.store = new SYNO.API.JsonStore({
            api: "SYNO.Core.Security.Firewall.Rules",
            method: "countries_list",
            version: 2,
            root: "countries",
            fields: ["country_code", "country_search_name"],
            appWindow: this.findAppWindow() || false,
            sortInfo: {
                field: "country_code",
                direction: "ASC"
            },
            autoDestroy: true,
            listeners: {
                scope: this,
                beforeload: this.onBeforeLoad,
                load: this.onLoad,
                exception: this.onException
            }
        });
        var a = new Ext.grid.ColumnModel([this.enableColumn, {
            id: "country_code",
            header: _T("firewall", "firewall_country_code"),
            dataIndex: "country_code",
            width: 80,
            align: "center",
            renderer: function(e, d) {
                if ("EU" === e || "AQ" === e || "AP" === e) {
                    e = _T("firewall", e + "_other")
                }
                return e
            }
        }, {
            id: "country_name",
            header: _T("firewall", "firewall_country_name"),
            dataIndex: "country_code",
            width: 170,
            align: "center",
            renderer: function(f, e) {
                if ("EU" === f || "AQ" === f || "AP" === f) {
                    var d = "firewall_ip_country_extra";
                    f = _T("Country", f);
                    f = String.format(_T("firewall", d), f, f)
                } else {
                    f = _T("Country", f)
                }
                e.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                return f
            }
        }]);
        var b = Ext.apply({
            ds: this.store,
            cm: a,
            loadMask: false,
            viewConfig: {
                markDirty: false
            },
            enableColLock: true,
            enableColumnMove: false,
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({}),
            plugins: [this.enableColumn],
            listeners: {
                rowdblclick: function() {
                    this.father.openDetaiIpDialog()
                },
                scope: this
            },
            tbar: {
                items: ["->", new SYNO.ux.TextFilter({
                    iconStyle: "search",
                    itemId: "search",
                    localFilter: true,
                    localFilterField: "country_search_name",
                    store: this.store,
                    queryParam: "filter",
                    pageSize: SYNO.SDS.AdminCenter.USER_PAGING_SIZE
                })]
            }
        }, c);
        Ext.apply(b, c);
        this.callParent([b])
    },
    contryShow: function(b, a) {
        b = _T("Country", b);
        a.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"';
        return b
    },
    getSrc: function() {
        var e;
        var c = this.getStore().getCount();
        var a = [];
        var d = "GEOIP:";
        if (0 >= c) {
            return a
        }
        for (var b = 0; b < c; b++) {
            e = this.getStore().getAt(b);
            if (e.get("enabled")) {
                a.push(e.get("country_code"))
            }
        }
        return d.concat(a.join(","))
    },
    setVal: function(a) {
        if ("" === a) {
            this.enabledCountries.length = 0
        } else {
            this.enabledCountries = a.split(",")
        }
        this.getStore().load()
    },
    onEnableCountries: function(a) {
        var e = this.getStore();
        var d = e.getCount();
        var f;
        for (var b = 0; b < a.length; b++) {
            for (var c = 0; c < d; c++) {
                f = e.getAt(c);
                if (a[b] == f.get("country_code")) {
                    f.set("enabled", true);
                    break
                }
            }
        }
        e.commitChanges()
    },
    setCountrySearchName: function() {
        var c;
        var a = 0;
        var b = this.store.getCount();
        if (0 >= b) {
            return
        }
        for (a = 0; a < b; a++) {
            c = this.store.getAt(a);
            this.store.data.items[a].data.country_search_name = _T("Country", c.data.country_code) + c.data.country_code
        }
    },
    onBeforeLoad: function() {
        this.owner.setStatusBusy()
    },
    onLoad: function(a) {
        this.onEnableCountries(this.enabledCountries);
        this.setCountrySearchName();
        this.owner.clearStatusBusy()
    },
    onException: function() {
        this.owner.clearStatusBusy()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwGeoipDetailDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var c;
        this.module = b.module;
        this.owner = b.owner;
        this.country_code = b.grid.getSelectionModel().getSelected().get("country_code");
        this.grid = new SYNO.SDS.AdminCenter.Security.FwGeoipDetailGrid({
            module: this.module,
            owner: this.owner,
            country_code: this.country_code
        });
        if ("EU" === this.country_code || "AQ" === this.country_code || "AP" === this.country_code) {
            c = _T("firewall", this.country_code + "_other")
        } else {
            c = _T("Country", this.country_code)
        }
        var a = {
            width: 450,
            height: 430,
            title: c,
            layout: "fit",
            items: [this.grid],
            buttons: [{
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        this.callParent([a])
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwGeoipDetailGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.country_code = b.country_code;
        this.tbar = new Ext.Toolbar({
            defaultType: "syno_button",
            items: this.configToolBar()
        });
        this.store = this.createStore();
        this.loadStore(false);
        var a = Ext.apply({
            tbar: this.tbar,
            store: this.store,
            viewConfig: {
                markDirty: false
            },
            columns: [{
                id: "ip_begin",
                header: _T("tcpip", "tcpip_ipaddr") + " " + _T("ftp", "ftp_port_from"),
                dataIndex: "ip_begin",
                width: 80
            }, {
                id: "ip_end",
                header: _T("tcpip", "tcpip_ipaddr") + " " + _T("ftp", "ftp_port_to"),
                dataIndex: "ip_end",
                width: 180
            }],
            enableDragDrop: false,
            enableColumnMove: false,
            enableHdMenu: false,
            autoExpandColumn: "ip_begin",
            monitorWindowResize: true,
            selModel: new Ext.grid.RowSelectionModel({})
        }, b);
        Ext.apply(a, b);
        this.callParent([a])
    },
    createStore: function() {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.Core.Security.Firewall.Rules",
            method: "list_country_ip",
            appWindow: this.findAppWindow() || false,
            baseParams: {},
            version: 2,
            autoDestroy: true,
            defaultSortable: true,
            root: "country_ip_list",
            fields: ["ip_begin", "ip_end"],
            listeners: {
                scope: this,
                beforeload: this.onBeforeLoad,
                load: this.onLoad,
                exception: this.onException
            }
        });
        return a
    },
    onBeforeLoad: function() {
        this.owner.setStatusBusy()
    },
    onLoad: function() {
        this.owner.clearStatusBusy()
    },
    onException: function() {
        this.owner.clearStatusBusy()
    },
    loadStore: function(a) {
        this.store.load({
            params: {
                country_code: this.country_code,
                is_ipv6: a
            }
        })
    },
    configToolBar: function() {
        var a = new Ext.data.ArrayStore({
            fields: ["id", "display"],
            data: [
                [0, "IPv4"],
                [1, "IPv6"]
            ]
        });
        return [{
            xtype: "syno_combobox",
            id: this.IPTypeComboId = Ext.id(),
            displayField: "display",
            valueField: "id",
            value: 0,
            store: a,
            listeners: {
                select: this.onIPTypeSelect,
                scope: this
            }
        }]
    },
    onIPTypeSelect: function(c, a, b) {
        if ("IPv6" == a.get("display")) {
            this.loadStore(true)
        } else {
            this.loadStore(false)
        }
        return
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwRuleDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.portInfo = b.portInfo;
        this.FwLoadApiMaxVer = this.getKnownAPI("SYNO.Core.Security.Firewall.Rules").maxVersion;
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        var a = {
            dsmStyle: "v5",
            width: 620,
            height: 500,
            resizable: false,
            title: _T("firewall", "firewall_rule_add"),
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onUpdateRuleGrid
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.DefineBehaviors()
    },
    DefineBehaviors: function() {
        this.btnChoose = Ext.getCmp(this.btnChooseId);
        this.btnSelfDefine = Ext.getCmp(this.btnSelfDefineId);
        this.btnSrcDefine = Ext.getCmp(this.btnSrcDefineId);
        this.btnChoose.disable();
        this.btnSelfDefine.disable();
        this.btnSrcDefine.disable();
        if (2 == this.FwLoadApiMaxVer) {
            this.btnGeoipDefine = Ext.getCmp(this.btnGeoipDefineId);
            this.btnGeoipDefine.disable()
        }
    },
    createPanel: function() {
        var d = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_ports"),
            itemId: "firewall_ports",
            hideLabel: true,
            items: [{
                xtype: "syno_radio",
                itemId: "firewall_ports_all",
                boxLabel: _T("firewall", "firewall_ports_all"),
                name: "ports",
                inputValue: "all",
                checked: true,
                scope: this,
                handler: this.onCheckPorts
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    itemId: "firewall_ports_system",
                    boxLabel: _T("firewall", "firewall_ports_system"),
                    name: "ports",
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                    inputValue: "system",
                    scope: this,
                    handler: this.onCheckPorts
                }, {
                    xtype: "syno_button",
                    text: _T("common", "choose"),
                    scope: this,
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                    id: this.btnChooseId = Ext.id(),
                    handler: function(g, f) {
                        var h = new SYNO.SDS.AdminCenter.Utils.Dialog.ServPortsDialog({
                            module: this.module,
                            owner: this,
                            serverPorts: this.portInfo
                        });
                        h.setVal(this.serviceChoose);
                        h.open()
                    }
                }]
            }, {
                xtype: "syno_compositefield",
                itemId: "custom_ports_fieldset",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    boxLabel: _T("firewall", "firewall_ports_self_defined"),
                    name: "ports",
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                    inputValue: "self-defined",
                    scope: this,
                    handler: this.onCheckPorts
                }, {
                    xtype: "syno_button",
                    id: this.btnSelfDefineId = Ext.id(),
                    text: _T("firewall", "firewall_ports_self_defined"),
                    scope: this,
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                    handler: function(h, g) {
                        var f = new SYNO.SDS.AdminCenter.Security.FwCustomPortsDialog({
                            module: this.module,
                            owner: this
                        });
                        f.setValue(this.customVal.port_num, this.customVal.port_direction, this.customVal.protocol);
                        f.open()
                    }
                }]
            }]
        };
        var e = [];
        e.push({
            xtype: "syno_radio",
            name: "source",
            itemId: "firewall_ports_all",
            boxLabel: _T("firewall", "firewall_ports_all"),
            inputValue: "all",
            scope: this,
            checked: true,
            handler: this.onCheckSrc
        }, {
            xtype: "syno_compositefield",
            itemId: "specific_source_fieldset",
            hideLabel: true,
            items: [{
                xtype: "syno_radio",
                name: "source",
                boxLabel: _T("firewall", "firewall_specific_ip"),
                inputValue: "specific_source",
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                scope: this,
                handler: this.onCheckSrc
            }, {
                xtype: "syno_button",
                id: this.btnSrcDefineId = Ext.id(),
                text: _T("common", "choose"),
                scope: this,
                width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                handler: function(g, f) {
                    var h = new SYNO.SDS.AdminCenter.Security.FwSrcIpDialog({
                        module: this.module,
                        owner: this,
                        GridStore: this.GridStore
                    });
                    h.open(this.source_ip)
                }
            }]
        });
        if (2 == this.FwLoadApiMaxVer) {
            e.push({
                xtype: "syno_compositefield",
                itemId: "geoip_source_fieldset",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    boxLabel: _T("firewall", "firewall_region"),
                    name: "source",
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH * 1.7,
                    inputValue: "geoip_source",
                    scope: this,
                    handler: this.onCheckSrc
                }, {
                    xtype: "syno_button",
                    id: this.btnGeoipDefineId = Ext.id(),
                    text: _T("common", "choose"),
                    scope: this,
                    width: SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH,
                    handler: function(h, g) {
                        var f = new SYNO.SDS.AdminCenter.Security.FwGeoipDialog({
                            module: this.module,
                            owner: this
                        });
                        f.setVal(this.source_ip.replace("GEOIP:", ""));
                        f.open(this.mode)
                    }
                }]
            })
        }
        var c = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_source"),
            itemId: "firewall_source",
            items: e
        };
        var b = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_allow"),
            itemId: "firewall_allow",
            items: [{
                xtype: "syno_compositefield",
                hideLabel: true,
                defaults: {
                    flex: 1
                },
                items: [{
                    xtype: "syno_radio",
                    name: "allow",
                    itemId: "firewall_policy_allow",
                    boxLabel: _T("firewall", "firewall_policy_allow"),
                    inputValue: "allow",
                    scope: this,
                    checked: true
                }, {
                    xtype: "syno_radio",
                    name: "allow",
                    itemId: "firewall_policy_drop",
                    boxLabel: _T("firewall", "firewall_policy_drop"),
                    inputValue: "drop",
                    scope: this
                }, {
                    xtype: "syno_displayfield"
                }]
            }]
        };
        var a = {
            border: false,
            width: 590,
            height: 420,
            items: [d, c, b]
        };
        return new SYNO.ux.FormPanel(a)
    },
    onOpen: function() {
        this.setStatusBusy();
        var b;
        var a = this.module.getPanel().getActiveTab();
        this.setDefault();
        if ("add" == this.mode) {
            this.setTitle(_T("firewall", "firewall_rule_add"))
        } else {
            if ("edit" == this.mode) {
                this.setTitle(_T("firewall", "firewall_rule_edit"));
                b = a.getSelectionModel().getSelected();
                this.setValue(b)
            }
        }
        this.onCheckPorts(this.panel.getForm().findField("ports"), true);
        this.gridRules = a;
        this.clearStatusBusy();
        this.callParent(arguments)
    },
    setDefault: function() {
        this.customVal = {
            port_num: "",
            port_direction: "dest",
            protocol: "tcp"
        };
        this.source_ip = "";
        this.source_subnet_mask = "";
        this.serviceChoose = "";
        this.ruleRecord = new SYNO.SDS.AdminCenter.Security.Utils.FwRULERecord({
            id: 0,
            enabled: true,
            port_type: "",
            port_num: "",
            port_direction: "",
            protocol: "",
            source: "",
            allow: ""
        })
    },
    getRecordInForm: function() {
        var b;
        var a;
        var d;
        var c;
        a = this.getPorts();
        d = this.getSrc();
        c = this.getAllow();
        b = new SYNO.SDS.AdminCenter.Security.Utils.FwRULERecord({
            id: this.ruleRecord.get("id"),
            enabled: this.ruleRecord.get("enabled"),
            port_type: a.port_type,
            port_num: a.port_num,
            port_direction: a.port_direction,
            protocol: a.protocol,
            source: d,
            allow: c
        });
        return b
    },
    onUpdateRuleGrid: function() {
        var a;
        var b;
        var c = this.gridRules.GridStore;
        if (!this.validateForm(this.form)) {
            return
        }
        a = this.getRecordInForm();
        if ("add" == this.mode) {
            c.add(a)
        } else {
            if ("edit" == this.mode) {
                b = this.gridRules.getSelectionModel().getSelected();
                b.set("enabled", a.get("enabled"));
                b.set("port_type", a.get("port_type"));
                b.set("port_num", a.get("port_num"));
                b.set("port_direction", a.get("port_direction"));
                b.set("protocol", a.get("protocol"));
                b.set("source", a.get("source"));
                b.set("allow", a.get("allow"))
            }
        }
        this.close()
    },
    setValue: function(a) {
        this.ruleRecord = a;
        this.setPorts(a.get("port_type"), a.get("port_num"), a.get("port_direction"), a.get("protocol"));
        this.setSrc(a.get("source"));
        this.setAllow(a.get("allow"))
    },
    getAllow: function() {
        return this.form.findField("allow").getGroupValue()
    },
    setAllow: function(a) {
        return this.form.findField("allow").setValue(a)
    },
    getSrc: function() {
        var a;
        var b = this.form.findField("source").getGroupValue();
        if ("all" == b) {
            a = "all"
        } else {
            if ("subnet" == b) {
                a = String.format("{0}/{1}", this.srouce_ip, this.source_subnet_mask)
            } else {
                a = this.source_ip
            }
        }
        return a
    },
    setSrc: function(d) {
        var c = "";
        var a = "";
        var e = "";
        if (d == "all") {
            this.source_ip = "all";
            e = "all"
        } else {
            if (0 <= d.indexOf("GEOIP:")) {
                this.source_ip = d;
                e = "geoip_source"
            } else {
                if (d.indexOf("-") > 0) {
                    this.source_ip = d;
                    e = "specific_source"
                } else {
                    if (d.indexOf("/") > 0) {
                        var b = d.split("/");
                        c = b[0];
                        a = b[1];
                        this.source_ip = d;
                        this.source_subnet_mask = a;
                        e = "specific_source"
                    } else {
                        this.source_ip = d;
                        e = "specific_source"
                    }
                }
            }
        }
        this.form.findField("source").setValue(e)
    },
    setPorts: function(b, a, c, e) {
        var d = "dest";
        var f = "";
        if ("ALL" == b) {
            f = "all"
        } else {
            if ("SYS" == b || "RESERVED" == b) {
                f = "system";
                this.serviceChoose = a
            } else {
                if ("SELF" == b) {
                    f = "self-defined";
                    if ("" !== c) {
                        d = c
                    }
                    this.customVal = {
                        port_num: a,
                        port_direction: d,
                        protocol: e
                    }
                } else {
                    return
                }
            }
        }
        this.form.findField("ports").setValue(f);
        this.setServicesProtocol(e)
    },
    getPorts: function() {
        var c = this.form.findField("ports").getGroupValue();
        var a = {
            port_type: "",
            port_num: "",
            port_direction: "",
            protocol: ""
        };
        var b = "";
        a.protocol = "";
        if ("all" == c) {
            a.port_type = "ALL";
            a.protocol = "all"
        } else {
            if ("system" == c) {
                a.port_type = "SYS";
                a.port_num = this.getServices();
                a.protocol = this.getServicesProtocol()
            } else {
                if ("self-defined" == c) {
                    b = this.getCustom();
                    a.port_type = "SELF";
                    a.port_num = b.port_num;
                    a.port_direction = b.port_direction;
                    a.protocol = b.protocol
                }
            }
        }
        return a
    },
    getServices: function() {
        return this.serviceChoose
    },
    setServices: function(a) {
        this.serviceChoose = a
    },
    getServicesProtocol: function() {
        return this.servicesProtocol
    },
    setServicesProtocol: function(a) {
        this.servicesProtocol = a
    },
    getCustom: function() {
        if ("icmp" === this.customVal.protocol) {
            this.customVal.port_num = "";
            this.customVal.port_direction = ""
        }
        return this.customVal
    },
    setCustom: function(a) {
        this.customVal = a
    },
    onCheckPorts: function(b, a) {
        if (!b.checked) {
            return
        }
        if ("system" == b.value) {
            this.btnChoose.enable()
        } else {
            this.btnChoose.disable()
        }
        if ("self-defined" == b.value) {
            this.btnSelfDefine.enable()
        } else {
            this.btnSelfDefine.disable()
        }
    },
    onCheckSrc: function(b, a) {
        if (!b.checked) {
            return
        }
        switch (b.value) {
            case "specific_source":
                this.btnSrcDefine.enable();
                this.btnGeoipDefine.disable();
                break;
            case "geoip_source":
                this.btnSrcDefine.disable();
                this.btnGeoipDefine.enable();
                break;
            default:
                this.btnSrcDefine.disable();
                this.btnGeoipDefine.disable();
                break
        }
        return
    },
    validateBlank: function(c) {
        var a = c.findField("ports").getGroupValue();
        var b = c.findField("source").getGroupValue();
        if ("system" === a && "" === this.serviceChoose) {
            this.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("firewall", "firewall_no_choose_service"));
            return false
        } else {
            if ("self-defined" === a && "" === this.customVal.port_num && "icmp" !== this.customVal.protocol) {
                this.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("firewall", "firewall_no_set_ports"));
                return false
            }
        }
        if (("all" !== b && "" === this.source_ip) || ("specific_source" === b && 0 <= this.source_ip.indexOf("GEOIP:")) || ("geoip_source" === b && "GEOIP:" !== this.source_ip.substring(0, 6))) {
            this.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("firewall", "firewall_no_set_ip"));
            return false
        }
        return true
    },
    validateForm: function(a) {
        if (!a.isValid()) {
            return false
        }
        if (!this.validateBlank(a)) {
            return false
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwSetDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.formPanel = this.createPanel();
        var b = {
            dsmStyle: "v5",
            title: _T("syslog", "tab_setting"),
            border: false,
            width: 550,
            height: 190,
            items: this.formPanel,
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "apply"),
                handler: this.onSave,
                scope: this,
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                handler: this.closeDialog,
                scope: this
            }]
        };
        Ext.apply(b, a);
        return b
    },
    createPanel: function() {
        var a = {
            xtype: "syno_fieldset",
            border: false,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_displayfield",
                value: _T("firewall", "firewall_port_detect_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_port_check",
                boxLabel: _T("firewall", "firewall_enable_port_detect")
            }]
        };
        return new SYNO.ux.FormPanel(a)
    },
    onOpen: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Security.Firewall.Conf",
            method: "get",
            version: 1,
            scope: this,
            callback: this.onLoadDone
        });
        this.callParent(arguments)
    },
    onLoadDone: function(c, b, a) {
        if (c) {
            this.formPanel.getForm().setValues([{
                id: "enable_port_check",
                value: b.enable_port_check
            }]);
            this.clearStatusBusy();
            return
        }
        this.module.appWin.getMsgBox().alert(_T("tree", "leaf_firewall"), SYNO.API.getErrorString(b.code));
        this.clearStatusBusy();
        this.close()
    },
    onSave: function() {
        if (!this.formPanel.getForm().isDirty()) {
            this.close();
            return
        }
        var a = (this.formPanel.getForm().findField("enable_port_check").getValue()) ? true : false;
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Security.Firewall.Conf",
            method: "set",
            version: 1,
            scope: this,
            params: {
                enable_port_check: a
            },
            callback: this.onSaveDone
        })
    },
    onSaveDone: function(c, b, a) {
        if (c) {
            this.module.appWin.setStatusOK();
            this.clearStatusBusy();
            this.close();
            return
        }
        this.module.appWin.getMsgBox().alert(_T("tree", "leaf_firewall"), SYNO.API.getErrorString(b.code));
        this.clearStatusBusy()
    },
    closeDialog: function() {
        if (!this.formPanel.getForm().isDirty()) {
            this.close();
            return
        }
        this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
            if ("yes" === a) {
                this.close()
            }
        }, this)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Security.Utils");
SYNO.SDS.AdminCenter.Security.Utils.FW_MAX_RULE = 100;
SYNO.SDS.AdminCenter.Security.Utils.FW_MAX_PORTS_IN_A_RULE = 15;
SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_INPUT_WIDTH = 200;
SYNO.SDS.AdminCenter.Security.Utils.FW_DEFAULT_LABEL_WIDTH = 200;
SYNO.SDS.AdminCenter.Security.Utils.FwRULERecord = Ext.data.Record.create({
    name: "id"
}, {
    name: "enabled"
}, {
    name: "port_type"
}, {
    name: "port_num"
}, {
    name: "port_direction"
}, {
    name: "protocol"
}, {
    name: "source"
}, {
    name: "allow"
});
SYNO.SDS.AdminCenter.Security.Utils.Render_Source = function(e, d) {
    if ("all" == e) {
        e = _T("firewall", "firewall_ports_all")
    } else {
        if (0 <= e.indexOf("GEOIP:")) {
            var c = "";
            var a = [];
            e = e.replace("GEOIP:", "");
            c = e.split(",");
            for (var b = 0; b < c.length; b++) {
                a.push(_T("Country", c[b]))
            }
            e = a.join(",")
        } else {
            e = e.replace("-", " " + _T("log", "date_to") + " ")
        }
    }
    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(e) + '"';
    return e
};
SYNO.SDS.AdminCenter.Security.Utils.Render_Allow = function(b, a) {
    if ("allow" == b) {
        b = _T("firewall", "firewall_policy_allow")
    } else {
        b = _T("firewall", "firewall_policy_drop")
    }
    a.attr = 'ext:qtip="' + b + '"';
    return b
};
Ext.define("SYNO.SDS.AdminCenter.Security.FwGridPanel", {
    extend: "SYNO.ux.GridPanel",
    portInfo: [],
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.ifname = "";
        this.originalPolicy = "";
        this.polling_id = null;
        this.FwGlobalLayoutVer = this.owner.FwGlobalLayoutVer;
        this.FWGlobalIF = this.owner.FWGlobalIF;
        this.FWIFStore = new Ext.data.ArrayStore({
            fields: ["id", "display"]
        });
        this.enableColumn = new SYNO.ux.EnableColumn({
            header: _T("common", "enabled"),
            dataIndex: "enabled",
            enableFastSelectAll: true,
            menuDisabled: true,
            sortable: false,
            width: 120,
            align: "center",
            tooltip: _T("common", "enabled"),
            listeners: {
                selectall: {
                    fn: this.onChgButtonStatus,
                    scope: this
                }
            }
        });
        this.GridStore = this.createGridStore();
        this.tbar = new Ext.Toolbar({
            defaultType: "syno_button",
            items: this.configToolBar()
        });
        this.bbar = this.createButtonToolBar();
        var a = Ext.apply({
            tbar: this.tbar,
            store: this.GridStore,
            viewConfig: {
                markDirty: false
            },
            plugins: [this.enableColumn],
            columns: [this.enableColumn, {
                id: "fw_ports",
                header: _T("firewall", "firewall_ports"),
                dataIndex: "port_num",
                width: 150,
                align: "center",
                tooltip: _T("firewall", "firewall_ports"),
                renderer: SYNO.SDS.AdminCenter.Utils.Render.Render_Ports
            }, {
                header: _T("firewall", "firewall_protocol"),
                dataIndex: "protocol",
                width: 100,
                align: "center",
                tooltip: _T("firewall", "firewall_protocol"),
                renderer: SYNO.SDS.AdminCenter.Utils.Render.Render_Protocol
            }, {
                header: _T("firewall", "firewall_source"),
                dataIndex: "source",
                width: 150,
                align: "center",
                tooltip: _T("firewall", "firewall_source"),
                renderer: SYNO.SDS.AdminCenter.Security.Utils.Render_Source
            }, {
                header: _T("firewall", "firewall_allow"),
                dataIndex: "allow",
                width: 80,
                align: "center",
                tooltip: _T("firewall", "firewall_allow"),
                renderer: SYNO.SDS.AdminCenter.Security.Utils.Render_Allow
            }],
            enableDragDrop: true,
            ddGroup: "FirewallRulesDD",
            enableColumnMove: false,
            enableHdMenu: false,
            autoExpandColumn: "fw_ports",
            monitorWindowResize: true,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: {
                        fn: this.onChgButtonStatus,
                        buffer: 50,
                        scope: this
                    }
                }
            }),
            bbar: this.bbar,
            ddText: _T("firewall", "firewall_rules_drag_drop_text"),
            listeners: {
                rowdblclick: function() {
                    this.openRuleDialog("edit")
                },
                rowcontextmenu: this.onRowContextMenu,
                scope: this
            }
        }, b);
        this.callParent([a]);
        this.clearDirty()
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.owner.IFStore, "load", this.createFWIFStore, this);
        this.mon(this.GridStore, "beforeload", this.onGridBeforeLoad, this);
        this.mon(this.GridStore, "load", this.onGridAfterLoad, this);
        this.mon(this.GridStore, "update", this.onChgButtonStatus, this);
        this.mon(this.GridStore, "add", this.onStoreAdd, this);
        this.mon(this.GridStore, "remove", this.onStoreRemove, this);
        this.mon(this, "afterlayout", function() {
            this.ddrow = new Ext.dd.DropTarget(this.getView().mainBody, {
                ddGroup: "FirewallRulesDD",
                copy: false,
                scope: this,
                notifyDrop: function(a, c, b) {
                    return this.scope.mvRules(a.getDragData(c).rowIndex, b.selections, b.grid.getStore())
                }
            })
        }, this, {
            single: true
        })
    },
    loadPortInfo: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Service.PortInfo",
            method: "load",
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                if (c) {
                    SYNO.SDS.AdminCenter.Utils.Render.ServerPortsParsing(b, this.portInfo, false);
                    this.getView().refresh()
                } else {
                    this.module.appWin.getMsgBox().alert(_T("common", "note"), _T("common", "commfail"))
                }
            }
        })
    },
    createFWIFStore: function(b, a) {
        var c = [];
        if (this._S("version") >= this.FwGlobalLayoutVer) {
            c.push([this.FWGlobalIF, _T("firewall", "firewall_global_interface")])
        }
        b.each(function(d) {
            c.push([d.data.id, d.data.display])
        });
        this.mon(this.FWIFStore, "load", this.onIFAfterLoad, this);
        this.mon(this.getBottomToolbar(), "afterlayout", this.changebbarLayout, this);
        this.FWIFStore.loadData(c)
    },
    onIFAfterLoad: function(c, b) {
        var a = true;
        var d;
        if (this._S("version") >= this.FwGlobalLayoutVer) {
            d = this.owner.IFStore.loadGlobalFwRules();
            if (d.rules && 0 < d.rules.length) {
                a = false;
                this.ifname = this.FWGlobalIF
            } else {
                this.ifname = b[1].data.id
            }
        } else {
            this.ifname = b[0].data.id
        }
        this.ifnamebak = this.ifname;
        Ext.getCmp(this.IFComboId).setValue(this.ifname);
        if (!a) {
            this.GridStore.fireEvent("beforeload");
            this.GridStore.loadData(d)
        } else {
            this.GridStore.load({
                params: {
                    adapter: this.ifname
                },
                scope: this
            })
        }
    },
    onGridBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        this.loadPortInfo()
    },
    onGridAfterLoad: function(b, a, c) {
        this.setPolicy(b.reader.jsonData.policy || "");
        this.onChgButtonStatus();
        this.clearDirty();
        this.module.appWin.clearStatusBusy()
    },
    onStoreAdd: function(b, a, c) {
        this.isRuleUpdated = true;
        this.onChgButtonStatus()
    },
    onStoreRemove: function(b, a, c) {
        this.isRuleUpdated = true;
        this.onChgButtonStatus()
    },
    configToolBar: function() {
        return [{
            text: _T("common", "create"),
            itemId: "create",
            tooltip: _T("common", "create"),
            scope: this,
            handler: function(b, a) {
                this.openRuleDialog("add")
            }
        }, {
            text: _T("common", "alt_edit"),
            itemId: "edit",
            tooltip: _T("common", "alt_edit"),
            scope: this,
            handler: function(b, a) {
                this.openRuleDialog("edit")
            }
        }, {
            text: _T("common", "delete"),
            itemId: "remove",
            tooltip: _T("common", "delete"),
            scope: this,
            handler: function() {
                var a = this.getSelectionModel().getSelections();
                var c = this.getStore();
                var b = 0;
                for (b = 0; b < a.length; b++) {
                    c.remove(a[b])
                }
            }
        }, {
            text: _T("common", "save"),
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : _T("common", "save"),
            itemId: "save",
            scope: this,
            handler: this.onSaveRules
        }, {
            text: _T("common", "up"),
            itemId: "up",
            tooltip: _T("common", "up"),
            scope: this,
            handler: function() {
                this.onMoveRow(true)
            }
        }, {
            text: _T("common", "down"),
            itemId: "down",
            tooltip: _T("common", "down"),
            scope: this,
            handler: function() {
                this.onMoveRow(false)
            }
        }, {
            text: _T("syslog", "tab_setting"),
            tooltip: _T("syslog", "tab_setting"),
            scope: this,
            handler: function() {
                this.openSetDialog()
            }
        }, "->", {
            xtype: "syno_combobox",
            id: this.IFComboId = Ext.id(),
            displayField: "display",
            valueField: "id",
            store: this.FWIFStore,
            listeners: {
                select: this.onIFSelect,
                scope: this
            }
        }]
    },
    createButtonToolBar: function() {
        this.bbarAry = [{
            xtype: "syno_displayfield",
            itemId: "globalDesc",
            value: _T("firewall", "firewall_global_no_match_desc")
        }, {
            xtype: "syno_compositefield",
            itemId: "globalPolicy",
            items: [{
                xtype: "syno_displayfield",
                value: _T("firewall", "firewall_policy_remind") + ": "
            }, {
                xtype: "syno_radio",
                boxLabel: _T("firewall", "firewall_no_match_allow"),
                name: "policy",
                id: this.globalPolicyAllowID = Ext.id(),
                inputValue: "allow",
                checked: true,
                scope: this,
                handler: this.onChgButtonStatus
            }, {
                xtype: "syno_radio",
                boxLabel: _T("firewall", "firewall_no_match_drop"),
                id: this.globalPolicyDropID = Ext.id(),
                name: "policy",
                inputValue: "drop",
                scope: this,
                handler: this.onChgButtonStatus
            }]
        }];
        var a = new Ext.Toolbar({
            id: this.bbarId = Ext.id(),
            items: this.bbarAry
        });
        return a
    },
    changebbarLayout: function() {
        if (this.FWGlobalIF == this.ifname) {
            this.getBottomToolbar().getComponent("globalDesc").show();
            this.getBottomToolbar().getComponent("globalPolicy").hide()
        } else {
            this.getBottomToolbar().getComponent("globalDesc").hide();
            this.getBottomToolbar().getComponent("globalPolicy").show()
        }
    },
    createGridStore: function() {
        var a = new SYNO.SDS.AdminCenter.Security.FwStore({
            module: this.module,
            owner: this
        });
        return a
    },
    onIFSelect: function(c, a, b) {
        if (a.data.id == this.ifname) {
            return
        }
        if (!this.isDirty()) {
            this.ifnamebak = this.ifname;
            this.ifname = a.data.id;
            this.GridStore.load({
                params: {
                    adapter: this.ifname
                },
                scope: this
            });
            this.changebbarLayout();
            return
        }
        this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(d) {
            if ("yes" !== d) {
                Ext.getCmp(this.IFComboId).setValue(this.FWIFStore.getById(this.ifname).data.display);
                return false
            } else {
                this.ifnamebak = this.ifname;
                this.ifname = a.data.id;
                this.GridStore.load({
                    params: {
                        adapter: this.ifname
                    },
                    scope: this
                })
            }
        }, this)
    },
    clearIFSelect: function() {
        Ext.getCmp(this.IFComboId).clearValue();
        this.getSelectionModel().clearSelections();
        this.getStore().removeAll();
        this.clearDirty();
        this.onChgButtonStatus()
    },
    onSaveRules: function() {
        var b = this.getStore().getRange();
        var a = [];
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        b.each(function(c) {
            a.push(c.data)
        }, this);
        this.sendWebAPI({
            api: "SYNO.Core.Security.Firewall.Rules",
            method: "save_start",
            version: 1,
            scope: this,
            params: {
                adapter: this.ifname,
                policy: this.getPolicy(),
                rules: a
            },
            callback: this.startPolling
        })
    },
    startPolling: function(c, b, a) {
        if (!c) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_firewall"), SYNO.API.getErrorString(b.code));
            this.module.appWin.clearStatusBusy();
            return
        }
        this.task_id = b.task_id;
        this.stopPolling();
        this.polling_id = this.pollReg({
            interval: 3,
            immediate: true,
            scope: this,
            webapi: {
                api: "SYNO.Core.Security.Firewall.Rules",
                method: "save_status",
                params: {
                    task_id: this.task_id
                },
                version: 1
            },
            status_callback: this.polling_callback
        })
    },
    polling_callback: function(d, b, c, a) {
        if (true !== d || true !== b.success) {
            if (undefined === b.success) {
                return
            }
            this.stopPolling();
            if (true !== b.success) {
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_firewall"), SYNO.API.getErrorString(b.error.code));
                this.module.appWin.clearStatusBusy();
                return
            }
        }
        if (true === b.data.save_done) {
            this.stopPolling();
            this.clearDirty();
            this.onChgButtonStatus();
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_firewall"), _T("firewall", "firewall_save_success"));
            this.module.appWin.clearStatusBusy();
            return
        }
    },
    stopPolling: function() {
        if (null === this.polling_id) {
            return
        }
        this.sendWebAPI({
            api: "SYNO.Core.Security.Firewall.Rules",
            method: "save_stop",
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.pollUnreg(this.polling_id);
                this.polling_id = null
            }
        })
    },
    onMoveRow: function(a) {
        var d = this.getStore();
        var c = this.getSelectionModel().getSelected();
        var b = d.indexOf(c);
        b += a ? -1 : 1;
        if (b < 0 || b > d.getCount() - 1) {
            return
        }
        d.remove(c);
        d.insert(b, c);
        this.getSelectionModel().selectRecords([c])
    },
    openSetDialog: function() {
        var a = new SYNO.SDS.AdminCenter.Security.FwSetDialog({
            owner: this.module.appWin,
            module: this.module
        });
        a.open()
    },
    openRuleDialog: function(a) {
        var b = new SYNO.SDS.AdminCenter.Security.FwRuleDialog({
            owner: this.module.appWin,
            module: this.module,
            portInfo: this.portInfo,
            mode: a
        });
        b.open()
    },
    onRowContextMenu: function(c, f, a) {
        var b = [];
        var e = c.getSelectionModel();
        e.suspendEvents(false);
        e.selectRow(f, e.isSelected(f));
        this.onChgButtonStatus();
        e.resumeEvents();
        if (!this.getButton("edit").disabled) {
            b.push(this.getButton("edit").initialConfig)
        }
        if (!this.getButton("remove").disabled) {
            b.push(this.getButton("remove").initialConfig)
        }
        var d = new SYNO.ux.Menu({
            autoDestroy: true,
            items: b
        });
        d.showAt(a.getXY());
        a.preventDefault()
    },
    mvRules: function(b, c, d) {
        if (undefined === b) {
            return false
        }
        for (var a = 0; a < c.length; a++) {
            d.remove(c[a])
        }
        if (b >= d.getCount()) {
            d.add(c)
        } else {
            d.insert(b, c)
        }
        this.isRuleUpdated = true;
        return true
    },
    clearDirty: function() {
        this.originalPolicy = this.getPolicy();
        this.isRuleUpdated = false;
        this.getStore().commitChanges()
    },
    onChgButtonStatus: function() {
        var b = this.getStore().getCount();
        var a = this.getSelectionModel().getCount();
        this.setButton("create", b < SYNO.SDS.AdminCenter.Security.Utils.FW_MAX_RULE);
        this.setButton("edit", 1 === a);
        this.setButton("remove", 0 < a);
        this.setButton("save", !this._S("demo_mode") && this.isDirty());
        this.setButton("up", 1 === a);
        this.setButton("down", 1 === a)
    },
    getButton: function(c) {
        var b = this.getTopToolbar();
        var a;
        if (b) {
            a = b.getComponent(c)
        }
        return a
    },
    setButton: function(c, a) {
        var b = this.getButton(c);
        if (b) {
            b[a ? "enable" : "disable"]()
        }
    },
    isDirty: function() {
        return this.GridStore.isDirty() || this.isRuleUpdated || this.originalPolicy !== this.getPolicy()
    },
    getPolicy: function() {
        if (this.getBottomToolbar().getComponent("globalPolicy").getValue()) {
            if (Ext.getCmp(this.globalPolicyAllowID).getValue()) {
                return "allow"
            } else {
                if (Ext.getCmp(this.globalPolicyDropID).getValue()) {
                    return "drop"
                }
            }
        } else {
            return "none"
        }
    },
    setPolicy: function(a) {
        this.originalPolicy = a;
        if (this.FWGlobalIF === this.ifname) {
            a = "none"
        }
        switch (a) {
            case "allow":
                this.getBottomToolbar().getComponent("globalPolicy").setValue(true);
                Ext.getCmp(this.globalPolicyAllowID).setValue(a);
                break;
            case "drop":
                this.getBottomToolbar().getComponent("globalPolicy").setValue(true);
                Ext.getCmp(this.globalPolicyDropID).setValue(a);
                break;
            case "none":
                this.getBottomToolbar().getComponent("globalPolicy").setValue(false);
                break
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwStore", {
    extend: "SYNO.API.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        var a = Ext.apply({
            api: "SYNO.Core.Security.Firewall.Rules",
            appWindow: this.owner,
            method: "load",
            baseParams: {
                adapter: this.owner.ifname
            },
            version: 1,
            autoDestroy: true,
            root: "rules",
            fields: ["enabled", "port_type", "port_num", "port_direction", "protocol", "source", "allow"],
            listeners: {
                exception: {
                    scope: this,
                    fn: function(f, g, h, e, d, c) {
                        var i;
                        this.owner.FWIFStore.each(function(j) {
                            if (j.get("id") === this.owner.ifnamebak) {
                                i = j.get("display");
                                return
                            }
                        }, this);
                        this.module.appWin.getMsgBox().alert(_T("tree", "leaf_firewall"), SYNO.API.getErrorString(d.code));
                        if (i) {
                            Ext.getCmp(this.owner.IFComboId).setValue(i)
                        }
                        this.owner.ifname = this.owner.ifnamebak;
                        this.module.appWin.clearStatusBusy()
                    }
                }
            }
        }, b);
        this.callParent([a])
    },
    isDirty: function() {
        return (this.getModifiedRecords().length > 0)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.DoSVPNPassthroughFormPanel", {
    extend: SYNO.SDS.Utils.FormPanel,
    constructor: function(c) {
        this.module = c.module;
        this.owner = c.owner;
        this.hasVPNPassthrough = false;
        this.ifname = "";
        this.dos_protect_enable = false;
        this.pptp_passthrough_enable = false;
        this.ipsec_passthrough_enable = false;
        this.l2tp_passthrough_enable = false;
        this.webapiVPNPassthroughStatus = {
            api: "SYNO.Core.Security.VPNPassthrough.Status",
            methods: {
                get: "get"
            },
            version: 1
        };
        this.webapiDoS = {
            api: "SYNO.Core.Security.DoS",
            methods: {
                get: "get",
                set: "set"
            },
            version: 1
        };
        this.webapiVPNPassthrough = {
            api: "SYNO.Core.Security.VPNPassthrough",
            methods: {
                get: "get",
                set: "set"
            },
            version: 1
        };
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("firewall", "firewall_dos_protect_enable_desc")
        }, {
            xtype: "syno_checkbox",
            name: "dos_protect_enable",
            webapi: this.webapiDoS,
            boxLabel: _T("firewall", "firewall_dos_protect_enable")
        });
        a.push({
            xtype: "syno_displayfield",
            hidden: true,
            value: " "
        }, {
            xtype: "syno_displayfield",
            hidden: true,
            name: "vpn_passthrough_desc",
            value: _T("firewall", "firewall_vpn_passthrough_desc")
        }, {
            xtype: "syno_checkbox",
            hidden: true,
            name: "pptp_passthrough_enable",
            boxLabel: _T("firewall", "firewall_vpn_pptp_passthrough")
        }, {
            xtype: "syno_checkbox",
            hidden: true,
            name: "ipsec_passthrough_enable",
            boxLabel: _T("firewall", "firewall_vpn_ipsec_passthrough")
        }, {
            xtype: "syno_checkbox",
            hidden: true,
            name: "l2tp_passthrough_enable",
            boxLabel: _T("firewall", "firewall_vpn_l2tp_passthrough")
        });
        var b = Ext.apply({
            tbar: this.configToolBar(),
            items: a
        }, c);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.store, "load", this.onIFAfterLoad, this);
        this.mon(this, "activate", this.checkVPNPassthrough, this, {
            single: true
        })
    },
    onIFAfterLoad: function(b, a, c) {
        this.ifname = a[0].id;
        this.ifnamebak = this.ifname;
        Ext.getCmp(this.IFComboId).setValue(this.ifname)
    },
    checkVPNPassthrough: function() {
        this.sendWebAPI({
            api: this.webapiVPNPassthroughStatus.api,
            version: this.webapiVPNPassthroughStatus.version,
            method: this.webapiVPNPassthroughStatus.methods.get,
            callback: this.onReloadUI,
            scope: this
        })
    },
    onReloadUI: function(c, b, a) {
        if (!c) {
            this.module.appWin.getMsgBox().alert(_T("common", "note"), _T("common", "commfail"));
            return
        }
        this.hasVPNPassthrough = b.support_vpn_passthrough;
        if (this.hasVPNPassthrough) {
            this.getForm().findField("vpn_passthrough_desc").show();
            this.getForm().findField("pptp_passthrough_enable").show();
            this.getForm().findField("pptp_passthrough_enable").webapi = this.webapiVPNPassthrough;
            this.getForm().findField("ipsec_passthrough_enable").show();
            this.getForm().findField("ipsec_passthrough_enable").webapi = this.webapiVPNPassthrough;
            this.getForm().findField("l2tp_passthrough_enable").show();
            this.getForm().findField("l2tp_passthrough_enable").webapi = this.webapiVPNPassthrough
        }
        this.loadForm()
    },
    configToolBar: function() {
        this.store = this.owner.IFStore;
        return [{
            xtype: "syno_displayfield",
            value: _T("network", "interface")
        }, {
            xtype: "syno_combobox",
            indent: 1,
            id: this.IFComboId = Ext.id(),
            displayField: "display",
            valueField: "id",
            store: this.store,
            listeners: {
                select: this.onIFSelect,
                scope: this
            }
        }]
    },
    onIFSelect: function(c, a, b) {
        if (a.id == this.ifname) {
            return
        }
        if (!this.getForm().isDirty()) {
            this.ifnamebak = this.ifname;
            this.ifname = a.id;
            this.loadForm();
            return
        }
        this.module.appWin.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(d) {
            if ("yes" !== d) {
                Ext.getCmp(this.IFComboId).setValue(this.store.getById(this.ifname).data.display);
                return false
            } else {
                this.ifnamebak = this.ifname;
                this.ifname = a.id;
                this.loadForm()
            }
        }, this)
    },
    clearIFSelect: function() {
        Ext.getCmp(this.IFComboId).clearValue();
        this.getForm().reset()
    },
    processGetData: function(e) {
        var c = e;
        var a = {
            api: this.webapiDoS.api,
            method: this.webapiDoS.methods.get,
            version: this.webapiDoS.version
        };
        var d = {
            api: this.webapiVPNPassthrough.api,
            method: this.webapiVPNPassthrough.methods.get,
            version: this.webapiVPNPassthrough.version
        };
        for (var b = 0; b < c.length; b++) {
            if (true === SYNO.ux.Utils.checkApiConsistency(a, c[b])) {
                c[b].params = {
                    adapter: this.ifname
                }
            }
            if (true === SYNO.ux.Utils.checkApiConsistency(d, c[b])) {
                c[b].params = {
                    adapter: this.ifname
                }
            }
        }
        return c
    },
    processSetData: function(f) {
        var d = f;
        var b = {
            api: this.webapiDoS.api,
            method: this.webapiDoS.methods.get,
            version: this.webapiDoS.version
        };
        var g = {
            api: this.webapiDoS.api,
            method: this.webapiDoS.methods.set,
            version: this.webapiDoS.version
        };
        var e = {
            api: this.webapiVPNPassthrough.api,
            method: this.webapiVPNPassthrough.methods.get,
            version: this.webapiVPNPassthrough.version
        };
        var a = {
            api: this.webapiVPNPassthrough.api,
            method: this.webapiVPNPassthrough.methods.set,
            version: this.webapiVPNPassthrough.version
        };
        for (var c = 0; c < d.length; c++) {
            if (true === SYNO.ux.Utils.checkApiConsistency(b, d[c])) {
                d[c].params = {
                    adapter: this.ifname
                }
            }
            if (true === SYNO.ux.Utils.checkApiConsistency(g, d[c])) {
                this.dos_protect_enable = this.getForm().findField("dos_protect_enable").getValue();
                d[c].params = {
                    adapter: this.ifname,
                    dos_protect_enable: this.dos_protect_enable
                }
            }
            if (true === SYNO.ux.Utils.checkApiConsistency(e, d[c])) {
                d[c].params = {
                    adapter: this.ifname
                }
            }
            if (true === SYNO.ux.Utils.checkApiConsistency(a, d[c])) {
                this.pptp_passthrough_enable = this.getForm().findField("pptp_passthrough_enable").getValue();
                this.ipsec_passthrough_enable = this.getForm().findField("ipsec_passthrough_enable").getValue();
                this.l2tp_passthrough_enable = this.getForm().findField("l2tp_passthrough_enable").getValue();
                d[c].params = {
                    adapter: this.ifname,
                    pptp_passthrough_enable: this.pptp_passthrough_enable,
                    ipsec_passthrough_enable: this.ipsec_passthrough_enable,
                    l2tp_passthrough_enable: this.l2tp_passthrough_enable
                }
            }
        }
        return d
    },
    processParams: function(b, a) {
        if ("set" == b) {
            return this.processSetData(a)
        } else {
            if ("get" == b) {
                return this.processGetData(a)
            } else {
                return a
            }
        }
    },
    processReturnData: function(a, f, d) {
        var j = {
            api: this.webapiDoS.api,
            method: this.webapiDoS.methods.get,
            version: this.webapiDoS.version
        };
        var e = {
            api: this.webapiDoS.api,
            method: this.webapiDoS.methods.set,
            version: this.webapiDoS.version
        };
        var h = {
            api: this.webapiVPNPassthrough.api,
            method: this.webapiVPNPassthrough.methods.get,
            version: this.webapiVPNPassthrough.version
        };
        var c = {
            api: this.webapiVPNPassthrough.api,
            method: this.webapiVPNPassthrough.methods.set,
            version: this.webapiVPNPassthrough.version
        };
        for (var g = 0; g < f.result.length; g++) {
            if (true !== SYNO.ux.Utils.checkApiConsistency(j, f.result[g]) && true !== SYNO.ux.Utils.checkApiConsistency(h, f.result[g]) && true !== SYNO.ux.Utils.checkApiConsistency(e, f.result[g]) && true !== SYNO.ux.Utils.checkApiConsistency(c, f.result[g])) {
                continue
            }
            if (true === f.has_fail) {
                this.getForm().reset();
                if (true === f.result[g].success) {
                    continue
                }
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_dos_and_vpnpassthrough"), SYNO.API.getErrorString(f.result[g].error.code));
                Ext.getCmp(this.IFComboId).setValue(this.store.getById(this.ifnamebak).data.display);
                this.ifname = this.ifnamebak;
                return
            }
        }
        var b = this.getForm();
        b.loadRecords(f.result, d.compound)
    },
    isDirty: function() {
        return this.getForm().isDirty()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.AutoBlock.AddIPDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b]);
        var c;
        c = new SYNO.ux.Utils.EnableRadioGroup(this.panel.getForm(), "expire_time", {
            forever: [],
            by_days: ["expire_day"]
        })
    },
    fillConfig: function(a) {
        var b;
        this.owner = a.owner;
        this.appWin = a.appWin;
        this.ruleWin = a.ruleWin;
        this.panel = this.createPanel(a.launcher);
        b = {
            width: 530,
            height: (a.launcher === "deny") ? 250 : 150,
            resizable: false,
            title: _T("autoblock", "create_ip"),
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "apply",
                scope: this,
                disabled: true,
                handler: this.onSubmit
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                itemId: "cancel",
                scope: this,
                handler: this.close
            }],
            layout: "fit",
            items: [this.panel]
        };
        Ext.apply(b, a);
        return b
    },
    createPanel: function(c) {
        var b = this;
        var a = {
            border: false,
            baseParams: {
                type: c
            },
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("tcpip", "tcpip_ipaddr"),
                allowBlank: false,
                name: "source_ip",
                vtype: "looseip",
                validationEvent: "keyup",
                validateOnBlur: true,
                validator: function(d) {
                    var e = b.getFooterToolbar().get("apply");
                    b.clearStatus();
                    if (!Ext.form.VTypes.looseip(d)) {
                        e.disable();
                        return false
                    }
                    if (b.stopRemoteValidate) {
                        return true
                    }
                    b.sendWebAPI({
                        api: "SYNO.Core.Security.AutoBlock.Rules",
                        method: "get",
                        version: 1,
                        params: {
                            ip: d
                        },
                        scope: b,
                        callback: b.onRemoteValidateComplete
                    });
                    return true
                }
            }, {
                xtype: "syno_displayfield",
                hidden: ("allow" === c),
                value: _T("autoblock", "autoblock_expire_time") + _T("common", "colon")
            }, {
                xtype: "syno_radio",
                indent: 1,
                hidden: ("allow" === c),
                name: "expire_time",
                inputValue: "forever",
                boxLabel: _T("autoblock", "forever"),
                checked: true
            }, {
                xtype: "syno_compositefield",
                hidden: ("allow" === c),
                hideLabel: true,
                indent: 1,
                items: [{
                    xtype: "syno_radio",
                    name: "expire_time",
                    inputValue: "by_days",
                    boxLabel: _T("autoblock", "autoblock_expired_day")
                }, {
                    xtype: "box",
                    width: 10,
                    hide: true
                }, {
                    xtype: "syno_numberfield",
                    name: "expire_day",
                    vtype: "number",
                    maxlength: 3,
                    minValue: 1,
                    disabled: true
                }]
            }]
        };
        return new SYNO.ux.FormPanel(a)
    },
    onSubmit: function() {
        var e = [],
            b = 0,
            d = true,
            c = this.panel.getForm(),
            a = c.getValues();
        this.stopRemoteValidate = true;
        d = c.isValid();
        this.stopRemoteValidate = false;
        if (!d) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        if ("allow" === this.launcher) {
            b = 0
        } else {
            if ("forever" === a.expire_time) {
                b = 0
            } else {
                if ("by_days" === a.expire_time) {
                    b = c.findField("expire_day").getValue()
                } else {
                    this.setStatusError({
                        text: _T("common", "forminvalid"),
                        clear: true
                    });
                    return
                }
            }
        }
        if (0 > b) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        e.push(a.source_ip);
        this.sendWebAPICreate({
            type: this.launcher,
            block_days: b,
            overwrite: true,
            ip: e
        })
    },
    sendWebAPICreate: function(a) {
        this.getEl().mask(_T("common", "saving"));
        this.sendWebAPI({
            api: "SYNO.Core.Security.AutoBlock.Rules",
            method: "create",
            version: 1,
            params: a,
            scope: this,
            callback: this.onCreateDone
        })
    },
    onCreateDone: function(c, b, a) {
        if (this.getEl().isMasked()) {
            this.getEl().unmask()
        }
        this.clearStatusBusy();
        if (!c) {
            this.getMsgBox().alert(_T("autoblock", "create_ip"), _T("error", "error_unknown"))
        }
        this.close()
    },
    onRemoteValidateComplete: function(f, d, c) {
        var e = c.ip,
            b = this.panel.getForm(),
            a;
        if (!f) {
            this.getMsgBox().alert(_T("autoblock", "create_ip"), _T("common", "commfail"), this.close, this);
            return
        }
        if (!b) {
            return
        }
        a = b.findField("source_ip");
        if (!a) {
            return
        }
        if (e !== a.getValue()) {
            return
        }
        if ("deny" === d.type) {
            this.setStatusError({
                text: String.format(_T("autoblock", "ip_in_blockedlist"), e),
                clear: false
            })
        } else {
            if ("allow" === d.type) {
                this.setStatusError({
                    text: String.format(_T("autoblock", "ip_in_allowlist"), e),
                    clear: false
                })
            } else {
                this.setStatusOK({
                    text: String.format(_T("autoblock", "ip_is_validated"), e),
                    clear: false
                })
            }
        }
        this.getFooterToolbar().get("apply").enable()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.AutoBlock.UploadFileDialog", {
    extend: "SYNO.SDS.ModalWindow",
    store: null,
    btnUpload: null,
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this.fileField.getEl(), "change", this.onImportFilePathChanged, this);
        this.mon(this.fileField.getEl(), "click", function() {
            this.fileField.setValue("");
            this.onImportFilePathChanged()
        }, this);
        this.btnUpload = this.getFooterToolbar().getComponent("apply");
        var c;
        c = new SYNO.ux.Utils.EnableRadioGroup(this.panel.getForm(), "expire_time", {
            forever: [],
            by_days: ["expire_day"]
        })
    },
    fillConfig: function(a) {
        var b;
        this.owner = a.owner;
        this.appWin = a.appWin;
        this.ruleWin = a.ruleWin;
        this.panel = this.createPanel(a);
        b = {
            title: _T("user", "user_upload"),
            width: 650,
            height: ("deny" === a.launcher) ? 577 : 483,
            resizable: false,
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "apply",
                scope: this,
                disabled: true,
                handler: this.onSubmit
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        Ext.apply(b, a);
        return b
    },
    createPanel: function(a) {
        var b, c = this;
        this.grid = this.createPreviewGrid(a);
        this.grid.setAutoScroll(true);
        this.fileField = new SYNO.ux.FileButton({
            scope: this,
            name: "upload_file",
            hiddenName: "upload_file",
            fieldLabel: _T("user", "user_file"),
            value: ""
        });
        b = {
            border: false,
            fileUpload: true,
            webapi: {
                api: "SYNO.Core.Security.AutoBlock.Rules",
                method: "upload",
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                hidden: ("allow" === a.launcher),
                value: _T("autoblock", "autoblock_expire_time")
            }, {
                xtype: "syno_radio",
                indent: 1,
                hidden: ("allow" === a.launcher),
                name: "expire_time",
                inputValue: "forever",
                boxLabel: _T("autoblock", "forever"),
                checked: true
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                hidden: ("allow" === a.launcher),
                indent: 1,
                items: [{
                    xtype: "syno_radio",
                    name: "expire_time",
                    inputValue: "by_days",
                    boxLabel: _T("autoblock", "autoblock_expired_day")
                }, {
                    xtype: "box",
                    width: 10
                }, {
                    xtype: "syno_numberfield",
                    name: "expire_day",
                    vtype: "number",
                    minValue: 1,
                    maxlength: 3,
                    disabled: true
                }]
            }, {
                xtype: "syno_checkbox",
                name: "overwrite",
                value: false,
                boxLabel: _T("autoblock", "check_overwrite")
            }, c.fileField, c.grid],
            onApiSuccess: function(f, e, d) {
                c.clearStatusBusy();
                c.store.loadData(e)
            },
            onApiFailure: function(h, e, d) {
                var g = e.errors,
                    f = _T("error", "error_invalid");
                c.clearStatusBusy();
                c.store.removeAll();
                c.btnUpload.disable();
                switch (e.code) {
                    case 116:
                        f = _T("common", "error_demo");
                        break;
                    case 5103:
                        if (Ext.isDefined(g) && Ext.isDefined(g.err_line)) {
                            f = String.format(_T("autoblock", "upload_format_failed"), g.err_line)
                        } else {
                            f = _T("error", "error_invalid")
                        }
                        break;
                    case 5105:
                        f = _T("user", "user_file_open_fail");
                        break;
                    default:
                        f = _T("error", "error_invalid")
                }
                c.getMsgBox().alert(_T("user", "user_upload"), f)
            }
        };
        return new SYNO.SDS.Utils.FormPanel(b)
    },
    createPreviewGrid: function(a) {
        this.store = new SYNO.API.JsonStore({
            root: "ip_info",
            totalProperty: "total",
            fields: [{
                name: "ip",
                mapping: "ip"
            }],
            listeners: {
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            }
        });
        return new SYNO.ux.GridPanel({
            store: this.store,
            columns: [{
                header: ("deny" === a.launcher) ? _T("autoblock", "autoblock_ip") : _T("autoblock", "autoblock_allow_ip"),
                dataIndex: "ip",
                menuDisabled: true
            }],
            height: 330,
            view: new SYNO.ux.FleXcroll.grid.BufferView({
                rowHeight: 26,
                borderHeight: 1,
                cacheSize: 100,
                scrollDelay: false,
                forceFit: true
            })
        })
    },
    onLoad: function() {
        if (0 < this.store.getCount()) {
            this.btnUpload.enable()
        } else {
            this.btnUpload.disable()
        }
    },
    onImportFilePathChanged: function(b, a) {
        if (!a || !a.getValue()) {
            this.store.removeAll();
            this.btnUpload.disable();
            return
        }
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.panel.upload()
    },
    onSubmit: function() {
        var e = [],
            b = 0,
            d = true,
            c = this.panel.getForm(),
            a = c.getValues();
        this.stopRemoteValidate = true;
        d = c.isValid();
        this.stopRemoteValidate = false;
        if (!d) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        if ("allow" === this.launcher) {
            b = 0
        } else {
            if ("forever" === a.expire_time) {
                b = 0
            } else {
                if ("by_days" === a.expire_time) {
                    b = c.findField("expire_day").getValue()
                } else {
                    this.setStatusError({
                        text: _T("common", "forminvalid"),
                        clear: true
                    });
                    return
                }
            }
        }
        if (0 > b) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.store.each(function(f) {
            e.push(f.data.ip)
        });
        if (0 > e.length) {
            this.close();
            return
        }
        this.sendWebAPICreate({
            type: this.launcher,
            block_days: b,
            overwrite: c.findField("overwrite").getValue(),
            ip: e
        })
    },
    sendWebAPICreate: function(a) {
        this.getEl().mask(_T("common", "saving"));
        this.sendWebAPI({
            api: "SYNO.Core.Security.AutoBlock.Rules",
            method: "create",
            version: 1,
            params: a,
            scope: this,
            callback: this.onCreateDone
        })
    },
    onCreateDone: function(c, b, a) {
        if (this.getEl().isMasked()) {
            this.getEl().unmask()
        }
        this.clearStatusBusy();
        if (!c) {
            this.getMsgBox().alert(_T("user", "user_upload"), _T("common", "commfail"))
        }
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.AutoBlockPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", function(c, d) {
            var f, e;
            f = new SYNO.ux.Utils.EnableCheckGroup(c.getForm(), "enable", ["attempts", "within_mins", "enable_expire"]);
            e = new SYNO.ux.Utils.EnableCheckGroup(c.getForm(), "enable_expire", ["expire_day"])
        }, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        var b = {
            appWin: a.appWin,
            title: _T("tree", "leaf_autoblock"),
            autoScroll: true,
            trackResetOnLoad: true,
            webapi: {
                api: "SYNO.Core.Security.AutoBlock",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                value: _T("autoblock", "autoblock_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable",
                boxLabel: _T("autoblock", "autoblock_enable")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("autoblock", "autoblock_rule_desc")
            }, {
                xtype: "syno_numberfield",
                name: "attempts",
                fieldLabel: _T("autoblock", "autoblock_attempts"),
                vtype: "number",
                indent: 1,
                minValue: 1,
                maxlength: 4
            }, {
                xtype: "syno_numberfield",
                name: "within_mins",
                fieldLabel: _T("autoblock", "autoblock_within_mins"),
                vtype: "number",
                indent: 1,
                minValue: 1,
                maxlength: 7
            }, {
                xtype: "syno_checkbox",
                name: "enable_expire",
                boxLabel: _T("autoblock", "autoblock_expired_enable"),
                indent: 1
            }, {
                xtype: "syno_displayfield",
                value: _T("autoblock", "autoblock_expired_desc"),
                indent: 1
            }, {
                xtype: "syno_numberfield",
                name: "expire_day",
                fieldLabel: _T("autoblock", "autoblock_expired_day"),
                vtype: "number",
                indent: 1,
                maxlength: 3
            }, {
                xtype: "syno_displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                value: _T("autoblock", "autoblock_rules_desc")
            }, {
                xtype: "syno_button",
                text: _T("autoblock", "autoblock_view_rules"),
                scope: this,
                handler: this.showRuleWindow
            }]
        };
        Ext.apply(b, a);
        return b
    },
    getHelpParam: function() {
        return "AdminCenter/connection_security_autoblock.html"
    },
    processReturnData: function(c, b, a) {
        if (false === b.has_fail) {
            this.processExpireDayGetParam(b, a)
        }
        this.callParent(arguments)
    },
    processExpireDayGetParam: function(d, c) {
        var b = {
            api: "SYNO.Core.Security.AutoBlock",
            method: "get",
            version: 1
        };
        var a = SYNO.SDS.AdminCenter.Security.AutoBlock.Util.getSuccessRespCompoundData(b, d);
        if (null === a) {
            SYNO.Debug("Error : processExpireDayGetParam");
            return
        }
        this.loadExpireDayGetParam(a)
    },
    loadExpireDayGetParam: function(b) {
        var a = this.getForm();
        a.setValues({
            enable_expire: (b.expire_day > 0)
        })
    },
    showRuleWindow: function(b, a) {
        var c = new SYNO.SDS.AdminCenter.Security.AutoBlock.RuleWindow({
            appWin: this.appWin,
            owner: this.appWin
        });
        c.show()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.AutoBlock.RuleWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b, c;
        this.blackListTab = new SYNO.SDS.AdminCenter.Security.AutoBlock.RuleList({
            appWin: a.appWin,
            ruleWin: this,
            itemId: "deny",
            title: _T("autoblock", "autoblock_view_list"),
            columns: [{
                header: _T("autoblock", "autoblock_ip"),
                id: "ip",
                dataIndex: "ip",
                width: 160,
                sortable: true,
                menuDisabled: true
            }, {
                header: _T("autoblock", "autoblock_time"),
                dataIndex: "record_date",
                width: 220,
                sortable: true,
                menuDisabled: true,
                renderer: SYNO.SDS.AdminCenter.Security.AutoBlock.Util.dateRender
            }, {
                header: _T("autoblock", "autoblock_expire_time"),
                dataIndex: "expire_date",
                width: 220,
                sortable: true,
                menuDisabled: true,
                renderer: SYNO.SDS.AdminCenter.Security.AutoBlock.Util.dateRender
            }]
        });
        this.whiteListTab = new SYNO.SDS.AdminCenter.Security.AutoBlock.RuleList({
            appWin: a.appWin,
            ruleWin: this,
            title: _T("autoblock", "autoblock_white_list"),
            itemId: "allow",
            columns: [{
                header: _T("autoblock", "autoblock_allow_ip"),
                id: "ip",
                dataIndex: "ip",
                sortable: true,
                menuDisabled: true
            }]
        });
        c = {
            xtype: "syno_tabpanel",
            activeTab: 0,
            items: [this.whiteListTab, this.blackListTab]
        };
        b = {
            ruleWin: this,
            title: _T("autoblock", "autoblock_view_rules"),
            width: 600,
            height: 440,
            items: [c],
            layout: "fit",
            buttons: [{
                btnStyle: "grey",
                text: _T("common", "close"),
                scope: this,
                handler: function() {
                    this.close()
                }
            }]
        };
        Ext.apply(b, a);
        return b
    },
    resetAllList: function() {
        this.blackListTab.dataReady = false;
        this.whiteListTab.dataReady = false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.AutoBlock.RuleList", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 250,
    dataReady: false,
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this.getSelectionModel(), "selectionchange", this.onSelectionChange, this)
    },
    fillConfig: function(a) {
        this.appWin = a.appWin;
        this.ruleWin = a.ruleWin;
        this.store = new SYNO.API.JsonStore({
            api: "SYNO.Core.Security.AutoBlock.Rules",
            method: "list",
            version: 1,
            baseParams: {
                offset: 0,
                limit: this.pageSize,
                type: a.itemId
            },
            root: "ip_info",
            totalProperty: "total",
            fields: ["ip", "record_date", "expire_date"],
            scope: this,
            autoLoad: false,
            remoteSort: true,
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onStoreException
                }
            },
            appWindow: a.appWin
        });
        this.delBtn = new SYNO.ux.Button({
            itemId: "btn_del",
            text: _T("common", "remove"),
            scope: this,
            handler: this.deleteItem,
            disabled: true
        });
        var b = {
            ds: this.store,
            loadMask: true,
            height: 300,
            tbar: {
                items: [{
                    xtype: "syno_splitbutton",
                    text: _T("common", "create"),
                    handler: this.launchAddIPDialog,
                    scope: this,
                    itemId: "btn_create",
                    menu: [{
                        text: _T("autoblock", "create_ip"),
                        scope: this,
                        handler: this.launchAddIPDialog
                    }, {
                        text: _T("autoblock", "import_ip"),
                        scope: this,
                        handler: this.launchFileDialog
                    }]
                }, this.delBtn, "->", {
                    xtype: "syno_textfilter",
                    itemId: "search",
                    emptyText: _T("user", "search_user"),
                    enumAction: "load",
                    queryAction: "load",
                    store: this.store,
                    pageSize: this.pageSize
                }]
            },
            bbar: {
                xtype: "syno_paging",
                pageSize: this.pageSize,
                displayInfo: true,
                store: this.store,
                showRefreshBtn: true
            },
            listeners: {
                activate: function() {
                    var c = this;
                    if (false === c.dataReady) {
                        c.store.reload()
                    }
                    c.dataReady = true
                },
                scope: this
            }
        };
        Ext.apply(b, a);
        return b
    },
    onSelectionChange: function(a) {
        if (0 < a.getCount()) {
            this.delBtn.enable()
        } else {
            this.delBtn.disable()
        }
    },
    deleteItem: function() {
        var a = this.getSelectionModel().getSelections(),
            c = [],
            b = 0;
        for (b = 0; b < a.length; b++) {
            c.push(a[b].get("ip"))
        }
        if (0 >= c.length) {
            this.ruleWin.getMsgBox().alert(_T("tree", "leaf_autoblock"), _T("error", "error_rmvnone"));
            return false
        }
        this.ruleWin.getMsgBox().confirmDelete(_T("tree", "leaf_autoblock"), _T("common", "remove_cfrmrmv"), function(d, e) {
            if ("yes" === d) {
                this.sendWebAPIDelete({
                    type: this.itemId,
                    ip: c
                })
            }
        }, this)
    },
    sendWebAPIDelete: function(a) {
        this.getEl().mask(_T("common", "msg_waiting"), "x-mask-loading");
        this.sendWebAPI({
            api: "SYNO.Core.Security.AutoBlock.Rules",
            method: "delete",
            version: 1,
            params: a,
            scope: this,
            callback: this.onDeleteDone
        })
    },
    onDeleteDone: function(c, b, a) {
        if (this.getEl().isMasked()) {
            this.getEl().unmask()
        }
        if (!c) {
            SYNO.Debug("Error : onDeleteDone");
            return
        }
        this.store.load()
    },
    launchAddIPDialog: function() {
        var a;
        if (this._S("demo_mode")) {
            this.ruleWin.getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        a = new SYNO.SDS.AdminCenter.Security.AutoBlock.AddIPDialog({
            owner: this.ruleWin,
            appWin: this.appWin,
            ruleWin: this.ruleWin,
            launcher: this.itemId
        });
        a.open();
        this.mon(a, "close", this.reloadAll, this, {
            single: true
        })
    },
    launchFileDialog: function() {
        var a;
        if (this._S("demo_mode")) {
            this.ruleWin.getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        a = new SYNO.SDS.AdminCenter.Security.AutoBlock.UploadFileDialog({
            owner: this.ruleWin,
            appWin: this.appWin,
            ruleWin: this.ruleWin,
            launcher: this.itemId
        });
        a.open();
        this.mon(a, "close", this.reloadAll, this, {
            single: true
        })
    },
    reloadAll: function() {
        var a = this;
        a.ruleWin.resetAllList();
        a.store.reload();
        a.dataReady = true
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", d, e, f, c, b, a);
        this.ruleWin.clearStatusBusy()
    }
});
SYNO.SDS.AdminCenter.Security.AutoBlock.Util = {
    dateRender: function(a) {
        var b = new Date(a * 1000);
        if (0 === a) {
            return _T("autoblock", "forever")
        }
        return b.toLocaleString()
    },
    getSuccessRespCompoundData: function(b, d) {
        if (!(d.result instanceof Array)) {
            return null
        }
        for (var c = 0; c < d.result.length; c += 1) {
            var a = d.result[c];
            if (false === SYNO.ux.Utils.checkApiConsistency(b, a)) {
                continue
            }
            if (true === a.has_fail || false === a.success) {
                break
            }
            if (a.data) {
                return a.data
            } else {
                return null
            }
        }
        return null
    }
};
Ext.define("SYNO.SDS.AdminCenter.Security.UploadSSL", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.uploadInterCrt = false;
        this.pollTask = null;
        this.formpanel = null;
        this.callParent([Ext.apply({
            title: _T("service", "service_upload_ca"),
            resizable: false,
            width: 580,
            height: 300,
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "apply"),
                scope: this,
                handler: function() {
                    this.formpanel.getForm().doAction("apply");
                    this.setStatusBusy()
                }
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.createFormPanel()]
        }, a)]);
        this.mon(this.formpanel.getForm(), "actioncomplete", this.onFormSuccess, this);
        this.mon(this.formpanel.getForm(), "actionfailed", this.onFormFailed, this)
    },
    createFormPanel: function(a) {
        this.formpanel = new SYNO.SDS.Utils.FormPanel(Ext.apply({
            webapi: {
                api: "SYNO.Core.Certificate",
                method: "import",
                version: 1
            },
            fileUpload: true,
            trackResetOnLoad: true,
            frame: false,
            border: false,
            height: 200,
            items: [{
                xtype: "syno_displayfield",
                value: _T("service", "service_ssl_key_desc")
            }, {
                xtype: "syno_filebutton",
                fieldLabel: _T("service", "service_ssl_key"),
                name: "key"
            }, {
                xtype: "syno_filebutton",
                fieldLabel: _T("service", "service_ssl_crt"),
                name: "cert"
            }, {
                xtype: "syno_filebutton",
                fieldLabel: _T("service", "service_ssl_inter_crt"),
                name: "inter_cert"
            }]
        }, a));
        return this.formpanel
    },
    onFormSuccess: function(a, b) {
        this.setStatus({
            text: _T("service", "restart_apache")
        });
        if (b.result.data.restart_httpd) {
            this.checkProgress.defer(30000, this)
        } else {
            this.clearStatusBusy();
            this.close()
        }
    },
    onFormFailed: function(b, a) {
        this.clearStatusBusy();
        this.getMsgBox().alert(_T("tree", "leaf_service"), SYNO.SDS.AdminCenter.Security.Certificate.Err2Msg(a.result.error.code))
    },
    checkProgress: function() {
        var a = this;
        if (location.protocol === "https:") {
            location.reload()
        }
        a.register_id = a.pollReg({
            webapi: {
                api: "SYNO.Core.Certificate",
                method: "list",
                version: 1,
                params: {}
            },
            interval: 3,
            immediate: true,
            status_callback: function(e, c, d, b) {
                if (!e && !c.code) {
                    return
                }
                if (c.code) {
                    a.getMsgBox().alert(_T("tree", "leaf_service"), SYNO.SDS.AdminCenter.Security.Certificate.Err2Msg(c.code))
                }
                a.pollUnreg(a.register_id);
                a.clearStatusBusy();
                a.close()
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.SSLDownloader", {
    extend: "Ext.Component",
    module: null,
    constructor: function(a) {
        this.module = a.module;
        this.callParent([a])
    },
    download: function(a) {
        this.module.appWin.findAppWindow().downloadWebAPI({
            webapi: {
                api: "SYNO.Core.Certificate",
                version: 1,
                method: "export",
                params: {
                    file: a
                }
            },
            callback: function() {},
            scope: this
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.ActionForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        var a = {
            headline: _T("certificate", "select_action"),
            isWizardMode: true,
            items: [{
                xtype: "syno_radio",
                boxLabel: _T("certificate", "create_self_signed_crt"),
                name: "action",
                inputValue: "gen_self_signed_ca",
                checked: true
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("certificate", "create_self_signed_crt_desc")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("certificate", "create_csr"),
                name: "action",
                inputValue: "gen_csr"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("certificate", "create_csr_desc")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("certificate", "renew_crt"),
                name: "action",
                inputValue: "gen_csr_finish"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("certificate", "renew_crt_desc")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("certificate", "sign_csr"),
                name: "action",
                inputValue: "sign_csr"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("certificate", "sign_csr_desc")
            }]
        };
        Ext.apply(a, b);
        this.callParent([a])
    },
    getNext: function() {
        var a = this.getForm().getValues();
        var b = this;
        if (a.action == "gen_csr_finish") {
            this.owner.setStatusBusy({
                text: _T("certificate", "creating_csr"),
                iconCls: "x-status-busy"
            });
            this.owner.sendWebAPI({
                api: "SYNO.Core.Certificate.CSR",
                method: "renew",
                version: "1",
                params: {},
                callback: function(e, d, c) {
                    b.owner.clearStatusBusy();
                    if (!e) {
                        b.owner.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"));
                        return
                    }
                    b.owner.goNext("gen_csr_finish")
                }
            });
            return false
        } else {
            return a.action
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.GenSelfSignedFormCA", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(c) {
        this.owner = c.owner;
        this.module = c.module;
        var a = SYNO.SDS.AdminCenter.Security.ManagementWizard.Util;
        var b = {
            headline: _T("certificate", "create_root_crt"),
            description: _T("certificate", "input_crt_info"),
            isWizardMode: true,
            labelWidth: 250,
            synodefaults: {
                width: 200
            }
        };
        Ext.apply(b, a.getCertFormItems(true, true));
        Ext.apply(b, c);
        this.callParent([b])
    },
    getNext: function() {
        var a = this.owner.getStep("gen_self_signed");
        var b = this.getForm();
        if (!b.isValid()) {
            return false
        }
        a.fillFields(b.getValues());
        return "gen_self_signed"
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.GenSelfSignedForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(c) {
        this.isSet = false;
        var a = SYNO.SDS.AdminCenter.Security.ManagementWizard.Util;
        var b = {
            headline: _T("certificate", "create_crt"),
            description: _T("certificate", "input_crt_info"),
            isWizardMode: true,
            labelWidth: 250,
            synodefaults: {
                width: 200
            }
        };
        Ext.apply(b, a.getCertFormItems(false, false));
        Ext.apply(b, c);
        this.callParent([b])
    },
    fillFields: function(a) {
        if (this.isSet) {
            return
        }
        for (var b in a) {
            if (a.hasOwnProperty(b)) {
                if (b == "common_name") {
                    continue
                }
                this.getForm().findField(b).setValue(a[b])
            }
        }
        this.isSet = true
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.getForm().findField("alias").getEl(), _T("certificate", "alias_tip"))
        }, this, {
            single: true
        })
    },
    chompArray: function(c) {
        var b = c.replace(/"/, "").split(/;/);
        for (var a = 0; a < b.length; a++) {
            b[a] = b[a].replace(/^\s+|\s+$/, "")
        }
        return b.join(";")
    },
    getNext: function() {
        var d = this;
        var c = this.getForm();
        var b = this.owner.getStep("gen_self_signed_ca").getForm().getValues();
        var e = {};
        var g = {
            action: "crt"
        };
        var f = true;
        if (!c.isValid()) {
            return false
        }
        for (var a in b) {
            if (b.hasOwnProperty(a)) {
                if (a == "key_length") {
                    continue
                }
                if (b[a] != c.getValues()[a]) {
                    f = false;
                    break
                }
            }
        }
        if (f) {
            d.owner.getMsgBox().alert(_T("error", "error_error"), _T("certificate", "server_and_ca_same"));
            return false
        }
        for (a in b) {
            if (b.hasOwnProperty(a)) {
                e["ca_" + a] = b[a]
            }
        }
        Ext.apply(g, e);
        Ext.apply(g, c.getValues());
        if (_T("certificate", "empty_text_alias") == g.alias) {
            g.alias = ""
        } else {
            g.alias = this.chompArray(g.alias)
        }
        this.owner.setStatusBusy({
            text: _T("certificate", "creating_crt"),
            iconCls: "x-status-busy"
        });
        this.owner.sendWebAPI({
            api: "SYNO.Core.Certificate.CRT",
            version: 1,
            method: "create",
            params: g,
            scope: this,
            callback: function(j, i, h) {
                if (!j) {
                    d.owner.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"));
                    d.owner.clearStatusBusy();
                    return
                }
                if (i.restart_httpd) {
                    d.checkProgress.defer(30 * 1000, this)
                } else {
                    d.owner.clearStatusBusy();
                    d.owner.close()
                }
            }
        });
        return false
    },
    checkProgress: function() {
        var a = this;
        if (location.protocol === "https:") {
            location.reload()
        }
        a.register_id = a.pollReg({
            webapi: {
                api: "SYNO.Core.Certificate",
                method: "list",
                version: 1,
                params: {}
            },
            interval: 3,
            immediate: true,
            status_callback: function(e, c, d, b) {
                if (!e) {
                    return
                }
                a.pollUnreg(a.register_id);
                a.owner.clearStatusBusy();
                a.owner.close()
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.GenCSRForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(c) {
        this.owner = c.owner;
        this.module = c.module;
        var a = SYNO.SDS.AdminCenter.Security.ManagementWizard.Util;
        var b = {
            headline: _T("certificate", "create_csr"),
            description: _T("certificate", "input_csr_info"),
            isWizardMode: true,
            labelWidth: 250,
            synodefaults: {
                width: 200
            }
        };
        Ext.apply(b, a.getCertFormItems(true, false));
        Ext.apply(b, c);
        this.callParent([b])
    },
    getNext: function() {
        var b = this;
        var a = this.getForm();
        if (!a.isValid()) {
            return false
        }
        this.owner.setStatusBusy({
            text: _T("certificate", "creating_csr"),
            iconCls: "x-status-busy"
        });
        this.owner.sendWebAPI({
            api: "SYNO.Core.Certificate.CSR",
            method: "create",
            version: "1",
            params: a.getValues(),
            callback: function(e, d, c) {
                b.owner.clearStatusBusy();
                if (!e) {
                    b.owner.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"));
                    return
                }
                b.owner.goNext("gen_csr_finish")
            }
        });
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.GenCSRFinishForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.downloader = undefined;
        this.owner = b.owner;
        this.module = b.moduel;
        var a = {
            headline: _T("certificate", "create_csr_finish"),
            isWizardMode: true,
            items: [{
                xtype: "syno_displayfield",
                name: "des",
                value: _T("certificate", "click_download_button")
            }, {
                xtype: "syno_displayfield",
                name: "des",
                value: _T("certificate", "create_csr_finish_desc")
            }]
        };
        Ext.apply(a, b);
        this.callParent([a])
    },
    checkState: function() {
        this.owner.getButton("next").setText(_T("certificate", "download"))
    },
    download: function() {
        this.downloader = new SYNO.SDS.AdminCenter.Security.SSLDownloader({
            owner: this.owner,
            module: this.module
        });
        this.downloader.download("csr_set")
    },
    activate: function() {
        this.mon(this.owner.getButton("next"), "click", this.download, this, {
            single: true
        })
    },
    deactivate: function() {
        this.mun(this.owner.getButton("next"), "click", this.download, this, {
            single: true
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.SignCSRForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        var a = {
            webapi: {
                api: "SYNO.Core.Certificate.CSR",
                method: "sign",
                version: 1
            },
            fileUpload: true,
            labelWidth: 250,
            headline: _T("certificate", "sign_csr"),
            description: _T("certificate", "upload_csr"),
            isWizardMode: true,
            items: [{
                xtype: "syno_filebutton",
                fieldLabel: _T("certificate", "csr"),
                name: "csr"
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("certificate", "validity_period"),
                vtype: "number",
                name: "days",
                allowBlank: false,
                value: 365
            }, SYNO.SDS.AdminCenter.Security.ManagementWizard.Util.getAliasConfig()]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.mon(this.getForm(), "actioncomplete", this.onFormSuccess, this);
        this.mon(this.getForm(), "actionfailed", this.onFormFailed, this);
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.getForm().findField("alias").getEl(), _T("certificate", "alias_tip"))
        }, this, {
            single: true
        })
    },
    onFormSuccess: function(a, b) {
        this.owner.clearStatusBusy();
        this.owner.goNext("sign_csr_finish")
    },
    onFormFailed: function(b, a) {
        this.owner.clearStatusBusy();
        this.owner.getMsgBox().alert(_T("tree", "leaf_service"), SYNO.SDS.AdminCenter.Security.Certificate.Err2Msg(a.result.error.code))
    },
    getNext: function() {
        var a = this.getForm();
        if (!a.isValid()) {
            return false
        }
        if (a.findField("csr").getValue().empty()) {
            this.owner.getMsgBox().alert(_T("tree", "leaf_service"), _T("certificate", "no_csr_selected"));
            return false
        }
        this.owner.setStatusBusy({
            text: _T("certificate", "signing_csr"),
            iconCls: "x-status-busy"
        });
        this.getForm().doAction("apply");
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.SignCSRFinishForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.downloader = undefined;
        this.owner = b.owner;
        this.module = b.moduel;
        var a = {
            headline: _T("certificate", "sign_csr_finish"),
            isWizardMode: true,
            items: [{
                xtype: "syno_displayfield",
                name: "des",
                value: _T("certificate", "click_download_button_crt")
            }, {
                xtype: "syno_displayfield",
                name: "des",
                value: _T("certificate", "sign_csr_finish_desc")
            }]
        };
        Ext.apply(a, b);
        this.callParent([a])
    },
    checkState: function() {
        this.owner.getButton("next").setText(_T("certificate", "download"))
    },
    download: function() {
        this.downloader = new SYNO.SDS.AdminCenter.Security.SSLDownloader({
            owner: this.owner,
            module: this.module
        });
        this.downloader.download("signed_set")
    },
    activate: function() {
        this.mon(this.owner.getButton("next"), "click", this.download, this, {
            single: true
        })
    },
    deactivate: function() {
        this.mun(this.owner.getButton("next"), "click", this.download, this, {
            single: true
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.ManagementWizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        var a = Ext.apply({
            title: _T("certificate", "create_crt"),
            width: 650,
            height: 550,
            activeStep: "action",
            steps: [new SYNO.SDS.AdminCenter.Security.ActionForm({
                owner: this,
                module: this.module,
                itemId: "action",
                disableNextInDemoMode: true
            }), new SYNO.SDS.AdminCenter.Security.GenSelfSignedFormCA({
                owner: this,
                module: this.module,
                itemId: "gen_self_signed_ca",
                nextId: "gen_self_signed"
            }), new SYNO.SDS.AdminCenter.Security.GenSelfSignedForm({
                owner: this,
                module: this.module,
                itemId: "gen_self_signed",
                nextId: null
            }), new SYNO.SDS.AdminCenter.Security.GenCSRForm({
                owner: this,
                module: this.module,
                itemId: "gen_csr",
                nextId: "gen_csr_finish"
            }), new SYNO.SDS.AdminCenter.Security.SignCSRForm({
                owner: this,
                module: this.module,
                itemId: "sign_csr",
                nextId: "sign_csr_finish"
            }), new SYNO.SDS.AdminCenter.Security.SignCSRFinishForm({
                owner: this,
                module: this.module,
                itemId: "sign_csr_finish",
                nextId: null
            }), new SYNO.SDS.AdminCenter.Security.GenCSRFinishForm({
                owner: this,
                module: this.module,
                itemId: "gen_csr_finish",
                nextId: null
            })]
        }, b);
        this.callParent([a])
    }
});
SYNO.SDS.AdminCenter.Security.ManagementWizard.Util = {
    getCertFormItems: function(a, c) {
        var b = [{
            xtype: "syno_combobox",
            fieldLabel: _T("certificate", "key_length"),
            name: "key_length",
            editable: false,
            allowBlank: false,
            autoSelect: true,
            forceSelection: true,
            value: "2048",
            store: ["4096", "2048", "1024", "512"]
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("certificate", "common_name"),
            maxlength: 64,
            name: "common_name",
            allowBlank: false,
            maskRe: /[\-.A-Za-z0-9()_ *]/,
            regex: /^([\-.A-Za-z0-9()_ *]+)$/,
            emptyText: (c) ? _T("certificate", "empty_text_common_name_ca") + " " : _T("certificate", "empty_text_common_name") + " "
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("common", "email"),
            maxlength: 64,
            name: "email",
            allowBlank: false,
            emptyText: _T("certificate", "empty_text_email") + " ",
            maskRe: /[\-.A-Za-z0-9_@]/,
            regex: /^([\-.A-Za-z0-9_@]+)$/,
            vtype: "email"
        }, {
            xtype: "syno_combobox",
            fieldLabel: _T("common", "country"),
            maxlength: 32,
            name: "country",
            allowBlank: false,
            disableKeyFilter: false,
            value: "TW",
            maskRe: /./,
            regex: /^.*$/,
            store: this.getCountry()
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("certificate", "state_or_provine"),
            maxlength: 64,
            name: "state",
            emptyText: _T("certificate", "empty_text_state") + " ",
            allowBlank: false
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("common", "city"),
            maxlength: 64,
            name: "city",
            allowBlank: false,
            emptyText: _T("certificate", "empty_text_city") + " "
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("certificate", "organizaton"),
            maxlength: 64,
            name: "organization",
            allowBlank: false,
            emptyText: _T("certificate", "empty_text_organization") + " "
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("certificate", "department"),
            maxlength: 64,
            name: "department",
            allowBlank: false,
            emptyText: _T("certificate", "empty_text_department") + " "
        }];
        if (true !== a) {
            b = b.concat([this.getAliasConfig()])
        }
        return {
            items: b,
            defaults: {
                invalidText: _T("certificate", "invalid_value"),
                maskRe: /[\-.A-Za-z0-9()_ ]/,
                regex: /^([\-.A-Za-z0-9()_ ]+)$/
            }
        }
    },
    getAliasConfig: function() {
        return {
            xtype: "syno_textfield",
            fieldLabel: _T("certificate", "alias"),
            maxlength: 256,
            emptyText: _T("certificate", "empty_text_alias") + " ",
            name: "alias",
            maskRe: /[\-.A-Za-z0-9;]/,
            regex: /^([\-.A-Za-z0-9;]+)$/
        }
    },
    getCountry: function() {
        var b = ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
        var a = [];
        Ext.each(b, function(c) {
            a.push([c, "[" + c + "] " + _T("Country", c)])
        });
        return a
    }
};
Ext.namespace("SYNO.SDS.AdminCenter.Security.Certificate");
SYNO.SDS.AdminCenter.Security.Certificate.Err2Msg = function(a) {
    return SYNO.API.getErrorString(a)
};
Ext.define("SYNO.SDS.AdminCenter.Security.CertificateTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    itemId: "certificate",
    constructor: function(b) {
        var a;
        this.owner = b.owner;
        this.appWin = b.appWin;
        this.downloader = new SYNO.SDS.AdminCenter.Security.SSLDownloader({
            module: b.module
        });
        a = {
            title: _T("certificate", "certificate"),
            trackResetOnLoad: true,
            forceLayout: true,
            autoScroll: true
        };
        this.fillInItems(a);
        Ext.apply(a, b);
        this.callParent([a])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.load, this)
    },
    fillInItems: function(c) {
        var b = [{
            title: _T("common", "action"),
            items: [{
                xtype: "syno_displayfield",
                value: _T("certificate", "create_desc")
            }, {
                layout: "column",
                itemId: "buttons",
                items: [{
                    xtype: "syno_button",
                    text: _T("certificate", "create_crt"),
                    handler: this.openManagement,
                    scope: this
                }, {
                    xtype: "syno_button",
                    text: _T("certificate", "import_crt"),
                    handler: this.openUpload,
                    scope: this
                }]
            }]
        }, {
            title: _T("certificate", "server_crt"),
            itemId: "cert",
            layout: "column",
            items: [{
                columnWidth: 1,
                items: [{
                    xtype: "syno_displayfield",
                    fieldLabel: _T("common", "status"),
                    name: "status",
                    value: "--"
                }, {
                    name: "server_issue_to",
                    fieldLabel: _T("certificate", "issue_to")
                }, {
                    name: "server_issuer",
                    fieldLabel: _T("certificate", "issuer")
                }, {
                    name: "server_expire_date",
                    fieldLabel: _T("certificate", "expire_date")
                }, {
                    xtype: "syno_displayfield",
                    name: "server_signature_algorithm",
                    fieldLabel: _T("certificate", "signature_algorithm"),
                    hidden: true
                }, {
                    synotype: "syno_displayfield",
                    name: "server_sha1_warning",
                    value: '<span class="allowDefCtxMenu selectabletext red-status">' + _T("certificate", "warning_sha1_crt") + "</span>",
                    hidden: true
                }, {
                    xtype: "syno_button",
                    text: _T("certificate", "fast_recreate_crt"),
                    handler: this.renewNow,
                    hidden: true,
                    id: this.btnRenew = Ext.id(),
                    scope: this
                }, {
                    synotype: "syno_displayfield",
                    value: _T("certificate", "export_and_import_desc")
                }, {
                    xtype: "syno_button",
                    text: _T("certificate", "export_crt"),
                    handler: this.openDownload,
                    disabled: this._S("demo_mode"),
                    scope: this
                }]
            }]
        }];
        var d = {
            xtype: "syno_displayfield",
            value: "--",
            labelStyle: "width: 200px"
        };
        var a = {
            xtype: "panel",
            layout: "form",
            border: false,
            defaults: d
        };
        Ext.apply(c, {
            items: b,
            defaults: {
                xtype: "syno_fieldset",
                defaults: a
            }
        });
        return
    },
    openManagement: function() {
        var a = new SYNO.SDS.AdminCenter.Security.ManagementWizard({
            module: this.module,
            owner: this.appWin
        });
        a.open();
        this.mon(a, "close", this.load, this, {
            single: true
        })
    },
    renewNow: function() {
        this.appWin.setStatusBusy();
        this.appWin.sendWebAPI({
            api: "SYNO.Core.Certificate.CRT",
            method: "recreate",
            version: "1",
            callback: function(c, b, a) {
                if (!c) {
                    this.appWin.getMsgBox().alert(_T("tree", "leaf_notification"), SYNO.SDS.AdminCenter.Security.Certificate.Err2Msg(b));
                    return
                }
                if (b.restart_httpd) {
                    this.checkProgress.defer(30000, this)
                } else {
                    this.appWin.clearStatusBusy();
                    this.load()
                }
            },
            scope: this
        })
    },
    checkProgress: function() {
        var a = this;
        if (location.protocol === "https:") {
            location.reload()
        }
        a.register_id = a.pollReg({
            webapi: {
                api: "SYNO.Core.Certificate",
                method: "list",
                version: 1,
                params: {}
            },
            interval: 3,
            immediate: true,
            status_callback: function(e, c, d, b) {
                if (!e && !c.code) {
                    return
                }
                if (c.code) {
                    a.appWin.getMsgBox().alert(_T("tree", "leaf_service"), SYNO.SDS.AdminCenter.Security.Certificate.Err2Msg(c.code))
                }
                a.pollUnreg(a.register_id);
                a.appWin.clearStatusBusy();
                a.load()
            }
        })
    },
    openDownload: function() {
        this.downloader.download("archive")
    },
    openUpload: function() {
        var a = new SYNO.SDS.AdminCenter.Security.UploadSSL({
            owner: this.appWin,
            module: this.module
        });
        a.open();
        this.mon(a, "close", this.load, this, {
            single: true
        })
    },
    isSynoCert: function(b, a) {
        if (a.city === "Taipei" && b.city === "Taipei" && a.common_name === "synology.com" && b.common_name == "Synology Inc. CA" && a.country === "TW" && b.country === "TW" && a.department === "FTP Team" && b.department === "Certificate Authority" && a.email === "product@synology.com" && b.email === "product@synology.com" && a.organization === "Synology Inc." && b.organization === "Synology Inc." && a.state === "Taiwan" && b.state === "Taiwan") {
            return true
        }
        return false
    },
    updateCertificate: function(d, e) {
        var c = this.getCertificate(d, "server_cert");
        var a = null;
        var g = this.isSynoCert(c.issuer, c.subject);
        var f = this.getForm().findField("server_sha1_warning");
        var b = this.getForm().findField("server_signature_algorithm");
        Ext.getCmp(this.btnRenew).hide();
        b.hide();
        f.hide();
        if (c.signature_algorithm) {
            if ("sha1WithRSAEncryption" === c.signature_algorithm) {
                a = this.highlightText("SHA1", "red-status");
                f.show();
                if (this.appWin._S("version") > 5545 && g) {
                    Ext.getCmp(this.btnRenew).show()
                }
            } else {
                if ("sha256WithRSAEncryption" === c.signature_algorithm) {
                    a = this.highlightText("SHA256", "green-status")
                } else {
                    a = this.highlightText(c.signature_algorithm, "blue-status")
                }
            }
        }
        this.getForm().setValues({
            status: e,
            server_issue_to: c.subject.common_name,
            server_issuer: c.issuer.common_name,
            server_signature_algorithm: a,
            server_expire_date: this.translateToDateObj(c.valid_till).format("Y-m-d")
        });
        if (a) {
            b.show()
        }
        this.doLayout()
    },
    updateByJSON: function(a) {
        var b = null;
        if (this.isSelfSignded(a)) {
            b = this.highlightText(_T("certificate", "self_signed_crt"), "red-status")
        } else {
            if (this.expiredInDays(a, 0)) {
                b = this.highlightText(_T("certificate", "expired_crt"), "red-status")
            } else {
                if (this.expiredInDays(a, 30)) {
                    b = this.highlightText(_T("certificate", "become_expired_crt"), "red-status")
                } else {
                    b = this.highlightText(_T("certificate", "general_crt"), "green-status")
                }
            }
        }
        this.updateCertificate(a, b)
    },
    getCertificate: function(c, b) {
        for (var a = 0; a < c.certificates.length; a++) {
            if (c.certificates[a].type === b) {
                return c.certificates[a]
            }
        }
        return null
    },
    isSelfSignded: function(b) {
        var a = this.getCertificate(b, "root_cert");
        var c = this.getCertificate(b, "server_cert");
        if (!a || !c) {
            return false
        }
        return c.issuer.common_name === a.subject.common_name
    },
    expiredInDays: function(c, e) {
        var d = this.getCertificate(c, "server_cert");
        var b = this.translateToDateObj(d.valid_till);
        var a = new Date();
        if (!b) {
            return false
        }
        return (b - a) < (e * 60 * 60 * 24 * 1000)
    },
    load: function() {
        this.appWin.setStatusBusy();
        this.appWin.sendWebAPI({
            api: "SYNO.Core.Certificate",
            method: "list",
            version: "1",
            params: {
                additional: ["valid_from", "valid_till"]
            },
            callback: this.onRequestDone,
            scope: this
        })
    },
    onRequestDone: function(c, b, a) {
        this.appWin.clearStatusBusy();
        if (!c) {
            this.appWin.getMsgBox().alert(_T("tree", "leaf_notification"), SYNO.SDS.AdminCenter.Security.Certificate.Err2Msg(b));
            return
        }
        this.updateByJSON(b);
        this.doLayout()
    },
    highlightText: function(b, a) {
        return '<span class="' + a + '">' + b + "</span>"
    },
    translateToDateObj: function(d) {
        var b = -1;
        var a = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
        var c = d.match(/(\w+) +(\d+) +(\d+):(\d+):(\d+) +(\d+) *(\w*)/);
        for (b = 0; b < a.length; b++) {
            if (c[1] == a[b]) {
                break
            }
        }
        if (b == 12) {
            SYNO.Debug(d + " format error, should be [Sep 15 04:04:06 2022 GMT]");
            b = 0
        }
        return new Date(Date.UTC(c[6], b, c[2], c[3], c[4], c[5]))
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.panel = new SYNO.SDS.AdminCenter.Security.TabPanel({
            module: this,
            appWin: a.appWin
        })
    },
    getPanel: function() {
        return this.panel
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "DSMTab":
                return "AdminCenter/connection_security_security.html";
            case "FirewallTab":
                return "AdminCenter/connection_security_firewall.html";
            case "DoSVPNPassthroughTab":
                return "AdminCenter/connection_security_dos_vpnpassthrough.html";
            case "AutoBlockTab":
                return "AdminCenter/connection_security_autoblock.html";
            case "CertificateTab":
                return "AdminCenter/connection_certificate.html";
            default:
                return "AdminCenter/connection_security_desc.html"
        }
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(b) {
        var a = this.panel.getComponent("FirewallTab");
        this.setActivateParams(b);
        a.clearIFSelect();
        if ("yes" === this.appWin._D("support_fw_security")) {
            this.panel.getComponent("DoSVPNPassthroughTab").clearIFSelect()
        }
        this.panel.loadInterface()
    },
    deactivate: function() {
        var a = this.panel.getAllForms();
        for (var b = 0; b < a.length; b++) {
            if (a[b].isDirty()) {
                return false
            }
        }
        if (this.panel.getComponent("FirewallTab").isDirty()) {
            return false
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    FwGlobalLayoutVer: 4920,
    FWGlobalIF: "global",
    constructor: function(c) {
        var b = [];
        var a;
        this.module = c.module;
        this.module.appWin = c.appWin;
        this.IFStore = this.createIFStore();
        this.DSMForm = new SYNO.SDS.AdminCenter.Security.DSM.Form({
            module: c.module,
            owner: this,
            itemId: "DSMTab"
        });
        b.push(this.DSMForm);
        this.FwPanel = new SYNO.SDS.AdminCenter.Security.FwGridPanel({
            module: c.module,
            title: _T("tree", "leaf_firewall"),
            portInfo: [],
            owner: this,
            itemId: "FirewallTab"
        });
        b.push(this.FwPanel);
        if ("yes" === this._D("support_fw_security")) {
            this.DoSVPNPassthroughPanel = new SYNO.SDS.AdminCenter.Security.DoSVPNPassthroughFormPanel({
                module: c.module,
                title: _T("tree", "leaf_dos_and_vpnpassthrough"),
                owner: this,
                itemId: "DoSVPNPassthroughTab"
            });
            b.push(this.DoSVPNPassthroughPanel)
        }
        this.AutoBlockPanel = new SYNO.SDS.AdminCenter.Security.AutoBlockPanel({
            module: c.module,
            owner: this,
            appWin: this.module.appWin,
            itemId: "AutoBlockTab"
        });
        b.push(this.AutoBlockPanel);
        this.CertificateTab = new SYNO.SDS.AdminCenter.Security.CertificateTab({
            module: c.module,
            owner: this,
            appWin: c.appWin,
            itemId: "CertificateTab"
        });
        b.push(this.CertificateTab);
        a = Ext.apply({
            activeTab: 0,
            applyDirtyOnly: true,
            loadDirtyOnly: true,
            items: b
        }, c);
        this.callParent([a])
    },
    createIFStore: function() {
        var a;
        if (this._S("version") >= this.FwGlobalLayoutVer) {
            a = new SYNO.SDS.AdminCenter.Security.FwIFStore({
                module: this.module,
                owner: this.module.appWin
            })
        } else {
            a = new SYNO.SDS.AdminCenter.Network.SimpleIFStore({
                module: this.module,
                owner: this.module.appWin
            })
        }
        return a
    },
    loadInterface: function() {
        this.mon(this.IFStore, "load", this.onIFAfterLoad, this);
        this.IFStore.loadInterface()
    },
    onIFAfterLoad: function(b, a, c) {
        this.loadAllForm()
    },
    onApiSuccess: function(d, b, a) {
        if ("set" === d) {
            if (!b.has_fail) {
                this.setStatusOK();
                this.checkHttpdRestart()
            } else {
                var c = SYNO.API.getErrorString(b);
                this.setStatusError({
                    text: c,
                    clear: true
                })
            }
        }
        this.processReturnData(d, b, a)
    },
    checkHttpdRestart: function() {
        if (this.restartHttpd) {
            var a = SYNO.SDS.AdminCenter.Utils.WaitHttpdRestart(this.module.appWin);
            a()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.Security.FwIFStore", {
    extend: "SYNO.SDS.AdminCenter.Network.SimpleIFStore",
    loadInterface: function(c) {
        this.globalFwRecs = [];
        var d = [];
        for (var b = 0; b < this.apiGetIFArray.length; b++) {
            d.push(this.apiGetIFArray[b].webapi)
        }
        var a = {
            api: "SYNO.Core.Security.Firewall.Rules",
            method: "load",
            params: {
                adapter: "global"
            },
            version: 1
        };
        d.push(a);
        this.owner.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: false,
                params: d
            },
            callback: this.loadIFStore
        })
    },
    loadIFStore: function(c, b, a) {
        if (c) {
            this.fillFwStore(b, a)
        } else {
            this.module.appWin.getMsgBox().alert(_T("common", "note"), _T("common", "commfail"))
        }
    },
    loadGlobalFwRules: function() {
        return this.globalFwRecs
    },
    fillFwStore: function(c, b) {
        for (var a = 0; a < c.result.length; a++) {
            if (b.compound[a].api === "SYNO.Core.Security.Firewall.Rules") {
                this.globalFwRecs = c.result[a].data;
                b.compound.splice(a, 1);
                break
            }
        }
        this.fillIFStore(c, b)
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.GridView", {
    extend: "SYNO.ux.GridPanel",
    pollingInterval: 10,
    hideHeaders: true,
    frame: true,
    loadGridData: null,
    api: null,
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.store = this.createGroupingStore();
        var c = new Ext.grid.ColumnModel({
            defaults: {
                menuDisabled: false,
                sortable: false
            },
            columns: [{
                header: _T("status", "header_item"),
                css: "font-weight: bold;",
                dataIndex: "name"
            }, {
                header: _T("status", "header_value"),
                dataIndex: "value",
                renderer: this.selectableRenderer.createDelegate(this)
            }, {
                header: "Category",
                dataIndex: "category",
                hidden: true,
                groupRenderer: function(e, d, f) {
                    return f.data.category
                }
            }]
        });
        var b = {
            colModel: c,
            store: this.store,
            listeners: {
                scope: this,
                activate: this.onActivate,
                deactivate: this.onDeactivate
            }
        };
        b.view = new SYNO.SDS.Utils.GroupingView({
            forceFit: true,
            trackResetOnLoad: false,
            showGroupName: false
        });
        Ext.apply(b, a);
        return b
    },
    createGroupingStore: function() {
        var a = new Ext.data.ArrayReader({}, [{
            name: "name"
        }, {
            name: "value"
        }, {
            name: "category"
        }]);
        return new Ext.data.GroupingStore({
            reader: a,
            data: [],
            groupField: "category",
            autoDestroy: true,
            sortData: function() {}
        })
    },
    onActivate: function() {
        this.owner = this.module.appWin;
        if (this.pollingID === undefined) {
            this.pollingID = this.owner.pollReg({
                interval: this.pollingInterval,
                immediate: true,
                webapi: this.api,
                status_callback: this.loadGridData,
                scope: this
            })
        }
    },
    onDeactivate: function() {
        if (this.pollingID !== undefined) {
            this.owner.pollUnreg(this.pollingID);
            this.pollingID = undefined
        }
    },
    selectableRenderer: function(e, b, d) {
        var c = '<div class ="{0}">{1}</div>',
            a = String.format(c, SYNO.SDS.Utils.SelectableCLS, e);
        if (!e.match(/^</)) {
            b.attr = 'ext:qtip="' + e + '"'
        }
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.OverviewTab", {
    extend: "SYNO.SDS.AdminCenter.InfoCenter.GridView",
    title: _T("status", "sysinfo_overview_tab"),
    api: {
        api: "SYNO.Core.System",
        version: 1,
        method: "info"
    },
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    loadGridData: function(o, b, j, c) {
        var m;
        var a, n;
        var p = [];
        var i;
        var h;
        var l;
        var f;
        if (!o) {
            SYNO.Debug("[Polling] action Failed.");
            return
        }
        if (this._D("support_mtd_serial") == "yes") {
            p.push([_T("common", "ds_serial"), b.serial])
        }
        p.push([_T("common", "ds_model"), b.model]);
        if (Ext.isDefined(b.cpu_vendor) && Ext.isDefined(b.cpu_family) && Ext.isDefined(b.cpu_series)) {
            p.push([_T("status", "cpu_model_name"), String.format("{0} {1} {2}", b.cpu_vendor, b.cpu_family, b.cpu_series)])
        }
        if (Ext.isDefined(b.cpu_clock_speed)) {
            if (b.cpu_clock_speed < 1000) {
                f = Math.round(b.cpu_clock_speed);
                p.push([_T("status", "cpu_clock_speed"), f + " MHz"])
            } else {
                f = Math.round(b.cpu_clock_speed / 10) / 100;
                p.push([_T("status", "cpu_clock_speed"), f + " GHz"])
            }
        }
        if (Ext.isDefined(b.cpu_num)) {
            p.push([_T("status", "cpu_num"), b.cpu_num])
        }
        if (Ext.isDefined(b.cpu_cores)) {
            p.push([_T("status", "cpu_cores"), b.cpu_cores])
        }
        if (Ext.isDefined(b.cpu1_core)) {
            p.push([_T("status", "cpu1_core"), b.cpu1_core])
        }
        if (Ext.isDefined(b.cpu2_core)) {
            p.push([_T("status", "cpu2_core"), b.cpu2_core])
        }
        p.push([_T("status", "ramsize"), b.ram_size + " " + _T("common", "size_mb")], [_T("status", "status_version"), b.firmware_ver], [_T("status", "sys_time"), b.time], [_T("status", "uptime"), this.formatUpTime(b.up_time)]);
        if (b.support_rp) {
            p.push([_T("system", "power_supply") + "1", b.rp1 === 1 ? _T("volume", "volume_status_normal") : '<font class="red-status" ext:qtip="' + _T("common", "status_abnormal") + '">' + _T("common", "status_abnormal") + "</font>"], [_T("system", "power_supply") + "2", b.rp2 === 1 ? _T("volume", "volume_status_normal") : '<font class="red-status" ext:qtip="' + _T("common", "status_abnormal") + '">' + _T("common", "status_abnormal") + "</font>"])
        }
        if (b.eunit) {
            for (m = 0; m < b.eunit.length; m++) {
                a = b.eunit[m];
                n = a.model ? a.model : "Expansion Unit";
                p.push([n + _T("system", "power_supply") + "1", a.rp1 === 1 ? _T("volume", "volume_status_normal") : '<font class="red-status" ext:qtip="' + _T("common", "status_abnormal") + '">' + _T("common", "status_abnormal") + "</font>"], [n + _T("system", "power_supply") + "2", a.rp2 === 1 ? _T("volume", "volume_status_normal") : '<font class="red-status" ext:qtip="' + _T("common", "status_abnormal") + '">' + _T("common", "status_abnormal") + "</font>"])
            }
        }
        if (this._D("supportsystemperature") == "yes") {
            i = String.format("{0} {1} / {2} {3} &nbsp;&nbsp;{4}", b.sys_temp, _T("status", "celsius"), this.C2F(b.sys_temp).toFixed(0), _T("status", "fahrenheit"), (true || this._D("showtempdesc")) == "yes" ? _T("status", "CPU_temperature_desc") : "")
        }
        if (this._D("supportsystempwarning") === "yes" && b.sys_tempwarn !== null) {
            var g = String.format('<div {3} class="syno-sysinfo-temp {0}" style="margin-right:2px;">&nbsp;</div><span class="{2}">{1}</span>', b.sys_tempwarn ? "syno-sysinfo-at" : "syno-sysinfo-nt", b.sys_tempwarn ? _T("system", "over_temperature") : _T("helpbrowser", "font_normal"), b.sys_tempwarn ? "orange-status" : "green-status", i ? ('ext:qtip="' + i + '"') : "");
            p.push([_T("status", "CPU_temperature"), g])
        }
        Ext.each(p, function(q) {
            q.push(_T("home", "home_info_title"))
        });
        var k = SYNO.SDS.Utils.getTimeZoneStore();
        if (b.hasOwnProperty("time_zone_desc")) {
            h = b.time_zone_desc
        } else {
            l = k.getById(b.time_zone);
            h = l ? l.get("display") : b.time_zone
        }
        var e = [
            [_T("time", "ntpdate_server"), b.enabled_ntp ? b.ntp_server : b.ntp_server + " " + _T("status", "status_not_enabled"), _T("status", "status_time")],
            [_T("status", "status_timezone"), h, _T("status", "status_time")]
        ];
        var d = p.concat(e).concat(this.formatExternalDeviceInfo(b));
        this.store.loadData(d)
    },
    C2F: function(a) {
        return (a * 9 / 5 + 32)
    },
    formatUpTime: function(h) {
        var g = "";
        var f = h.indexOf(":", 0);
        var a = h.substring(0, f);
        var d = h.indexOf(":", f + 1);
        var c = parseInt(h.substring(f + 1, d), 10);
        var e = parseInt(h.substring(d + 1, h.length), 10);
        a = parseInt(a, 10);
        var b = (a - a % 24) / 24;
        a = a % 24;
        g = b ? String.format("{0} {1} ", b, _T("status", "status_day")) : "";
        g += (a || g !== "") ? String.format("{0} {1} ", a, _T("status", "status_hour")) : "";
        g += (c || g !== "") ? String.format("{0} {1} ", c, _T("status", "status_minute")) : "";
        g += (e || g !== "") ? String.format("{0} {1}", e, _T("status", "status_second")) : "";
        return g
    },
    formatExternalDeviceInfo: function(a) {
        var b = [];
        var c = _T("tree", "node_device");
        b = this.formatUSBInfo(a.usb_dev, c);
        b = b.concat(this.formatESATAInfo(a.sata_dev, c));
        b = b.concat(this.formatSDInfo(a.sd_dev, c));
        if (b.length === 0) {
            b.push([_T("status", "status_nodevice"), "", c])
        }
        return b
    },
    formatSDInfo: function(b, h) {
        var g = [];
        var f = Ext.util.Format.htmlEncode;
        if (this._D("sdcopy") == "yes" || "yes" === this._D("usbstation")) {
            if (b) {
                for (var c = 0; c < b.length; c++) {
                    var a = b[c];
                    var e = a.producer ? f(a.producer) : _T("usb", "usb_type_unknown");
                    var d = [_T("tree", "leaf_sdcard"), e, h];
                    g.push(d)
                }
            }
        }
        return g
    },
    formatESATAInfo: function(a, h) {
        var d = [];
        var g = Ext.util.Format.htmlEncode;
        if (this._D("esataportcfg", "0x0") !== "0x0") {
            if (a) {
                for (var c = 0; c < a.length; c++) {
                    var f = a[c];
                    var k;
                    var b = f.id ? " " + f.id : "";
                    var i = f.isEUnit ? _T("volume", "volume_disk_source_ebox") + b : _T("status", "status_sata");
                    if (f.status === "normal") {
                        var e = f.model ? g(f.model) : _T("usb", "usb_type_unknown");
                        k = [i, e, h]
                    } else {
                        k = [i, _T("usb", "usb_st_fail"), h]
                    }
                    d.push(k)
                }
            }
        }
        return d
    },
    formatUSBInfo: function(m, h) {
        var d = [];
        var f = Ext.util.Format.htmlEncode;
        var a = {
            printer: _T("tree", "leaf_usbprint"),
            audio: _T("usb", "usb_type_audio"),
            disk: _T("tree", "leaf_usbdisk"),
            hub: _T("usb", "usb_type_hub"),
            remote: _T("usb", "usb_type_remote_control"),
            scard: _T("usb", "usb_type_scard"),
            ups: _T("tree", "leaf_ups"),
            other: _T("status", "status_usb")
        };

        function b(o) {
            var n = "";
            for (var j = 0; j < o; j++) {
                n += "&nbsp; &nbsp; &nbsp;"
            }
            return n
        }
        for (var c = 0; c < m.length; c++) {
            var e = m[c];
            var g = e.producer ? f(e.producer) : _T("usb", "usb_type_unknown");
            var k = e.product ? f(e.product) : _T("usb", "usb_type_unknown");
            if (e.cls in a) {
                var i = b(e.level) + a[e.cls];
                var l = [i, k + " - " + g, h];
                d.push(l)
            }
        }
        return d
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.NetworkTab", {
    extend: "SYNO.SDS.AdminCenter.InfoCenter.GridView",
    title: _T("tree", "leaf_lan"),
    api: {
        api: "SYNO.Core.System",
        version: 1,
        params: {
            type: "network"
        },
        method: "info"
    },
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    loadGridData: function(e, c, b) {
        var a = this;
        var d = function() {
            var h = _T("status", "status_empty_config");
            var f = [];
            var g;
            return {
                append: function(i, j) {
                    if (!g) {
                        throw Error("group name is not set")
                    }
                    f.push([i, j || h, g])
                },
                start: function(i) {
                    g = i
                },
                getData: function() {
                    return f
                }
            }
        }();
        if (!e) {
            SYNO.Debug("[Polling] action Failed.");
            return
        }
        if (!Ext.isArray(c.nif)) {
            SYNO.Debug("wrong response");
            return
        }
        d.start(_T("home", "home_info_title"));
        d.append(_T("status", "status_name"), c.hostname);
        d.append(_T("status", "status_dns"), c.dns);
        d.append(_T("status", "status_gateway"), c.gateway);
        d.append(c.enabled_samba && c.enabled_domain ? _T("network", "wnds_domain") : _T("network", "wnds_group"), c.enabled_samba ? c.workgroup : undefined);
        d.append(_T("status", "status_wins"), c.enabled_samba ? c.wins : undefined);
        if ("yes" !== this._D("ipv4only")) {
            d.append(_T("status", "status_tunnel"), c.tunnel_ip)
        }
        Ext.each(c.nif, function(f) {
            d.start(SYNO.SDS.Utils.Network.idToString.apply(a, [f.id, f.type]));
            d.append(_T("status", "status_addr"), f.mac);
            d.append(_T("status", "status_ipaddr"), f.addr);
            d.append(_T("status", "status_mask"), f.mask);
            if (!Ext.isArray(f.ipv6)) {
                return true
            }
            Ext.each(f.ipv6, function(g) {
                d.append(_T("status", "status_ipv6addr"), String.format("{0}/{1}\t{2}:{3}", g.addr, g.prefix_len, _T("tcpip", "ipv6_scope"), _T("tcpip", "ipv6_scope_" + g.scope)))
            })
        });
        this.store.loadData(d.getData())
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.StorageTab", {
    extend: "Ext.Panel",
    title: _T("status", "sysinfo_storage_tab"),
    padding: "0",
    isUSBStation: null,
    supportBuildinStorage: null,
    volPieStore: null,
    pieChartPos: ["left", "center", "right"],
    pieChartLimit: 6,
    numPerPage: 3,
    pageIndex: 1,
    pieChartColor: {
        high: "#FA4B4B",
        mid: "#FF7F00",
        low: "#0086E5"
    },
    pollingInterval: 30,
    constructor: function(a) {
        this.module = a.module;
        this.isUSBStation = ("yes" === this._D("usbstation", "no"));
        this.supportBuildinStorage = ("yes" === this._D("support_buildin_storage", "no"));
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.emptyPanel = new SYNO.ux.GridPanel({
            hideHeaders: true,
            store: new Ext.data.ArrayStore({
                fields: ["NA"]
            }),
            colModel: new Ext.grid.ColumnModel({
                columns: [{
                    header: "NA"
                }]
            })
        });
        if (this.isUSBStation) {
            this.hddGridPanel = this.createHDDGrid_USBStation()
        } else {
            this.hddGridPanel = this.createHDDGrid()
        }
        this.volGridPanel = this.createVolumeGrid();
        this.volPrevId = Ext.id(undefined, "sysinfo_vol_prev_");
        this.volNextId = Ext.id(undefined, "sysinfo_vol_next_");
        this.volId = Ext.id(undefined, "sysinfo_vol_");
        this.volChartId = Ext.id(undefined, "sysinfo_vol_chart_");
        this.volNameId = Ext.id(undefined, "sysinfo_vol_name_");
        this.volTextId = Ext.id(undefined, "sysinfo_vol_text_");
        this.volPiePanel = new Ext.DataView({
            tpl: new Ext.XTemplate('<tpl for=".">', '<div style="position:relative;height:190px;">', '<tpl if="3 < volCount">', '<div id="' + this.volPrevId + '" class="sm-overview-vol-prev sm-overview-vol-btn"></div>', '<div style="position:absolute;left:50%;margin-left:-302px;">', "</tpl>", '<tpl for="volumes">', '<div id="' + this.volId + '{pos}" class="sm-overview-vol sm-overview-vol-{pos}{style}">', '<div id="' + this.volChartId + '{pos}" class="sm-overview-vol-chart"></div>', '<div id="' + this.volNameId + '{pos}" class="sm-overview-vol-name"></div>', '<div id="' + this.volTextId + '{pos}" class="sm-overview-vol-text"></div>', "</div>", "</tpl>", '<tpl if="3 < volCount">', "</div>", '<div id="' + this.volNextId + '" class="sm-overview-vol-next sm-overview-vol-btn"></div>', "</tpl>", "</div>", "</tpl>", '<div class="x-clear"></div>', {
                getCount: function(c) {
                    if (!c || !c.length) {
                        return 0
                    }
                    return c.length
                }
            }),
            hidden: true,
            store: this.volPieStore = new Ext.data.JsonStore({
                autoDestroy: true,
                fields: ["volCount", "volumes"]
            })
        });
        this.volField = new SYNO.ux.FieldSet({
            stateId: "SYNO.SDS.AdminCenter.InfoCenter.Main::storage::volume",
            title: _T("volume", "volume_info"),
            collapsible: false,
            cls: "syno-sysinfo-fieldset",
            items: [this.emptyPanel, this.volPiePanel, this.volGridPanel]
        });
        this.hddField = new SYNO.ux.FieldSet({
            stateId: "SYNO.SDS.AdminCenter.InfoCenter.Main::storage::hdd",
            title: this.isUSBStation ? _T("tree", "node_device") : _T("status", "status_hdd"),
            collapsible: false,
            cls: "syno-sysinfo-fieldset",
            items: this.hddGridPanel
        });
        var b = {
            layout: "form",
            listeners: {
                scope: this,
                resize: this.onResize,
                activate: this.onActivate,
                deactivate: this.onDeactivate
            },
            items: [this.volField, this.hddField]
        };
        Ext.apply(b, a);
        return b
    },
    getMidHeight: function() {
        return (this.module.appWin.getHeight() - 155) / 2
    },
    onResize: function() {
        var a = this.getMidHeight();
        this.emptyPanel.hide();
        this.volGridPanel.setHeight(a);
        this.volPiePanel.setHeight(a > 180 ? a : 180);
        this.hddGridPanel.setHeight(a);
        this.doLayout()
    },
    onActivate: function() {
        this.owner = this.module.appWin;
        if (this.pollingID === undefined) {
            this.pollingID = this.owner.pollReg({
                interval: this.pollingInterval,
                immediate: true,
                webapi: {
                    api: "SYNO.Core.System",
                    version: 1,
                    method: "info",
                    params: {
                        type: "storage"
                    }
                },
                status_callback: this.loadStorageInfo,
                scope: this
            })
        }
    },
    onDeactivate: function() {
        if (this.pollingID !== undefined) {
            this.owner.pollUnreg(this.pollingID);
            this.pollingID = undefined
        }
    },
    loadStorageInfo: function(m, h, d, a) {
        var n = null,
            e = null;
        var k = null;
        var b, g, f;
        var c = 0;
        var l;
        if (!m) {
            SYNO.Debug("[Polling] action Failed.");
            return
        }
        b = h;
        if (this.isUSBStation) {
            n = [];
            for (g = 0; b.devices && g < b.devices.length; ++g) {
                e = b.devices[g];
                if (e.partitions && e.partitions.length > 0) {
                    for (f = 0; f < e.partitions.length; ++f) {
                        n.push({
                            status: e.partitions[f].status,
                            total_size: parseInt(e.partitions[f].total_size_mb, 10) * 1024 * 1024,
                            used_size: parseInt(e.partitions[f].used_size_mb, 10) * 1024 * 1024,
                            name: e.partitions[f].share_name,
                            volstr: e.partitions[f].share_name
                        });
                        ++c
                    }
                } else {
                    ++c
                }
            }
            k = this.formatHDDInfo_USBStation(b.devices)
        } else {
            n = b.vol_info;
            k = this.formatHDDInfo(b.hdd_info)
        }
        if (n === null || n === "") {
            n = []
        }
        if (this.supportBuildinStorage && this.isUSBStation) {
            n.unshift({
                status: b.vol_info[0].status,
                total_size: b.vol_info[0].total_size,
                used_size: b.vol_info[0].used_size,
                name: b.vol_info[0].name,
                volstr: _T("system", "system_volume")
            });
            ++c
        }
        if (!this.isUSBStation) {
            c = n.length
        }
        if (this.isDestroyed) {
            return
        }
        this.loadVolumes(n, c);
        l = this.hddGridPanel.view.getScrollState();
        this.hddStore.loadData(k);
        this.hddGridPanel.view.setScroll(l.top, l.left)
    },
    formatHDDInfo: function(f) {
        var h = false;
        var g = [];
        var k = SYNO.SDS.Utils.StorageUtils;
        for (var c = 0; c < f.length; c++) {
            var a = f[c];
            if (a.status == "no_disk" || !a.status) {
                h = true
            } else {
                h = false
            }
            var e = h ? "-" : a.model;
            var b = [a.diskno, e, k.UiRenderHelper.DiskStatusRender(a.status)];
            var j, l;
            var d = (a.volume === "0") ? "-" : k.SpaceIDParser(a.volume).str;
            if (h) {
                l = "-"
            } else {
                l = (a.capacity / 1024 / 1024 / 1024).toFixed(2) + " " + _T("status", "status_disk_size_unit")
            }
            if (this._D("showdisktemperature") != "no") {
                if (!h) {
                    j = k.UiRenderHelper.DiskTemperatureRender(a.temp)
                } else {
                    j = "-"
                }
                b.push(j)
            }
            if ("yes" === this._D("supportsas", "no")) {
                b.push(a.diskType)
            }
            b.push(l, d, a.order, a.ebox_order);
            g.push(b);
            g.sort(this.diskNameSort)
        }
        return g
    },
    diskNameSort: function(e, d) {
        var c = e[e.length - 2],
            h = d[e.length - 2],
            g = e[e.length - 1],
            f = d[e.length - 1];
        if (g > f) {
            return 1
        }
        if (g < f) {
            return -1
        }
        if (c > h) {
            return 1
        }
        if (c < h) {
            return -1
        }
        return 0
    },
    C2F: function(a) {
        return (a * 9 / 5 + 32)
    },
    createHDDGrid_USBStation: function() {
        var c = ["device_display_name", "producer", "product", "filesystem", "status", "sharedfolder"];
        this.hddStore = new Ext.data.ArrayStore({
            fields: c,
            autoDestroy: true
        });
        var a = new Ext.grid.ColumnModel({
            defaults: {
                align: "center",
                useHtmlEncodeRender: false,
                sortable: false
            },
            columns: [{
                header: _T("common", "name"),
                dataIndex: "device_display_name",
                width: 0.2,
                align: "center"
            }, {
                header: _T("usb", "usb_producer"),
                dataIndex: "producer",
                width: 0.2,
                align: "center"
            }, {
                header: _T("usb", "usb_devname"),
                dataIndex: "product",
                width: 0.2,
                align: "center"
            }, {
                header: _T("usb", "usb_FStype"),
                dataIndex: "filesystem",
                width: 0.1,
                align: "center"
            }, {
                header: _T("usb", "usb_status"),
                dataIndex: "status",
                width: 0.1,
                align: "center"
            }, {
                header: _T("usb", "usb_shname"),
                dataIndex: "sharedfolder",
                width: 0.2,
                align: "center"
            }]
        });
        var b = new SYNO.ux.GridPanel({
            store: this.hddStore,
            enableColumnHide: false,
            enableColumnMove: false,
            enableColumnResize: true,
            enableHdMenu: false,
            colModel: a
        });
        return b
    },
    createHDDGrid: function() {
        var d = ["diskno", "model", "status"];
        if (this._D("showdisktemperature") != "no") {
            d.push("temp")
        }
        if (this._D("supportsas", "no") === "yes") {
            d.push("diskType")
        }
        d.push("capacity", "volume");
        this.hddStore = new Ext.data.ArrayStore({
            fields: d,
            autoDestroy: true
        });
        var b = [{
            header: _T("volume", "volume_disknumber"),
            dataIndex: "diskno"
        }, {
            header: _T("volume", "volume_diskmodel"),
            dataIndex: "model",
            tpl: String.format('<span class="{0}" ext:qtip="{model}">{model}</span>', SYNO.SDS.Utils.SelectableCLS)
        }];
        if (this._D("showdisktemperature") != "no") {
            b.push({
                header: _T("status", "temperature"),
                dataIndex: "temp"
            })
        }
        if ("yes" === this._D("supportsas", "no")) {
            b.push({
                header: _T("volume", "volume_disk"),
                dataIndex: "diskType"
            })
        }
        b.push({
            header: _T("volume", "volume_diskcapacity"),
            dataIndex: "capacity"
        }, {
            header: _T("volume", "volume_diskstatus"),
            dataIndex: "status"
        }, {
            header: "yes" === this._D("supportsas", "no") ? _T("volume", "volume_storage_pool") : _T("volume", "volume") + " / " + _T("volume", "volume_pool"),
            dataIndex: "volume",
            tpl: '<span ext:qtip="{volume}">{volume}</span>'
        });
        var a = new Ext.grid.ColumnModel({
            defaults: {
                align: "center",
                useHtmlEncodeRender: false,
                sortable: false
            },
            columns: b
        });
        var c = new SYNO.ux.GridPanel({
            store: this.hddStore,
            enableColumnHide: false,
            enableColumnMove: false,
            enableColumnResize: true,
            enableHdMenu: false,
            colModel: a
        });
        return c
    },
    createVolumeGrid: function() {
        var a = new Ext.data.ArrayStore({
            fields: ["id", "total", "used", "percent"],
            autoDestroy: true
        });
        var b = new SYNO.ux.GridPanel({
            store: a,
            enableColumnHide: false,
            enableColumnMove: false,
            enableColumnResize: true,
            enableHdMenu: false,
            hidden: true,
            colModel: new Ext.grid.ColumnModel({
                defaults: {
                    sortable: false,
                    align: "center",
                    width: 100
                },
                columns: [{
                    header: _T("common", "name"),
                    dataIndex: "id"
                }, {
                    header: String.format("{0} (%)", _T("volume", "volume_usedsize")),
                    align: "left",
                    dataIndex: "percent",
                    width: 115,
                    css: "vertical-align: middle;",
                    renderer: function(e, i, f, k, c, j) {
                        var d = Math.floor(f.data.percent);
                        var g = new SYNO.SDS.Utils.PercentageBar({
                            barWidth: 120,
                            barHeight: 16,
                            showValueText: true
                        });
                        var h = new Ext.XTemplate("{progressBar}");
                        return h.apply({
                            progressBar: g.fill(d)
                        })
                    }
                }, {
                    header: _T("volume", "volume_usedsize"),
                    dataIndex: "used"
                }, {
                    header: _T("volume", "volume_totalsize"),
                    dataIndex: "total",
                    width: 130
                }]
            })
        });
        return b
    },
    loadVolumes: function(b, c) {
        var a;
        var d;
        var e = [];
        if (0 === c) {
            this.emptyPanel.setHeight(this.getMidHeight());
            this.emptyPanel.body.mask(_T("volume", "volume_novolume"));
            return
        }
        b.sort(this.sortVolume);
        d = this.formatVolumeInfo(b, e);
        if (c < this.pieChartLimit) {
            a = this.showVolPanel("pie");
            this.volPieStore.loadData(e);
            this.drawPieChart(b);
            if (1 < this.pageCount) {
                this.mon(Ext.get(this.volPrevId), "click", function(i, f, g) {
                    var h = new Ext.Element(f);
                    if (!h.hasClass("sm-overview-vol-btn-enable")) {
                        return
                    }--this.pageIndex;
                    this.drawPieChart(b)
                }, this);
                this.mon(Ext.get(this.volNextId), "click", function(i, f, g) {
                    var h = new Ext.Element(f);
                    if (!h.hasClass("sm-overview-vol-btn-enable")) {
                        return
                    }++this.pageIndex;
                    this.drawPieChart(b)
                }, this)
            }
        } else {
            a = this.showVolPanel("grid");
            if (this.volIsChg(b, this.orgVolInfo)) {
                this.volGridPanel.getStore().loadData(d);
                this.orgVolInfo = b
            }
        }
    },
    sortVolume: function(d, c) {
        var f, e;
        if (-1 < d.name.indexOf("volume") && -1 === c.name.indexOf("volume")) {
            return -1
        }
        if (-1 === d.name.indexOf("volume") && -1 < c.name.indexOf("volume")) {
            return 1
        }
        if (-1 < d.name.indexOf("volume") && -1 < c.name.indexOf("volume")) {
            if (parseInt(d.name.replace("volume_", ""), 10) > parseInt(c.name.replace("volume_", ""), 10)) {
                return 1
            } else {
                return -1
            }
        }
        f = d.name.replace("usbshare", "").replace("-", "");
        e = c.name.replace("usbshare", "").replace("-", "");
        while (f.length < 4) {
            f += "0"
        }
        while (e.length < 4) {
            e += "0"
        }
        if (f > e) {
            return 1
        }
        return -1
    },
    formatVolumeInfo: function(q, j) {
        var o = [];
        var p = SYNO.SDS.Utils.StorageUtils;
        var f, c, e, b, k, h, g, l = {},
            n, a;
        this.pageCount = Math.ceil(q.length / this.numPerPage);
        for (h = 0; h < q.length; h++) {
            f = q[h];
            n = p.UiRenderHelper.GetSizeUnit(f.total_size);
            a = p.UiRenderHelper.GetSizeUnit(f.used_size);
            c = f.volstr || ((f.name === "0") ? "-" : p.SpaceIDParser(f.name).str);
            e = n.size + " " + n.unit;
            b = a.size + " " + a.unit;
            k = f.used_size * 100 / f.total_size;
            o.push([c, e, b, k])
        }
        l.volumes = [];
        l.volCount = q.length;
        for (h = 0; h < this.pieChartPos.length; ++h) {
            g = {};
            var m = this.pieChartPos[h];
            g.style = (3 >= j.volCount) ? 1 : 2;
            g.pos = m;
            l.volumes.push(g)
        }
        j.push(l);
        return o
    },
    volIsChg: function(c, d) {
        var a = "";
        var b = "";
        if (c) {
            a = Ext.encode(c)
        }
        if (d) {
            b = Ext.encode(d)
        }
        if (a != b) {
            return true
        }
        return false
    },
    showVolPanel: function(c) {
        var b;
        var a = false;
        this.onResize();
        if ("grid" == c) {
            if (!this.volGridPanel.isVisible()) {
                this.volGridPanel.show();
                a = true
            }
            if (this.volPiePanel.isVisible()) {
                this.volPiePanel.hide();
                a = true
            }
            b = this.volGridPanel
        } else {
            if (this.volGridPanel.isVisible()) {
                this.volGridPanel.hide();
                a = true
            }
            if (!this.volPiePanel.isVisible()) {
                this.volPiePanel.show();
                a = true
            }
            b = this.volPiePanel
        }
        if (a) {
            this.doLayout()
        }
        return b
    },
    drawPieChart: function(n) {
        var j = this,
            a, e, f, i, c, o, g, h, m, b, k, l = SYNO.SDS.Utils.StorageUtils;
        var d = null;
        j.pageIndex = (j.pageIndex > j.pageCount) ? j.pageCount : j.pageIndex;
        j.pageIndex = (1 > j.pageIndex) ? 1 : j.pageIndex;
        a = (j.pageIndex - 1) * j.numPerPage;
        e = (n.length < a + j.numPerPage) ? n.length : a + j.numPerPage;
        if (1 < j.pageCount) {
            if (1 === j.pageIndex) {
                Ext.get(this.volPrevId).removeClass("sm-overview-vol-btn-enable");
                if (!Ext.get(this.volNextId).hasClass("sm-overview-vol-btn-enable")) {
                    Ext.get(this.volNextId).addClass("sm-overview-vol-btn-enable")
                }
            } else {
                if (j.pageIndex === j.pageCount) {
                    Ext.get(this.volNextId).removeClass("sm-overview-vol-btn-enable");
                    if (!Ext.get(this.volPrevId).hasClass("sm-overview-vol-btn-enable")) {
                        Ext.get(this.volPrevId).addClass("sm-overview-vol-btn-enable")
                    }
                } else {
                    if (!Ext.get(this.volPrevId).hasClass("sm-overview-vol-btn-enable")) {
                        Ext.get(this.volPrevId).addClass("sm-overview-vol-btn-enable")
                    }
                    if (!Ext.get(this.volNextId).hasClass("sm-overview-vol-btn-enable")) {
                        Ext.get(this.volNextId).addClass("sm-overview-vol-btn-enable")
                    }
                }
            }
        }
        j.cleanVolUsage();
        for (; a < e; ++a) {
            f = n[a];
            i = parseInt(f.used_size, 10) / parseInt(f.total_size, 10);
            if (i > 0.9) {
                c = "high"
            } else {
                if (i > 0.8) {
                    c = "mid"
                } else {
                    c = "low"
                }
            }
            o = j.pieChartColor[c];
            g = String.format(this.volChartId + "{0}", j.pieChartPos[a % 3]);
            h = new SYNO.SDS.Utils.canvas.ColorCircleGradient({
                radius: 60,
                gradientWidth: 20,
                height: 120,
                width: 120,
                canvasConfig: {
                    height: 120,
                    width: 120
                },
                renderTo: g
            });
            h.draw(Math.min(i, 1));
            if (this.isUSBStation) {
                d = SYNO.SDS.Utils.ExternalDevices.getStatus(f.status)
            } else {
                d = SYNO.SDS.Utils.StorageUtils.UiRenderHelper.StatusNameRender(f.status)
            }
            g = String.format(this.volNameId + "{0}", j.pieChartPos[a % 3]);
            if (this.isUSBStation) {
                Ext.get(g).update(f.volstr + " (" + d + ")")
            } else {
                Ext.get(g).update(l.SpaceIDParser(f.name).str + " (" + d + ")")
            }
            b = l.UiRenderHelper.GetSizeUnit(f.used_size);
            k = l.UiRenderHelper.GetSizeUnit(f.total_size);
            g = String.format(this.volTextId + "{0}", j.pieChartPos[a % 3]);
            m = String.format('<span style="color:{0}">{1} {2}</span><span>&nbsp;/&nbsp;{3} {4}</span>', o, b.size, b.unit, k.size, k.unit);
            Ext.get(g).update(m)
        }
    },
    cleanVolUsage: function() {
        var b = this,
            a;
        for (a = 0; a < b.pieChartPos.length; ++a) {
            Ext.get(String.format(this.volChartId + "{0}", b.pieChartPos[a])).update("");
            Ext.get(String.format(this.volNameId + "{0}", b.pieChartPos[a])).update("");
            Ext.get(String.format(this.volTextId + "{0}", b.pieChartPos[a])).update("")
        }
    },
    formatPartitionInfo_USBStation: function(b) {
        var a = [];
        a = [b.partition_title, b.producer, b.product];
        a.push(SYNO.SDS.Utils.ExternalDevices.getFilesystem(b.filesystem));
        a.push(SYNO.SDS.Utils.ExternalDevices.getStatus(b.status));
        a.push(b.share_name ? b.share_name : _T("usb", "usb_notmounted"));
        return a
    },
    formatHDDInfo_USBStation: function(b) {
        var a = [];
        var d, c, e, f;
        for (d = 0; b && d < b.length; d++) {
            e = b[d];
            if (e.partitions && e.partitions.length > 0) {
                for (c = 0; c < e.partitions.length; ++c) {
                    f = this.formatPartitionInfo_USBStation(e.partitions[c]);
                    a.push(f)
                }
            } else {
                f = this.formatPartitionInfo_USBStation(e);
                a.push(f)
            }
        }
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.ServiceListTab", {
    extend: "SYNO.ux.GridPanel",
    errRetryCount: 0,
    initEvents: function() {
        this.callParent([arguments]);
        this.mon(this.getStore(), "load", this.updateButton, this);
        this.mon(this.getStore(), "update", this.updateButton, this);
        this.mon(this, "activate", this.onActivate, this)
    },
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.setAPIName();
        this.apiCheckPortArray = this.createAPICheckPortArray();
        this.apiEnumArray = this.createAPIEnumArray();
        this.store = this.createStore(a);
        this.IFStore = this.createIFStore(a);
        this.support_package_array = parseInt(a.module.appWin._S("version"), 10) >= 5507 ? true : false;
        this.support_pf_on_dhcp = parseInt(a.module.appWin._S("version"), 10) >= 5507 ? true : false;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    onActivate: function() {
        this.loadIFInfo = (function() {
            var a = true;
            return function() {
                if (a) {
                    this.IFStore.loadData(this.IFRecords, false);
                    this.getTopToolbar().getComponent("SetCombobox").setValue(this.fwTargetIF);
                    a = false
                }
            }
        })();
        if (this.records) {
            return
        }
        this.reloadAllInfo()
    },
    onLeave: function() {
        this.records = null;
        if (this.pfSetTaskId) {
            this.pollUnreg(this.pfSetTaskId)
        }
        if (this.pfTestTaskId) {
            this.pollUnreg(this.pfTestTaskId)
        }
        this.store.rejectChanges()
    },
    reloadAllInfo: function() {
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        this.store.removeAll();
        this.loadNetIF()
    },
    fillConfig: function(h) {
        var f = new SYNO.SDS.AdminCenter.InfoCenter.ServiceList.Action.EnableColumn({
            header: _T("firewall", "firewall_enable_rule"),
            dataIndex: "enable",
            disableSelectAll: true,
            menuDisabled: true
        });
        var g = new SYNO.SDS.AdminCenter.InfoCenter.ServiceList.Firewall.EnableColumn({
            header: _T("service", "service_allow_on_firewall"),
            dataIndex: "firewall",
            width: 130,
            disableSelectAll: true,
            menuDisabled: true
        });
        var e = new SYNO.SDS.AdminCenter.InfoCenter.ServiceList.PortForward.EnableColumn({
            header: _T("service", "service_portforward_setting"),
            dataIndex: "port_forward",
            width: 120,
            disableSelectAll: true,
            menuDisabled: true
        });
        var a = function(k) {
            if ("lan_service" === k) {
                return _T("service", "title_lan")
            }
            if ("internet_service" === k) {
                return _T("service", "title_internet")
            }
            if ("packages" === k) {
                return _T("pkgmgr", "title_packages")
            }
            return
        };
        var j = function(k) {
            return '<div ext:qtip="' + k + '">' + k + "</div>"
        };
        var d = function(n) {
            var k = "";
            if ("unknown" === n.status || "disable" === n.status) {
                return "-"
            }
            for (var l = 0; l < SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ConnectStatus.length; l++) {
                if (SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ConnectStatus[l][1] == n.status) {
                    var m = _T(SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ConnectStatus[l][2], SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ConnectStatus[l][3]);
                    k = '<font ext:qtip="' + m + '" class="' + SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ConnectStatus[l][0] + '">' + m + "</font>"
                }
            }
            return k
        };
        var i = new Ext.grid.ColumnModel({
            defaults: {
                width: 100,
                align: "center"
            },
            columns: [{
                header: _T("mediaservice", "type"),
                dataIndex: "service_type",
                hidden: true,
                renderer: a
            }, {
                header: _T("connections", "service"),
                dataIndex: "display_name",
                align: "left",
                menuDisabled: true,
                renderer: j
            }, f, g, e, {
                header: _T("tunnel", "tunnel_status"),
                dataIndex: "connect",
                id: "connect",
                renderer: d,
                menuDisabled: true
            }]
        });
        var c = new Ext.Toolbar({
            defaultType: "syno_button",
            items: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "save"),
                scope: this,
                itemId: "SaveButton",
                handler: this.onSaveClick
            }, {
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("routerconf", "routerconf_test_conn"),
                scope: this,
                itemId: "TestButton",
                handler: this.onTestClick
            }, {
                text: _T("common", "reset"),
                scope: this,
                itemId: "ResetButton",
                handler: this.onResetClick
            }, "->", {
                xtype: "syno_combobox",
                itemId: "SetCombobox",
                displayField: "display",
                valueField: "value",
                store: this.IFStore,
                forceSelection: true,
                listeners: {
                    select: this.onIFSelect,
                    scope: this
                }
            }]
        });
        var b = {
            title: _T("service", "service_subject"),
            colModel: i,
            store: this.store,
            tbar: c,
            plugins: [f, g, e],
            view: new SYNO.SDS.Utils.GroupingView({
                showGroupName: false,
                enableGroupingMenu: false
            })
        };
        this.fwColumn = g;
        this.pfColumn = e;
        Ext.apply(b, h);
        return b
    },
    setAPIName: function() {
        this.GetRouterConfAPI = {
            api: "SYNO.Core.PortForwarding.RouterConf",
            method: "get",
            version: 1
        };
        this.CheckTopologyAPI = {
            api: "SYNO.Core.Network.Router.Topology",
            method: "get",
            version: 1
        };
        this.ListServieAPI = {
            api: "SYNO.Core.Service",
            method: "get",
            version: 1,
            params: {
                additional: ["status", "allow_control"]
            }
        };
        this.ListPackageAPI = {
            api: "SYNO.Core.Package",
            method: "list",
            version: 1,
            params: {
                additional: ["status", "startable", "dependent_packages", "start_dependent_services"]
            }
        };
        this.CheckFwRuleAPI = {
            api: "SYNO.Core.Security.Firewall.Rules.Serv",
            method: "policy_check",
            version: 1,
            params: {
                adapter: "",
                service_id: []
            }
        };
        this.CheckPfRuleAPI = {
            api: "SYNO.Core.PortForwarding.Rules.Serv",
            method: "check",
            version: 1,
            params: {
                service_id: []
            }
        };
        this.ListNetIFAPI = {
            api: "SYNO.Core.Network.Interface",
            method: "list",
            version: 1
        };
        this.LoadFirewallTargetAPI = {
            api: "SYNO.Core.Service.Conf",
            method: "get",
            version: 1
        };
        this.ListPPPoEAPI = {
            api: "SYNO.Core.Network.PPPoE",
            version: 1,
            method: "list"
        };
        this.GetNetworkAPI = {
            api: "SYNO.Core.Network",
            version: 1,
            method: "get"
        };
        this.SetFirewallAPI = {
            api: "SYNO.Core.Security.Firewall.Rules.Serv",
            version: 1,
            method: "set"
        };
        this.SetPortForwardAPI = {
            api: "SYNO.Core.PortForwarding.Rules",
            version: 1,
            method: "save"
        }
    },
    createAPICheckPortArray: function() {
        var a = [this.CheckFwRuleAPI, this.CheckPfRuleAPI];
        return a
    },
    createAPIEnumArray: function() {
        var a = [this.ListServieAPI, this.ListPackageAPI];
        return a
    },
    getNetAPIArray: function() {
        var a = [this.ListNetIFAPI, this.LoadFirewallTargetAPI, this.GetRouterConfAPI, this.CheckTopologyAPI];
        return a
    },
    createStore: function(b) {
        var a = new SYNO.SDS.AdminCenter.InfoCenter.ServiceList.Store();
        return a
    },
    createIFStore: function(b) {
        var a = new SYNO.SDS.AdminCenter.InfoCenter.ServiceList.IFStore();
        return a
    },
    loadNetIF: function() {
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: this.getNetAPIArray()
            },
            callback: this.loadNetIFCB,
            scope: this
        })
    },
    loadNetIFCB: function(h, g, f) {
        var b, a, e, d, c = {};
        this.IFRecords = [];
        this.hidePfcolumn = false;
        if (!h || g.has_fail) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(g.code));
            this.module.appWin.clearStatusBusy();
            return
        }
        b = SYNO.API.Util.GetValByAPI(g, this.LoadFirewallTargetAPI.api, "get", "service_fw_target_interface");
        if (undefined === b) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
            this.module.appWin.clearStatusBusy();
            return
        }
        this.fwTargetIF = b;
        c.value = "all";
        c.display = _T("service", "service_all_interface");
        this.IFRecords.push(c);
        if (undefined === (a = SYNO.API.Util.GetValByAPI(g, this.ListNetIFAPI.api, "list"))) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
            this.module.appWin.clearStatusBusy();
            return
        }
        this.updateIFRecord(a);
        if (undefined === (e = SYNO.API.Util.GetValByAPI(g, this.GetRouterConfAPI.api, this.GetRouterConfAPI.method))) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
            this.module.appWin.clearStatusBusy();
            return
        }
        if ("" === e.router_model && "" === e.router_brand && "" === e.router_version) {
            this.hidePfcolumn = true
        }
        if (undefined === (d = SYNO.API.Util.GetValByAPI(g, this.CheckTopologyAPI.api, this.CheckTopologyAPI.method))) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
            this.module.appWin.clearStatusBusy();
            return
        }
        if (true === SYNO.SDS.AdminCenter.PublicAccess.PortForwardingPanel.prototype.isSelfPf(d)) {
            this.hidePfcolumn = true
        }
        this.getColumnModel().setHidden(4, this.hidePfcolumn);
        this.loadIFInfo();
        if (true === this.checkFwIF()) {
            this.enumServ()
        } else {
            this.module.appWin.clearStatusBusy();
            this.disableAllButton();
            this.getTopToolbar().getComponent("SetCombobox").setValue("all");
            this.module.appWin.getMsgBox().alert(this.title, _T("service", "service_network_interface_change"), this.onIFSelect, this)
        }
    },
    checkFwIF: function() {
        var a = false;
        this.IFRecords.each(function(b) {
            if (this.fwTargetIF === b.value) {
                a = true
            }
        }, this);
        return a
    },
    updateIFRecord: function(b) {
        var a = this;
        b.sort(SYNO.SDS.AdminCenter.Network.Utils.SortFunc);
        b.each(function(d) {
            var c = {};
            c.value = d.ifname;
            c.type = d.type;
            c.display = SYNO.SDS.Utils.Network.idToString.apply(a, [d.ifname, d.type]);
            this.IFRecords.push(c)
        }, this)
    },
    enumServ: function() {
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: this.apiEnumArray
            },
            callback: this.enumServCB,
            scope: this
        })
    },
    enumServCB: function(e, c, b) {
        var a, d;
        this.records = [];
        if (c && 503 === c.status && 10 > this.errRetryCount) {
            this.errRetryCount = this.errRetryCount + 1;
            this.enumServ.defer(3000, this);
            return
        }
        this.errRetryCount = 0;
        if (!e || c.has_fail) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(c.code));
            this.module.appWin.clearStatusBusy();
            return
        }
        if (undefined === (a = SYNO.API.Util.GetValByAPI(c, this.ListServieAPI.api, "get"))) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
            this.module.appWin.clearStatusBusy();
            return
        }
        if (undefined === (d = SYNO.API.Util.GetValByAPI(c, this.ListPackageAPI.api, "list"))) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
            this.module.appWin.clearStatusBusy();
            return
        }
        this.fillServRecord(a);
        this.fillPkgRecord(d);
        this.loadPortInfo()
    },
    fillServRecord: function(a) {
        if (!a.service) {
            return
        }
        this.records = a.service;
        this.removeNotsupportServ();
        this.correctOrder();
        this.updateServInfo()
    },
    correctOrder: function(c) {
        var b;
        for (var a = 0; a < this.records.length; a++) {
            b = this.getServiceOrder(this.records[a].service_id);
            this.records[a].order_num = (undefined === b) ? 0 : b
        }
    },
    getDisplayNameByID: function(a) {
        var b;
        this.records.each(function(c) {
            if (a === c.service_id) {
                b = c.display_name
            }
        }, this);
        return b
    },
    updateServInfo: function() {
        this.records.each(function(b) {
            var a = b.additional.status;
            b.status = a;
            b.allow_control = b.additional.allow_control;
            b.enable = ("error" === a) ? "gray" : b.enable;
            b.service_type = this.getServiceType(b.service_id);
            if ("error" === a) {
                b.serv_desc = _T("pkgmgr", "pkgmgr_pkg_broken")
            }
        }, this)
    },
    removeNotsupportServ: function() {
        for (var a = 0; a < this.records.length; a++) {
            if ("pgsql" === this.records[a].service_id) {
                this.records.splice(a, 1);
                break
            }
        }
    },
    getServiceType: function(a) {
        for (var b = 0; b < SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ServiceType.length; b++) {
            if (SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ServiceType[b][0] == a) {
                return SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ServiceType[b][1]
            }
        }
        return "internet_service"
    },
    getServiceOrder: function(a) {
        for (var b = 0; b < SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ServiceType.length; b++) {
            if (SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ServiceType[b][0] == a) {
                return b
            }
        }
    },
    fillPkgRecord: function(c) {
        if (!c.packages) {
            return
        }
        for (var b = 0; b < c.packages.length; b++) {
            var a = this.transferPkgObj(c.packages[b]);
            if (null !== a) {
                this.records.push(a)
            }
        }
    },
    transferPkgObj: function(f) {
        var e = {};
        var b = f.additional.startable;
        var a = f.additional.status;
        var d = f.additional.dependent_packages;
        var c = f.additional.start_dependent_services;
        if (false === b) {
            return null
        }
        e.service_type = "packages";
        e.service_id = f.id;
        e.display_name = f.name;
        e.status = a;
        e.enable = ("running" === a) ? true : false;
        e.dependent_packages = d;
        e.start_dependent_services = c;
        if ("version_limit" === a || "broken" === a) {
            e.allow_control = false;
            e.serv_desc = ("version_limit" === a) ? _T("pkgmgr", "broken_version_desc") : _T("pkgmgr", "broken_desc")
        } else {
            e.allow_control = true
        }
        return e
    },
    loadPortInfo: function() {
        var c = [];
        var a = {};
        for (var b = 0; b < this.apiCheckPortArray.length; b++) {
            a = this.apiCheckPortArray[b];
            if (a.api === this.CheckPfRuleAPI.api && this.hidePfcolumn) {
                continue
            }
            this.updateAPIParam(a);
            c.push(a)
        }
        if (false === this.hidePfcolumn) {
            c.push(this.ListPPPoEAPI);
            c.push(this.GetNetworkAPI)
        }
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: c
            },
            callback: this.loadPortInfoCB,
            scope: this
        })
    },
    updateAPIParam: function(a) {
        a.params.service_id = this.getServiceId();
        if (a.api === this.CheckFwRuleAPI.api) {
            a.params.adapter = this.getFwTargetIF()
        }
    },
    getServiceId: function() {
        var a = [];
        this.records.each(function(b) {
            a.push(b.service_id)
        }, this);
        return a
    },
    loadPortInfoCB: function(c, b, a) {
        if (!c || b.has_fail) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(b.code));
            this.module.appWin.clearStatusBusy();
            return
        }
        if (true !== this.hidePfcolumn) {
            this.checkNetStatus(b)
        }
        this.fillRecordByData(b)
    },
    checkNetStatus: function(c) {
        var d, b;
        if (undefined !== (d = SYNO.API.Util.GetValByAPI(c, this.ListPPPoEAPI.api, this.ListPPPoEAPI.method))) {
            for (var a = 0; a < d.size(); a++) {
                if ("connected" === d[a].status) {
                    this.pppoe = true
                }
            }
        }
        if (undefined !== (b = SYNO.API.Util.GetValByAPI(c, this.GetNetworkAPI.api, this.GetNetworkAPI.method))) {
            if (!b.gateway || !b.gateway_info || !b.gateway_info.ip || !b.gateway_info.type || !b.gateway_info.mask) {
                this.loseGateway = true
            } else {
                if (!b.gateway_info.ifname) {
                    this.loseIFName = true
                } else {
                    if (true === b.gateway_info.use_dhcp && false === this.support_pf_on_dhcp) {
                        this.useDHCP = true
                    }
                }
            }
        }
        if (this.pppoe || this.loseGateway || this.loseIFName || this.useDHCP) {
            var e = "";
            this.setEditPermission(false, "pf");
            e = this.getPfErrMsg();
            this.setPfDesc(e)
        }
    },
    getPfErrMsg: function() {
        if (this.pppoe) {
            return _T("routerconf", "routerconf_require_not_pppoe")
        } else {
            if (this.loseGateway) {
                return _T("routerconf", "routerconf_require_gateway")
            } else {
                if (this.useDHCP) {
                    return _T("routerconf", "routerconf_require_static_ip")
                } else {
                    if (this.loseIFName) {
                        return _T("routerconf", "routerconf_require_iface")
                    }
                }
            }
        }
    },
    setPfDesc: function(a) {
        this.records.each(function(b) {
            b.pfDesc = a
        }, this)
    },
    alertChgPortServ: function() {
        var b = [];
        var a = [];
        if (true === this.setPortSuccess && this.rgSetPfServID) {
            this.rgPfChgServID.each(function(d) {
                if (-1 < this.rgSetPfServID.indexOf(d)) {
                    b.push(d)
                }
            }, this)
        }
        b.each(function(d) {
            a.push(this.getDisplayNameByID(d))
        }, this);
        if (0 < a.length) {
            var c = _T("service", "router_port_conflict_remap_alert") + "<br><br>" + _T("router_connection", "pppoe_service_name") + ": " + a.join(", ");
            this.module.appWin.getMsgBox().alert(this.title, c)
        }
        this.rgSetPfServID = [];
        this.setPortSuccess = false
    },
    fillRecordByData: function(c) {
        this.ServPortInfo = [];
        this.fwPortInfo = {};
        this.pfPortInfo = {};
        this.rgPfChgServID = [];
        var a = {};
        for (var b = 0; b < c.result.length; b++) {
            a = c.result[b];
            if (a.api === this.CheckFwRuleAPI.api) {
                a.data.service_policy.each(this.updateFwRec, this)
            }
            if (a.api === this.CheckPfRuleAPI.api) {
                a.data.service_status.each(this.updatePfField, this);
                this.alertChgPortServ()
            }
        }
        this.orgFwPortInfo = this.cloneObj(this.fwPortInfo);
        this.orgPfPortInfo = this.cloneObj(this.pfPortInfo);
        this.updateFwDesc();
        this.updateConnectionStatus();
        this.storeLoadRecords();
        this.setEditPermission(true);
        this.module.appWin.clearStatusBusy()
    },
    cloneObj: function(b) {
        var a = {};
        if (b === null || typeof(b) !== "object") {
            return b
        }
        return Ext.apply(a, b)
    },
    updateConnectionStatus: function() {
        this.records.each(function(a) {
            a.connect = {};
            a.connect.testable = false;
            if (true !== a.enable) {
                a.connect.status = "disable"
            } else {
                if ("unknown" === a.firewall) {
                    a.connect.status = "unknown"
                } else {
                    if (false === a.firewall) {
                        a.connect.status = "block_by_firewall"
                    } else {
                        if ("unknown" === a.port_forward) {
                            a.connect.status = "lan_only"
                        } else {
                            if ("not_support" === a.port_forward) {
                                a.connect.status = "lan_only"
                            } else {
                                a.connect.status = "ntest";
                                a.connect.testable = true
                            }
                        }
                    }
                }
            }
        }, this)
    },
    updateFwRec: function(a) {
        this.records.each(function(b) {
            if (b.service_id === a.service_id) {
                switch (a.status) {
                    case "allow":
                        b.firewall = true;
                        break;
                    case "deny":
                        b.firewall = false;
                        break;
                    case "partial":
                        b.firewall = "gray";
                        break;
                    default:
                        b.firewall = "unknown"
                }
                b.fwInfo = a.interface_info
            }
        }, this);
        if (undefined !== a.interface_info) {
            a.interface_info.each(function(b) {
                this.updateFwPortInfo(b.port_info)
            }, this);
            this.setServPortID(a.service_id, a.interface_info[0].port_info)
        }
    },
    updateFwPortInfo: function(a) {
        a.each(function(b) {
            if (false !== this.fwPortInfo[b.port_id]) {
                this.fwPortInfo[b.port_id] = ("allow" === b.status) ? true : false
            }
        }, this)
    },
    setServPortID: function(c, a) {
        var b = [];
        a.each(function(d) {
            b.push(d.port_id)
        }, this);
        this.ServPortInfo[c] = b
    },
    updateFwDesc: function() {
        this.records.each(function(a) {
            a.fwDesc = "";
            if (undefined !== a.fwInfo) {
                a.fwInfo.each(function(d) {
                    var c = d.adapter;
                    var b = d.status;
                    a.fwDesc += SYNO.SDS.Utils.Network.idToString.apply(this, [c, this.getIFTypeByName(c)]) + ": " + this.getFirewallStatus(b) + "<br>"
                }, this)
            }
        }, this)
    },
    updatePfInfo: function(e, b, c) {
        var d = this.getStore().getAt(e);
        var a = d.data.service_id;
        if (undefined !== c) {
            this.setPortEnableByID(a, b, this.pfPortInfo);
            this.checkStatus(a, "port_forward", b)
        }
    },
    updateFwInfo: function(f, c, d) {
        var e = this.getStore().getAt(f);
        var b = e.data.fwInfo;
        var a = e.data.service_id;
        e.data.fwDesc = "";
        b.each(function(g) {
            g.status = (c) ? "allow" : "deny";
            e.data.fwDesc += SYNO.SDS.Utils.Network.idToString.apply(this, [g.adapter, this.getIFTypeByName(g.adapter)]) + ": " + this.getFirewallStatus(g.status) + "<br>"
        }, this);
        if (undefined !== d) {
            this.setPortEnableByID(a, c, this.fwPortInfo);
            this.checkStatus(a, "firewall", c)
        }
    },
    setPortEnableByID: function(a, b, d) {
        var e = this.getServPort(a);
        for (var c = 0; c < e.length; c++) {
            d[e[c]] = b
        }
    },
    isUseAdminPort: function(a) {
        var c, b;
        c = this.getServPort(a);
        for (b = 0; b < c.length; b++) {
            if ("dms" === c[b] || "dms_https" === c[b]) {
                return true
            }
        }
        return false
    },
    checkStatus: function(g, h, f) {
        var e, a, b, d;
        var j = this.getStore();
        for (d = 0; d < j.getTotalCount(); d++) {
            var c = j.getAt(d).data;
            if (g === c.service_id) {
                continue
            }
            b = this.getServPort(g);
            e = this.getServPort(c.service_id);
            if (undefined === e || undefined === b) {
                continue
            }
            if (false === this.checkOverLap(b, e)) {
                continue
            }
            a = this.checkIfAllow(e, (h == "firewall") ? this.fwPortInfo : this.pfPortInfo);
            if (a === c[h]) {
                continue
            }
            if (h == "firewall") {
                if ("gray" === c.firewall && (false === f)) {
                    this.fwColumn.onCellClick(this, d);
                    this.fwColumn.onCellClick(this, d)
                } else {
                    this.fwColumn.onCellClick(this, d)
                }
            } else {
                this.pfColumn.onCellClick(this, d)
            }
        }
    },
    checkOverLap: function(e, d) {
        var a = false;
        for (var c = 0; c < e.length; c++) {
            for (var b = 0; b < d.length; b++) {
                if (e[c] === d[b]) {
                    a = true
                }
            }
        }
        return a
    },
    findRowNum: function(d) {
        var a = this.getStore();
        for (var b = 0; b < a.getTotalCount(); b++) {
            var c = a.getAt(b);
            if (c.data.service_id === d) {
                return b
            }
        }
        return
    },
    checkIfAllow: function(c, a) {
        var b = true;
        c.each(function(d) {
            if (false === a[d]) {
                b = false
            }
        }, this);
        return b
    },
    getServPort: function(a) {
        return this.ServPortInfo[a]
    },
    getIFTypeByName: function(a) {
        var b;
        this.IFRecords.each(function(c) {
            if (c.value === a) {
                b = c.type
            }
        }, this);
        return b
    },
    getFirewallStatus: function(a) {
        if ("allow" === a) {
            return _T("nfs", "nfs_nonprivileged_port_allow")
        } else {
            if ("deny" === a) {
                return _T("nfs", "nfs_nonprivileged_port_deny")
            } else {
                return _T("service", "service_partial_network_allow")
            }
        }
    },
    updatePfField: function(a) {
        if (a && a.status_detail && true === a.status_detail.has_change_port) {
            this.rgPfChgServID.push(a.service_id)
        }
        this.records.each(function(c) {
            if (c.service_id === a.service_id) {
                switch (a.status) {
                    case "allow":
                        c.port_forward = true;
                        break;
                    case "deny":
                        c.port_forward = false;
                        break;
                    case "unknown":
                        c.port_forward = "unknown";
                        break;
                    default:
                        c.port_forward = "unknown"
                }
            }
        }, this);
        for (var b in a.port_info) {
            if (a.port_info.hasOwnProperty(b)) {
                this.pfPortInfo[b] = ("allow" === a.port_info[b]) ? true : false
            }
        }
    },
    storeLoadRecords: function() {
        this.store.loadData(this.records);
        this.store.sort([{
            field: "order_num",
            direction: "ASC"
        }])
    },
    onSaveClick: function() {
        this.onSave()
    },
    onSave: function() {
        var m = [],
            k = [],
            g = [],
            b = [],
            a = [],
            e = [];
        var l = [],
            c = [];
        var f = 0;
        var d = this.getStore().getModifiedRecords();
        var j = "";
        for (f = 0; f < d.length; f++) {
            var h = d[f].getChanges();
            if (undefined !== h.enable && ("lan_service" === d[f].get("service_type") || "internet_service" === d[f].get("service_type"))) {
                m.push({
                    service_id: d[f].get("service_id"),
                    action: d[f].get("enable") ? "start" : "stop"
                })
            }
            if (undefined !== h.enable && "packages" === d[f].get("service_type")) {
                if (!this.support_package_array) {
                    k.push({
                        id: d[f].get("service_id"),
                        action: d[f].get("enable") ? "start" : "stop"
                    })
                } else {
                    if (true === d[f].get("enable")) {
                        l.push(d[f].get("service_id"))
                    } else {
                        c.push(d[f].get("service_id"))
                    }
                }
            }
            if (undefined !== h.firewall) {
                g.push({
                    service_id: d[f].get("service_id"),
                    allow: d[f].get("firewall")
                })
            }
            if (undefined !== h.port_forward) {
                if (true === h.port_forward) {
                    a.push(d[f].get("service_id"));
                    this.rgSetPfServID.push(d[f].get("service_id"))
                } else {
                    b.push(d[f].get("service_id"))
                }
            }
        }
        if (0 !== l.length) {
            k.push({
                id: l,
                action: "start"
            })
        }
        if (0 !== c.length) {
            k.push({
                id: c,
                action: "stop"
            })
        }
        this.pushServActAjax(e, m);
        this.pushPkgActAjax(e, k);
        this.pushFwAjax(e, g);
        this.pushPfAjax(e, a, b);
        if (0 < a.length || 0 < b.length) {
            j = "1. " + _T("routerconf", "routerconf_overwrite_warning") + "<br/>2. ";
            j += String.format(_T("routerconf", "routerconf_wan_warning"), this._D("product")) + "<br/>3. ";
            j += _T("routerconf", "routerconf_logout_warning");
            this.module.appWin.getMsgBox().show({
                title: _T("common", "note"),
                msg: j,
                buttons: Ext.MessageBox.OKCANCEL,
                fn: function(i) {
                    if ("ok" === i) {
                        this.sendSetAjax(e)
                    }
                },
                scope: this,
                icon: Ext.MessageBox.QUESTION,
                minWidth: 300
            }, this)
        } else {
            this.sendSetAjax(e)
        }
    },
    pushServActAjax: function(a, b) {
        if (0 >= b.length) {
            return
        }
        a.push({
            api: "SYNO.Core.Service",
            method: "control",
            version: 1,
            params: {
                service: b
            },
            scope: this
        })
    },
    pushPkgActAjax: function(b, c) {
        if (0 >= c.length) {
            return
        }
        for (var a = 0; a < c.length; a++) {
            b.push({
                api: "SYNO.Core.Package.Control",
                method: c[a].action,
                version: 1,
                params: {
                    id: c[a].id
                }
            })
        }
    },
    pushFwAjax: function(b, a) {
        if (0 >= a.length) {
            return
        }
        b.push({
            api: "SYNO.Core.Security.Firewall.Rules.Serv",
            method: "set",
            version: 1,
            params: {
                adapter: this.getFwTargetIF(),
                service_policy: a
            },
            scope: this
        })
    },
    getFwTargetIF: function() {
        var a = [];
        if ("all" !== this.fwTargetIF) {
            a.push(this.fwTargetIF);
            return a
        }
        this.IFRecords.each(function(b) {
            if ("all" !== b.value) {
                a.push(b.value)
            }
        }, this);
        return a
    },
    pushPfAjax: function(b, c, a) {
        if (0 >= c.length && 0 >= a.length) {
            return
        }
        b.push({
            api: "SYNO.Core.PortForwarding.Rules",
            method: "save",
            version: 1,
            params: {
                pf_policy: {
                    add: c,
                    remove: a
                }
            },
            scope: this
        })
    },
    sendSetAjax: function(a) {
        if (0 >= a.length) {
            return
        }
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            params: {},
            scope: this,
            compound: {
                stopwhenerror: true,
                params: a
            },
            callback: this.onSetDone
        })
    },
    onSetDone: function(g, e, d) {
        if (!g || e.has_fail) {
            var b, f;
            f = "";
            if (undefined !== (b = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Service", "control")) && (2505 === b.code)) {
                if (b.errors.stop) {
                    f += _T("service", "service_stop_failed") + ": <br>" + b.errors.stop.join() + "<br>"
                }
                if (b.errors.start) {
                    f += _T("service", "service_start_failed") + ": <br>" + b.errors.start.join()
                }
            } else {
                if ((b = SYNO.API.Util.GetValByAPI(e, "SYNO.Core.Security.Firewall.Rules.Serv", "set")) && (1106 === b.code)) {
                    var c = b.errors.conflict_serv;
                    f = String.format(_T("firewall", "service_fw_conflict_global"), c)
                } else {
                    b = SYNO.API.Util.GetFirstError(e);
                    if (b && b.code) {
                        f = SYNO.API.getErrorString(b.code)
                    } else {
                        f = _T("common", "error_system")
                    }
                }
            }
            this.module.appWin.getMsgBox().alert(this.title, f, this.reLoadOnError, this);
            this.module.appWin.clearStatusBusy();
            return
        }
        var a = this.getAPITaskID(e, "SYNO.Core.PortForwarding.Rules");
        if (a) {
            this.startPfSetTask(a)
        } else {
            this.enumServ()
        }
    },
    reLoadOnError: function() {
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        this.enumServ()
    },
    getAPITaskID: function(d, c) {
        for (var b = 0; b < d.result.length; b++) {
            var a = d.result[b];
            if (c !== a.api) {
                continue
            }
            return (a.data && a.data.task_id) ? a.data.task_id : null
        }
        return null
    },
    startPfSetTask: function(a) {
        this.pfSetTaskId = this.pollReg({
            interval: 1,
            immediate: true,
            scope: this,
            webapi: {
                api: "SYNO.Core.PortForwarding.Rules",
                method: "save_status",
                version: 1,
                params: {
                    task_id: a
                }
            },
            status_callback: this.UpdatePfSetTask
        })
    },
    UpdatePfSetTask: function(e, c, d, b) {
        if (!e || !c) {
            this.pollUnreg(this.pfSetTaskId);
            this.pfSetTaskId = null;
            var a = SYNO.SDS.AdminCenter.PublicAccess.PortForwarding.RuleGrid.prototype.toSaveRuleErrorStringWithData(c.code, c);
            this.module.appWin.getMsgBox().alert(this.title, a, this.reLoadOnError, this);
            this.module.appWin.clearStatusBusy();
            return
        }
        if ("processing" === c.status) {
            return
        }
        this.pollUnreg(this.pfSetTaskId);
        this.pfSetTaskId = null;
        if ("success" !== c.status) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"))
        } else {
            this.setPortSuccess = true
        }
        this.enumServ()
    },
    onResetClick: function() {
        this.storeLoadRecords();
        this.fwPortInfo = this.cloneObj(this.orgFwPortInfo);
        this.pfPortInfo = this.cloneObj(this.orgPfPortInfo)
    },
    onTestClick: function() {
        var a, b;
        a = this.getPfTestServId();
        b = this.setStartTestConnectStatus(a);
        if (0 < b) {
            this.testServPfPort(a)
        }
    },
    setEditPermission: function(a, b) {
        if (undefined === this.columnStatus) {
            this.columnStatus = {}
        }
        if (b) {
            this.columnStatus[b] = a
        } else {
            this.columnStatus.act = a;
            this.columnStatus.pf = (this.allowPortForward()) ? a : false;
            this.columnStatus.fw = a
        }
    },
    allowPortForward: function() {
        if (this.pppoe || this.loseGateway || this.useDHCP || this.loseIFName) {
            return false
        }
        return true
    },
    getEditPermission: function(a) {
        return this.columnStatus[a]
    },
    setStopTestConnectStatus: function() {
        this.store.each(function(a) {
            if (true === a.data.connect.testable) {
                a.data.connect.status = "ntest";
                delete a.data.connect.tcp;
                delete a.data.connect.udp
            }
        }, this);
        this.updateButton();
        this.setEditPermission(true);
        this.getView().refresh()
    },
    setStartTestConnectStatus: function(a) {
        var b = 0;
        this.store.each(function(c) {
            if ((-1 < a.indexOf(c.data.service_id)) && (true === c.data.connect.testable)) {
                c.data.connect.status = "testing";
                delete c.data.connect.tcp;
                delete c.data.connect.udp;
                b = b + 1
            }
        }, this);
        if (0 === b) {
            return 0
        }
        this.disableAllButton();
        this.setEditPermission(false);
        this.getView().refresh();
        return b
    },
    testServPfPort: function(a) {
        this.sendWebAPI({
            api: "SYNO.Core.PortForwarding.Rules.Serv",
            method: "test",
            version: 1,
            params: {
                service_id: a
            },
            callback: this.testServPfPortCB,
            scope: this
        })
    },
    getPfTestServId: function() {
        var b = [],
            a;
        a = this.getSelectionModel().getSelections();
        if (0 < a.length) {
            a.each(function(c) {
                if (true === c.data.connect.testable) {
                    b.push(c.data.service_id)
                }
            }, this)
        } else {
            this.records.each(function(c) {
                if (true === c.connect.testable) {
                    b.push(c.service_id)
                }
            }, this)
        }
        return b
    },
    testServPfPortCB: function(d, c, b) {
        if (!d) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(c.code));
            this.setStopTestConnectStatus();
            return
        }
        var a = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.PortForwarding.Rules.Serv", "test", "task_id");
        if (undefined === a) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "error_system"));
            this.setStopTestConnectStatus();
            return
        }
        this.startPfTestTask(a)
    },
    startPfTestTask: function(a) {
        this.pfTestTaskId = this.pollReg({
            interval: 1,
            immediate: true,
            scope: this,
            webapi: {
                api: "SYNO.Core.PortForwarding.Rules.Serv",
                method: "test_status",
                version: 1,
                params: {
                    task_id: a
                }
            },
            status_callback: this.UpdatePfTestTask
        })
    },
    UpdatePfTestTask: function(d, b, c, a) {
        if (!d || !b) {
            this.pollUnreg(this.pfTestTaskId);
            this.pfTestTaskId = null;
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(b.code));
            this.setStopTestConnectStatus();
            return
        }
        if (b.rules) {
            this.updateConnectStatus(b.rules)
        }
        if ("update" !== b.status && "wait" !== b.status) {
            this.summaryConnectStatus();
            this.pollUnreg(this.pfTestTaskId);
            this.pfTestTaskId = null;
            this.updateButton();
            this.setEditPermission(true)
        }
    },
    updateConnectStatus: function(b) {
        var a;
        for (var c in b) {
            if (b.hasOwnProperty(c)) {
                a = this.parserID(c);
                if (a) {
                    a.status = b[c];
                    this.updateToStore(a)
                }
            }
        }
        this.getView().refresh()
    },
    summaryConnectStatus: function() {
        this.store.each(function(a) {
            if ("testing" === a.data.connect.status) {
                a.data.connect.status = "lan_only"
            }
        }, this);
        this.getView().refresh()
    },
    parserID: function(c) {
        var b = 0,
            a = {};
        b = c.lastIndexOf("tcp");
        if (0 < b) {
            a.protocol = "tcp";
            a.id = c.substring(0, b - 1);
            return a
        }
        b = c.lastIndexOf("udp");
        if (0 < b) {
            a.protocol = "udp";
            a.id = c.substring(0, b - 1);
            return a
        }
        return
    },
    updateToStore: function(a) {
        this.store.each(function(b) {
            if (b.data.service_id === a.id) {
                b.data.connect[a.protocol] = a.status;
                this.setConnectStatus(b.data.connect)
            }
        }, this)
    },
    setConnectStatus: function(a) {
        if (a.status != "testing") {
            return
        }
        if ("testing" === a.tcp || "testing" === a.udp || "waiting" === a.tcp || "waiting" === a.udp) {
            a.status = "testing"
        } else {
            if ("no" === a.tcp || "no" === a.udp) {
                a.status = "lan_only"
            } else {
                if ("failed" === a.tcp || "failed" === a.udp) {
                    a.status = "lan_only"
                } else {
                    if ("yes" === a.tcp || "yes" === a.udp) {
                        a.status = "internet"
                    } else {
                        a.status = "lan_only"
                    }
                }
            }
        }
    },
    disableAllButton: function() {
        this.enableButton("SaveButton", false);
        this.enableButton("TestButton", false);
        this.getTopToolbar().getComponent("SetCombobox").setDisabled(true);
        this.enableButton("ResetButton", false)
    },
    updateButton: function() {
        this.enableButton("SaveButton", this._S("demo_mode") ? false : this.isDirty());
        this.enableButton("TestButton", this._S("demo_mode") ? false : !this.isDirty());
        this.getTopToolbar().getComponent("SetCombobox").setDisabled(this._S("demo_mode") ? true : this.isDirty());
        this.enableButton("ResetButton", this.isDirty())
    },
    enableButton: function(d, a) {
        var b = this.getButton(d);
        var c;
        c = a ? b.enable() : b.disable()
    },
    getButton: function(a) {
        var b = this.getTopToolbar();
        return b.getComponent(a)
    },
    rejectChanges: function() {
        this.getStore().rejectChanges()
    },
    isDirty: function() {
        return this.getStore().isDirty()
    },
    getSelectIF: function() {
        return this.getTopToolbar().getComponent("SetCombobox").getValue()
    },
    onIFSelect: function() {
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        var a = this.getSelectIF();
        this.sendWebAPI({
            api: "SYNO.Core.Service.Conf",
            method: "set",
            version: 1,
            scope: this,
            params: {
                service_fw_target_interface: a
            },
            callback: this.onSaveDone
        })
    },
    onSaveDone: function(c, b, a) {
        this.module.appWin.clearStatusBusy();
        if (c) {
            this.module.appWin.setStatusOK();
            this.reloadAllInfo();
            return
        } else {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"))
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.ServiceList.Store", {
    extend: "Ext.data.GroupingStore",
    constructor: function(c) {
        var a = new Ext.data.JsonReader({
            fields: ["service_type", "display_name", "service_id", "enable", "firewall", "port_forward", "status", "pf_rules", "connect", "fwDesc", "fwInfo", "serv_desc", "allow_control", "pfDesc", "order_num"]
        });
        var b = Ext.apply({
            reader: a,
            groupField: "service_type",
            autoDestroy: true,
            listeners: {
                load: this.onAfterLoad,
                scope: this
            }
        }, c);
        this.callParent([b])
    },
    onAfterLoad: function() {
        this.commitChanges()
    },
    isDirty: function() {
        return this.getModifiedRecords().length > 0
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.ServiceList.IFStore", {
    extend: "Ext.data.JsonStore",
    constructor: function(b) {
        var a = Ext.apply({
            fields: ["value", "display"]
        }, b);
        this.callParent([a])
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.ServiceList.Action.EnableColumn", {
    extend: "SYNO.ux.EnableColumn",
    isIgnore: function(b, a) {
        return (false === a.data.allow_control) ? true : false
    },
    onCellClick: function(a, j, b) {
        if (!a.getEditPermission("act")) {
            return
        }
        var h = a.getStore();
        var c, e, d = 0;
        var f = [],
            g = [];
        if (true === h.getAt(j).get("enable")) {
            for (d = 0; d < h.data.length; d++) {
                c = h.getAt(d).json.dependent_packages;
                e = h.getAt(d).json.start_dependent_services;
                if (null !== c && undefined !== c) {
                    if (c.hasOwnProperty(h.data.items[j].data.service_id) && true === h.getAt(d).get("enable")) {
                        f.push(d);
                        g.push(h.data.items[d].data.display_name)
                    }
                }
                if (null !== e && undefined !== e && 0 < e.length) {
                    if (-1 !== e.indexOf(this.getServiceNameById(h.data.items[j].data.service_id)) && true === h.getAt(d).get("enable")) {
                        f.push(d);
                        g.push(h.data.items[d].data.display_name)
                    }
                }
            }
        } else {
            c = h.getAt(j).json.dependent_packages;
            e = h.getAt(j).json.start_dependent_services;
            if (null !== c && undefined !== c) {
                for (d = 0; d < a.records.length; d++) {
                    if (c.hasOwnProperty(h.data.items[d].data.service_id) && false === h.getAt(d).get("enable")) {
                        f.push(d);
                        g.push(h.data.items[d].data.display_name)
                    }
                }
            }
            if (null !== e && undefined !== e && 0 < e.length) {
                for (d = 0; d < a.records.length; d++) {
                    if (-1 !== e.indexOf(this.getServiceNameById(h.data.items[d].data.service_id)) && false === h.getAt(d).get("enable")) {
                        f.push(d);
                        g.push(h.data.items[d].data.display_name)
                    }
                }
            }
        }
        if (0 < f.length) {
            a.module.appWin.getMsgBox().confirm(a.title, (true === h.getAt(j).get("enable")) ? String.format(_T("service", "service_app_uhconflict"), g.join(", ")) : String.format(_T("pkgmgr", "require_service") + _T("common", "ask_cont"), g.join(", ")), function(i) {
                if ("yes" === i) {
                    for (d = 0; d < f.length; d++) {
                        this.onCellClick(a, f[d], b)
                    }
                } else {
                    this.onCellClick(a, j, b)
                }
            }, this)
        }
        return this.callParent(arguments)
    },
    renderer: function(c, b, a) {
        if (false === a.data.allow_control) {
            return "-"
        }
        return String.format('<div class="syno-ux-grid-enable-column-{0}" ext:qtip="{1}">&nbsp;</div>', ("gray" === c ? "grayed" : c ? "checked" : "unchecked"), a.data.serv_desc)
    },
    getServiceNameById: function(a) {
        var b;
        switch (a) {
            case "webstation":
                b = "apache-web";
                break;
            case "ssh-shell":
                b = "ssh";
                break;
            default:
                b = "undefined"
        }
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.ServiceList.Firewall.EnableColumn", {
    extend: "SYNO.ux.EnableColumn",
    isIgnore: function(b, a) {
        return ("unknown" == a.data.firewall) ? true : false
    },
    onCellClick: function(b, e, c) {
        var d = b.getStore().getAt(e);
        var a = d.data.firewall;
        if (!b.getEditPermission("fw")) {
            return
        }
        if ((true === a) && b.isUseAdminPort(d.data.service_id)) {
            b.module.appWin.getMsgBox().alert(b.title, _T("firewall", "firewall_rule_disable_fail"));
            return
        }
        if ("unknown" === a) {
            return
        }
        b.updateFwInfo(e, true !== a, c);
        return this.callParent(arguments)
    },
    renderer: function(c, b, a) {
        if ("unknown" === c) {
            return "-"
        }
        return String.format('<div class="syno-ux-grid-enable-column-{0}" ext:qtip="{1}">&nbsp;</div>', ("gray" === c ? "grayed" : c ? "checked" : "unchecked"), a.data.fwDesc)
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.ServiceList.PortForward.EnableColumn", {
    extend: "SYNO.ux.EnableColumn",
    isIgnore: function(b, a) {
        return ("unknown" == a.data.port_forward) ? true : false
    },
    onCellClick: function(b, e, c) {
        var d = b.getStore().getAt(e);
        var a = d.data.port_forward;
        if (!b.getEditPermission("pf")) {
            return
        }
        if ("unknown" === a) {
            return
        }
        b.updatePfInfo(e, true !== a, c);
        return this.callParent(arguments)
    },
    renderer: function(c, b, a) {
        if ("unknown" === c) {
            return "-"
        }
        return String.format('<div class="syno-ux-grid-enable-column-{0}" ext:qtip="{1}">&nbsp;</div>', ("gray" === c ? "grayed" : c ? "checked" : "unchecked"), a.data.pfDesc)
    }
});
SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ServiceType = [
    ["samba", "lan_service"],
    ["atalk", "lan_service"],
    ["nfsd", "lan_service"],
    ["ssh-shell", "lan_service"],
    ["telnetd", "lan_service"],
    ["bonjour", "lan_service"],
    ["iscsitrg", "lan_service"],
    ["ftpd", "internet_service"],
    ["ftpd-ssl", "internet_service"],
    ["sftp", "internet_service"],
    ["webdav-httpd-pure", "internet_service"],
    ["webdav-httpd-ssl", "internet_service"],
    ["webstation", "internet_service"],
    ["rsyncd", "internet_service"],
    ["img_backupd", "internet_service"],
    ["ntpd-server", "internet_service"]
];
SYNO.SDS.AdminCenter.InfoCenter.ServiceList.RunningStatus = [
    ["green-status", "running", "common", "enabled"],
    ["green-status", "enable", "common", "enabled"],
    ["disable-font", "disable", "common", "disabled"],
    ["disable-font", "stop", "common", "disabled"],
    ["disable-font", "pause", "thumb_conv_progress", "conv_status_paused"],
    ["red-status", "error", "pkgmgr", "pkgmgr_pkg_broken"]
];
SYNO.SDS.AdminCenter.InfoCenter.ServiceList.ConnectStatus = [
    ["green-status", "internet", "service", "service_internet_available"],
    ["green-status", "lan_only", "service", "service_lan_available"],
    ["green-status", "quickconnect", "service", "service_lan_available"],
    ["disable-font", "block_by_firewall", "service", "service_block_by_firewall"],
    ["disable-font", "testing", "service", "service_testing"],
    ["disable-font", "ntest", "routerconf", "routerconf_status_ntest"]
];
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.DiagnosisTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.support_register_ip = parseInt(a.module.appWin._S("version"), 10) >= 5498 ? true : false;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            title: _T("user_data_collection", "title"),
            autoScroll: true,
            webapi: this.getWebApi(),
            items: [{
                xtype: "syno_displayfield",
                value: _T("user_data_collection", "desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable",
                itemId: "enable",
                boxLabel: _T("user_data_collection", "join"),
                scope: this
            }]
        };
        if (this.support_register_ip) {
            b.items.push({
                xtype: "syno_checkbox",
                name: "register_ip",
                itemId: "register_ip",
                boxLabel: String.format(_T("user_data_collection", "enable_register_ip"), "http://find.synology.com", "find.synology.com"),
                scope: this
            })
        }
        b.items.push({
            xtype: "syno_displayfield",
            value: _T("user_data_collection", "for_more_information")
        });
        Ext.apply(b, a);
        return b
    },
    getAllForms: function() {
        return this.forms
    },
    getAppWin: function() {
        return this.ownerCt.module.appWin
    },
    processParams: function(b, a) {
        if ("get" === b) {
            return a
        } else {
            if ("set" === b) {
                if (this.support_register_ip) {
                    a[0].params.compound[0].enable = (a[0].params.enable ? true : false);
                    a[0].params.compound[1].service = [{
                        action: (a[0].params.register_ip ? "start" : "stop"),
                        service_id: "synoagentregisterd"
                    }];
                    delete a[0].params.register_ip;
                    delete a[0].params.enable
                }
                return a
            } else {
                return a
            }
        }
    },
    processReturnData: function(c, b, a) {
        if (this.support_register_ip && Ext.isDefined(b.result) && Ext.isArray(b.result)) {
            Ext.each(b.result, function(d) {
                if (!Ext.isDefined(d.data) || !Ext.isDefined(d.data.result) || !Ext.isArray(d.data.result)) {
                    return true
                }
                Ext.each(d.data.result, function(e) {
                    if (!Ext.isDefined(e.method)) {
                        return false
                    }
                    if ("get" === e.method && "SYNO.Core.DataCollect" === e.api && Ext.isDefined(e.data.enable)) {
                        d.data.enable = e.data.enable
                    }
                    if ("get" === e.method && "SYNO.Core.Service" === e.api && Ext.isDefined(e.data.service) && Ext.isArray(e.data.service) && Ext.isDefined(e.data.service[0].enable)) {
                        d.data.register_ip = e.data.service[0].enable
                    }
                })
            })
        }
        this.callParent(arguments)
    },
    getWebApi: function() {
        var a;
        if (!this.support_register_ip) {
            a = {
                api: "SYNO.Core.DataCollect",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            };
            return a
        }
        a = {
            api: "SYNO.Entry.Request",
            methods: {
                get: "request",
                set: "request"
            },
            version: 1,
            params: {
                get: {
                    stopwhenerror: false,
                    compound: [{
                        api: "SYNO.Core.DataCollect",
                        version: 1,
                        method: "get"
                    }, {
                        api: "SYNO.Core.Service",
                        version: 1,
                        method: "get",
                        service_id: "synoagentregisterd"
                    }]
                },
                set: {
                    stopwhenerror: false,
                    compound: [{
                        api: "SYNO.Core.DataCollect",
                        version: 1,
                        method: "set"
                    }, {
                        api: "SYNO.Core.Service",
                        version: 1,
                        method: "control"
                    }]
                }
            }
        };
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.callParent(arguments);
        this.panel = new SYNO.SDS.AdminCenter.InfoCenter.TabPanel({
            module: this
        })
    },
    getPanel: function() {
        return this.panel
    },
    getHelpParam: function() {
        return "AdminCenter/system_info_center.html"
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    confirmCallback: function(a) {
        if ("no" === a) {} else {
            this.panel.ServiceListTab.onLeave()
        }
    },
    deactivate: function() {
        if (this.panel.ServiceListTab.isDirty()) {
            return false
        }
        this.panel.ServiceListTab.onLeave();
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.InfoCenter.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.ServiceListTab = new SYNO.SDS.AdminCenter.InfoCenter.ServiceListTab({
            module: a.module
        });
        var b = Ext.apply({
            activeTab: 0,
            module: a.module,
            items: [new SYNO.SDS.AdminCenter.InfoCenter.OverviewTab({
                module: a.module
            }), new SYNO.SDS.AdminCenter.InfoCenter.NetworkTab({
                module: a.module
            }), new SYNO.SDS.AdminCenter.InfoCenter.StorageTab({
                module: a.module,
                itemId: "storage"
            }), this.ServiceListTab, new SYNO.SDS.AdminCenter.InfoCenter.DiagnosisTab({
                module: a.module
            })]
        }, a);
        this.callParent([b])
    }
});
Ext.define("SYNO.SDS.AdminCenter.LoginStyle.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent([a]);
        this.appWin = a.appWin;
        this.createPanel()
    },
    createPanel: function() {
        this.panel = new SYNO.SDS.AdminCenter.LoginStyle.Form({
            appWin: this.appWin,
            module: this
        })
    },
    getPanel: function() {
        return this.panel
    },
    getHelpParam: function() {
        return "AdminCenter/system_login_style.html"
    },
    activate: function() {
        this.panel.loadForm()
    },
    deactivate: function() {
        return !this.panel.isDirty()
    }
});
Ext.define("SYNO.SDS.AdminCenter.LoginStyle.Form", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.owner = a.appWin;
        this.callParent([this.fillConfig(a)]);
        this.receiveMsgFn = this.receiveMessage.createDelegate(this)
    },
    fillConfig: function(a) {
        var b = {
            title: "Theme",
            cls: "syno-admincenter-loginstyle-panel",
            fileUpload: true,
            useDefaultBtn: false,
            imageWebapi: {
                api: "SYNO.Core.Theme.Image",
                method: "get",
                version: 1,
                params: {}
            },
            webapi: {
                api: "SYNO.Core.Theme.Login",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            buttons: this.getButtonsCfg(),
            items: [{
                xtype: "syno_fieldset",
                title: (a.innertitle !== undefined) ? a.innertitle : _T("dsmoption", "login_style_label"),
                items: [this.getPageTitleField(), this.getWelcomeTitleField(), this.getWelcomeMsgField(), this.getWeatherInfoField(), this.getTplField(), this.getBackgroundField(), this.getLogoField()]
            }],
            listeners: {
                scope: this,
                single: true,
                buffer: 100,
                afterrender: this.onPageAfterRender
            }
        };
        Ext.apply(b, a);
        return b
    },
    onPageAfterRender: function(a) {
        this.logoImage = this.getEl().child(".login-logo-field").child(".thumb-image");
        this.backgroundImage = this.getEl().child(".login-background-field").child(".thumb-image");
        this.logoAdd = this.getEl().child(".login-logo-field").child(".add-image");
        this.backgroundAdd = this.getEl().child(".login-background-field").child(".add-image");
        this.logoPosition = this.form.findField("logo_position");
        this.backgroundPosition = this.form.findField("background_position");
        this.backgroundColor = this.form.findField("background_color");
        this.logoImage.on("click", this.onLogoClick, this);
        this.backgroundImage.on("click", this.onBackgroundClick, this);
        this.logoAdd.on("click", this.onLogoClick, this);
        this.backgroundAdd.on("click", this.onBackgroundClick, this);
        this.enableBgCustomize = false;
        this.enableLogoCustomize = false
    },
    initForm: function(a) {
        this.originalData = a;
        Ext.apply(this.imageWebapi.params, {
            type: "login_background"
        });
        this.imageBaseUrl = this.getBaseURL(this.imageWebapi);
        this.enableBgCustomize = a.enable_background_customize;
        this.enableLogoCustomize = a.enable_logo_customize;
        this.logoSeq = a.logo_seq;
        this.bgSeq = a.background_seq;
        this.loginStyle = "";
        this.logoType = "";
        this.logoPath = "";
        this.bgType = "";
        this.bgPath = "";
        this.selectStyle(a.login_style);
        this.only_bgColor = a.only_background_color;
        if (this.enableBgCustomize) {
            Ext.apply(this.imageWebapi.params, {
                type: "login_background",
                seq: this.bgSeq
            });
            this.setBackgroundImage(this.enableBgCustomize, this.getBaseURL(this.imageWebapi))
        } else {
            if (this.only_bgColor) {
                this.setBackgroundImage(this.enableBgCustomize, "")
            }
        }
        Ext.apply(this.imageWebapi.params, {
            type: "login_logo",
            seq: this.logoSeq
        });
        this.setLogoImage(this.enableLogoCustomize, this.getBaseURL(this.imageWebapi))
    },
    processReturnData: function(d, c, b) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        this.hasFail = false;
        this.callParent(arguments);
        c.result.each(function(e) {
            if (!e.success) {
                this.errorHandling(e)
            }
            if (SYNO.ux.Utils.checkApiConsistency(a, e)) {
                this.initForm(e.data)
            }
        }, this)
    },
    onApiFailure: function(c, b, a) {
        this.callParent(arguments);
        this.setStatusError({
            text: _T("common", "commfail"),
            clear: true
        });
        this.hasFail = true
    },
    errorHandling: function(c) {
        var b = c.error,
            a = _T("error", "error_error_system");
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.setStatusError({
            text: a,
            clear: true
        })
    },
    onThumbContainerClick: function() {
        return false
    },
    onThumbSelect: function(a, b) {
        var e = a.getRecord(b[0]),
            c = e.get("name"),
            d;
        if (!this.enableBgCustomize) {
            d = (c == "light") ? "thumbnail_01.jpg" : "thumbnail_02.jpg";
            this.setBackgroundImage(this.enableBgCustomize, "resources/images/default_login_background/" + d, true)
        }
        this.loginStyle = c
    },
    selectStyle: function(b) {
        var a;
        a = this.tplDataView.store.find("name", b);
        this.tplDataView.select(a)
    },
    setLogoImage: function(a, b) {
        if (true === a) {
            this.logoImage.dom.src = b;
            this.logoImage.show();
            this.logoAdd.hide();
            this.logoPosition.setDisabled(false)
        } else {
            this.logoImage.hide();
            this.logoAdd.show();
            this.logoPosition.setDisabled(true)
        }
        this.enableLogoCustomize = a
    },
    setBackgroundImage: function(a, b, c) {
        if (true === a || c) {
            this.backgroundImage.dom.src = b;
            this.backgroundImage.show();
            this.backgroundAdd.hide();
            if (c) {
                this.backgroundPosition.setDisabled(true);
                this.backgroundColor.setDisabled(true)
            } else {
                this.backgroundPosition.setDisabled(false);
                this.backgroundColor.setDisabled(false)
            }
            this.only_bgColor = false
        } else {
            this.backgroundImage.hide();
            this.backgroundAdd.show();
            this.backgroundPosition.setDisabled(true);
            this.backgroundColor.setDisabled(false);
            this.only_bgColor = true
        }
        this.enableBgCustomize = a
    },
    onLogoClick: function() {
        if (this.logoSelector) {
            this.logoSelector.show()
        } else {
            this.logoSelector = new SYNO.SDS.Utils.ImageSelector({
                owner: this.appWin
            }, "login", "logo");
            this.logoSelector.mon(this.logoSelector, "choose", this.onLogoSelectDone, this);
            this.logoSelector.open()
        }
    },
    onBackgroundClick: function() {
        if (this.bgSelector) {
            this.bgSelector.show()
        } else {
            this.bgSelector = new SYNO.SDS.Utils.ImageSelector({
                owner: this.appWin
            }, "login", "background");
            this.bgSelector.mon(this.bgSelector, "choose", this.onBackgroundSelectDone, this);
            this.bgSelector.open()
        }
    },
    onLogoSelectDone: function(a) {
        if (!a) {
            return
        }
        this.setLogoImage(true, a.get("url"));
        this.logoType = a.get("apply_type");
        this.logoPath = ("fromDS" == this.logoType) ? a.get("path") : a.get("path").split("/").pop();
        this.logoSelector.hide()
    },
    onBackgroundSelectDone: function(a) {
        if (!a) {
            return
        }
        this.setBackgroundImage(true, a.get("url"));
        this.bgType = a.get("apply_type");
        this.bgPath = ("fromDS" == this.bgType) ? a.get("path") : a.get("path").split("/").pop();
        this.bgSelector.hide()
    },
    processParams: function(c, b) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.set,
            version: this.webapi.version
        };
        if ("set" == c) {
            b.each(function(d) {
                if (SYNO.ux.Utils.checkApiConsistency(a, d)) {
                    d.params.enable_logo_customize = this.enableLogoCustomize;
                    if (this.enableLogoCustomize && this.logoType && this.logoPath) {
                        d.params.logo_type = this.logoType;
                        d.params.logo_path = this.logoPath
                    }
                    d.params.enable_background_customize = this.enableBgCustomize;
                    if (this.enableBgCustomize && this.bgType && this.bgPath) {
                        d.params.background_type = this.bgType;
                        d.params.background_path = this.bgPath
                    }
                    d.params.login_style = this.loginStyle;
                    d.params.only_background_color = this.only_bgColor
                }
            }, this)
        }
        return b
    },
    onBeforeAction: function(a, c) {
        if ("get" === c) {
            return true
        }
        if (this.checkFormDirty && (!this.isDirty())) {
            var b = _T("error", "nochange_subject");
            this.setStatusError({
                text: b,
                clear: true
            });
            return false
        }
        if (!a.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        return true
    },
    discardSetParams: function() {
        this.cancelHandler()
    },
    applySetParams: Ext.emptyFn,
    isDirty: function() {
        if (!this.originalData) {
            return false
        }
        if (this.hasFail) {
            return false
        }
        if (this.getForm().isDirty()) {
            return true
        }
        if (this.loginStyle !== this.originalData.login_style) {
            return true
        }
        if (this.originalData.enable_logo_customize !== this.enableLogoCustomize || this.originalData.only_background_color !== this.only_bgColor || this.originalData.enable_background_customize !== this.enableBgCustomize) {
            return true
        }
        if (this.enableLogoCustomize) {
            if (this.logoType || this.logoPath) {
                return true
            }
        }
        if (this.enableBgCustomize) {
            if (this.bgType || this.bgPath) {
                return true
            }
        }
        return false
    },
    onPreview: function() {
        var b = this.getPreviewUrl();
        var a = Ext.urlEncode({
            preview: true,
            preview_modified: Ext.isIE9m ? false : this.isDirty(),
            tpl: this.loginStyle,
            logo_enable: this.enableLogoCustomize ? "yes" : "no",
            logo_path: this.getFullPath(this.logoType, this.logoPath),
            logo_ext: this.logoPath.split(".").pop(),
            logo_type: this.logoType,
            logo_position: this.logoPosition.getValue(),
            background_enable: this.enableBgCustomize ? "yes" : "no",
            background_path: this.getFullPath(this.bgType, this.bgPath),
            background_ext: this.bgPath.split(".").pop(),
            background_type: this.bgType,
            background_position: this.backgroundPosition.getValue(),
            background_color: this.backgroundColor.getValue(),
            only_bgcolor: this.only_bgColor ? "yes" : "no",
            login_title: this.getForm().findField("login_title").getValue(),
            weather_info: this.getForm().findField("weather_info").getValue(),
            app_name: this.appName || "",
            login_welcome_title: this.getForm().findField("login_welcome_title").getValue(),
            login_welcome_msg: this.getForm().findField("login_welcome_msg").getValue()
        });
        if (b) {
            b = Ext.urlAppend(b + "/webman/index.cgi", a)
        } else {
            b = Ext.urlAppend("index.cgi", a)
        }
        this.addMessageEvent();
        this.previewWindow = window.open(b, "preview_login_style")
    },
    getPreviewUrl: function() {
        var b, a;
        b = this.getDsmHost();
        a = this.getDsmHttpPort();
        if (b && a) {
            b = "http://" + b + ":" + a
        }
        return b
    },
    receiveMessage: function(b) {
        var a = window.location.origin;
        if (!a) {
            a = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "")
        }
        if (!b || !b.data || b.data.origin !== a) {
            return
        }
        if ("save" == b.data.action) {
            this.applyHandler()
        }
        this.removeMessageEvent()
    },
    addMessageEvent: function() {
        if (!Ext.isIE9m && window.addEventListener) {
            window.addEventListener("message", this.receiveMsgFn)
        }
    },
    removeMessageEvent: function() {
        if (window.removeEventListener) {
            window.removeEventListener("message", this.receiveMsgFn)
        }
    },
    getFullPath: function(a, b) {
        if ("history" == a) {
            return "/usr/syno/etc/login_image/" + b
        }
        if ("default" == a) {
            return "/usr/syno/synoman/webman/resources/images/default_login_background/" + b
        }
        return b
    },
    cancelHandler: function() {
        this.callParent(arguments);
        this.initForm(this.originalData)
    },
    getPageTitleField: function() {
        return {
            xtype: "syno_textfield",
            fieldLabel: _T("dsmsetting", "login_title"),
            name: "login_title",
            maxlength: 127,
            width: 336,
            allowBlank: true
        }
    },
    getWelcomeTitleField: function() {
        return {
            xtype: "syno_textfield",
            fieldLabel: _T("dsmsetting", "welcome_title"),
            name: "login_welcome_title",
            maxlength: 127,
            width: 336,
            allowBlank: true,
            value: (_D("is_business_model") === "yes") ? _T("login", "default_welcome_title_business") : _T("login", "default_welcome_title")
        }
    },
    getWelcomeMsgField: function() {
        return {
            xtype: "syno_textfield",
            fieldLabel: _T("dsmsetting", "welcome_msg"),
            name: "login_welcome_msg",
            maxlength: 127,
            width: 336,
            allowBlank: true,
            value: (_D("is_business_model") === "yes") ? _T("login", "default_welcome_msg_business") : _T("login", "default_welcome_msg")
        }
    },
    getTplField: function() {
        var a = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["name"],
            data: [
                ["light"],
                ["dark"]
            ]
        });
        this.tplDataView = new Ext.DataView({
            fieldLabel: _T("dsmoption", "login_template"),
            overClass: "x-view-over",
            singleSelect: true,
            itemSelector: "div.template-thumb",
            cls: "theme-tpl-dataview",
            store: a,
            tpl: new Ext.XTemplate('<tpl for=".">', '<div class="template-thumb template-{name}"></div>', "</tpl>", '<div class="x-clear"></div>'),
            listeners: {
                scope: this,
                containerclick: this.onThumbContainerClick,
                selectionchange: this.onThumbSelect
            }
        });
        return this.tplDataView
    },
    getWeatherInfoField: function() {
        var a = new Ext.data.ArrayStore({
            fields: ["text", "value"],
            data: [
                [_T("common", "show"), "display"],
                [_T("common", "hide"), "hide"]
            ]
        });
        return {
            name: "weather_info",
            xtype: "syno_combobox",
            fieldLabel: _T("common", "time_info"),
            forceSelection: true,
            allowBlank: false,
            displayField: "text",
            valueField: "value",
            width: 160,
            store: a
        }
    },
    getBackgroundField: function() {
        var a = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: [
                [_T("dsmoption", "login_background_position_center"), "center"],
                [_T("dsmoption", "login_background_position_fill"), "fill"],
                [_T("dsmoption", "login_background_position_fit"), "fit"],
                [_T("dsmoption", "login_background_position_stretch"), "stretch"],
                [_T("dsmoption", "login_background_position_tile"), "tile"]
            ]
        });
        return {
            fieldLabel: _T("dsmoption", "login_background"),
            layout: "column",
            border: false,
            cls: "login-background-field",
            items: [{
                xtype: "container",
                cls: "thumb-container",
                overCls: "thumb-container-over",
                items: [{
                    itemId: "background_addImage",
                    xtype: "container",
                    cls: "add-image",
                    overCls: "add-image-over",
                    items: [{
                        xtype: "container",
                        cls: "add-image-icon"
                    }]
                }, {
                    itemId: "background_thumbnail",
                    xtype: "box",
                    cls: "thumb-image",
                    overCls: "thumb-image-over",
                    autoEl: {
                        tag: "img"
                    }
                }]
            }, {
                xtype: "container",
                cls: "option-container",
                items: [{
                    name: "background_position",
                    xtype: "syno_combobox",
                    hideLabel: true,
                    forceSelection: true,
                    allowBlank: false,
                    displayField: "display",
                    valueField: "value",
                    width: 160,
                    store: a
                }, {
                    name: "background_color",
                    xtype: "syno_colorfield",
                    width: 160,
                    hideLabel: true,
                    value: "#FFFFFF"
                }, {
                    xtype: "syno_button",
                    cls: "thumb-remove-btn",
                    text: _T("dsmoption", "login_remove"),
                    handler: this.setBackgroundImage.createDelegate(this, [false, ""])
                }]
            }]
        }
    },
    getLogoField: function() {
        var a = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: [
                [_T("personal_settings", "align_left"), "left"],
                [_T("personal_settings", "align_center"), "center"],
                [_T("personal_settings", "align_right"), "right"]
            ]
        });
        return {
            fieldLabel: _T("dsmoption", "login_logo"),
            layout: "column",
            border: false,
            cls: "login-logo-field",
            items: [{
                xtype: "container",
                cls: "thumb-container",
                overCls: "thumb-container-over",
                items: [{
                    itemId: "logo_addImage",
                    xtype: "container",
                    cls: "add-image",
                    overCls: "add-image-over",
                    items: [{
                        xtype: "container",
                        cls: "add-image-icon"
                    }]
                }, {
                    itemId: "logo_thumbnail",
                    xtype: "box",
                    cls: "thumb-image",
                    overCls: "thumb-image-over",
                    autoEl: {
                        tag: "img"
                    }
                }]
            }, {
                xtype: "container",
                cls: "option-container",
                items: [{
                    name: "logo_position",
                    xtype: "syno_combobox",
                    hideLabel: true,
                    forceSelection: true,
                    allowBlank: false,
                    displayField: "display",
                    valueField: "value",
                    width: 160,
                    store: a
                }, {
                    xtype: "syno_button",
                    cls: "thumb-remove-btn",
                    text: _T("dsmoption", "login_remove"),
                    handler: this.setLogoImage.createDelegate(this, [false, ""])
                }]
            }]
        }
    },
    getButtonsCfg: function() {
        var a = this.IsAllowRelay();
        return [{
            xtype: "syno_button",
            disabled: a,
            btnStyle: "gray",
            text: _T("dsmoption", "login_preview"),
            scope: this,
            handler: this.onPreview
        }, {
            xtype: "syno_button",
            btnStyle: "blue",
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            text: _T("common", "commit"),
            scope: this,
            handler: this.applyHandler
        }, {
            xtype: "syno_button",
            btnStyle: "grey",
            text: _T("common", "reset"),
            scope: this,
            handler: this.cancelHandler
        }]
    }
});
Ext.define("SYNO.SDS.AdminCenter.Region.TimezoneStore", {
    extend: "Ext.data.JsonStore",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.hasLoaded = false;
        var a = Ext.apply({
            fields: ["value", "offset", "display"]
        }, b);
        this.callParent([a])
    },
    loadTimezone: function() {
        if (!this.hasLoaded) {
            this.owner.sendWebAPI({
                api: "SYNO.Core.Region.NTP",
                version: 1,
                method: "listzone",
                params: {},
                scope: this,
                callback: this.cbListzone
            })
        }
    },
    cbListzone: function(c, b, a) {
        if (c) {
            b.zonedata.sort(function(e, d) {
                if (e.offset < d.offset) {
                    return -1
                } else {
                    if (e.offset > d.offset) {
                        return 1
                    } else {
                        return 0
                    }
                }
            });
            this.loadData(b.zonedata, false)
        } else {
            this.loadData(SYNO.SDS.Utils.getTimeZoneData())
        }
        this.hasLoaded = true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Region.NTPTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.tzStore = new SYNO.SDS.AdminCenter.Region.TimezoneStore({
            module: a.module,
            owner: a.appWin
        });
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", function(d, e) {
            var c;
            c = new SYNO.ux.Utils.EnableRadioGroup(d.getForm(), "enable_ntp", {
                manual: ["date", "hour", "minute", "second"],
                ntp: ["server", this.updateBtnId]
            })
        }, this, {
            single: true
        });
        this.mon(this.tzStore, "load", this.onTZAfterLoad, this)
    },
    fillConfig: function(a) {
        var b = {
            itemId: "NTPTab",
            title: _T("tree", "leaf_time"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Region.NTP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_fieldset",
                collapsible: false,
                title: _T("time", "time_now"),
                items: this.getNowItems()
            }, {
                xtype: "syno_fieldset",
                collapsible: false,
                title: _T("time", "time_zone_title"),
                items: this.getTimezoneItems()
            }, {
                xtype: "syno_fieldset",
                collapsible: false,
                title: _T("common", "country"),
                itemId: "country_field",
                hidden: true,
                items: this.getCountryItems()
            }, {
                xtype: "syno_fieldset",
                collapsible: false,
                title: _T("time", "subtitle1"),
                items: this.getTimeSettingItems()
            }],
            listeners: {
                activate: function() {
                    this.startPolling()
                },
                deactivate: function() {
                    this.stopPolling()
                },
                scope: this
            }
        };
        Ext.apply(b, a);
        return b
    },
    initEvents: function() {
        this.tzStore.loadTimezone()
    },
    onTZAfterLoad: function() {
        Ext.getCmp(this.tzComboBoxId).reset()
    },
    getNowItems: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            name: "now"
        });
        return a
    },
    getTimezoneItems: function() {
        var a = [];
        a.push({
            xtype: "syno_combobox",
            name: "timezone",
            id: this.tzComboBoxId = Ext.id(),
            fieldLabel: _T("time", "time_zone"),
            indent: 0,
            width: 300,
            displayField: "display",
            valueField: "value",
            tpl: '<tpl for="."><div ext:qtip="{display}" class="x-combo-list-item">{display}</div></tpl>',
            resizable: true,
            store: this.tzStore
        });
        return a
    },
    getCountryItems: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("wireless_ap", "country_code_desc") + "<br><font class='red-status'>" + _T("service", "important") + "</font>: " + _T("wireless_ap", "country_code_warning")
        }, {
            xtype: "syno_combobox",
            name: "country_code",
            fieldLabel: _T("common", "country"),
            indent: 0,
            width: 300,
            displayField: "display",
            valueField: "value",
            resizable: true,
            editable: true,
            forceSelection: true,
            typeAhead: true,
            lazyInit: false,
            allowBlank: false,
            store: new Ext.data.SimpleStore({
                fields: ["display", "value"]
            }),
            listeners: {
                focus: function(b) {
                    b.onTriggerClick()
                },
                scope: this
            }
        });
        return a
    },
    getTimeSettingItems: function() {
        var a = [];
        a.push({
            xtype: "syno_radio",
            boxLabel: _T("time", "time_manual"),
            name: "enable_ntp",
            inputValue: "manual"
        }, {
            xtype: "syno_datefield",
            fieldLabel: _T("time", "time_date"),
            name: "date",
            width: 300,
            indent: 1,
            format: "Y/n/j",
            allowBlank: false,
            editable: false,
            maxValue: "2037/12/31",
            minValue: "2005/1/1"
        }, {
            xtype: "syno_compositefield",
            indent: 1,
            width: 500,
            fieldLabel: _T("time", "time_time"),
            items: [{
                xtype: "syno_combobox",
                name: "hour",
                width: 90,
                displayField: "display",
                valueField: "value",
                store: SYNO.SDS.Utils.createTimeItemStore("hour")
            }, {
                xtype: "syno_displayfield",
                value: ":",
                width: 5
            }, {
                xtype: "syno_combobox",
                name: "minute",
                width: 90,
                displayField: "display",
                valueField: "value",
                store: SYNO.SDS.Utils.createTimeItemStore("min")
            }, {
                xtype: "syno_displayfield",
                value: ":",
                width: 5
            }, {
                xtype: "syno_combobox",
                name: "second",
                width: 90,
                displayField: "display",
                valueField: "value",
                store: SYNO.SDS.Utils.createTimeItemStore("sec")
            }]
        }, {
            xtype: "syno_radio",
            boxLabel: _T("time", "ntpdate_enable"),
            name: "enable_ntp",
            inputValue: "ntp"
        }, {
            xtype: "syno_combobox",
            name: "server",
            hiddenId: Ext.id(),
            width: 300,
            indent: 1,
            fieldLabel: _T("time", "ntpdate_server"),
            store: this.getNTPServerStore(),
            displayField: "value",
            valueField: "value",
            vtype: "iporhostname",
            allowBlank: false,
            typeAhead: true,
            editable: true,
            selectOnFocus: true,
            listeners: {
                scope: this,
                change: this.onChangeServer,
                select: this.onChangeServer
            }
        }, {
            xtype: "syno_button",
            indent: 1,
            id: this.updateBtnId = Ext.id(),
            text: _T("time", "ntp_updatenow"),
            scope: this,
            handler: this.onUpdateNTPClick
        });
        return a
    },
    getNTPServerStore: function() {
        var a = new Ext.data.SimpleStore({
            fields: ["value"],
            data: [
                ["time.google.com"],
                ["pool.ntp.org"],
                ["time.nist.gov"]
            ]
        });
        return a
    },
    onChangeServer: function(a) {
        Ext.getCmp(this.updateBtnId).enable()
    },
    onUpdateNTPClick: function() {
        var b = this.getForm();
        var c = b.findField("server");
        if (this._S("demo_mode")) {
            this.appWin.getMsgBox().alert(this.title, _JSLIBSTR("uicommon", "error_demo"));
            return
        }
        if (!c.isValid(false)) {
            return
        }
        var a = c.getRawValue();
        var d = String.format(_T("time", "ntp_update_progress"), this._D("product"), a);
        this.sendSyncAPI(d, a);
        this.applyForm();
        Ext.getCmp(this.updateBtnId).disable()
    },
    onUpdateNTPDone: function(f, c, b) {
        this.appWin.clearStatusBusy();
        var a = this.getForm().findField("server").getRawValue();
        var e = null;
        if (!f || c.has_fail) {
            e = String.format(_T("time", "ntp_update_failed"), this._D("product"), a);
            this.appWin.getMsgBox().alert(this.title, e);
            return
        }
        var d = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.Region.NTP", "get");
        this.getForm().setValues({
            now: d.now
        });
        this.updateCurrentTime();
        e = String.format(_T("time", "ntp_update_success"), d.server);
        this.ownerCt.setStatusOK({
            text: e
        })
    },
    onBeforeRequest: function(c) {
        if ("set" !== c) {
            return true
        }
        if (!this.getForm().isDirty() || this.isManualChangeTime) {
            return true
        }
        var a = this.getForm().getValues();
        if (a.enable_ntp === "manual") {
            this.appWin.getMsgBox().confirm(_T("tree", "leaf_time"), _T("time", "logout_comfirm"), function(d) {
                if ("yes" === d) {
                    this.isManualChangeTime = true;
                    this.module.panel.applyAllForm()
                }
            }, this);
            return false
        } else {
            var b = String.format(_T("common", "saving"));
            this.sendSyncAPI(b, a.server)
        }
        return true
    },
    sendSyncAPI: function(b, a) {
        this.appWin.setStatusBusy({
            text: b
        }, 0.1, 100);
        this.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.Region.NTP",
                    method: "sync",
                    version: 1,
                    params: {
                        server: a
                    }
                }, {
                    api: "SYNO.Core.Region.NTP",
                    method: "get",
                    version: 1
                }]
            },
            scope: this,
            callback: this.onUpdateNTPDone
        })
    },
    processParams: function(b, a) {
        a.push({
            api: "SYNO.Core.Network.Router.CountryCode",
            version: 1,
            method: "list"
        });
        if ("set" === b && this.getComponent("country_field").isVisible() && this.getForm().findField("country_code").isDirty()) {
            a.push({
                api: "SYNO.Core.Network.Router.CountryCode",
                version: 1,
                method: "set",
                params: {
                    country_code: this.getForm().findField("country_code").getValue()
                }
            }, {
                api: "SYNO.Core.Network.Router.CountryCode",
                version: 1,
                method: "set_tip",
                params: {
                    country_code_tip: false
                }
            })
        }
        a.push({
            api: "SYNO.Core.Network.Router.CountryCode",
            version: 1,
            method: "get"
        });
        return a
    },
    processReturnData: function(g, f, e) {
        if (f.has_fail) {
            var d = _T("common", "commfail");
            var c = SYNO.API.Util.GetFirstError(f);
            if (SYNO.API.Erros.core[c.code]) {
                d = SYNO.API.Erros.core[c.code]
            }
            this.module.appWin.getMsgBox().alert(this.title, d)
        }
        var b = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Network.Router.CountryCode", "list");
        if (b) {
            this.getForm().findField("country_code").getStore().loadData(b.country_code)
        }
        var a = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Network.Router.CountryCode", "get");
        this.getForm().setValues({
            country_code: a.country_code
        });
        if (e && Ext.isArray(e.compound)) {
            this.getForm().loadRecords(f.result, e.compound)
        }
        this.isManualChangeTime = false;
        this.updateCurrentTime();
        this.doLayout()
    },
    updateCurrentTime: function() {
        var g = new Date(this.getForm().findField("now").getValue());
        if ("Invalid Date" === g.toString()) {
            g = new Date()
        }
        var h = g.getFullYear(),
            e = g.getMonth() + 1,
            f = g.getDay(),
            b = g.getDate();
        var i = _T("login", "mon_" + e);
        var j = _T("login", "weekday_" + f);
        var c = String.format(_T("login", "date_format_with_year"), i, b, j, h);
        var a = String.format('{0}<span class="minute">:{1}</span>:{2}', g.format("H"), g.format("i"), g.format("s"));
        this.getForm().setValues({
            now: c + " " + a
        })
    },
    startPolling: function() {
        if (this.pollMainId) {
            return
        }
        this.pollMainId = this.pollReg({
            scope: this,
            webapi: {
                api: "SYNO.Core.Network.Router.Topology",
                version: 2,
                method: "get"
            },
            interval: 3,
            immediate: true,
            status_callback: function(c, b, a) {
                if (!c) {
                    SYNO.Debug("load topology failed");
                    return
                }
                this.getComponent("country_field").setVisible(b.support_net_topology)
            }
        })
    },
    stopPolling: function() {
        if (!this.pollMainId) {
            return
        }
        this.appWin.pollUnreg(this.pollMainId);
        this.pollMainId = null
    }
});
Ext.define("SYNO.SDS.AdminCenter.Region.LanguageTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            itemId: "LanguageTab",
            title: _T("tree", "leaf_language"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Region.Language",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_fieldset",
                collapsible: false,
                title: _T("language", "lang_display"),
                items: this.getLanguageItems()
            }, {
                xtype: "syno_fieldset",
                collapsible: false,
                title: _T("language", "lang_email"),
                items: this.getMaillangItems()
            }, {
                xtype: "syno_fieldset",
                collapsible: false,
                title: _T("language", "lang_codepage"),
                items: this.getCodepageItems()
            }]
        };
        Ext.apply(b, a);
        return b
    },
    getLanguageItems: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("language", "lang_display_hint")
        });
        a.push({
            xtype: "syno_combobox",
            name: "language",
            fieldLabel: _T("language", "lang_display_field"),
            width: 300,
            displayField: "display",
            valueField: "value",
            store: this.getLanguageStore(),
            listeners: {
                select: {
                    scope: this,
                    fn: function() {
                        var d = this.getForm();
                        var c = d.findField("codepage");
                        var b = d.findField("maillang");
                        var e = d.findField("language").getValue();
                        if (e != "def") {
                            b.setValue(e);
                            c.setValue(e)
                        }
                    }
                }
            }
        });
        return a
    },
    getMaillangItems: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("language", "lang_email_hint")
        });
        a.push({
            xtype: "syno_combobox",
            name: "maillang",
            fieldLabel: _T("language", "lang_email_field"),
            width: 300,
            displayField: "display",
            valueField: "value",
            store: this.getMailLangStore()
        });
        return a
    },
    getCodepageItems: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("language", "lang_codepage_hint")
        });
        a.push({
            xtype: "syno_combobox",
            name: "codepage",
            fieldLabel: _T("language", "lang_codepage"),
            width: 300,
            displayField: "display",
            valueField: "value",
            store: this.getCodePageStore()
        });
        return a
    },
    getLanguageStore: function() {
        var a = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: SYNO.SDS.Utils.getSupportedLanguage(1)
        });
        return a
    },
    getMailLangStore: function() {
        var a = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: SYNO.SDS.Utils.getSupportedLanguage(0)
        });
        return a
    },
    getCodePageStore: function() {
        var a = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: SYNO.SDS.Utils.getSupportedLanguageCodepage(0)
        });
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Region.NTPServerTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            itemId: "NTPServerTab",
            title: _T("time", "ntp_service"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Region.NTP.Server",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                value: _T("time", "ntp_service_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable",
                boxLabel: _T("time", "ntp_service_enable")
            }, {
                xtype: "syno_displayfield",
                value: String.format('<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + _T("time", "ntp_service_note"))
            }]
        };
        Ext.apply(b, a);
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.Region.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    appWin: null,
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.Region.TabPanel({
            module: this,
            appWin: this.appWin
        })
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "NTPTab":
                return "AdminCenter/system_time.html";
            case "LanguageTab":
                return "AdminCenter/system_language.html";
            case "NTPServerTab":
                return "AdminCenter/system_ntpservice.html";
            default:
                return "AdminCenter/system_region_desc.html"
        }
    },
    getPanel: function() {
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm();
        return true
    },
    deactivate: function() {
        var a = this.panel.getAllForms();
        for (var b = 0; b < a.length; b++) {
            if (a[b].isDirty()) {
                return false
            }
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Region.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    module: null,
    appWin: null,
    NTPForm: null,
    LanguageForm: null,
    NTPServerForm: null,
    constructor: function(a) {
        this.module = a.module;
        this.appWin = a.appWin;
        this.tabList = [];
        this.NTPForm = new SYNO.SDS.AdminCenter.Region.NTPTab({
            module: this.module,
            appWin: this.appWin
        });
        this.tabList.push(this.NTPForm);
        this.LanguageForm = new SYNO.SDS.AdminCenter.Region.LanguageTab({
            module: this.module,
            appWin: this.appWin
        });
        this.tabList.push(this.LanguageForm);
        if ("no" === this._D("support_dual_head", "no")) {
            this.NTPServerForm = new SYNO.SDS.AdminCenter.Region.NTPServerTab({
                module: this.module,
                appWin: this.appWin
            });
            this.tabList.push(this.NTPServerForm)
        }
        var b;
        b = Ext.apply({
            activeTab: 0,
            items: this.tabList
        }, a);
        this.callParent([b])
    },
    processParams: function(g, e) {
        this.callParent(arguments);
        if ("set" !== g) {
            return e
        }
        var a = {
            api: "SYNO.Core.Region.NTP",
            method: "set",
            version: 1
        };
        var c = this.NTPForm.getForm();
        var d = c.getValues();
        var f = false;
        if (c.findField("date").isDirty() || c.findField("hour").isDirty() || c.findField("second").isDirty() || c.findField("minute").isDirty()) {
            f = true
        }
        if (null !== this.NTPServerForm) {
            this.ntpServerChange = this.NTPServerForm.getForm().findField("enable").isDirty()
        }
        for (var b = 0; b < e.length; b++) {
            if (true === SYNO.ux.Utils.checkApiConsistency(a, e[b])) {
                e[b].params.change_time = f;
                if (d.enable_ntp === "manual") {
                    e[b].params.date = new Date(d.date).dateFormat("Y/n/j")
                }
            }
        }
        return e
    },
    onApiSuccess: function(f, e, d) {
        this.processReturnData(f, e, d);
        var a = e.result;
        var b = {
            api: "SYNO.Core.Region.Language",
            method: "set",
            version: 1
        };
        for (var c = 0; c < a.length; c++) {
            if (true === SYNO.ux.Utils.checkApiConsistency(b, a[c])) {
                if (a[c].data && a[c].data.change_language) {
                    this.changeLangReload()
                }
            }
        }
        if (null !== this.NTPServerForm && this.ntpServerChange) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.Region.NTP", !this.NTPServerForm.getForm().findField("enable").getValue())
        }
    },
    changeLangReload: function() {
        var a = this.appWin.findAppWindow();
        if (a.getOpenConfig("className") === "SYNO.SDS.CMS.Application" && a.getOpenConfig("cms_self") !== true) {
            return
        }
        this.appWin.getMsgBox().confirm(_T("tree", "leaf_language"), _T("language", "refresh_confirm"), function(b) {
            if ("yes" === b) {
                window.onbeforeunload = null;
                location.reload()
            }
        }, this)
    }
});
Ext.define("SYNO.SDS.AdminCenter.MediaIndex.ServicePanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        var b = Ext.apply({
            module: a.module,
            listeners: {
                activate: this.activate,
                deactivate: this.deactivate
            },
            title: _T("media_index_service", "app_name"),
            webapi: {
                api: "SYNO.Core.MediaIndexing",
                methods: {
                    get: "get",
                    set: "reindex"
                },
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                value: _T("media_index_service", "description")
            }, {
                xtype: "syno_displayfield",
                height: 10
            }, {
                xtype: "syno_displayfield",
                id: this.field_app_list = Ext.id(),
                fieldLabel: _T("media_index_service", "application_list")
            }, {
                xtype: "displayfield",
                height: 20
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_button",
                    text: _T("service", "service_photo_reindex"),
                    id: this.field_reindex_btn = Ext.id(),
                    name: "reindexing_btn",
                    scope: this,
                    handler: this.onClickReindexBtn
                }, {
                    xtype: "syno_displayfield",
                    id: this.field_reindex_msg = Ext.id()
                }]
            }]
        }, a);
        this.parentTabPanel = a.parentTabPanel;
        this.callParent([b]);
        this.field_reindex_btn = Ext.getCmp(this.field_reindex_btn);
        this.field_reindex_msg = Ext.getCmp(this.field_reindex_msg);
        this.field_app_list = Ext.getCmp(this.field_app_list);
        this.REINDEXING_MSG = '<span class="blue-status">' + _T("mediaservice", "media_data_reindexing") + "</span";
        if (this._S("demo_mode") === true) {
            this.field_reindex_btn.setDisabled(true);
            this.field_reindex_btn.setTooltip(_JSLIBSTR("uicommon", "error_demo"))
        }
        this.polling_id = null
    },
    onClickReindexBtn: function() {
        this.parentTabPanel.setStatusBusy({
            text: _T("common", "saving")
        });
        this.field_reindex_btn.disable();
        this.parentTabPanel.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.MediaIndexing",
                    method: "reindex",
                    version: 1,
                    params: {}
                }]
            },
            scope: this,
            callback: function(c, b, a) {
                this.parentTabPanel.clearStatusBusy();
                if (c) {
                    this.parentTabPanel.onApiSuccess("set", b, a);
                    this.field_reindex_msg.setValue(this.REINDEXING_MSG)
                } else {
                    this.parentTabPanel.onApiFailure("set", b, a)
                }
            }
        })
    },
    processReturnData: function(g, f, e) {
        if (g !== "get") {
            return
        }
        if (f.has_fail === false && f.result[0].success === true) {
            var b = [];
            var d = f.result[0].data.packages;
            for (var c = 0; c < d.length; ++c) {
                b[c] = d[c].name
            }
            this.field_app_list.setValue(b.join(", "))
        }
    },
    activate: function() {
        this.startPolling();
        for (var a = 0; a < this.parentTabPanel.buttons.length; a++) {
            this.parentTabPanel.buttons[a].setVisible(false)
        }
    },
    deactivate: function() {
        this.stopPolling();
        for (var a = 0; a < this.parentTabPanel.buttons.length; a++) {
            this.parentTabPanel.buttons[a].setVisible(true)
        }
        return true
    },
    polling_callback: function(d, b, c, a) {
        this.clearStatus();
        if (d) {
            this.field_reindex_msg.setValue(b.reindexing ? this.REINDEXING_MSG : "");
            if (this._S("demo_mode") !== true) {
                this.field_reindex_btn.setDisabled(b.reindexing)
            }
        } else {
            this.parentTabPanel.setStatusError({
                text: b.code,
                clear: false
            });
            if (this._S("demo_mode") !== true) {
                this.field_reindex_btn.enable()
            }
        }
    },
    stopPolling: function() {
        if (this.polling_id !== null) {
            this.pollUnreg(this.polling_id);
            this.polling_id = null
        }
    },
    startPolling: function() {
        this.stopPolling();
        this.polling_id = this.pollReg({
            interval: 5,
            immediate: true,
            scope: this,
            webapi: {
                api: "SYNO.Core.MediaIndexing",
                method: "status",
                version: 1
            },
            status_callback: this.polling_callback
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.MediaIndex.SettingsPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        var b = Ext.apply({
            module: a.module,
            title: _T("convert_setting", "title"),
            listeners: {
                activate: this.activate
            },
            webapi: {
                api: "SYNO.Core.MediaIndexing",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_fieldset",
                stateId: "SYNO.SDS.AdminCenter.MediaIndex.Main::convert::thumbnail",
                collapsible: true,
                title: _T("thumb_conv_options", "title"),
                items: [{
                    xtype: "syno_displayfield",
                    value: this.getDesc(_T("thumb_conv_options", "description"), _T("thumb_conv_options", "note"))
                }, {
                    xtype: "syno_displayfield",
                    height: 10
                }, {
                    xtype: "syno_combobox",
                    name: "thumbnail_quality",
                    id: this.thumbnail_quality_id = Ext.id(),
                    fieldLabel: _T("thumb_conv_options", "thumb_quality"),
                    value: "normal",
                    displayField: "display",
                    valueField: "value",
                    store: new Ext.data.ArrayStore({
                        fields: ["value", "display"],
                        data: [
                            ["normal", _T("thumb_conv_options", "normal_quality")],
                            ["high", _T("thumb_conv_options", "high_quality")]
                        ]
                    })
                }]
            }, {
                xtype: "syno_fieldset",
                stateId: "SYNO.SDS.AdminCenter.MediaIndex.Main::convert::video",
                collapsible: true,
                title: _T("convert_setting", "video_setting_title"),
                items: [{
                    xtype: "syno_displayfield",
                    value: this.getDesc(_T("convert_setting", "video_conversion_desc"), _T("convert_setting", "video_conversion_note"))
                }, {
                    xtype: "syno_checkbox",
                    id: this.mobile_profile_enabled_id = Ext.id(),
                    boxLabel: _T("convert_setting", "video_convert_enable_mobile_support"),
                    name: "mobile_profile_enabled"
                }]
            }]
        }, a);
        this.parentTabPanel = a.parentTabPanel;
        this.callParent([b]);
        this.thumbnail_quality_field = Ext.getCmp(this.thumbnail_quality_id);
        this.mobile_profile_enabled_field = Ext.getCmp(this.mobile_profile_enabled_id)
    },
    activate: function() {},
    isDirty: function() {
        return this.thumbnail_quality_field.isDirty() || this.mobile_profile_enabled_field.isDirty()
    },
    getDesc: function(b, a) {
        return b + '<br><br><span class="syno-ux-note">' + _T("common", "note") + ": </span>" + a
    }
});
Ext.define("SYNO.SDS.AdminCenter.MediaIndex.IndexFolderEditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.module = b.module;
        this.mode = b.mode;
        this.store = b.store;
        this.parent = b.parent;
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        this.defaultLabelWidth = 100;
        var a = Ext.apply({
            module: b.module,
            dsmStyle: "v5",
            defaultLabelWidth: 100,
            title: ("add" === this.mode) ? _T("mediaservice", "index_folder_create") : _T("mediaservice", "index_folder_edit"),
            width: 600,
            autoHeight: true,
            resizable: false,
            closable: true,
            items: [this.panel],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                scope: this,
                disabled: ("add" === this.mode) ? true : false,
                id: this.btnApplyId = Ext.id(),
                handler: ("add" === this.mode) ? this.createHandler : this.editHandler
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        }, b);
        this.callParent([a]);
        this.btnApply = Ext.getCmp(this.btnApplyId);
        this.btnEditPath = Ext.getCmp(this.editPathBtnId);
        this.textFolderPath = Ext.getCmp(this.textFolderPathId);
        this.textName = Ext.getCmp(this.textNameId);
        this.checkPhoto = Ext.getCmp(this.checkPhotoId);
        this.checkMusic = Ext.getCmp(this.checkMusicId);
        this.checkVideo = Ext.getCmp(this.checkVideoId);
        if ("edit" === this.mode) {
            this.origPath = this.parent.getSelectionModel().getSelected().get("path")
        }
        this.textFolderPath.getEl().on("mouseup", this.editPathBtnHandler, this);
        this.textFolderPath._window = this
    },
    onOpen: function() {
        if ("edit" == this.mode) {
            var b = this.panel.getForm();
            var a = this.parent.getSelectionModel().getSelected();
            b.setValues({
                name: a.get("name"),
                path: a.get("path"),
                photo: a.get("photo"),
                music: a.get("music"),
                video: a.get("video")
            });
            b.clearInvalid()
        }
        this.show()
    },
    createPanel: function() {
        var b = {
            xtype: "syno_fieldset",
            title: _T("mediaservice", "index_folder_title"),
            labelWidth: this.defaultLabelWidth,
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("common", "name"),
                name: "name",
                width: 260,
                itemId: "name",
                id: this.textNameId = Ext.id(),
                maxlength: 255,
                allowBlank: false,
                blankText: _T("mediaservice", "error_empty_rule_name")
            }, {
                xtype: "syno_compositefield",
                items: [{
                    xtype: "syno_textfield",
                    fieldLabel: _T("common", "folder"),
                    width: 260,
                    name: "path",
                    id: this.textFolderPathId = Ext.id(),
                    readOnly: true,
                    allowBlank: false,
                    validateOnBlur: false,
                    validationEvent: false,
                    validator: this.validPath,
                    blankText: _T("mediaservice", "error_empty_path")
                }, {
                    xtype: "syno_button",
                    id: this.editPathBtnId = Ext.id(),
                    text: _T("common", "choose"),
                    scope: this,
                    handler: this.editPathBtnHandler
                }]
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("mediaservice", "index_folder_index_type"),
                width: 300,
                items: [{
                    xtype: "syno_checkbox",
                    boxLabel: _T("mediaservice", "class_photos"),
                    width: 100,
                    name: "photo",
                    id: this.checkPhotoId = Ext.id(),
                    checked: true
                }, {
                    xtype: "syno_checkbox",
                    boxLabel: _T("mediaservice", "class_music"),
                    width: 100,
                    name: "music",
                    id: this.checkMusicId = Ext.id(),
                    checked: true
                }, {
                    xtype: "syno_checkbox",
                    boxLabel: _T("mediaservice", "class_video"),
                    width: 100,
                    name: "video",
                    id: this.checkVideoId = Ext.id(),
                    checked: true
                }]
            }]
        };
        var a = {
            trackResetOnLoad: true,
            height: 155,
            border: false,
            items: [b]
        };
        return new SYNO.ux.FormPanel(a)
    },
    createHandler: function() {
        var c = this.panel.getForm().findField("path");
        var e = this.panel.getForm().findField("name");
        var d = this.textFolderPath.getValue();
        var b = this.textName.getValue();
        if (!c.isValid() || !e.isValid()) {
            return
        }
        var a = new this.store.recordType({
            exist: true,
            name: "",
            path: "",
            photo: "",
            music: "",
            video: "",
            "default": false
        });
        this.store.add(a);
        a.set("name", b);
        a.set("path", d);
        a.set("photo", this.checkPhoto.getValue());
        a.set("music", this.checkMusic.getValue());
        a.set("video", this.checkVideo.getValue());
        this.close()
    },
    editHandler: function() {
        var b = this.panel.getForm().findField("path");
        var c = this.panel.getForm().findField("name");
        var a = this.parent.getSelectionModel().getSelected();
        if (!b.isValid() || !c.isValid()) {
            return
        }
        a.set("name", this.textName.getValue());
        a.set("path", this.textFolderPath.getValue());
        a.set("photo", this.checkPhoto.getValue());
        a.set("music", this.checkMusic.getValue());
        a.set("video", this.checkVideo.getValue());
        this.close()
    },
    editPathBtnHandler: function() {
        if (typeof(this.dialog) === "undefined") {
            this.dialog = new SYNO.SDS.Utils.FileChooser.Chooser({
                parent: this,
                owner: this,
                closeOwnerWhenNoShare: true,
                superuser: true,
                usage: {
                    type: "chooseDir"
                },
                title: _T("mediaservice", "select_folder"),
                folderToolbar: true,
                treeFilter: function(b, a) {
                    if (a && (a.spath === "/home" || a.spath === "/homes" || a.mountType === "remote")) {
                        return false
                    }
                    return true
                },
                listeners: {
                    scope: this,
                    choose: function(d, a, b) {
                        this.textFolderPath.setValue(a.path);
                        if (this.textName.getValue() === "") {
                            var c = a.path.split("/");
                            this.textName.setValue(c[c.length - 1])
                        }
                        d.close()
                    },
                    close: function() {
                        delete this.dialog
                    }
                }
            })
        }
        this.dialog.show()
    },
    validPath: function() {
        var a = this._window;
        if (this.getValue() !== a.origPath && -1 !== a.store.findExact("path", this.getValue())) {
            a.btnApply.setDisabled(true);
            return _T("mediaservice", "error_duplicate_path")
        }
        a.btnApply.setDisabled(false);
        return true
    }
});
SYNO.SDS.AdminCenter.MediaIndex.MAX_RULE = 100;
Ext.define("SYNO.SDS.AdminCenter.MediaIndex.DirPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.module = a.module;
        this.url = "";
        this.store = this.createStore();
        this.columnModel = this.createColumnModel();
        this.isStoreUpdated = false;
        this.parentTabPanel = a.parentTabPanel;
        var b = Ext.apply({
            module: a.module,
            title: _T("mediaservice", "index_folder_title"),
            store: this.store,
            enableColumnMove: false,
            enableHdMenu: false,
            hideMode: "offsets",
            colModel: this.columnModel,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false,
                listeners: {
                    selectionchange: {
                        fn: this.onChgButtonStatus,
                        buffer: 50,
                        scope: this
                    }
                }
            }),
            tbar: {
                items: this.createButtons()
            },
            listeners: {
                rowdblclick: function() {
                    this.openIndexFolderEditDialog("edit")
                },
                activate: this.activate,
                deactivate: this.deactivate,
                scope: this
            }
        }, a);
        this.callParent([b]);
        this.mon(this.store, "onBeforeLoad", this.onBeforeLoad, this)
    },
    activate: function() {
        this.parentTabPanel.getFooterToolbar().setVisible(false);
        this.store.load()
    },
    deactivate: function() {
        this.parentTabPanel.getFooterToolbar().setVisible(true)
    },
    isDirty: function() {
        return (0 < this.store.getModifiedRecords().length || this.isStoreUpdated)
    },
    clearDirty: function() {
        this.store.commitChanges();
        this.isStoreUpdated = false
    },
    createButtons: function() {
        return [{
            xtype: "syno_button",
            text: _T("common", "create"),
            itemId: "create",
            disabled: this._S("demo_mode"),
            scope: this,
            handler: function(b, a) {
                this.openIndexFolderEditDialog("add")
            }
        }, {
            xtype: "syno_button",
            text: _T("common", "alt_edit"),
            itemId: "edit",
            disabled: true,
            scope: this,
            handler: function(b, a) {
                this.openIndexFolderEditDialog("edit")
            }
        }, {
            xtype: "syno_button",
            text: _T("common", "delete"),
            itemId: "delete",
            disabled: true,
            scope: this,
            handler: function(b, a) {
                this.module.appWin.getMsgBox().confirm(_T("mediaservice", "index_folder_title"), _T("common", "remove_cfrmrmv"), function(e, f) {
                    if (e == "yes") {
                        var c = this.getSelectionModel().getSelections();
                        var d = 0;
                        for (d = 0; d < c.length; d++) {
                            this.store.remove(c[d])
                        }
                    } else {
                        return false
                    }
                }, this)
            }
        }, {
            xtype: "syno_button",
            text: _T("common", "save"),
            itemId: "save",
            disabled: true,
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            scope: this,
            handler: this.saveHandler
        }]
    },
    createStore: function() {
        var a = new Ext.data.ArrayStore({
            autoDestroy: true,
            autoLoad: false,
            idProperty: "path",
            fields: ["exist", "name", "path", "photo", "music", "video", "default"],
            listeners: {
                update: this.onChgButtonStatus,
                add: function() {
                    this.isStoreUpdated = true;
                    this.onChgButtonStatus()
                },
                remove: function() {
                    this.isStoreUpdated = true;
                    this.onChgButtonStatus()
                },
                beforeload: this.onBeforeLoad,
                scope: this
            },
            load: function() {
                this.parentGridPanel.sendWebAPI({
                    api: "SYNO.Core.MediaIndexing.IndexFolder",
                    method: "get",
                    version: "1",
                    scope: this,
                    callback: function(l, f, k) {
                        var h = [];
                        for (var g = 0; g < f.folders.length; g++) {
                            h[g] = [];
                            h[g][0] = f.folders[g].exist;
                            h[g][1] = f.folders[g].name;
                            h[g][2] = f.folders[g].path;
                            var b = false;
                            var c = false;
                            var d = false;
                            for (var e = 0; e < f.folders[g].types.length; e++) {
                                if (f.folders[g].types[e] == "photo") {
                                    b = true
                                } else {
                                    if (f.folders[g].types[e] == "music") {
                                        d = true
                                    } else {
                                        if (f.folders[g].types[e] == "video") {
                                            c = true
                                        }
                                    }
                                }
                            }
                            h[g][3] = b;
                            h[g][4] = d;
                            h[g][5] = c;
                            h[g][6] = f.folders[g]["default"]
                        }
                        this.loadData(h, false);
                        this.parentGridPanel.onAfterLoad()
                    }
                })
            },
            save: function() {
                alert("save")
            }
        });
        a.parentGridPanel = this;
        return a
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy()
    },
    onAfterLoad: function(b, a, c) {
        this.module.appWin.clearStatusBusy();
        this.onChgButtonStatus()
    },
    createColumnModel: function() {
        var a = new Ext.grid.ColumnModel({
            defaults: {
                align: "center"
            },
            columns: [{
                id: "name",
                header: _T("common", "name"),
                dataIndex: "name",
                sortable: true,
                renderer: Ext.util.Format.htmlEncode,
                align: "left"
            }, {
                id: "path",
                header: _T("common", "folder"),
                dataIndex: "path",
                sortable: true,
                width: 200,
                align: "left",
                renderer: function(g, c, b, h, e, d) {
                    var f = Ext.util.Format.htmlEncode(g);
                    c.attr = String.format('qtip="{0}"', (b.data.exist) ? Ext.util.Format.htmlEncode(f) : _T("mediaservice", "error_folder_not_exist"));
                    return (b.data.exist) ? f : '<span class="red-status">' + f + "</span>"
                }
            }, {
                id: "photo",
                header: _T("mediaservice", "class_photos"),
                dataIndex: "photo",
                width: 40,
                renderer: this.indexTypeRenderer
            }, {
                id: "music",
                header: _T("mediaservice", "class_music"),
                dataIndex: "music",
                width: 40,
                renderer: this.indexTypeRenderer
            }, {
                id: "video",
                header: _T("mediaservice", "class_video"),
                dataIndex: "video",
                width: 40,
                renderer: this.indexTypeRenderer
            }]
        });
        return a
    },
    indexTypeRenderer: function(f, c, b, g, e, d) {
        var a = f ? "syno-admincenter-media-index-enabled" : "";
        return String.format('<div class="{0}"></div>', a)
    },
    onChgButtonStatus: function() {
        var b = this.getTopToolbar();
        var c = this.getStore().getCount();
        var a = this.getSelectionModel().getCount();
        b.getComponent("create").setDisabled(SYNO.SDS.AdminCenter.MediaIndex.MAX_RULE <= c);
        b.getComponent("edit").setDisabled(1 !== a);
        b.getComponent("delete").setDisabled(0 === a);
        b.getComponent("save").setDisabled(this._S("demo_mode") || !this.isDirty())
    },
    openIndexFolderEditDialog: function(b) {
        var a = new SYNO.SDS.AdminCenter.MediaIndex.IndexFolderEditDialog({
            owner: this.module.appWin,
            module: this.module,
            store: this.store,
            parent: this,
            mode: b
        });
        a.open()
    },
    saveHandler: function(b, a) {
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.MediaIndexing.IndexFolder",
            params: {
                folders: this.getJsonFolders()
            },
            method: "set",
            version: 1,
            callback: function(e, d, c) {
                this.module.appWin.clearStatusBusy();
                if (e) {
                    this.clearDirty();
                    this.store.load();
                    this.module.appWin.getMsgBox().alert(this.module.getPanel().title, _T("common", "setting_applied"))
                } else {
                    this.module.appWin.getMsgBox().alert(this.module.getPanel().title, d.error.code)
                }
                this.onChgButtonStatus()
            },
            scope: this
        })
    },
    getJsonFolders: function() {
        var a = ["name", "path", "photo", "music", "video", "default"];
        var b = [];
        this.store.each(function(d) {
            var c = {};
            c.types = [];
            Ext.each(a, function(e) {
                if (e == "photo" || e == "music" || e == "video") {
                    if (d.get(e) === true) {
                        c.types.push(e)
                    }
                } else {
                    c[e] = d.get(e)
                }
            });
            b.push(c)
        });
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.MediaIndex.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.MediaIndex.TabPanel({
            module: this
        })
    },
    getPanel: function() {
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
        this.panel.servicePanel.startPolling()
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    deactivate: function() {
        this.panel.servicePanel.stopPolling();
        if (this.panel.settingsPanel.isDirty() || this.panel.dirPanel.isDirty()) {
            return false
        }
        return true
    },
    confirmCallback: function(a) {
        if (a === "no") {
            this.panel.servicePanel.startPolling()
        } else {
            if (a === "yes") {
                this.panel.dirPanel.clearDirty()
            }
        }
    },
    getHelpParam: function() {
        var a = this.panel.getActiveTab();
        if (a === this.panel.servicePanel) {
            return "AdminCenter/application_mediaindexservice_general.html"
        } else {
            if (a === this.panel.settingsPanel) {
                return "AdminCenter/application_mediaindexservice_thumbnail.html"
            } else {
                if (a === this.panel.dirPanel) {
                    return "AdminCenter/application_mediaindexservice_index.html"
                } else {
                    return "AdminCenter/application_mediaindexservice_desc.html"
                }
            }
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.MediaIndex.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        a = Ext.apply({
            parentTabPanel: this
        }, a);
        this.module = a.module;
        this.servicePanel = new SYNO.SDS.AdminCenter.MediaIndex.ServicePanel(a);
        this.settingsPanel = new SYNO.SDS.AdminCenter.MediaIndex.SettingsPanel(a);
        this.dirPanel = new SYNO.SDS.AdminCenter.MediaIndex.DirPanel(a);
        var b = Ext.apply({
            module: a.module,
            title: _T("media_index_service", "app_name"),
            activeTab: 0,
            items: [this.servicePanel, this.settingsPanel, this.dirPanel],
            listeners: {
                beforetabchange: this.beforetabchange,
                scope: this
            }
        }, a);
        this.callParent([b])
    },
    beforetabchange: function(a, c, b) {
        if (b != this.dirPanel || !this.dirPanel.isDirty() || this.comfirmTabChange) {
            this.comfirmTabChange = false;
            return true
        }
        this.newTabWaitForComfirm = c;
        this.askComfirmForTabChange();
        return false
    },
    askComfirmForTabChange: function() {
        this.module.appWin.getMsgBox().confirm(_T("mediaservice", "index_folder_title"), _T("common", "confirm_lostchange"), function(a, b) {
            if (a == "yes") {
                this.dirPanel.clearDirty();
                this.comfirmTabChange = true;
                this.activate(this.newTabWaitForComfirm)
            } else {
                this.comfirmTabChange = false
            }
        }, this)
    },
    isAnyFormDirty: function() {
        return this.settingsPanel.isDirty()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Notification.MailSettingPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.module = b.module;
        this.push_mail_verified = [];
        this.push_mail_unverified = [];
        this.push_mail_check_status_done = false;
        this.refresh_token = null;
        this.expires_in = null;
        this.enable_oauth = false;
        this.support_oauth = (this._S("version") > 4994);
        SYNO.Debug("create form: mail");
        var a = Ext.apply({
            itemId: "mailSettingTab",
            title: _T("helptoc", "notification_email"),
            autoScroll: true,
            labelWidth: 240,
            items: [{
                xtype: "syno_displayfield",
                hideLabel: true,
                value: _T("notification", "alert_intro")
            }, {
                xtype: "syno_checkbox",
                name: "enable_mail",
                boxLabel: _T("notification", "mail_notification_enable")
            }, {
                xtype: "syno_textfield",
                name: "mail_recipient",
                maxlength: 255,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "mail_recipient"),
                allowBlank: false,
                validator: this.validateMailRecipientField.createDelegate(this)
            }, {
                xtype: "syno_textfield",
                name: "subject_prefix",
                maxlength: 32,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "alert_subject_prefix")
            }, {
                xtype: "syno_combobox",
                name: "smtp_provider",
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "label_smtp_provider"),
                value: "gmail",
                valueField: "value",
                displayField: "display",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: [
                        ["gmail", _T("notification", "smtp_provider_gmail")],
                        ["yahoo", _T("notification", "smtp_provider_yahoo")],
                        ["outlook", _T("notification", "smtp_provider_outlook")],
                        ["qq", _T("notification", "smtp_provider_qq")],
                        ["custom", _T("notification", "smtp_provider_custom")]
                    ]
                }),
                listeners: {
                    scope: this,
                    select: this.onSMTPProviderSelect
                }
            }, {
                xtype: "syno_textfield",
                name: "smtpserver",
                vtype: "iporhostname",
                maxlength: 255,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "alert_smtp"),
                allowBlank: false
            }, {
                xtype: "syno_numberfield",
                name: "smtpport",
                maxlength: 5,
                vtype: "port",
                value: 25,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "alert_port"),
                allowBlank: false
            }, {
                xtype: "syno_checkbox",
                name: "smtp_enable_auth",
                boxLabel: _T("notification", "alert_smtp_need_auth"),
                indent: 1
            }, {
                xtype: "syno_textfield",
                name: "smtp_user",
                maxlength: 256,
                indent: 2,
                width: 300,
                fieldLabel: _T("notification", "alert_smtp_user"),
                allowBlank: false,
                validator: this.validateSMTPUserField.createDelegate(this),
                enableKeyEvents: true,
                listeners: {
                    scope: this,
                    keypress: this.cleanPasswd,
                    keydown: this.cleanPasswd
                }
            }, {
                xtype: "syno_textfield",
                textType: "password",
                name: "smtp_pass",
                maxlength: 256,
                indent: 2,
                width: 300,
                fieldLabel: _T("notification", "alert_smtp_pass"),
                allowBlank: false,
                enableKeyEvents: true,
                listeners: {
                    scope: this,
                    keyup: this.updateTestMailBtn
                }
            }, {
                xtype: "syno_button",
                name: "smtp_google_oauth",
                itemId: "smtp_google_oauth",
                indent: 1,
                hidden: true,
                text: _T("notification", "smtp_gmail_login"),
                handler: this.onClickGoogleOAuth,
                scope: this
            }, {
                xtype: "syno_checkbox",
                name: "smtpssl",
                indent: 1,
                boxLabel: _T("notification", "alert_use_ssl")
            }, {
                xtype: "syno_textfield",
                name: "smtp_sender_name",
                maxlength: 64,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "label_smtp_sender_name"),
                allowBlank: true,
                validator: this.validateSMTPSenderNameField.createDelegate(this)
            }, {
                xtype: "syno_textfield",
                name: "smtp_sender_mail",
                vtype: "email",
                maxlength: 255,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "label_smtp_sender_mail"),
                allowBlank: true
            }, {
                xtype: "syno_checkbox",
                name: "send_welcome_mail",
                indent: 1,
                boxLabel: _T("notification", "welcome_mail_to_new_user")
            }, {
                xtype: "syno_displayfield"
            }, {
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                xtype: "syno_button",
                text: _T("notification", "alert_test"),
                id: this.mailTestBtnId = Ext.id(),
                scope: this,
                handler: this.onClickTestMailBtn
            }]
        }, b);
        this.callParent([a]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        });
        this.mon(this, "afterlayout", this.enableSMTPFields, this, {
            single: true
        });
        this.mon(this, "afterlayout", this.enableTestMailBtn, this, {
            single: true
        });
        this.mon(this, "afterlayout", this.enableGoogleOAuthBtn, this, {
            single: true
        });
        this.mon(this, "afterlayout", this.addRecipientTip, this, {
            single: true
        });
        this.mon(this, "afterlayout", this.addSenderMailTip, this, {
            single: true
        })
    },
    onClickGoogleOAuth: function(b) {
        if (_T("notification", "smtp_gmail_login") === b.getText()) {
            var a = this.form.findField("mail_recipient");
            if (!a.validate()) {
                this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), _T("common", "forminvalid"));
                return
            }
            this.onLoginGoogle()
        } else {
            this.onLogoutGoogle()
        }
    },
    onLoginGoogle: function() {
        window._loginCallback = this.oauthCallback.createDelegate(this);
        var d = "_loginCallback";
        var b = window.location.href.indexOf("/", window.location.protocol.length + 2);
        var c = window.location.href.slice(0, b) + "/webman/modules/PersonalSettings/index_ds.php";
        var a = "http://update.synology.com/gmail_notification/login.php?callback=" + d + "&host=" + c;
        window.open(a, "mywindow", "menubar=1,resizable=0,width=600,height=520, top=100, left=300")
    },
    oauthCallback: function(e) {
        var c = new Date();
        var b = parseInt(c.getTime() / 1000, 10) + parseInt(e.expires_in, 10) - 1800;
        var a = b.toString();
        this.expires_in = a;
        this.refresh_token = e.refresh_token;
        this.enable_oauth = true;
        this.form.findField("smtp_user").setValue(e.email);
        this.form.findField("smtp_pass").setValue(e.access_token);
        this.getComponent("smtp_google_oauth").setText(_T("notification", "smtp_gmail_logout"));
        var d = [];
        this.processParams("set", d);
        this.module.appWin.setStatusBusy();
        this.module.appWin.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: d
            },
            scope: this,
            callback: function(h, g, f) {
                if (this.isDestroyed) {
                    return
                }
                if (!h) {
                    this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), _T("common", "commfail"))
                } else {
                    this.processReturnData(h, g, f)
                }
                this.module.appWin.clearStatusBusy()
            }
        })
    },
    onLogoutGoogle: function() {
        this.enable_oauth = false;
        this.expires_in = null;
        this.refresh_token = null;
        this.form.findField("smtp_user").setValue("");
        this.form.findField("smtp_pass").setValue("");
        this.form.findField("enable_mail").setValue(false);
        this.getComponent("smtp_google_oauth").setText(_T("notification", "smtp_gmail_login"));
        var a = [];
        this.processParams("set", a);
        this.module.appWin.setStatusBusy();
        this.module.appWin.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(d, c, b) {
                if (this.isDestroyed) {
                    return
                }
                if (!d) {
                    this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), _T("common", "commfail"))
                } else {
                    this.processReturnData(d, c, b)
                }
                this.module.appWin.clearStatusBusy()
            }
        })
    },
    enableCheckGroup: function() {
        var b = ["mail_recipient", "subject_prefix", "smtp_provider", "send_welcome_mail"];
        var a;
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.form, "enable_mail", b)
    },
    enableSMTPFields: function() {
        this.mon(this.form.findField("enable_mail"), "check", this.updateSMTPFields, this);
        this.mon(this.form.findField("smtp_enable_auth"), "check", this.onSMTPEnableAuthCheck, this)
    },
    enableGoogleOAuthBtn: function() {
        this.mon(this.form.findField("enable_mail"), "check", this.updateGoogleOAuthBtn, this)
    },
    enableTestMailBtn: function() {
        if (this._S("demo_mode")) {
            return
        }
        this.mon(this.form.findField("enable_mail"), "check", this.updateTestMailBtn, this);
        this.mon(this.form.findField("mail_recipient"), "change", this.updateTestMailBtn, this);
        this.mon(this.form.findField("subject_prefix"), "change", this.updateTestMailBtn, this);
        this.mon(this.form.findField("send_welcome_mail"), "check", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtp_provider"), "select", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtpserver"), "change", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtpport"), "change", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtp_enable_auth"), "check", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtp_user"), "change", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtp_pass"), "change", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtpssl"), "check", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtp_sender_name"), "change", this.updateTestMailBtn, this);
        this.mon(this.form.findField("smtp_sender_mail"), "change", this.updateTestMailBtn, this)
    },
    addRecipientTip: function() {
        SYNO.SDS.Utils.AddTip(this.form.findField("mail_recipient").getEl(), _T("pushservice", "pushservice_account_limit"))
    },
    addSenderMailTip: function() {
        SYNO.SDS.Utils.AddTip(this.form.findField("smtp_sender_mail").getEl(), _T("notification", "smtp_sender_mail_tip"))
    },
    updateTestMailBtn: function() {
        var b;
        var a = this.form.findField("enable_mail").getValue();
        var c = this.form.isDirty();
        if (this._S("demo_mode")) {
            return
        }
        b = Ext.getCmp(this.mailTestBtnId);
        if (!b) {
            return
        }
        if (!a) {
            b.setDisabled(true);
            return
        }
        b.setDisabled(c)
    },
    updateGoogleOAuthBtn: function() {
        var b;
        var a = this.form.findField("enable_mail").getValue();
        if (this._S("demo_mode")) {
            return
        }
        b = this.getComponent("smtp_google_oauth");
        if (!b) {
            return
        }
        if (!a) {
            b.setDisabled(true);
            return
        }
        if (!this.support_oauth) {
            b.setDisabled(true);
            return
        }
        b.setDisabled(false)
    },
    onSMTPEnableAuthCheck: function(b, a) {
        this.setFieldDisable(["smtp_user", "smtp_pass"], !this.checkSMTPUserPassEnable())
    },
    onSMTPProviderSelect: function(c, a, b) {
        this.updateSMTPFields()
    },
    updateSMTPFields: function() {
        var h = SYNO.ux.Utils.setFormItemIndent;
        var e = ["smtpserver", "smtpport", "smtp_enable_auth", "smtpssl", "smtp_sender_name", "smtp_sender_mail"];
        var c = ["smtp_user", "smtp_pass"];
        var j = this.form.findField("enable_mail").getValue();
        var a = this.form.findField("smtp_provider").getValue();
        var g;
        var b = ("custom" === a);
        var d, k;
        var f = this.getComponent("smtp_google_oauth");
        for (d = 0; d < c.length; ++d) {
            k = this.form.findField(c[d]);
            k.indent = b ? 3 : 2;
            h(k)
        }
        this.setFieldVisible(e, b);
        g = (j && b);
        this.setFieldDisable(e, !g);
        if ("gmail" === a && this.support_oauth) {
            this.setFieldVisible(c, false);
            f.show()
        } else {
            this.setFieldVisible(c, true);
            f.hide()
        }
        this.setFieldDisable(c, !this.checkSMTPUserPassEnable());
        this.form.findField("smtp_user").validate()
    },
    checkSMTPUserPassEnable: function() {
        var a = this.form.findField("enable_mail").getValue(),
            c = this.form.findField("smtp_provider").getValue(),
            b = this.form.findField("smtp_enable_auth").getValue();
        if (!a) {
            return false
        }
        if ("custom" !== c) {
            return true
        }
        if (b) {
            return true
        }
        return false
    },
    onClickTestMailBtn: function() {
        if (this._S("demo_mode")) {
            return
        }
        if (!this.form.findField("enable_mail").getValue()) {
            return
        }
        if (this.form.isDirty()) {
            this.updateTestMailBtn();
            return
        }
        if (!this.form.isValid()) {
            this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), _T("common", "forminvalid"));
            return
        }
        this.sendSMTPTestMail()
    },
    sendSMTPTestMail: function() {
        var d = this.form.findField("subject_prefix").getValue();
        var a = this.form.findField("smtpserver").getValue();
        var e = this.form.findField("smtpport").getValue();
        var c = this.form.findField("smtpssl").getValue();
        this.module.appWin.setStatusBusy();
        var b = {
            smtp_info: {
                server: a,
                port: e,
                ssl: c
            },
            mail: this.getRecipientArray(),
            subject_prefix: d
        };
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.Notification.Mail",
            version: 1,
            method: "send_test",
            params: b,
            scope: this,
            callback: function(i, f, h) {
                var g;
                if (i) {
                    g = _T("notification", "mail_test_success")
                } else {
                    g = _T("notification", "mail_test_failed");
                    if (f.code === 4602) {
                        g = _T("notification", "mail_test_failed") + "</BR>" + SYNO.API.getErrorString(f)
                    } else {
                        if (f && f.errors && f.errors.err_msg) {
                            g = '<span class="allowDefCtxMenu selectabletext">' + _T("notification", "mail_test_failed") + "</BR>" + f.errors.err_msg + "</span>"
                        }
                    }
                }
                this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), g);
                this.module.appWin.clearStatusBusy()
            }
        })
    },
    getRecipientArray: function() {
        var c = [],
            a = this.form.findField("mail_recipient").getValue().split(";");
        for (var b = 0; b < a.length; b++) {
            if ("" !== a[b]) {
                c.push(a[b])
            }
        }
        return c
    },
    setFieldVisible: function(d, f) {
        var a = SYNO.ux.Utils.findFormField,
            c, g = false,
            e;
        e = [].concat(d);
        for (var b = 0; b < e.length; b++) {
            c = a(this.form, e[b]);
            if (!c) {
                SYNO.Debug("[setFieldVisible] Cannot find field [%s]", e[b]);
                continue
            }
            if (c.isVisible() === f) {
                continue
            }
            c.setVisible(f);
            g = true
        }
        if (g) {
            this.doLayout()
        }
    },
    setFieldDisable: function(e, b) {
        var a = SYNO.ux.Utils.findFormField,
            d, f = [].concat(e);
        for (var c = 0; c < f.length; c++) {
            d = a(this.form, f[c]);
            if (!d) {
                SYNO.Debug("[setFieldDisable] Cannot find field [%s]", f[c]);
                continue
            }
            if (d.disabled === b) {
                continue
            }
            d.setDisabled(b)
        }
    },
    cleanPasswd: function() {
        this.form.findField("smtp_pass").setValue("");
        this.form.findField("smtp_pass").clearInvalid();
        this.updateTestMailBtn()
    },
    trimValue: function(e) {
        var b = false,
            a, c = 0;
        e = Ext.util.Format.trim(e);
        while (0 === e.indexOf(";")) {
            e = e.replace(";", "");
            e = Ext.util.Format.trim(e);
            b = true
        }
        while (0 < e.length && (e.length - 1) == e.lastIndexOf(";")) {
            e = e.substr(0, e.length - 1);
            e = Ext.util.Format.trim(e);
            b = true
        }
        a = e.split(";");
        for (c = 0; c < a.length; c++) {
            var d = a[c].length;
            a[c] = Ext.util.Format.trim(a[c]);
            if (d != a[c].length) {
                b = true
            }
        }
        e = a.join(";");
        if (!b) {
            return null
        }
        return e
    },
    validateMailRecipientField: function(d) {
        var c, a, b = 0;
        if ("" === d) {
            return _JSLIBSTR("extlang", "fieldblank")
        }
        c = this.trimValue(d);
        if (null !== c) {
            this.form.findField("mail_recipient").setValue(c);
            d = c
        }
        a = d.split(";");
        if (2 < a.length) {
            return _T("pushservice", "pushservice_account_num_exceed")
        }
        for (b = 0; b < a.length; b++) {
            if (!Ext.form.VTypes.email(a[b])) {
                return _JSLIBSTR("vtype", "bad_email")
            }
        }
        if (a.length > 1 && a[0] == a[1]) {
            return _T("pushservice", "pushservice_account_the_same")
        }
        return true
    },
    validateSMTPUserField: function(b) {
        var a = this.form.findField("smtp_provider").getValue();
        if ("custom" === a) {
            return true
        }
        if (!Ext.form.VTypes.email(b)) {
            return _JSLIBSTR("vtype", "bad_email")
        }
        return true
    },
    validateSMTPSenderNameField: function(a) {
        if (-1 !== a.search(/["=?\\]/)) {
            return false
        }
        return true
    },
    getMailConfGetWebAPI: function() {
        var a = {
            api: "SYNO.Core.Notification.Mail.Conf",
            method: "get",
            version: 1
        };
        return a
    },
    getMailConfSetWebAPI: function() {
        var h = SYNO.SDS.AdminCenter.Notification.MailUtil;
        var o = this.form.findField("enable_mail");
        var d = this.form.findField("subject_prefix");
        var b = this.form.findField("smtp_provider").getValue();
        var i = this.form.findField("smtpserver");
        var f = this.form.findField("smtpport");
        var m = this.form.findField("smtp_enable_auth");
        var l = this.form.findField("smtp_user");
        var c = this.form.findField("smtp_pass");
        var p = this.form.findField("smtpssl");
        var n = this.form.findField("send_welcome_mail");
        var k = this.form.findField("smtp_sender_name");
        var a = this.form.findField("smtp_sender_mail");
        var g = {};
        var e;
        var j;
        if ("custom" === b) {
            g.server = i.getValue();
            g.port = f.getValue();
            g.ssl = p.getValue();
            g.oauth = false
        } else {
            g = h.getSMTPInfo(b)
        }
        e = {
            enable_mail: o.getValue(),
            mail: this.getRecipientArray(),
            subject_prefix: d.getValue(),
            smtp_info: g,
            send_welcome_mail: n.getValue()
        };
        if ("custom" === b) {
            if (m.isDirty() || l.isDirty() || c.isDirty()) {
                e.smtp_auth = {
                    enable: m.getValue(),
                    user: l.getValue(),
                    pass: c.getValue()
                }
            }
        } else {
            if (l.isDirty() || c.isDirty()) {
                e.smtp_auth = {
                    enable: true,
                    user: l.getValue(),
                    pass: c.getValue()
                }
            }
        }
        if ("custom" === b) {
            e.sender_name = k.getValue();
            e.sender_mail = a.getValue()
        } else {
            e.sender_name = "";
            e.sender_mail = l.getValue()
        }
        if ("gmail" === b && this.support_oauth) {
            if (o.getValue() && this.enable_oauth) {
                e.enable_oauth = true
            }
            if (this.refresh_token && this.expires_in) {
                e.smtp_oauth = {
                    refresh_token: this.refresh_token,
                    expires_in: this.expires_in
                }
            }
        }
        j = {
            api: "SYNO.Core.Notification.Mail.Conf",
            method: "set",
            params: e,
            version: 1
        };
        return j
    },
    processParams: function(b, a) {
        if ("get" === b) {
            this.push_verified_status_done = false;
            a.push(this.getMailConfGetWebAPI())
        } else {
            if ("set" === b && this.isDirty()) {
                a.push(this.getMailConfSetWebAPI());
                a.push(this.getMailConfGetWebAPI())
            }
        }
        return a
    },
    processSMTPReturnData: function(d) {
        var b = SYNO.SDS.AdminCenter.Notification.MailUtil,
            a = SYNO.API.Util.GetValByAPI(d, "SYNO.Core.Notification.Mail.Conf", "get"),
            c = {};
        if (!Ext.isDefined(a) || Ext.isDefined(a.code)) {
            return c
        }
        Ext.apply(c, a);
        c.smtp_enable_mail = c.enable_mail ? c.enable_mail : false;
        c.smtp_mail = c.mail ? c.mail : [];
        c.smtp_subject_prefix = c.subject_prefix ? c.subject_prefix : "";
        c.smtp_enable_auth = c.smtp_auth.enable;
        c.smtp_user = c.smtp_auth.user;
        c.smtp_pass = c.smtp_enable_auth ? "12345678" : "";
        c.smtp_sender_name = c.sender_name;
        c.smtp_sender_mail = c.sender_mail;
        if ("" !== c.smtp_sender_name) {
            c.smtp_provider = "custom"
        } else {
            if (c.smtp_sender_mail !== c.smtp_user) {
                c.smtp_provider = "custom"
            } else {
                c.smtp_provider = b.matchSMTPProvider(c.smtp_info, c.enable_oauth || !this.support_oauth)
            }
        }
        if (c.smtp_info) {
            c.smtpserver = c.smtp_info.server;
            c.smtpport = c.smtp_info.port;
            c.smtpssl = c.smtp_info.ssl
        }
        this.enable_oauth = c.enable_oauth;
        if (this.enable_oauth) {
            this.getComponent("smtp_google_oauth").setText(_T("notification", "smtp_gmail_logout"))
        } else {
            this.getComponent("smtp_google_oauth").setText(_T("notification", "smtp_gmail_login"))
        }
        c.has_new_data = true;
        delete c.mail;
        delete c.subject_prefix;
        delete c.smtp_auth;
        return c
    },
    onLoad: function(c) {
        var b = [],
            a = [];
        c.mail_server = "smtp";
        c.subject_prefix = c.smtp_subject_prefix;
        b = c.smtp_mail;
        b.each(function(d) {
            if ("" !== d) {
                a.push(d)
            }
        });
        c.mail_recipient = a.join(";")
    },
    processReturnData: function(b, d, a) {
        var c = {};
        Ext.apply(c, this.processSMTPReturnData(d));
        if (c.has_new_data) {
            delete c.has_new_data;
            this.onLoad(c)
        }
        this.form.setValues(c);
        this.updateSMTPFields();
        this.updateTestMailBtn();
        this.updateGoogleOAuthBtn()
    },
    reset: function() {
        if (this.form.isDirty()) {
            this.form.reset()
        }
    },
    isDirty: function() {
        return this.form.isDirty()
    }
});
SYNO.SDS.AdminCenter.Notification.MailUtil = {
    defaultSMTPProvider: "gmail",
    providers: [{
        name: "gmail",
        server: "smtp.gmail.com",
        port: 465,
        ssl: true,
        oauth: true
    }, {
        name: "yahoo",
        server: "smtp.mail.yahoo.com",
        port: 587,
        ssl: true,
        oauth: false
    }, {
        name: "outlook",
        server: "smtp.live.com",
        port: 587,
        ssl: true,
        oauth: false
    }, {
        name: "qq",
        server: "smtp.qq.com",
        port: 465,
        ssl: true,
        oauth: false
    }],
    matchSMTPProvider: function(e, c) {
        var g, b, a, d, f;
        if (undefined === e) {
            return this.defaultSMTPProvider
        }
        g = e.server;
        b = e.port;
        a = e.ssl;
        if (undefined === g || "" === g) {
            return this.defaultSMTPProvider
        }
        for (d = 0; d < this.providers.length; ++d) {
            f = this.providers[d];
            if (g === f.server && b === f.port && a === f.ssl && c === f.oauth) {
                return f.name
            }
        }
        return "custom"
    },
    getSMTPInfo: function(b) {
        var a;
        for (a = 0; a < this.providers.length; ++a) {
            if (b === this.providers[a].name) {
                return {
                    server: this.providers[a].server,
                    port: this.providers[a].port,
                    ssl: this.providers[a].ssl
                }
            }
        }
        return {}
    },
    diffArray: function(d, c) {
        var e = [],
            g = [],
            f;
        for (f = 0; f < c.length; f++) {
            e[c[f]] = true
        }
        for (f = 0; f < d.length; f++) {
            if (!e[d[f]]) {
                g.push(d[f])
            }
        }
        return g
    }
};
Ext.define("SYNO.SDS.AdminCenter.Notification.SMSSettingPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    DEFAULT_SMS_PROVIDER: "clickatell",
    constructor: function(c) {
        this.module = c.module;
        this.webapi = {
            api: "SYNO.Core.Notification.SMS.Conf",
            methods: {
                get: "get",
                set: "set"
            },
            version: 1
        };
        SYNO.Debug("create form: sms");
        this.dsSMSProvider = new Ext.data.SimpleStore({
            fields: ["name", "template", "api_id"],
            data: []
        });
        var a = new Ext.data.SimpleStore({
            fields: ["value"],
            data: [
                [""],
                ["+"]
            ]
        });
        var b = Ext.apply({
            webapi: this.webapi,
            itemId: "smsSettingTab",
            title: _T("helptoc", "notification_sms"),
            autoScroll: true,
            labelWidth: 240,
            items: [{
                xtype: "syno_displayfield",
                hideLabel: true,
                value: _T("smsnotify", "smsnotify_enable_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_sms",
                boxLabel: _T("smsnotify", "smsnotify_enable"),
                listeners: {
                    scope: this,
                    check: this.onProviderChange
                }
            }, {
                xtype: "syno_compositefield",
                indent: 1,
                fieldLabel: _T("smsnotify", "sms_provider"),
                items: [{
                    xtype: "syno_combobox",
                    name: "provider_name",
                    width: 180,
                    valueField: "name",
                    displayField: "name",
                    allowBlank: false,
                    scope: this,
                    store: this.dsSMSProvider,
                    listeners: {
                        scope: this,
                        change: this.onProviderChange,
                        select: this.onProviderChange
                    }
                }, {
                    xtype: "syno_button",
                    disabled: this._S("demo_mode"),
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    id: this.providerEditBtnId = Ext.id(),
                    text: _T("common", "alt_edit"),
                    scope: this,
                    handler: this.onClickProviderEditBtn
                }, {
                    xtype: "syno_button",
                    disabled: this._S("demo_mode"),
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    id: this.providerDeleteBtnId = Ext.id(),
                    text: _T("common", "delete"),
                    scope: this,
                    handler: this.onClickProviderDeleteBtn
                }]
            }, {
                xtype: "syno_textfield",
                name: "user",
                maxlength: 32,
                indent: 1,
                width: 180,
                allowBlank: false,
                fieldLabel: _T("smsnotify", "sms_username"),
                enableKeyEvents: true,
                listeners: {
                    scope: this,
                    keypress: this.cleanPasswd,
                    keydown: this.cleanPasswd
                }
            }, {
                xtype: "syno_textfield",
                textType: "password",
                name: "passwd",
                maxlength: 128,
                indent: 1,
                width: 180,
                allowBlank: false,
                fieldLabel: _T("common", "password")
            }, {
                xtype: "syno_textfield",
                textType: "password_confirm",
                name: "passwd2",
                confirmFor: "passwd",
                maxlength: 128,
                indent: 1,
                width: 180,
                allowBlank: false,
                fieldLabel: _T("user", "user_repswd")
            }, {
                xtype: "syno_textfield",
                name: "api_id",
                maxlength: 64,
                indent: 1,
                width: 180,
                allowBlank: false,
                fieldLabel: _T("smsnotify", "api_id")
            }, {
                xtype: "syno_button",
                indent: 1,
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                id: this.providerAddBtnId = Ext.id(),
                text: _T("smsnotify", "provider_new"),
                scope: this,
                handler: this.onClickProviderAddBtn
            }, {
                xtype: "syno_displayfield"
            }, {
                xtype: "syno_compositefield",
                indent: 1,
                fieldLabel: _T("smsnotify", "primary_phone"),
                items: [{
                    xtype: "syno_combobox",
                    value: "",
                    name: "phone1_prefix",
                    displayField: "value",
                    valueField: "value",
                    width: 50,
                    store: a
                }, {
                    xtype: "syno_displayfield",
                    value: "&nbsp;",
                    width: 5
                }, {
                    xtype: "syno_textfield",
                    name: "phone1_code",
                    vtype: "digit",
                    allowBlank: false,
                    blankText: _T("smsnotify", "enter_nationcode"),
                    maxlength: 8,
                    width: 80,
                    style: "position: absolute;"
                }, {
                    xtype: "syno_displayfield",
                    value: "-"
                }, {
                    xtype: "syno_textfield",
                    name: "phone1_num",
                    allowBlank: false,
                    maxlength: 30,
                    vtype: "digit"
                }]
            }, {
                xtype: "syno_compositefield",
                indent: 1,
                fieldLabel: _T("smsnotify", "secondary_phone"),
                items: [{
                    xtype: "syno_combobox",
                    value: "",
                    name: "phone2_prefix",
                    itemId: "phone2_prefix",
                    displayField: "value",
                    valueField: "value",
                    width: 50,
                    store: a
                }, {
                    xtype: "syno_displayfield",
                    value: "&nbsp;",
                    width: 5
                }, {
                    xtype: "syno_textfield",
                    name: "phone2_code",
                    itemId: "phone2_code",
                    confirmTo: "phone2_num",
                    maxlength: 8,
                    vtype: "digit",
                    validator: function(f) {
                        if (!this.ownerCt) {
                            return "Failed to find ownerCt"
                        }
                        var e = this.ownerCt.get(this.confirmTo);
                        if (0 === f.length) {
                            if ("" !== e.getValue()) {
                                return _T("smsnotify", "enter_nationcode")
                            }
                        }
                        var d = this.ownerCt.get("phone2_prefix").getValue();
                        if ("+" === d && "" === f) {
                            return _T("smsnotify", "enter_nationcode")
                        }
                        return true
                    },
                    width: 80,
                    style: "position: absolute;"
                }, {
                    xtype: "syno_displayfield",
                    value: "-"
                }, {
                    xtype: "syno_textfield",
                    name: "phone2_num",
                    itemId: "phone2_num",
                    confirmTo: "phone2_code",
                    maxlength: 30,
                    vtype: "digit",
                    validator: function(e) {
                        if (!this.ownerCt) {
                            return "Failed to find ownerCt"
                        }
                        var d = this.ownerCt.get("phone2_prefix").getValue();
                        if ("+" === d && "" === e) {
                            return _T("smsnotify", "SMS_alert_secondary_phone")
                        }
                        return true
                    }
                }]
            }, {
                xtype: "syno_displayfield"
            }, {
                xtype: "syno_checkbox",
                name: "chk_msg_interval",
                boxLabel: _T("smsnotify", "msg_interval_enable")
            }, {
                xtype: "syno_numberfield",
                name: "msg_interval",
                indent: 1,
                fieldLabel: _T("smsnotify", "msg_interval"),
                width: 180,
                maxlength: 5,
                value: 1,
                minValue: 1,
                maxValue: 10000
            }, {
                xtype: "syno_button",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                id: this.smsTestBtnId = Ext.id(),
                text: _T("smsnotify", "test_sms"),
                scope: this,
                handler: this.onClickTestSmsBtn
            }]
        }, c);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        })
    },
    enableCheckGroup: function() {
        var a = ["provider_name", "user", "passwd", "passwd2", "api_id", "phone1_code", "phone1_num", "phone2_code", "phone2_num", "chk_msg_interval", "phone1_prefix", "phone2_prefix"];
        var c, b;
        if (!this._S("demo_mode")) {
            a.push(this.smsTestBtnId);
            a.push(this.providerAddBtnId)
        }
        c = new SYNO.SDS.Utils.EnableCheckGroup(this.form, "enable_sms", a);
        b = new SYNO.SDS.Utils.EnableCheckGroup(this.form, "chk_msg_interval", ["msg_interval"]);
        this.form.findField("phone2_code").on("blur", function() {
            if (this.form.findField("phone2_code").getValue() !== "") {
                this.form.findField("phone2_num").allowBlank = false;
                this.form.findField("phone2_code").allowBlank = false
            } else {
                if (this.form.findField("phone2_num").getValue() === "") {
                    this.form.findField("phone2_num").allowBlank = true;
                    this.form.findField("phone2_code").allowBlank = true;
                    this.form.findField("phone2_num").clearInvalid();
                    this.form.findField("phone2_code").clearInvalid()
                }
            }
        }, this);
        this.form.findField("phone2_num").on("blur", function() {
            if (this.form.findField("phone2_num").getValue() !== "") {
                this.form.findField("phone2_num").allowBlank = false;
                this.form.findField("phone2_code").allowBlank = false
            } else {
                if (this.form.findField("phone2_code").getValue() === "") {
                    this.form.findField("phone2_num").allowBlank = true;
                    this.form.findField("phone2_code").allowBlank = true;
                    this.form.findField("phone2_num").clearInvalid();
                    this.form.findField("phone2_code").clearInvalid()
                }
            }
        }, this)
    },
    cleanPasswd: function() {
        this.form.findField("passwd").setValue("");
        this.form.findField("passwd").clearInvalid();
        this.form.findField("passwd2").setValue("");
        this.form.findField("passwd2").clearInvalid()
    },
    getProviderList: function(b) {
        if (b.provider_info) {
            var c = [];
            for (var a = 0; a < b.provider_info.length; a++) {
                c.push([b.provider_info[a].provider_name, b.provider_info[a].template, b.provider_info[a].api_id])
            }
            this.dsSMSProvider.loadData(c)
        }
        this.onProviderChange();
        this.el.unmask()
    },
    queryProviderInfo: function() {
        this.el.mask();
        this.sendWebAPI({
            api: "SYNO.Core.Notification.SMS.Provider",
            version: 1,
            method: "list",
            scope: this,
            callback: function(b, a) {
                this.getProviderList(a)
            }
        })
    },
    onProviderChange: function() {
        var b = this.form.findField("enable_sms").getValue();
        var a = this.form.findField("provider_name").getValue();
        var c = b;
        this.checkDisableDelEditBtn(!b, a);
        this.dsSMSProvider.each(function(d) {
            if (a === d.get("name")) {
                if (0 <= d.get("template").search("api_id=")) {
                    SYNO.SDS.Utils.DisplayField(this.form, "api_id", true);
                    this.form.findField("api_id").setValue(d.get("api_id"))
                } else {
                    SYNO.SDS.Utils.DisplayField(this.form, "api_id", false);
                    c = false
                }
                this.form.findField("api_id").setDisabled(!c)
            }
        }, this)
    },
    checkDisableDelEditBtn: function(a, b) {
        if (this.DEFAULT_SMS_PROVIDER == b) {
            Ext.getCmp(this.providerDeleteBtnId).setDisabled(true);
            Ext.getCmp(this.providerEditBtnId).setDisabled(true)
        } else {
            Ext.getCmp(this.providerDeleteBtnId).setDisabled(false || a);
            Ext.getCmp(this.providerEditBtnId).setDisabled(false || a)
        }
    },
    onClickTestSmsBtn: function() {
        if (!this.form.findField("enable_sms").getValue()) {
            return
        }
        if (!this.form.isValid()) {
            this.module.appWin.getMsgBox().alert(_T("notification", "notification_sms"), _T("common", "forminvalid"));
            return
        }
        this.module.appWin.delayedMask(0.1, 100);
        var a = this.getSendTestSMSParam();
        this.sendWebAPI({
            api: "SYNO.Core.Notification.SMS",
            version: 1,
            method: "send_test",
            params: a,
            scope: this,
            callback: function(b) {
                this.module.appWin.unmask();
                if (!b) {
                    this.module.appWin.getMsgBox().alert(_T("tree", "leaf_smsnotify"), _T("common", "error_system"));
                    return
                }
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_smsnotify"), _T("smsnotify", "sms_test_success"))
            }
        })
    },
    getSendTestSMSParam: function() {
        var b = {
                prefix: this.form.findField("phone1_prefix").getValue(),
                code: this.form.findField("phone1_code").getValue(),
                num: this.form.findField("phone1_num").getValue()
            },
            a = {
                prefix: this.form.findField("phone2_prefix").getValue(),
                code: this.form.findField("phone2_code").getValue(),
                num: this.form.findField("phone2_num").getValue()
            };
        var d = {
            provider_id: this.form.findField("provider_name").getValue(),
            phone_info: [b, a]
        };
        if (this.form.findField("passwd").getValue() === this.form.findField("passwd2").getValue()) {
            d.user = this.form.findField("user").getValue();
            d.passwd = this.form.findField("passwd").getValue()
        }
        var c = this.form.findField("api_id");
        if (!c.disabled) {
            d.api_id = c.getValue()
        }
        return d
    },
    onClickProviderDeleteBtn: function() {
        this.module.appWin.getMsgBox().confirm(_T("tree", "leaf_smsnotify"), _T("smsnotify", "confirm_delete_provider"), function(a) {
            if ("yes" != a) {
                return
            }
            this.module.appWin.delayedMask(0.1, 100);
            this.sendWebAPI({
                api: "SYNO.Core.Notification.SMS.Provider",
                version: 1,
                method: "delete",
                params: {
                    provider_id: this.form.findField("provider_name").getValue()
                },
                scope: this,
                callback: function(c, b) {
                    this.module.appWin.unmask();
                    if (!c) {
                        this.module.appWin.getMsgBox().alert(_T("tree", "leaf_smsnotify"), _T("common", "error_system"));
                        return
                    }
                    this.form.findField("provider_name").setValue(this.DEFAULT_SMS_PROVIDER);
                    this.queryProviderInfo()
                }
            })
        }, this)
    },
    onClickProviderAddBtn: function() {
        var a = new SYNO.SDS.AdminCenter.Notification.ProviderEditDialog({
            owner: this.module.appWin,
            dsSMSProvider: this.dsSMSProvider,
            parentModule: this
        });
        a.open()
    },
    onClickProviderEditBtn: function() {
        var b = this.form.findField("provider_name").getValue();
        var a = new SYNO.SDS.AdminCenter.Notification.ProviderEditDialog({
            owner: this.module.appWin,
            dsSMSProvider: this.dsSMSProvider,
            parentModule: this,
            smsProvider: b
        });
        a.open()
    },
    processParams: function(c, b) {
        if ("set" !== c) {
            return b
        }
        var a = this.webapi.api;
        b.each(function(g) {
            var d = g.params;
            if ("set" !== g.method) {
                return
            }
            if (a === g.api) {
                var f = {
                        prefix: d.phone1_prefix,
                        code: d.phone1_code,
                        num: d.phone1_num
                    },
                    e = {
                        prefix: d.phone2_prefix,
                        code: d.phone2_code,
                        num: d.phone2_num
                    };
                Ext.apply(d, {
                    phone_info: [f, e]
                });
                if (d.msg_interval === undefined) {
                    d.msg_interval = 0
                }
                if (g.params.passwd != g.params.passwd2) {
                    delete g.params.user;
                    delete g.params.passwd
                }
                delete g.params.chk_msg_interval;
                delete g.params.passwd2;
                delete g.params.phone1_prefix;
                delete g.params.phone1_code;
                delete g.params.phone1_num;
                delete g.params.phone2_prefix;
                delete g.params.phone2_code;
                delete g.params.phone2_num
            }
            return
        });
        return b
    },
    onLoad: function(a) {
        if ("" !== a.user) {
            a.passwd = "12345678";
            a.passwd2 = "87654321"
        }
        if (a.phone_info && a.phone_info[0]) {
            a.phone1_prefix = a.phone_info[0].prefix;
            a.phone1_code = a.phone_info[0].code;
            a.phone1_num = a.phone_info[0].num
        }
        if (a.phone_info && a.phone_info[1]) {
            a.phone2_prefix = a.phone_info[1].prefix;
            a.phone2_code = a.phone_info[1].code;
            a.phone2_num = a.phone_info[1].num
        }
        if (a.msg_interval > 0) {
            a.chk_msg_interval = true
        }
    },
    processReturnData: function(d, c, b) {
        this.formData = {};
        for (var a = 0; a < c.result.length; a++) {
            if (!c.result[a].success || !c.result[a].data || b.compound[a].api !== this.webapi.api) {
                continue
            }
            this.onLoad(c.result[a].data);
            Ext.apply(this.formData, c.result[a].data)
        }
        this.form.setValues(this.formData);
        this.queryProviderInfo()
    },
    reset: function() {
        if (this.form.isDirty()) {
            this.form.reset()
        }
    },
    isDirty: function() {
        return this.form.isDirty()
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.Notification");
SYNO.SDS.AdminCenter.Notification.PairedMobileDialog = Ext.extend(SYNO.SDS.ModalWindow, {
    constructor: function(b) {
        var a = Ext.apply(b, {
            dsmStyle: "v5",
            useStatusBar: true,
            title: _T("pushservice", "pushservice_manage_mobile_device"),
            width: 600,
            height: 400,
            layout: "fit",
            items: [this.getGridPanel()],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "close"),
                scope: this,
                handler: this.close
            }]
        });
        a = this.addStatusBar(a);
        SYNO.LayoutConfig.fill(a);
        SYNO.SDS.AdminCenter.Notification.PairedMobileDialog.superclass.constructor.call(this, a);
        this.mon(this, "show", function() {
            this.loadData()
        }, this, {
            single: true
        })
    },
    addStatusBar: function(a) {
        if (!a.useStatusBar) {
            return a
        }
        var b = {
            xtype: "statusbar",
            defaultText: "&nbsp;",
            statusAlign: "left",
            buttonAlign: "left",
            items: []
        };
        if (a.buttons) {
            b.items = b.items.concat(a.buttons);
            delete a.buttons
        }
        Ext.applyIf(a, {
            fbar: b
        });
        return a
    },
    loadData: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.grid.getStore().load({
            scope: this,
            callback: function(b, a, c) {
                this.clearStatusBusy();
                if (!c) {
                    this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("pushservice", "error_server_connet"));
                    return
                }
                Ext.getCmp(this.unpairBtnId).setDisabled(0 === b.length)
            }
        })
    },
    getGridPanel: function() {
        this.grid = new SYNO.ux.GridPanel({
            layout: "fit",
            store: new SYNO.API.Store({
                api: "SYNO.Core.Notification.Push.Mobile",
                method: "list",
                version: 1,
                appWindow: this,
                reader: new Ext.data.JsonReader({
                    root: "list",
                    id: "target_id"
                }, [{
                    name: "device_name"
                }, {
                    name: "firmware_version"
                }, {
                    name: "app_version"
                }, {
                    name: "target_id"
                }])
            }),
            colModel: new Ext.grid.ColumnModel({
                defaults: {
                    width: 120,
                    sortable: true
                },
                columns: [{
                    id: "name",
                    header: _T("common", "name"),
                    dataIndex: "device_name"
                }, {
                    header: _T("pushservice", "mobile_version"),
                    dataIndex: "firmware_version"
                }, {
                    header: _T("pushservice", "mobile_ds_file_version"),
                    dataIndex: "app_version"
                }]
            }),
            stripeRows: true,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            tbar: new Ext.Toolbar({
                items: [{
                    xtype: "syno_button",
                    text: _T("common", "refresh"),
                    scope: this,
                    handler: this.loadData
                }, {
                    xtype: "syno_button",
                    text: _T("pushservice", "pushservice_unpair_device"),
                    scope: this,
                    handler: this.onClickUnpair,
                    id: this.unpairBtnId = Ext.id(),
                    disabled: true
                }]
            })
        });
        return this.grid
    },
    onClickUnpair: function() {
        var a = this.grid.getSelectionModel().getSelected();
        if (null === a) {
            this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("mediaservice", "select_one"));
            return
        }
        this.getMsgBox().confirm(_T("pushservice", "pushservice_manage_mobile_device"), _T("common", "ask_cont"), function(b) {
            if ("yes" === b) {
                this.doUnpair()
            }
        }, this)
    },
    doUnpair: function() {
        var a = this.grid.getSelectionModel().getSelections();
        var c = [];
        var b = 0;
        for (b = 0; b < a.length; b++) {
            c.push(a[b].get("target_id"))
        }
        this.setStatusBusy({
            text: _T("common", "applying")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Push.Mobile",
            method: "unpair",
            version: 1,
            params: {
                target_id_list: c.join(",")
            },
            scope: this,
            callback: function(f, e, d) {
                this.clearStatusBusy();
                if (f) {
                    this.loadData()
                } else {
                    this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"))
                }
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Notification.PushSettingPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.module = b.module;
        this.push_mail_verified = [];
        this.push_mail_unverified = [];
        this.push_mail_check_status_done = false;
        SYNO.Debug("create form: push");
        var a = Ext.apply({
            itemId: "pushSettingTab",
            title: _T("notification", "pushservice"),
            autoScroll: true,
            items: [{
                xtype: "syno_displayfield",
                hideLabel: true,
                value: _T("notification", "pushservice_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable_push_mail",
                boxLabel: _T("notification", "push_mail_server_desc")
            }, {
                xtype: "syno_textfield",
                name: "mail_recipient",
                width: 280,
                maxlength: 256,
                indent: 1,
                fieldLabel: _T("notification", "mail_recipient"),
                allowBlank: false,
                disabled: true,
                validator: this.validateMailRecipientField.createDelegate(this)
            }, {
                xtype: "syno_displayfield",
                name: "push_mail_note_field",
                value: "",
                indent: 1,
                hidden: true,
                isDirty: function() {
                    return false
                }
            }, {
                xtype: "syno_button",
                text: _T("notification", "push_mail_send_verify"),
                indent: 1,
                id: this.mailVerifyBtnId = Ext.id(),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                hidden: true,
                scope: this,
                handler: this.onClickPushMailVerifyBtn
            }, {
                xtype: "syno_displayfield",
                name: "push_mail_note_dummy_field",
                hidden: true
            }, {
                xtype: "syno_checkbox",
                name: "mobile_enable",
                boxLabel: _T("pushservice", "pushservice_mobile_enable")
            }, {
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                xtype: "syno_button",
                text: _T("pushservice", "pushservice_manage_mobile_device"),
                indent: 1,
                id: this.mobileManBtnId = Ext.id(),
                scope: this,
                handler: this.onClickManMobileBtn
            }, {
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                xtype: "syno_button",
                text: _T("pushservice", "enable_browser_push"),
                indent: 0,
                id: this.browserPairBtn = Ext.id(),
                scope: this,
                handler: this.onClickBrowserPairBtn
            }, {
                xtype: "syno_displayfield"
            }, {
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                xtype: "syno_button",
                text: _T("pushservice", "pushservice_send_test_notification"),
                id: this.testBtnId = Ext.id(),
                scope: this,
                handler: this.onClickTestNotificationBtn
            }]
        }, b);
        this.callParent([a]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        })
    },
    activate: function() {
        if (this.formData.enable_push_mail && !this.push_mail_check_status_done) {
            this.checkPushMailStatus()
        }
        this.updatePushMailNotifyVisible();
        this.pollingMailStatusStart()
    },
    enableCheckGroup: function() {
        var a;
        a = new SYNO.SDS.Utils.EnableCheckGroup(this.form, "enable_push_mail", ["mail_recipient", this.mailVerifyBtnId]);
        SYNO.SDS.Utils.AddTip(Ext.getCmp(this.browserPairBtn).getEl(), _T("pushservice", "enable_browser_push_tip"));
        SYNO.SDS.Utils.AddTip(this.form.findField("mail_recipient").getEl(), _T("pushservice", "pushservice_account_limit"))
    },
    updateButtonStatus: function(d) {
        var b = Ext.getCmp(this.mobileManBtnId);
        var e = Ext.getCmp(this.testBtnId);
        var c = Ext.getCmp(this.browserPairBtn);
        if (b) {
            b.setDisabled(!d.mobile_enable)
        }
        if (e && !this._S("demo_mode")) {
            e.setDisabled(!(d.mobile_enable || this.formData.enable_push_mail))
        }
        if (c) {
            var a = ("safari" in window && "pushNotification" in window.safari) || Ext.isChrome;
            c.setDisabled(!d.mobile_enable || !a)
        }
    },
    onClickTestNotificationBtn: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Push",
            method: "send_test",
            version: 1,
            params: {},
            scope: this,
            callback: function(c, b, a) {
                this.module.appWin.getMsgBox().alert(_T("notification", "pushservice"), _T("pushservice", "pushservice_test_notification_sent"));
                this.module.appWin.unmask()
            }
        });
        this.sendPushserviceTestMail()
    },
    onClickManMobileBtn: function() {
        var a = new SYNO.SDS.AdminCenter.Notification.PairedMobileDialog({
            owner: this.module.appWin
        });
        a.open()
    },
    onClickBrowserPairBtn: function() {
        var b;
        var a = window.open("about:blank");
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Push.AuthToken",
            method: "get",
            version: 1,
            params: {},
            scope: this,
            callback: function(e, d, c) {
                if (!e) {
                    a.close();
                    this.ownerCt.setStatusError("Couldn't get auth token");
                    return
                }
                b = Ext.urlEncode({
                    register_token: d.register_token,
                    oauth_id: d.oauth_id,
                    event_category: "system"
                });
                a.location.replace(String.format("{0}?{1}", d.pushbrowser_server, b))
            }
        })
    },
    trimValue: function(e) {
        var b = false;
        e = Ext.util.Format.trim(e);
        while (0 === e.indexOf(";")) {
            e = e.replace(";", "");
            e = Ext.util.Format.trim(e);
            b = true
        }
        while (0 < e.length && (e.length - 1) == e.lastIndexOf(";")) {
            e = e.substr(0, e.length - 1);
            e = Ext.util.Format.trim(e);
            b = true
        }
        var a = e.split(";");
        for (var c = 0; c < a.length; c++) {
            var d = a[c].length;
            a[c] = Ext.util.Format.trim(a[c]);
            if (d != a[c].length) {
                b = true
            }
        }
        e = a.join(";");
        if (!b) {
            return null
        }
        return e
    },
    processParams: function(b, a) {
        if ("get" === b) {
            this.push_verified_status_done = false
        } else {
            if ("set" === b) {
                a.push(this.getPushMailSetWebAPI(), this.getPushConfSetWebAPI())
            }
        }
        a.push({
            api: "SYNO.Core.Notification.Push.Mail",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.Notification.Push.Conf",
            method: "get",
            version: 1
        });
        return a
    },
    processReturnData: function(d, c, b) {
        this.formData = {};
        Ext.apply(this.formData, this.processPushReturnData(c));
        if (this.formData.enable_push_mail) {
            this.checkPushMailStatus()
        }
        for (var a = 0; a < c.result.length; a++) {
            if (!c.result[a].success || !c.result[a].data || b.compound[a].api !== "SYNO.Core.Notification.Push.Conf") {
                continue
            }
            this.updateButtonStatus(c.result[a].data || {});
            var e = null;
            if ("set" === d && c.result[a].data.mobile_enable && this.form.findField("mobile_enable").isDirty()) {
                e = _T("pushservice", "pushservice_mobile_hint")
            }
            if (null !== e) {
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_notification"), e)
            }
            Ext.apply(this.formData, c.result[a].data)
        }
        this.form.setValues(this.formData);
        this.updatePushMailUnverify();
        this.updatePushMailNotifyVisible()
    },
    processPushReturnData: function(c) {
        var a = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.Notification.Push.Mail", "get"),
            b = {};
        if (!a) {
            return b
        }
        Ext.apply(b, a);
        b.enable_push_mail = b.enable_mail ? b.enable_mail : false;
        b.mail_recipient = b.mail.join(";");
        delete b.enable_mail;
        delete b.mail;
        delete b.subject_prefix;
        return b
    },
    reset: function() {
        if (this.form.isDirty()) {
            this.form.reset()
        }
    },
    isDirty: function() {
        return this.form.isDirty()
    },
    getPushMailSetWebAPI: function() {
        var b = {
            enable_mail: this.form.findField("enable_push_mail").getValue(),
            mail: this.getRecipientArray()
        };
        var a = {
            api: "SYNO.Core.Notification.Push.Mail",
            method: "set",
            params: b,
            version: 1
        };
        return a
    },
    getPushConfSetWebAPI: function() {
        var b = this.form;
        var c = {
            mobile_enable: b.findField("mobile_enable").getValue()
        };
        var a = {
            api: "SYNO.Core.Notification.Push.Conf",
            method: "set",
            params: c,
            version: 1
        };
        return a
    },
    checkPushMailStatus: function() {
        if (this._S("demo_mode")) {
            return
        }
        this.push_mail_check_status_done = false;
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.Notification.Push.Mail",
            version: 1,
            method: "status",
            params: {},
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    if (this.ownerCt && this.ownerCt.activeTab == this && this.form.findField("enable_push_mail").getValue()) {
                        this.ownerCt.setStatusError({
                            text: _T("notification", "error_get_verification"),
                            clear: true
                        })
                    }
                    return
                }
                this.push_mail_verified = b.verified_mail;
                this.push_mail_check_status_done = true;
                this.updatePushMailUnverify();
                this.updatePushMailNotifyVisible();
                this.pollingMailStatusStart()
            }
        })
    },
    updatePushMailUnverify: function() {
        var c, b, a;
        if (this._S("demo_mode")) {
            return
        }
        if (!this.push_mail_check_status_done) {
            return
        }
        a = this.getRecipientArray();
        this.push_mail_unverified = this.diffMailArray(a, this.push_mail_verified);
        if (1 > this.push_mail_unverified.length) {
            if (this.form.findField("push_mail_note_field")) {
                this.form.findField("push_mail_note_field").setValue("")
            }
            return
        }
        c = '<font class="blue-status">' + this.push_mail_unverified.join(", ") + "</font>";
        b = String.format('<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + String.format(_T("notification", "push_mail_verify_note"), c));
        this.form.findField("push_mail_note_field").setValue(b)
    },
    updatePushMailNotifyVisible: function() {
        var a = ["push_mail_note_field", this.mailVerifyBtnId, "push_mail_note_dummy_field"];
        if (this._S("demo_mode")) {
            this.setFieldVisible(a, false);
            return
        }
        if (!this.push_mail_check_status_done) {
            return
        }
        if (!this.form.findField("enable_push_mail").getValue()) {
            this.setFieldVisible(a, false);
            return
        }
        if (this.form.findField("mail_recipient").isDirty()) {
            this.setFieldVisible(a, false);
            return
        }
        if (1 > this.push_mail_unverified.length) {
            this.setFieldVisible(a, false);
            return
        }
        this.setFieldVisible(a, true)
    },
    setFieldVisible: function(d, f) {
        var a = SYNO.ux.Utils.findFormField,
            c, g = false,
            e = [].concat(d);
        for (var b = 0; b < e.length; b++) {
            c = a(this.form, e[b]);
            if (!c) {
                SYNO.Debug("[setFieldVisible] Cannot find field [%s]", e[b]);
                continue
            }
            if (c.isVisible() === f) {
                continue
            }
            c.setVisible(f);
            g = true
        }
        if (g) {
            this.doLayout()
        }
    },
    validateMailRecipientField: function(d) {
        var c, a, b = 0;
        if ("" === d) {
            return _JSLIBSTR("extlang", "fieldblank")
        }
        c = this.trimValue(d);
        if (null !== c) {
            this.form.findField("mail_recipient").setValue(c);
            d = c
        }
        a = d.split(";");
        if (2 < a.length) {
            return _T("pushservice", "pushservice_account_num_exceed")
        }
        for (b = 0; b < a.length; b++) {
            if (!Ext.form.VTypes.email(a[b])) {
                return _JSLIBSTR("vtype", "bad_email")
            }
        }
        if (a.length > 1 && a[0] == a[1]) {
            return _T("pushservice", "pushservice_account_the_same")
        }
        return true
    },
    getRecipientArray: function() {
        var c = [],
            a = this.form.findField("mail_recipient") ? this.form.findField("mail_recipient").getValue().split(";") : [];
        for (var b = 0; b < a.length; b++) {
            if ("" !== a[b]) {
                c.push(a[b])
            }
        }
        return c
    },
    onClickPushMailVerifyBtn: function() {
        if (this._S("demo_mode")) {
            return
        }
        if (!this.form.findField("enable_push_mail").getValue()) {
            return
        }
        if (this.form.findField("mail_recipient").isDirty()) {
            this.updatePushMailNotifyVisible();
            return
        }
        this.module.appWin.getMsgBox().confirm(_T("notification", "notification_email"), _T("notification", "mail_verification_confirm"), function(a) {
            if ("yes" === a) {
                this.sendMailVerify()
            }
        }, this)
    },
    sendMailVerify: function() {
        this.module.appWin.delayedMask(0.1, 100);
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.Notification.Push.Mail",
            version: 1,
            method: "send_verify",
            params: {},
            scope: this,
            callback: function(c, b, a) {
                if (c) {
                    this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), _T("notification", "alert_mail_verification_success"))
                } else {
                    this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), _T("notification", "alert_mail_verification_failed"))
                }
                this.module.appWin.unmask()
            }
        })
    },
    sendPushserviceTestMail: function() {
        this.module.appWin.delayedMask(0.1, 100);
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.Notification.Push.Mail",
            version: 1,
            method: "send_test",
            params: {},
            scope: this,
            callback: function() {
                this.module.appWin.getMsgBox().alert(_T("notification", "notification_email"), _T("notification", "mail_test_success"));
                this.module.appWin.unmask()
            }
        })
    },
    pollingMailStatusStart: function() {
        if (this.ownerCt.activeTab !== this || "" === this.form.findField("push_mail_note_field").getValue()) {
            this.pollingMailStatusStop()
        } else {
            if (this.hasMailStatusCheckPollingId === undefined) {
                this.hasMailStatusCheckPollingId = this.module.appWin.pollReg({
                    interval: 12,
                    immediate: true,
                    webapi: {
                        api: "SYNO.Core.Notification.Push.Mail",
                        version: 1,
                        method: "status"
                    },
                    status_callback: function(d, c, b) {
                        if (this.ownerCt.activeTab !== this || "" === this.form.findField("push_mail_note_field").getValue()) {
                            this.pollingMailStatusStop();
                            return
                        }
                        if (!d) {
                            return
                        }
                        this.push_mail_verified = c.verified_mail;
                        var a = this.diffMailArray(this.getRecipientArray(), c.verified_mail);
                        if (0 === a.length) {
                            this.updatePushMailUnverify();
                            this.updatePushMailNotifyVisible();
                            this.pollingMailStatusStop()
                        }
                    },
                    scope: this
                })
            }
        }
    },
    pollingMailStatusStop: function() {
        if (this.hasMailStatusCheckPollingId !== undefined) {
            this.module.appWin.pollUnreg(this.hasMailStatusCheckPollingId);
            this.hasMailStatusCheckPollingId = undefined
        }
    },
    diffArray: function(d, c) {
        var e = [],
            g = [],
            f;
        for (f = 0; f < c.length; f++) {
            e[c[f]] = true
        }
        for (f = 0; f < d.length; f++) {
            if (!e[d[f]]) {
                g.push(d[f])
            }
        }
        return g
    },
    diffMailArray: function(e, c) {
        var a = [];
        for (var d = 0; d < e.length; d++) {
            for (var b = 0; b < c.length; b++) {
                if (e[d] && c[b] && Ext.isString(e[d]) && Ext.isString(c[b]) && e[d].toLowerCase() == c[b].toLowerCase()) {
                    break
                }
            }
            if (b === c.length) {
                a.push(e[d])
            }
        }
        return a
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.Notification");
Ext.define("SYNO.SDS.AdminCenter.Notification.VarEditor", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = Ext.apply({
            dsmStyle: "v5",
            useStatusBar: true,
            title: _T("notification", "replacement") + " - " + _T("common", "alt_edit"),
            width: 468,
            height: 130,
            minWidth: 468,
            minHeight: 130,
            layout: "fit",
            items: [this.getFormConfig()],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "save"),
                scope: this,
                handler: this.onClickSave
            }, {
                xtype: "syno_button",
                text: _T("common", "close"),
                scope: this,
                handler: this.onClickClose
            }]
        }, a);
        this.callParent([b]);
        this.formPanel = this.getComponent("VarEditorFormPanel");
        this.mon(this, "show", function() {
            this.setStatusBusy({
                text: _T("common", "loading")
            });
            this.sendWebAPI({
                api: "SYNO.Core.Notification.Advance.Variables",
                method: "get",
                version: 1,
                scope: this,
                callback: function(e, d, c) {
                    this.clearStatusBusy();
                    if (e) {
                        this.formPanel.getForm().setValues(d)
                    } else {
                        this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"))
                    }
                }
            })
        }, this, {
            single: true
        })
    },
    getFormConfig: function() {
        return {
            xtype: "syno_formpanel",
            itemId: "VarEditorFormPanel",
            border: false,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_textfield",
                name: "company_name",
                fieldLabel: "%COMPANY_NAME%",
                allowBlank: false,
                maxlength: 512
            }]
        }
    },
    onClickClose: function() {
        if (this.formPanel.getForm().isDirty()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this);
            return
        }
        this.close()
    },
    onClickSave: function() {
        if (!this.formPanel.form.isValid()) {
            return
        }
        if (!this.formPanel.form.isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Advance.Variables",
            method: "set",
            version: 1,
            params: this.formPanel.form.getValues(),
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    this.close()
                } else {
                    this.setStatusError({
                        text: _T("common", "error_system"),
                        clear: true
                    })
                }
            }
        })
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.Notification");
SYNO.SDS.AdminCenter.Notification.NotificationCustomizeDialog = Ext.extend(SYNO.SDS.ModalWindow, {
    constructor: function(b) {
        this.notificationTag = b.notificationTag;
        this.notificationTitle = b.notificationTitle;
        this.owner = b.owner;
        var a = Ext.apply(b, {
            dsmStyle: "v5",
            useStatusBar: true,
            title: _T("notification", "notification_customize") + " - " + this.notificationTitle,
            width: 550,
            height: 420,
            minWidth: 550,
            minHeight: 420,
            layout: "fit",
            items: [this.getFormConfig()],
            buttons: [{
                xtype: "syno_button",
                text: _T("notification", "notification_customize_reset"),
                scope: this,
                handler: this.onClickReset,
                id: this.resetBtnId = Ext.id(),
                disabled: true
            }, {
                xtype: "syno_button",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "save"),
                scope: this,
                handler: this.onClickSave
            }, {
                xtype: "syno_button",
                text: _T("common", "close"),
                scope: this,
                handler: this.close
            }]
        });
        SYNO.LayoutConfig.fill(a);
        SYNO.SDS.AdminCenter.Notification.NotificationCustomizeDialog.superclass.constructor.call(this, a);
        this.formPanel = this.getComponent("NotificationCustomizeDialogFormPanel");
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.formPanel.getForm().findField("subject").getEl(), _T("notification", "notification_customize_hint"));
            SYNO.SDS.Utils.AddTip(this.formPanel.getForm().findField("content").getEl().parent(), _T("notification", "notification_customize_hint"))
        }, this, {
            single: true
        });
        this.mon(this, "show", function() {
            this.setStatusBusy({
                text: _T("common", "loading")
            });
            this.sendWebAPI({
                api: "SYNO.Core.Notification.Advance.CustomizedData",
                method: "get",
                version: 1,
                params: {
                    tag: this.notificationTag
                },
                scope: this,
                callback: function(e, d, c) {
                    this.clearStatusBusy();
                    if (e) {
                        if ("" !== d.subject || "" !== d.content) {
                            Ext.getCmp(this.resetBtnId).setDisabled(false)
                        }
                        this.formPanel.getForm().setValues({
                            subject: d.subject || d.default_subject,
                            content: d.content || d.default_content
                        })
                    } else {
                        this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"))
                    }
                }
            })
        }, this, {
            single: true
        })
    },
    getFormConfig: function() {
        return {
            xtype: "syno_formpanel",
            itemId: "NotificationCustomizeDialogFormPanel",
            border: false,
            trackResetOnLoad: true,
            labelWidth: 120,
            items: [{
                xtype: "syno_displayfield",
                hideLabel: true,
                value: _T("notification", "notification_customize_desc")
            }, {
                xtype: "syno_textfield",
                name: "subject",
                fieldLabel: _T("notification", "notification_subject"),
                allowBlank: false,
                maxlength: 64,
                anchor: "95%"
            }, {
                xtype: "syno_textarea",
                name: "content",
                maxLength: 640,
                fieldLabel: _T("notification", "notification_content"),
                allowBlank: false,
                anchor: "95% 70%"
            }]
        }
    },
    onClickReset: function() {
        this.getMsgBox().confirm(_T("tree", "leaf_notification"), _T("notification", "notification_customize_reset_confirm"), function(a) {
            if ("yes" === a) {
                this.doReset()
            }
        }, this)
    },
    doReset: function() {
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Advance.CustomizedData",
            method: "reset",
            version: 1,
            params: {
                tag: this.notificationTag
            },
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    this.close()
                } else {
                    this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"))
                }
            }
        })
    },
    onClose: function() {
        if (this.formPanel.form.isDirty()) {
            if (confirm(_T("common", "confirm_lostchange"))) {
                return true
            }
            return false
        }
        return true
    },
    onClickSave: function() {
        if (!this.formPanel.form.isValid()) {
            return
        }
        if (!this.formPanel.form.isDirty()) {
            this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("error", "nochange_subject"));
            return
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Advance.CustomizedData",
            method: "set",
            version: 1,
            params: {
                tag: this.notificationTag,
                subject: this.formPanel.form.findField("subject").getValue(),
                content: this.formPanel.form.findField("content").getValue()
            },
            scope: this,
            callback: function(d, c, b) {
                this.clearStatusBusy();
                if (d) {
                    var a = this.formPanel.getForm();
                    a.setValues(a.getValues());
                    this.close()
                } else {
                    this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"))
                }
            }
        })
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.Notification");
SYNO.SDS.AdminCenter.Notification.Dialog = Ext.extend(SYNO.SDS.ModalWindow, {
    maxPercent: 99,
    minPercent: 1,
    percentUserInput: null,
    warnTypeInput: null,
    warnValueInput: 0,
    isDataChanged: false,
    constructor: function(b) {
        this.owner = b.owner;
        this.warnTypeInput = b.warning_type;
        this.warnValueInput = b.warning_value;
        var a = Ext.apply({
            title: _T("notification", "notification_volume_setting"),
            width: 500,
            height: 200,
            minWidth: 300,
            minHeight: 200,
            layout: "fit",
            items: [this.configForm(b)],
            buttons: [{
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onSave
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        SYNO.SDS.AdminCenter.Notification.Dialog.superclass.constructor.call(this, a)
    },
    configForm: function(b) {
        var a = Ext.apply({
            xtype: "form",
            itemId: "main",
            border: false,
            items: [{
                xtype: "syno_displayfield",
                value: _T("notification", "notification_volume_description"),
                itemId: "desc"
            }, {
                xtype: "syno_compositefield",
                indent: 1,
                itemId: "percent",
                fieldLabel: _T("notification", "notification_volume_value"),
                labelWidth: 200,
                width: 200,
                items: [{
                    xtype: "syno_numberfield",
                    width: 50,
                    allowDecimals: true,
                    value: b.warning_value,
                    itemId: "warn_percent_id",
                    name: "warn_percent",
                    minValue: this.minPercent,
                    maxValue: this.maxPercent
                }, {
                    xtype: "syno_displayfield",
                    width: 10,
                    value: "%"
                }]
            }]
        }, b);
        return SYNO.LayoutConfig.fill(a)
    },
    onOpen: function(a) {
        SYNO.SDS.AdminCenter.Notification.Dialog.superclass.onOpen.apply(this, arguments);
        this.percentUserInput = this.getComponent("main").getForm().findField("warn_percent")
    },
    onCancel: function() {
        this.close()
    },
    onSave: function() {
        var e = this.percentUserInput.getValue();
        var a = String.format("{0}", this.minPercent);
        var b = String.format("{0}", this.maxPercent);
        var c = "";
        var d = {
            warn_percent: Ext.util.JSON.encode(e),
            warn_type: this.warnTypeInput
        };
        if (e == this.warnValueInput) {
            this.close()
        } else {
            if (e >= this.minPercent && e <= this.maxPercent) {
                this.apply(d)
            } else {
                c = String.format(_T("notification", "notification_valid_range_warning"), a, b);
                this.getMsgBox().alert(_T("notification", "notification_volume_setting"), c, function() {
                    this.percentUserInput.markInvalid(c)
                }, this)
            }
        }
    },
    apply: function(a) {
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Advance.WarningPercentage",
            method: "set",
            version: 1,
            params: a,
            scope: this,
            callback: function(d, b, c) {
                this.clearStatusBusy();
                if (d) {
                    this.setStatusOK();
                    this.isDataChanged = true
                }
                this.close()
            }
        })
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.Notification");
SYNO.SDS.AdminCenter.Notification.FilterPanel = Ext.extend(SYNO.ux.GridPanel, {
    filterSettingData: null,
    defaultFilterValue: "All",
    targets: ["mail", "sms", "mobile", "cms"],
    constructor: function(a) {
        this.module = a.module;
        var g = {
            header: _T("notification", "notification_title"),
            width: 200,
            sortable: true,
            parentid: this.id,
            dataIndex: "title",
            id: "title",
            renderer: function(n, k, m) {
                var l = '<div ext:qtip="' + n + '">' + n + "</div>";
                switch (m.data.name) {
                    case "RaidVolumeFull":
                    case "VolumeInodeFull":
                    case "ESATADiskFull":
                    case "ESATAPartitionFull":
                    case "USBDiskFull":
                    case "USBPartitionFull":
                    case "SDCardFull":
                    case "SDCardPartitionFull":
                        l = '<div ext:qtip="' + n + '">' + n + "<a href = javascript:void(0) ><" + m.data.warnPercent + "%></a></div>";
                        break;
                    default:
                        break
                }
                return l
            }
        };
        var f = new SYNO.ux.EnableColumn({
            id: "mail",
            header: _T("helptoc", "notification_email"),
            width: 100,
            sortable: false,
            dataIndex: "mail",
            align: "center",
            enableFastSelectAll: true
        });
        var j = new SYNO.ux.EnableColumn({
            id: "sms",
            header: _T("notification", "notification_sms"),
            width: 100,
            sortable: false,
            dataIndex: "sms",
            align: "center",
            enableFastSelectAll: true
        });
        var h = new SYNO.ux.EnableColumn({
            id: "mobile",
            header: _T("pushservice", "pushservice_mobile"),
            width: 100,
            sortable: false,
            dataIndex: "mobile",
            align: "center",
            enableFastSelectAll: true
        });
        var e = new SYNO.ux.EnableColumn({
            id: "cms",
            header: "CMS",
            width: 100,
            sortable: false,
            dataIndex: "cms",
            align: "center",
            hidden: !this._S("join_dsm_cms"),
            enableFastSelectAll: true
        });
        var i = {
            header: "Group",
            sortable: false,
            dataIndex: "group",
            hidden: true,
            groupRenderer: function(l, k, n) {
                var m = _T("notification", "category_all");
                switch (n.data.group) {
                    case "Important":
                        m = _T("notification", "category_important");
                        break;
                    case "Information":
                        m = _T("notification", "category_information");
                        break;
                    case "System":
                        m = _T("notification", "category_system");
                        break;
                    case "Storage":
                        m = _T("notification", "category_storage");
                        break;
                    case "Backup/Restore":
                        m = _T("notification", "category_backup_restore");
                        break;
                    case "Power System":
                        m = _T("notification", "category_power");
                        break;
                    case "USB Copy":
                        m = _T("notification", "category_usbcopy");
                        break;
                    case "External Storage":
                        m = _T("notification", "category_external_storage");
                        break;
                    case "AHA":
                        m = _T("notification", "category_AHA");
                        break;
                    case "CMS":
                        m = _T("notification", "cms_title");
                        break;
                    case "Data Protection":
                        m = _T("notification", "category_data_protection");
                        break;
                    default:
                        break
                }
                return m
            }
        };
        var d = [g, f];
        d.push(j);
        d.push(h);
        d.push(e);
        d.push(i);
        var c = {
            xtype: "statusbar",
            ctCls: "syno-sds-cp-notification-statusbar ",
            defaultText: '<span class="syno-sds-cp-notification-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + String.format(_T("notification", "goto_lang_setting_desc"), '<a href="javascript: void(0)" onclick=SYNO.SDS.AdminCenter.Notification.onClickSetLangUrl("' + this.getId() + '"); >' + _T("tree", "leaf_region") + "</a>"),
            statusAlign: "left",
            buttonAlign: "left",
            items: []
        };
        var b = Ext.apply({
            itemId: "filterTab",
            title: _T("notification", "notification_filter"),
            listeners: {
                activate: this.onCategoryChange,
                cellclick: this.onGridCellClick,
                scope: this
            },
            store: this.filterSettingStore = this.getFilterSettingStore(),
            colModel: new Ext.grid.ColumnModel({
                columns: d
            }),
            plugins: [f, j, h, e],
            enableColLock: false,
            enableHdMenu: false,
            enableColumnMove: false,
            colMail: f,
            colSMS: j,
            colMobile: h,
            colCMS: e,
            clicksToEdit: 1,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            stripeRows: true,
            tbar: new Ext.Toolbar({
                items: this.getTbarItems(),
                id: this.tbarId = Ext.id()
            }),
            view: new SYNO.SDS.Utils.GroupingView({
                showGroupName: false,
                enableGroupingMenu: false
            }),
            fbar: c
        }, a);
        SYNO.LayoutConfig.fill(b);
        SYNO.SDS.AdminCenter.Notification.FilterPanel.superclass.constructor.call(this, b);
        this.selModel.on("selectionchange", function(l) {
            var k = Ext.getCmp(this.customizeBtnId);
            k.setDisabled(0 === l.selections.length)
        }, this)
    },
    reset: function() {
        this.notificationFilter.setValue(this.defaultFilterValue);
        this.filterSettingData = null
    },
    onGridCellClick: function(b, h, c, g) {
        if (g.getTarget("a", this.body)) {
            var a;
            var d = b.getStore().getAt(b.getSelectionModel().last).data.name;
            var f = b.getStore().getAt(b.getSelectionModel().last).data.warnPercent;
            a = new SYNO.SDS.AdminCenter.Notification.Dialog({
                owner: this.module.appWin,
                warning_type: d,
                warning_value: f
            });
            a.mon(a, "close", function() {
                if (a.isDataChanged) {
                    this.getStore().getAt(this.getSelectionModel().last).set("warnPercent", a.percentUserInput.getValue());
                    this.filterSettingData = null;
                    this.getStore().commitChanges()
                }
            }, this, {
                single: true
            });
            a.open()
        }
    },
    getTbarItems: function() {
        var a = this.createCategoryStore();
        this.notificationFilter = new SYNO.SDS.AdminCenter.Notification.AutoResizeComboBox({
            width: 200,
            maxHeight: 400,
            comboBoxGrow: true,
            calcWidthFunc: this.calcWidthFunc,
            valueField: "value",
            displayField: "display",
            store: a,
            triggerAction: "all",
            mode: "local",
            editable: false,
            resizable: true,
            value: this.defaultFilterValue,
            listeners: {
                scope: this,
                select: this.onCategoryChange,
                beforeselect: this.onBeforeCategoryChange
            },
            tpl: '<tpl for="."><div class="x-combo-list-item {additionalCls}"><tpl if="(value != \'\')"><li></tpl>{display}<tpl if="(value != \'\')"></li></tpl></div></tpl>'
        });
        return [{
            xtype: "syno_button",
            id: this.customizeBtnId = Ext.id(),
            disabled: true,
            text: _T("notification", "notification_customize"),
            scope: this,
            handler: this.onClickCustomize
        }, {
            xtype: "syno_button",
            id: this.saveBtnId = Ext.id(),
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            text: _T("common", "save"),
            scope: this,
            handler: this.onClickSaveSetting
        }, {
            xtype: "syno_button",
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            text: _T("notification", "replacement"),
            scope: this,
            handler: this.onClickVarEditor
        }, "->", this.notificationFilter]
    },
    createCategoryStore: function() {
        var a = "syno-sds-cp-notification-combo-item";
        var c = "syno-sds-cp-notification-disabled-combo-item";
        this.calcWidthFunc = function(e, f) {
            var d = e.data.additionalCls;
            if (d === c) {
                return f + 2 + 2 + 1 + 1
            } else {
                if (d === a) {
                    return f + 20 + 2 + 1 + 1 + 6
                }
            }
        };
        var b = [
            [_T("notification", "category_all"), "All", a],
            [_T("notification", "label_by_importantce"), "", c],
            [_T("notification", "category_important"), "Important", a],
            [_T("notification", "category_information"), "Information", a],
            [_T("notification", "label_by_category"), "", c],
            [_T("notification", "category_system"), "System", a]
        ];
        if ("yes" === this._D("support_dual_head")) {
            b.push([_T("notification", "category_AHA"), "AHA", a])
        }
        if ("yes" !== this._D("usbstation")) {
            b.push([_T("notification", "category_storage"), "Storage", a])
        }
        b = b.concat([
            [_T("notification", "category_backup_restore"), "Backup/Restore", a],
            [_T("notification", "category_power"), "Power System", a],
            [_T("notification", "cms_title"), "CMS", a]
        ]);
        if ("yes" == this._D("usbcopy")) {
            b.push([_T("notification", "category_usbcopy"), "USB Copy", a])
        }
        b.push([_T("notification", "category_external_storage"), "External Storage", a]);
        return new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["display", "value", "additionalCls"],
            data: b
        })
    },
    getFilterSettingStore: function() {
        var a = new Ext.data.JsonReader({
            idProperty: "name",
            fields: [{
                name: "name"
            }, {
                name: "title"
            }, {
                name: "mail"
            }, {
                name: "sms"
            }, {
                name: "mobile"
            }, {
                name: "cms"
            }, {
                name: "group"
            }, {
                name: "warnPercent"
            }]
        });
        var b = new Ext.data.GroupingStore({
            reader: a,
            data: [],
            groupField: "group",
            autoDestroy: true
        });
        return b
    },
    onBeforeCategoryChange: function(d, b, c) {
        if ("" === b.get("value")) {
            return false
        }
        var a = this.getStore().getModifiedRecords();
        if (0 === a.length) {
            return true
        }
        this.notificationFilter.collapse();
        return confirm(_T("common", "confirm_lostchange"))
    },
    onCategoryChange: function() {
        if (null === this.filterSettingData) {
            this.loadFilterSetting()
        } else {
            this.getStore().rejectChanges();
            this.filterSettingStore.loadData(this.filterSettingData[this.notificationFilter.getValue()])
        }
        this.colMail.checkSelectAll(this.getStore());
        this.colSMS.checkSelectAll(this.getStore());
        this.colMobile.checkSelectAll(this.getStore());
        this.colCMS.checkSelectAll(this.getStore())
    },
    loadFilterSetting: function() {
        this.module.appWin.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Notification.Advance.FilterSettings",
            method: "list",
            version: 1,
            scope: this,
            callback: function(b, a) {
                this.module.appWin.clearStatusBusy();
                if (b) {
                    this.filterSettingStore.loadData(a[this.notificationFilter.getValue()]);
                    this.filterSettingData = a
                } else {
                    this.module.appWin.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"))
                }
            }
        })
    },
    onClickSaveSetting: function() {
        var a = this.getStore().getModifiedRecords();
        if (0 === a.length) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_notification"), _T("error", "nochange_subject"));
            return
        }
        var d, c;
        var e = [];
        for (d = 0; d < a.length; d++) {
            var b = [];
            for (c = 0; c < this.targets.length; c++) {
                if (a[d].get(this.targets[c])) {
                    b.push(this.targets[c])
                }
            }
            var f = {
                name: a[d].get("name"),
                conf: b.join(",")
            };
            e.push(f)
        }
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: "SYNO.Core.Notification.Advance.FilterSettings",
                    method: "set",
                    version: 1,
                    params: {
                        settings: e
                    }
                }, {
                    api: "SYNO.Core.Notification.Advance.FilterSettings",
                    method: "list",
                    version: 1
                }]
            },
            scope: this,
            callback: function(i, h, g) {
                this.module.appWin.clearStatusBusy();
                if (!i || h.has_fail || !h.result[0].success) {
                    this.module.appWin.getMsgBox().alert(_T("tree", "leaf_notification"), _T("common", "error_system"));
                    return
                }
                this.module.appWin.setStatusOK();
                if (h.result[1].success) {
                    this.filterSettingData = h.result[1].data;
                    this.getStore().commitChanges()
                }
            }
        })
    },
    onClickVarEditor: function() {
        var a = new SYNO.SDS.AdminCenter.Notification.VarEditor({
            owner: this.module.appWin
        });
        a.open()
    },
    onClickCustomize: function() {
        var b = this.getSelectionModel().getSelected();
        if (null === b) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_notification"), _T("notification", "select_one_notification"));
            return
        }
        var a = new SYNO.SDS.AdminCenter.Notification.NotificationCustomizeDialog({
            owner: this.module.appWin,
            notificationTag: b.get("name"),
            notificationTitle: b.get("title")
        });
        a.open()
    },
    isDirty: function() {
        var a = this.getStore().getModifiedRecords();
        return (0 < a.length)
    }
});
SYNO.SDS.AdminCenter.Notification.AutoResizeComboBox = Ext.extend(SYNO.ux.ComboBox, {
    expand: function() {
        var a = this;
        SYNO.SDS.AdminCenter.Notification.AutoResizeComboBox.superclass.expand.call(a);
        if (a.comboBoxGrow === true) {
            a.autoResizeList(a.getWidth(), a.calcWidthFunc)
        }
    },
    doResize: function(a) {
        var b = this;
        if (!Ext.isDefined(b.listWidth) && b.comboBoxGrow === true) {
            b.autoResizeList(a, b.calcWidthFunc)
        }
    },
    autoResizeList: function(a, b) {
        var g = this,
            j = "",
            c = null,
            i = g.getStore();
        if (!i) {
            return
        }
        i.each(function(d) {
            if (j.length < d.data[g.displayField].length) {
                j = d.data[g.displayField];
                c = d
            }
        });
        var e = Ext.util.TextMetrics.createInstance(g.getEl());
        var f = document.createElement("div");
        f.appendChild(document.createTextNode(j));
        j = f.innerHTML;
        Ext.removeNode(f);
        f = null;
        j += "&#160;";
        var h = Math.min(g.comboBoxGrowMax || Number.MAX_VALUE, Math.max(((b && c) ? b(c, e.getWidth(j)) : e.getWidth(j)) + 10, a || 0));
        g.list.setWidth(h);
        g.innerList.setWidth(h - g.list.getFrameWidth("lr"))
    }
});
SYNO.SDS.AdminCenter.Notification.onClickSetLangUrl = function(b) {
    var a = Ext.getCmp(b);
    SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", Ext.apply({
        fn: "SYNO.SDS.AdminCenter.Region.Main",
        tab: "LanguageTab"
    }, a.findAppWindow().openConfig || {}))
};
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_OTHER = 0;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_USER = 1;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_PASSWORD = 2;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_PHONE = 3;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_MSG = 4;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_MAX = 5;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_USER = "@@USER@@";
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_PASSWORD = "@@PASS@@";
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_PHONE = "@@PHONE@@";
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_MSG = "@@TEXT@@";
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_INPUT = 4;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_MAX_TYPE_COUNT = 10;
SYNO.SDS.AdminCenter.Notification.g_smsPatternUrl = /(http|https):\/\/([A-Za-z0-9\.\-]+)(:\d+)?[^\?]*(\?.+)?/;
SYNO.SDS.AdminCenter.Notification.g_smsPatternParamList = /&?(\w*)=([^&]*)&?(.*)?/;
SYNO.SDS.AdminCenter.Notification.g_smsPatternHelloWorld = /[\w]{5}(.){1}[\w]{5}/;
SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_INVALID_PARAM = -1;
SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_INVALID_PROTOCOL = -2;
SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_TOO_FEW_PARAM = -3;
SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_TOO_MANY_PARAM = -4;
SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_DUPLICATED_TYPE = -5;
SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_NO_SEP_CHAR = -6;
SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE = new Ext.data.SimpleStore({
    fields: ["value", "display"],
    data: [
        [SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_USER, _T("smsnotify", "camera_attr_user")],
        [SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_PASSWORD, _T("smsnotify", "camera_attr_password")],
        [SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_PHONE, _T("smsnotify", "url_param_phone")],
        [SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_MSG, _T("smsnotify", "url_param_content")],
        [SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_OTHER, _T("smsnotify", "url_param_other")]
    ]
});
SYNO.SDS.AdminCenter.Notification.SMS_TagMap = [];
SYNO.SDS.AdminCenter.Notification.SMS_TagMap[SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_USER] = SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_USER;
SYNO.SDS.AdminCenter.Notification.SMS_TagMap[SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_PASSWORD] = SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_PASSWORD;
SYNO.SDS.AdminCenter.Notification.SMS_TagMap[SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_PHONE] = SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_PHONE;
SYNO.SDS.AdminCenter.Notification.SMS_TagMap[SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_MSG] = SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TAG_MSG;
Ext.define("SYNO.SDS.AdminCenter.Notification.ProviderEditDialog", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    constructor: function(a) {
        this.dsSMSProvider = a.dsSMSProvider;
        this.isEditAction = (undefined === a.smsProvider) ? false : true;
        this.smsProvider = a.smsProvider;
        Ext.apply(a, {
            title: this.isEditAction ? _T("smsnotify", "provider_edit") : _T("smsnotify", "provider_new"),
            width: 580,
            height: 430,
            closable: true,
            steps: [this.getBasicPanelConfig({
                itemId: "step_1",
                nextId: "step_2"
            }), this.getParamPanelConfig({
                itemId: "step_2",
                nextId: null
            })]
        });
        this.callParent([a])
    },
    getBasicPanelConfig: function(a) {
        var e = this.dsSMSProvider;
        var c = this.isEditAction;
        var b = this.smsProvider;
        var d = Ext.apply({
            headline: _T("smsnotify", "provider_descript"),
            xtype: "syno_formpanel",
            border: false,
            labelWidth: 200,
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("smsnotify", "provider_name"),
                name: "provider_name",
                maxlength: 32,
                allowBlank: false,
                width: 300,
                validator: function(g) {
                    g = Ext.util.Format.trim(g);
                    if (0 === g.length) {
                        return _JSLIBSTR("extlang", "fieldblank")
                    }
                    if (g == "synosms") {
                        return _T("smsnotify", "smsnotify_preserve_provider")
                    }
                    for (var f = 0; f < e.getCount(); f++) {
                        if (true === c) {
                            if (b === e.getAt(f).data.name) {
                                continue
                            }
                        }
                        if (g == e.getAt(f).data.name) {
                            return _T("smsnotify", "provider_name_repetition")
                        }
                    }
                    return true
                }
            }, {
                xtype: "syno_textarea",
                name: "url",
                maxLength: 500,
                vtype: "smsurl",
                fieldLabel: String.format('{0} (<a href="#" class="link-font" onclick="SYNO.SDS.AdminCenter.Notification.onClickSmsUrlHowTo();">{1}</a>)', _T("smsnotify", "provider_url"), _T("service", "service_howto")),
                allowBlank: false,
                width: 300,
                height: 150
            }],
            activate: function() {
                if (true === this.owner.isEditAction) {
                    this.owner.setStatusBusy({
                        text: _T("common", "loading")
                    });
                    this.sendWebAPI({
                        api: "SYNO.Core.Notification.SMS.Provider",
                        version: 1,
                        method: "get",
                        params: {
                            provider_id: this.owner.smsProvider
                        },
                        scope: this,
                        callback: function(g, f) {
                            this.owner.clearStatusBusy();
                            if (!g) {
                                this.owner.setStatusError();
                                this.owner.getMsgBox().alert(_T("tree", "leaf_smsnotify"), _T("common", "error_system"));
                                return
                            }
                            this.form.setValues(f);
                            this.owner.EditTemplate = f.template
                        }
                    })
                }
            },
            getNext: function() {
                var h = this.getForm();
                var g;
                if (!h.isValid()) {
                    return false
                }
                var f = h.findField("url").getValue();
                g = this.owner.parseURL(f);
                if (0 !== g) {
                    this.owner.printErrorMsg(g);
                    return false
                }
                return this.nextId
            }
        }, a);
        return d
    },
    getParamPanelConfig: function(a) {
        var b = Ext.apply({
            headline: _T("smsnotify", "provider_param_descript"),
            xtype: "syno_formpanel",
            border: false,
            autoScroll: true,
            labelWidth: 220,
            items: [],
            activate: function() {
                this.owner.getParamCombobox(this);
                if (true === this.owner.isEditAction && null !== this.owner.EditTemplate) {
                    this.owner.makeOption(this.getForm())
                }
            },
            getNext: function() {
                var c = this.owner.createTemplate(this.getForm());
                if (0 !== c) {
                    this.owner.printErrorMsg(c);
                    return false
                }
                this.owner.processApplyAction();
                return false
            },
            disableNextInDemoMode: true
        }, a);
        return b
    },
    parseURL: function(c) {
        var a = SYNO.SDS.AdminCenter.Notification.g_smsPatternUrl.exec(c);
        var b = 0;
        var d = 0;
        if (null === a || null === a[1] || null === a[2] || null === a[4]) {
            return SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_INVALID_PARAM
        }
        if ("http" == a[1].toLowerCase()) {
            this.needssl = false
        } else {
            if ("https" == a[1].toLowerCase()) {
                this.needssl = true
            } else {
                return SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_INVALID_PROTOCOL
            }
        }
        this.providerIP = "" + a[2];
        if (null === a[3] || undefined === a[3] || 0 === a[3].length) {
            if (this.needssl) {
                this.providerPort = 443
            } else {
                this.providerPort = 80
            }
        } else {
            this.providerPort = parseInt(a[3].substring(1), 10)
        }
        b = a[4];
        this.pairKeyList = [];
        this.pairValueList = [];
        while (true) {
            var e = SYNO.SDS.AdminCenter.Notification.g_smsPatternParamList.exec(b);
            if (null === e) {
                break
            }
            if (e) {
                this.pairKeyList[d] = e[1];
                this.pairValueList[d] = e[2]
            }
            b = e[3];
            d++
        }
        if (SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_INPUT > d) {
            return SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_TOO_FEW_PARAM
        }
        if (SYNO.SDS.AdminCenter.Notification.SMS_PARAM_MAX_TYPE_COUNT < d) {
            return SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_TOO_MANY_PARAM
        }
        return 0
    },
    parseTpl: function(b) {
        var a = SYNO.SDS.AdminCenter.Notification.g_smsPatternUrl.exec(b);
        var d = 0;
        var c;
        c = a[4];
        this.tplPairKeyList = [];
        this.tplPairValueList = [];
        while (true) {
            var e = SYNO.SDS.AdminCenter.Notification.g_smsPatternParamList.exec(c);
            if (null === e) {
                break
            }
            if (e) {
                this.tplPairKeyList[d] = e[1];
                this.tplPairValueList[d] = e[2]
            }
            c = e[3];
            d++
        }
        return 0
    },
    printErrorMsg: function(a) {
        var b = "";
        switch (a) {
            case SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_INVALID_PARAM:
            case SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_INVALID_PROTOCOL:
            case SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_NO_SEP_CHAR:
                b = _T("smsnotify", "url_err_invalid_param");
                break;
            case SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_TOO_FEW_PARAM:
                b = _T("smsnotify", "url_err_too_few_param");
                break;
            case SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_TOO_MANY_PARAM:
                b = _T("smsnotify", "url_err_too_many_param");
                break;
            case SYNO.SDS.AdminCenter.Notification.SMS_URL_ERR_DUPLICATED_TYPE:
                b = _T("smsnotify", "url_err_duplicated_type");
                break;
            default:
                b = "Unknown return type (" + a + ")"
        }
        this.getMsgBox().alert(_T("smsnotify", "provider_new"), b)
    },
    getParamCombobox: function(c) {
        c.getForm().items.each(Ext.destroy, Ext);
        for (var d = 0; d < this.pairKeyList.length; d++) {
            var b;
            if (this.pairKeyList[d].length + this.pairValueList[d].length > 27) {
                b = Ext.util.Format.ellipsis(this.pairValueList[d], (18 - this.pairKeyList[d].length), true)
            } else {
                b = this.pairValueList[d]
            }
            var a = new SYNO.ux.ComboBox({
                fieldLabel: this.pairKeyList[d] + "=" + b,
                store: SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE,
                name: "paramType" + d,
                width: 280,
                valueField: "value",
                displayField: "display",
                mode: "local",
                forceSelection: true,
                triggerAction: "all",
                value: SYNO.SDS.AdminCenter.Notification.SMS_PARAM_TYPE_OTHER
            });
            c.add(a)
        }
        c.doLayout()
    },
    createTemplate: function(d) {
        var a = [];
        var f = 0;
        var h;
        var e = SYNO.SDS.AdminCenter.Notification;
        for (var c = 0; c < e.SMS_PARAM_TYPE_MAX; c++) {
            a[c] = 0
        }
        this.providerTemplate = this.getStep("step_1").getForm().findField("url").getValue();
        for (c = 0; c < this.pairKeyList.length; c++) {
            h = d.findField(("paramType" + c)).getValue();
            if (0 === a[h]) {
                a[h] = 1
            } else {
                if (e.SMS_PARAM_TYPE_OTHER != h) {
                    return e.SMS_URL_ERR_DUPLICATED_TYPE
                }
            }
            if (e.SMS_PARAM_TYPE_OTHER == h) {
                continue
            }
            if (e.SMS_PARAM_TYPE_MSG == h) {
                var b = e.g_smsPatternHelloWorld.exec(this.pairValueList[c]);
                if (null === b) {
                    return e.SMS_URL_ERR_NO_SEP_CHAR
                }
                this.providerSepChar = b[1]
            }
            var g = "" + this.pairKeyList[c] + "=" + this.pairValueList[c];
            var j = "" + this.pairKeyList[c] + "=" + e.SMS_TagMap[h];
            this.providerTemplate = this.providerTemplate.replace(g, j);
            f++
        }
        if (e.SMS_PARAM_TYPE_INPUT != f) {
            return e.SMS_URL_ERR_TOO_FEW_PARAM
        }
        return 0
    },
    makeOption: function(a) {
        this.parseTpl(this.EditTemplate);
        if (this.tplPairKeyList.length !== this.pairKeyList.length) {
            return
        }
        for (var c = 0; c < this.tplPairKeyList.length; c++) {
            var b = this.checkParams(this.tplPairValueList[c]);
            a.findField(("paramType" + c)).setValue(b)
        }
    },
    checkParams: function(b) {
        var a = SYNO.SDS.AdminCenter.Notification;
        if (a.SMS_PARAM_TAG_PHONE === b) {
            return a.SMS_PARAM_TYPE_PHONE
        } else {
            if (a.SMS_PARAM_TAG_MSG === b) {
                return a.SMS_PARAM_TYPE_MSG
            } else {
                if (a.SMS_PARAM_TAG_USER === b) {
                    return a.SMS_PARAM_TYPE_USER
                } else {
                    if (a.SMS_PARAM_TAG_PASSWORD === b) {
                        return a.SMS_PARAM_TYPE_PASSWORD
                    } else {
                        return a.SMS_PARAM_TYPE_OTHER
                    }
                }
            }
        }
    },
    processApplyAction: function() {
        var b = (this.isEditAction) ? "set" : "create";
        var a = {
            provider_name: this.getStep("step_1").getForm().findField("provider_name").getValue(),
            url: this.getStep("step_1").getForm().findField("url").getValue(),
            template: this.providerTemplate,
            sep_char: this.providerSepChar
        };
        if ("set" == b) {
            Ext.apply(a, {
                provider_id: this.smsProvider
            })
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Notification.SMS.Provider",
            version: 1,
            method: b,
            params: a,
            scope: this,
            callback: function(d, c) {
                if (!d) {
                    this.clearStatusBusy();
                    this.setStatusError();
                    this.getMsgBox().alert(_T("tree", "leaf_smsnotify"), _T("common", "error_system"));
                    return
                }
                this.parentModule.queryProviderInfo();
                this.parentModule.form.findField("provider_name").setValue(c.provider_id);
                this.parentModule.form.findField("provider_name").fireEvent("select");
                this.close()
            }
        })
    }
});
SYNO.SDS.AdminCenter.Notification.onClickSmsUrlHowTo = function() {
    SYNO.SDS.AppLaunch("SYNO.SDS.HelpBrowser.Application", {
        topic: "SYNO.SDS.AdminCenter.Application:AdminCenter/system_notification_sms.html"
    }, false);
    return false
};
Ext.define("SYNO.SDS.AdminCenter.Notification.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.callParent(arguments);
        this.createPanel()
    },
    createPanel: function() {
        this.panel = new SYNO.SDS.AdminCenter.Notification.TabPanel({
            module: this
        })
    },
    getPanel: function() {
        return this.panel
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "mailSettingTab":
                return "AdminCenter/system_notification_email.html";
            case "smsSettingTab":
                return "AdminCenter/system_notification_sms.html";
            case "pushSettingTab":
                return "AdminCenter/system_notification_pushservice.html";
            case "filterTab":
                return "AdminCenter/system_notification_filter.html";
            default:
                return "AdminCenter/system_notification_desc.html"
        }
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm();
        return true
    },
    deactivate: function() {
        if (this.panel.mailSettingPanel.isDirty() || this.panel.smsSettingPanel.isDirty() || this.panel.pushSettingPanel.isDirty() || this.panel.filterPanel.isDirty()) {
            return false
        }
        if (Ext.isFunction(this.panel.pushSettingPanel.pollingMailStatusStop)) {
            this.panel.pushSettingPanel.pollingMailStatusStop()
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Notification.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.module = a.module;
        this.support_oauth = (this.module.appWin._S("version") > 4994);
        var b;
        b = Ext.apply({
            activeTab: 0,
            items: [this.mailSettingPanel = new SYNO.SDS.AdminCenter.Notification.MailSettingPanel({
                module: this.module
            }), this.smsSettingPanel = new SYNO.SDS.AdminCenter.Notification.SMSSettingPanel({
                module: this.module
            }), this.pushSettingPanel = new SYNO.SDS.AdminCenter.Notification.PushSettingPanel({
                module: this.module
            }), this.filterPanel = new SYNO.SDS.AdminCenter.Notification.FilterPanel({
                module: this.module
            })],
            listeners: {
                tabchange: function(c, d) {
                    if (d && d.activate) {
                        d.activate()
                    }
                }
            }
        }, a);
        this.callParent([b])
    },
    onApiSuccess: function(c, b, a) {
        if ("set" === c) {
            if (!b.has_fail) {
                this.setStatusOK()
            } else {
                this.setErrorMsg(b.result)
            }
        }
        this.processReturnData(c, b, a)
    },
    setErrorMsg: function(a) {
        var c = _T("common", "commfail");
        for (var b = 0; b < a.length; b++) {
            if (false === a[b].success && a[b].error && a[b].error.code && SYNO.API.Erros.core[a[b].error.code]) {
                c = SYNO.API.Erros.core[a[b].error.code];
                break
            }
        }
        this.setStatusError({
            text: c,
            clear: true
        })
    },
    onApiFailure: function(b, a) {
        var c = _T("common", "commfail");
        this.module.appWin.getMsgBox().alert(this.title, c)
    },
    applyHandler: function(c, b) {
        var a = this.mailSettingPanel.form.findField("enable_mail").getValue();
        var d = this.mailSettingPanel.form.findField("smtp_provider").getValue();
        if (this.support_oauth && a && d === "gmail" && !this.mailSettingPanel.enable_oauth) {
            this.setStatusError({
                text: _T("notification", "alert_google_oauth"),
                clear: true
            });
            return
        }
        this.applyAllForm()
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.TaskScheduler");
SYNO.SDS.AdminCenter.TaskScheduler.CreateApps = function(a) {
    var b = [{
        app_key: "script",
        app_name: _T("common", "command_line"),
        create_form: "SYNO.SDS.TaskScheduler2.Script.FormPanel",
        app: "SYNO.SDS.TaskScheduler2.Script",
        simple_edit_form: 1,
        create_btn_text: _T("common", "command_line")
    }, {
        app_key: "recycle",
        app_name: _T("share", "recycle_bin"),
        create_form: "SYNO.SDS.TaskScheduler2.Recycle.FormPanel",
        app: "SYNO.SDS.TaskScheduler2.Recycle",
        simple_edit_form: 0,
        create_btn_text: _T("share", "recycle_bin")
    }, {
        app_key: "report",
        app_name: _T("report", "schedule_report_name"),
        create_form: "",
        app: "SYNO.SDS.DataAnalysis",
        simple_edit_form: 0
    }, {
        app_key: "backup",
        app_name: _T("backup", "backup_replication"),
        create_form: "",
        app: "SYNO.SDS.BackupApp.NetBackup",
        simple_edit_form: 0
    }, {
        app_key: "power",
        app_name: _T("schedule", "power_on_off"),
        create_form: "",
        app: "SYNO.SDS.TaskScheduler.AutoPower",
        simple_edit_form: 0
    }, {
        app_key: "dsmupdate",
        app_name: _T("schedule", "dsm_autoupdate_appname"),
        create_form: "",
        app: "SYNO.SDS.TaskScheduler.DSMAutoUpdate",
        simple_edit_form: 0
    }, {
        app_key: "custom",
        app_name: "",
        create_form: "",
        app: "",
        simple_edit_form: 0
    }, {
        app_key: "",
        app_name: "undefined",
        create_form: "",
        app: "",
        simple_edit_form: 0
    }];
    if ("yes" === a._D("support_buzzer", "no")) {
        b.push({
            app_key: "beep",
            app_name: _T("beep", "beep_title"),
            create_form: "SYNO.SDS.TaskScheduler2.Beep.FormPanel",
            app: "SYNO.SDS.TaskScheduler2.Beep",
            simple_edit_form: 1,
            create_btn_text: _T("beep", "beep_title")
        })
    }
    b.push({
        app_key: "service",
        app_name: _T("service", "service_subject"),
        create_form: "SYNO.SDS.TaskScheduler2.Service.FormPanel",
        app: "SYNO.SDS.TaskScheduler2.Service",
        simple_edit_form: 0,
        create_btn_text: _T("service", "service_subject")
    });
    return b
};
Ext.namespace("SYNO.SDS.AdminCenter.TaskScheduler");
SYNO.SDS.AdminCenter.TaskScheduler.getAppInfo = function(b, c) {
    var a;
    for (a = 0; a < c.length; a++) {
        if (b === c[a].app_key) {
            return c[a]
        }
    }
    return null
};
Ext.define("SYNO.SDS.AdminCenter.TaskScheduler.TaskPanel", {
    extend: "SYNO.ux.EditorGridPanel",
    btnCreate: null,
    btnEdit: null,
    btnDel: null,
    btnRun: null,
    btnSave: null,
    menuIsPop: false,
    pageSize: 50,
    constructor: function(b) {
        var a = this.fillConfig(b);
        this.callParent([a]);
        this.mon(this.getSelectionModel(), "selectionchange", this.hSelectionChange, this);
        this.btnCreate = this.getTopToolbar().getComponent("create");
        this.btnEdit = this.getTopToolbar().getComponent("edit");
        this.btnDel = this.getTopToolbar().getComponent("delete");
        this.btnRun = this.getTopToolbar().getComponent("run");
        this.btnSave = this.getTopToolbar().getComponent("save");
        this.mon(Ext.getCmp(this.idCreateBtn), "menutriggerout", function() {
            this.menuIsPop = false
        }, this);
        this.mon(this.enableColumn, "click", function(f, e, c, d) {
            if (0 === e.getStore().getModifiedRecords().length) {
                e.btnSave.disable()
            } else {
                e.btnSave.enable()
            }
        }, this);
        this.mon(this, "headerclick", function(e, d, c) {
            if (0 === e.getStore().getModifiedRecords().length) {
                e.btnSave.disable()
            } else {
                e.btnSave.enable()
            }
        }, this)
    },
    fillConfig: function(c) {
        var d = this;
        this.owner = c.owner;
        this.appList = SYNO.SDS.AdminCenter.TaskScheduler.CreateApps(this.owner);
        this.enableColumn = new SYNO.ux.EnableColumn({
            header: _T("common", "enabled"),
            dataIndex: "enable",
            width: 100,
            align: "center",
            enableFastSelectAll: true
        });
        this.columnModel = new Ext.grid.ColumnModel([this.enableColumn, {
            header: _T("common", "user_app"),
            dataIndex: "type",
            width: 150,
            sortable: true,
            renderer: function(f, g, h) {
                if (h.get("app_name")) {
                    return h.get("app_name")
                } else {
                    return SYNO.SDS.AdminCenter.TaskScheduler.getAppInfo(f, d.appList).app_name
                }
            }
        }, {
            header: _T("localbkp", "localbkp_bkpset_name"),
            dataIndex: "name",
            width: 150,
            sortable: true,
            renderer: function(f, g) {
                return Ext.util.Format.htmlEncode(f)
            }
        }, {
            header: _T("common", "action"),
            dataIndex: "action",
            width: 150,
            id: "action",
            sortable: true,
            renderer: function(f, g) {
                var h = f.replace(/#(.*?):(.*?)#/g, function(i, k, j) {
                    return _T(k, j)
                });
                g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(Ext.util.Format.htmlEncode(h)) + '"; ext:qwidth=auto';
                return Ext.util.Format.htmlEncode(h)
            }
        }, {
            header: _T("schedule", "next_trigger_time"),
            dataIndex: "next_trigger_time",
            width: 150,
            align: "center",
            sortable: true
        }]);
        this.taskStore = new SYNO.API.Store({
            api: "SYNO.Core.TaskScheduler",
            method: "list",
            version: 1,
            appWindow: this,
            baseParams: {
                offset: 0,
                limit: this.pageSize
            },
            reader: new Ext.data.JsonReader({
                root: "tasks",
                totalProperty: "total"
            }, ["enable", "id", "can_run", "can_delete", "can_edit", "type", "name", "action", "next_trigger_time", "app_name"]),
            sortInfo: {
                field: "next_trigger_time",
                direction: "asc"
            },
            remoteSort: true,
            listeners: {
                scope: this,
                beforeload: function() {
                    this.module.appWin.setStatusBusy()
                },
                load: function() {
                    this.btnSave.disable();
                    this.module.appWin.clearStatusBusy()
                }
            },
            pruneModifiedRecords: true
        });
        this.addManagedComponent(this.taskStore);
        this.toolbar = new Ext.Toolbar();
        var e = [];
        for (var b = 0; b < this.appList.length; ++b) {
            if ("" !== this.appList[b].create_form) {
                e.push({
                    text: this.appList[b].create_btn_text,
                    scope: this,
                    handler: this.popEditDialog.createDelegate(this, [-1, this.appList[b]], false)
                })
            }
        }
        this.toolbar.add(new SYNO.ux.Button({
            text: _T("common", "create"),
            scope: this,
            handler: this.hCreate,
            itemId: "create",
            id: this.idCreateBtn = Ext.id(),
            menu: {
                items: e
            }
        }), {
            xtype: "syno_button",
            text: _T("common", "alt_edit"),
            itemId: "edit",
            disabled: true,
            handler: this.hEdit,
            scope: this
        }, {
            xtype: "syno_button",
            text: _T("common", "delete"),
            itemId: "delete",
            disabled: true,
            handler: this.hDelete,
            scope: this
        }, {
            xtype: "syno_button",
            text: _T("common", "save"),
            itemId: "save",
            handler: this.hSave,
            scope: this
        }, {
            xtype: "syno_button",
            text: _T("common", "run"),
            itemId: "run",
            disabled: true,
            handler: this.hRun,
            scope: this
        });
        var a = {
            title: _T("schedule", "task_scheduler"),
            header: false,
            cm: this.columnModel,
            ds: this.taskStore,
            autoExpandColumn: "action",
            height: 404,
            tbar: this.toolbar,
            bbar: new SYNO.ux.PagingToolbar({
                store: this.taskStore,
                displayInfo: true,
                pageSize: this.pageSize
            }),
            selModel: new Ext.grid.RowSelectionModel(),
            plugins: [this.enableColumn]
        };
        Ext.apply(a, c);
        return a
    },
    hSelectionChange: function() {
        var e = this.getSelectionModel();
        var c = e.getCount();
        var a = e.getSelections();
        var d = 0;
        for (var b = 0; b < a.length; ++b) {
            if (a[b].data.can_run) {
                d = 1;
                break
            }
        }
        if (0 === d) {
            this.btnRun.disable()
        } else {
            this.btnRun.enable()
        }
        var f = 0;
        for (b = 0; b < a.length; ++b) {
            if (a[b].data.can_delete) {
                f = 1;
                break
            }
        }
        if (0 === f || this._S("demo_mode")) {
            this.btnDel.disable()
        } else {
            this.btnDel.enable()
        }
        if (1 === c && a[0].data.can_edit) {
            this.btnEdit.enable()
        } else {
            this.btnEdit.disable()
        }
    },
    loadData: function() {
        this.taskStore.removeAll();
        this.taskStore.load();
        this.btnSave.disable()
    },
    popEditDialog: function(d, c, a) {
        var b = new SYNO.SDS.TaskScheduler2.EditDialog({
            owner: this.owner,
            app: c.app,
            appPanel: c.create_form,
            simple: c.simple_edit_form,
            owner_grid: this,
            task_id: d,
            preloadConfig: a,
            basic_limitation: {
                hide_enable: c.hide_enable ? c.hide_enable : false
            }
        });
        b.open()
    },
    hCreate: function() {
        if (this.menuIsPop) {
            this.btnCreate.hideMenu();
            this.menuIsPop = false
        } else {
            this.btnCreate.showMenu();
            this.menuIsPop = true
        }
    },
    hEdit: function() {
        var c = this.getSelectionModel();
        var b = c.getSelections();
        var a = SYNO.SDS.AdminCenter.TaskScheduler.getAppInfo(b[0].data.type, this.appList);
        this.popEditDialog(b[0].id, {
            create_form: a.create_form,
            app: a.app,
            hide_enable: true,
            simple_edit_form: a.simple_edit_form
        })
    },
    hSave: function() {
        if (0 === this.getStore().getModifiedRecords().length) {
            return
        }
        var c = [];
        for (var a = 0; a < this.getStore().getModifiedRecords().length; ++a) {
            c.push({
                id: this.getStore().getModifiedRecords()[a].data.id,
                enable: this.getStore().getModifiedRecords()[a].data.enable
            })
        }
        var b = {
            status: c
        };
        this.getStore().commitChanges();
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.TaskScheduler",
            method: "set_enable",
            version: 1,
            params: b,
            callback: function(f, e, d) {
                this.loadData();
                this.owner.clearStatusBusy()
            },
            scope: this
        })
    },
    hDelete: function() {
        var c = this.getSelectionModel();
        var a = c.getSelections();
        var e = [];
        for (var b = 0; b < a.length; ++b) {
            if (!a[b].data.can_delete) {
                continue
            }
            e.push(a[b].data.name)
        }
        var d = _T("schedule", "confirm_delete_task") + "<br>" + e.join(", ");
        if (256 < d.length) {
            d = d.substring(0, 255) + " ..."
        }
        this.owner.getMsgBox().confirmDelete(_T("schedule", "delete_task"), d, this.deleteTasks, this)
    },
    deleteTasks: function(c) {
        if ("no" === c) {
            return
        }
        var d = this.getSelectionModel();
        var a = d.getSelections();
        var f = [];
        var b;
        for (b = 0; b < a.length; ++b) {
            if (a[b].data.can_delete) {
                f.push(a[b].id)
            }
        }
        var e = {
            task: f
        };
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.TaskScheduler",
            method: "delete",
            version: 1,
            params: e,
            callback: function(i, h, g) {
                this.loadData();
                this.owner.clearStatusBusy()
            },
            scope: this
        })
    },
    hRun: function() {
        var c = this.getSelectionModel();
        var a = c.getSelections();
        var e = [];
        for (var b = 0; b < a.length; ++b) {
            if (!a[b].data.can_run) {
                continue
            }
            e.push(a[b].data.name)
        }
        var d = _T("schedule", "confirm_run_task") + "<br>" + e.join(", ");
        if (256 < d.length) {
            d = d.substring(0, 255) + " ..."
        }
        this.owner.getMsgBox().confirm(_T("schedule", "run_task"), d, this.runTasks, this)
    },
    runTasks: function(c) {
        if ("no" === c) {
            return
        }
        var d = this.getSelectionModel();
        var a = d.getSelections();
        var f = [];
        var b;
        for (b = 0; b < a.length; ++b) {
            if (a[b].data.can_run) {
                f.push(a[b].id)
            }
        }
        var e = {
            task: f
        };
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.TaskScheduler",
            method: "run",
            version: 1,
            scope: this,
            params: e,
            callback: function(i, h, g) {
                this.loadData();
                this.owner.clearStatusBusy()
            }
        })
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.TaskScheduler");
Ext.define("SYNO.SDS.AdminCenter.TaskScheduler.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function() {
        this.callParent()
    },
    getHelpParam: function() {
        return "AdminCenter/system_taskscheduler.html"
    },
    getPanel: function() {
        if (!this.panel) {
            this.panel = new SYNO.SDS.AdminCenter.TaskScheduler.TaskPanel({
                owner: this.appWin,
                module: this
            })
        }
        return this.panel
    },
    setActivateParams: function(d) {
        if (d && d.newRecycleBinPolicy === true) {
            var c = SYNO.SDS.AdminCenter.TaskScheduler.CreateApps(this.appWin);
            var a = SYNO.SDS.AdminCenter.TaskScheduler.getAppInfo("recycle", c);
            var b = {};
            if (d.share) {
                b.share = d.share
            }
            this.panel.popEditDialog(-1, a, b)
        }
    },
    activate: function(a) {
        this.getPanel().loadData();
        this.setActivateParams(a)
    },
    deactivate: function() {
        if (0 !== this.panel.taskStore.getModifiedRecords().length) {
            return false
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.MemoryLayoutForm", {
    extend: "SYNO.ux.FieldSet",
    formType: "memory_layout",
    webapi: {
        api: "SYNO.Core.Hardware.MemoryLayout",
        methods: {
            get: "get",
            set: "set"
        },
        version: 1
    },
    constructor: function(b) {
        this.memoryLayoutOnUI = -1;
        this.confirmSetMemoryLayout = false;
        var a = Ext.apply({
            labelWidth: 250,
            title: _T("memory_layout", "memory_layout"),
            items: this.getItemList()
        }, b);
        SYNO.LayoutConfig.fill(a);
        this.callParent([a])
    },
    getItemList: function() {
        var a = [];
        a.push({
            xtype: "syno_radio",
            name: "memory_layout",
            inputValue: "1",
            boxLabel: _T("memory_layout", "memory_layout_1way")
        });
        a.push({
            xtype: "syno_radio",
            name: "memory_layout",
            inputValue: "3",
            boxLabel: _T("memory_layout", "memory_layout_4k")
        });
        a.push({
            xtype: "syno_displayfield",
            value: String.format('<span class="syno-ux-note">{0}{1}</span> {2}', _T("common", "note"), _T("common", "colon"), _T("memory_layout", "memory_layout_note"))
        });
        return a
    },
    onBeforeRequest: function(a) {
        if (this.webapi.methods.set !== a) {
            return true
        }
        var b = this.parent.getForm().findField("memory_layout");
        if (!this.confirmSetMemoryLayout && this.memoryLayoutOnUI != b.getValue()) {
            SYNO.Debug("memory_layout changed");
            this.module.appWin.getMsgBox().confirm(this.title, _T("memory_layout", "memory_layout_confirm"), function(c) {
                if ("yes" === c) {
                    this.confirmSetMemoryLayout = true;
                    this.module.panel.applyAllForm();
                    this.confirmSetMemoryLayout = false
                } else {
                    b.setValue(this.memoryLayoutOnUI)
                }
            }, this);
            return false
        }
        return true
    },
    processReturnData: function(f, e, d) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        for (var c = 0; c < e.result.length; c++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, e.result[c])) {
                continue
            }
            if (false === e.result[c].success || !e.result[c].data) {
                this.module.appWin.getMsgBox().alert(_T("memory_layout", "memory_layout"), _T("memory_layout", "memory_layout") + ": " + SYNO.API.getErrorString(e.result[c].error.code));
                return
            }
            break
        }
        var b = e.result[c].data.memory_layout;
        if (-1 !== this.memoryLayoutOnUI && this.memoryLayoutOnUI !== b) {
            SYNO.Debug("memory layout changed. Need to restart");
            SYNO.SDS.System.RebootWithMsg()
        }
        this.memoryLayoutOnUI = b
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm");
SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.ZramForm = Ext.extend(SYNO.ux.FieldSet, {
    formType: "zram",
    webapi: {
        api: "SYNO.Core.Hardware.ZRAM",
        methods: {
            get: "get",
            set: "set"
        },
        version: 1
    },
    constructor: function(b) {
        this.enableZram = -1;
        this.confirmSetZram = false;
        var a = Ext.apply({
            labelWidth: 250,
            title: _T("zram", "zram"),
            items: this.getItemList()
        }, b);
        SYNO.LayoutConfig.fill(a);
        SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.ZramForm.superclass.constructor.call(this, a)
    },
    getItemList: function() {
        var a = [];
        a.push({
            xtype: "syno_checkbox",
            name: "enable_zram",
            boxLabel: _T("zram", "zram_enable"),
            hideLabel: true
        });
        return a
    },
    onBeforeRequest: function(b) {
        if (this.webapi.methods.set !== b) {
            return true
        }
        var a = this.parent.getForm().findField("enable_zram");
        if (!this.confirmSetZram && this.enableZram != a.getValue()) {
            SYNO.Debug("enable_zram changed");
            this.module.appWin.getMsgBox().confirm(this.title, _T("zram", "zram_confirm"), function(c) {
                if ("yes" === c) {
                    this.confirmSetZram = true;
                    this.module.panel.applyAllForm();
                    this.confirmSetZram = false
                } else {
                    a.setValue(this.enableZram)
                }
            }, this);
            return false
        }
        return true
    },
    processReturnData: function(f, d, c) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        for (var b = 0; b < d.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                continue
            }
            if (false === d.result[b].success || !d.result[b].data) {
                this.module.appWin.getMsgBox().alert(_T("zram", "zram"), _T("zram", "zram") + ": " + SYNO.API.getErrorString(d.result[b].error.code));
                return
            }
            break
        }
        var e = d.result[b].data.enable_zram ? 1 : 0;
        if (-1 != this.enableZram && this.enableZram != e) {
            SYNO.Debug("zRam changed. Need to restart");
            SYNO.SDS.System.RebootWithMsg()
        }
        this.enableZram = e
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm");
SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.RecoveryForm = Ext.extend(SYNO.ux.FieldSet, {
    formType: "recovery",
    webapi: {
        api: "SYNO.Core.Hardware.PowerRecovery",
        methods: {
            get: "get",
            set: "set"
        },
        version: 1
    },
    constructor: function(b) {
        var a;
        this.module = b.module;
        a = Ext.apply({
            labelWidth: 250,
            title: _T("rcpower", "rcpower_title"),
            items: this.getItemList()
        }, b);
        SYNO.LayoutConfig.fill(a);
        SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.RecoveryForm.superclass.constructor.call(this, a)
    },
    getItemList: function() {
        var b = [];
        if (this._D("supportrcpower") == "yes") {
            b.push({
                xtype: "syno_checkbox",
                name: "rc_power_config",
                disabled: true,
                id: this.rcPowerBlockcheckboxId = Ext.id(),
                boxLabel: _T("rcpower", "rcpower_config")
            })
        }
        if ("yes" === this._D("support_wol") && "no" === this._D("support_dual_head", "no")) {
            var a = (this._D("maxlanport") || 1);
            for (var c = 1; c <= a; c++) {
                b.push({
                    xtype: "syno_checkbox",
                    name: "wol" + c,
                    boxLabel: _T("network", "wol_mulitple_enable").replace("{0}", c),
                    disabled: this._S("ha_running"),
                    hideLabel: true,
                    hidden: true,
                    listeners: {
                        scope: this,
                        check: this.WOLChange
                    }
                })
            }
        }
        return b
    },
    WOLChange: function(g, d, c, j) {
        var h = Ext.getCmp(this.ownerCt.ownerCt.HibernationTab.autoPoweroffCheckBoxId),
            b = Ext.getCmp(this.ownerCt.ownerCt.HibernationTab.hddIdleTimeComboId).getValue(),
            a = (this._D("maxlanport") || 1),
            f = false;
        for (var e = 1; e <= a; e++) {
            if (true === (f = this.parent.getForm().findField("wol" + e).getValue())) {
                break
            }
        }
        if (true === f && "" !== b && 0 !== b) {
            h.enable()
        } else {
            h.disable();
            h.setValue(false);
            Ext.getCmp(this.ownerCt.ownerCt.HibernationTab.autoPoweroffComboBoxId).disable()
        }
    },
    processReturnData: function(e, d, c) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        for (var b = 0; b < d.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                continue
            }
            if (false === d.result[b].success || !d.result[b].data) {
                this.module.appWin.getMsgBox().alert(_T("rcpower", "rcpower_title"), _T("rcpower", "rcpower_title") + ": " + SYNO.API.getErrorString(d.result[b].error.code));
                return
            }
            break
        }
        this.updateWol(d.result[b].success, d.result[b]);
        this.checkRCPowerBlock(d.result[b].success, d.result[b])
    },
    updateWol: function(f, d) {
        if (!f || !d || !d.data) {
            return
        }
        var c = this.parent.getForm(),
            e = false;
        for (var b = 1; b <= d.data.internal_lan_num; b++) {
            var a = c.findField("wol" + b);
            if (this._D("unique") == "synology_alpine_ds2015xs" && (b == 1 || b == 2)) {
                continue
            }
            a.setVisible(true);
            if (true === d.data["wol" + b]) {
                e = true
            }
        }
        this.parent.ownerCt.HibernationTab.updateAutoPoweroff("wol", e)
    },
    checkRCPowerBlock: function(b, a) {
        if (!b || !a || !a.data) {
            return
        }
        if (a.data.rc_power_forbid || this._S("ha_running")) {
            Ext.getCmp(this.rcPowerBlockcheckboxId).disable()
        } else {
            Ext.getCmp(this.rcPowerBlockcheckboxId).enable()
        }
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm");
SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.FanSpeedForm = Ext.extend(SYNO.ux.FieldSet, {
    formType: "fanspeed",
    webapi: {
        api: "SYNO.Core.Hardware.FanSpeed",
        methods: {
            get: "get",
            set: "set"
        },
        version: 1
    },
    FAN_MODE_ENUM: {
        DUAL_MODE_HIGH: 1,
        DUAL_MODE_LOW: 2,
        DUAL_MODE_LOW_STOP: 4
    },
    constructor: function(b) {
        var a;
        this.module = b.module;
        a = Ext.apply({
            labelWidth: 250,
            title: _T("rcpower", "rcfancontrol_desc"),
            items: this.getItemList()
        }, b);
        SYNO.LayoutConfig.fill(a);
        SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.FanSpeedForm.superclass.constructor.call(this, a)
    },
    getItemList: function() {
        var a = [];
        if (this._D("support_fan_adjust_dual_mode") == "yes") {
            a.push({
                xtype: "syno_radio",
                name: "dual_fan_speed",
                id: this.hfanBtnId = Ext.id(),
                inputValue: "highfan",
                hidden: true,
                boxLabel: _T("rcpower", "rcfancontrol_high")
            });
            a.push({
                xtype: "syno_radio",
                name: "dual_fan_speed",
                id: this.lfanBtnId = Ext.id(),
                inputValue: "lowfan",
                hidden: true,
                boxLabel: _T("rcpower", "rcfancontrol_low")
            });
            a.push({
                xtype: "syno_radio",
                name: "dual_fan_speed",
                id: this.cfanBtnId = Ext.id(),
                inputValue: "coolfan",
                hidden: true,
                boxLabel: _T("rcpower", "rcfancontrol_cool")
            });
            a.push({
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("rcpower", "rcfancontrol_cool_desc"),
                id: this.cfanDescId = Ext.id(),
                hidden: true
            });
            a.push({
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("rcpower", "rcfancontrol_ext_nic_desc"),
                id: this.extNicDescId = Ext.id(),
                hidden: true
            });
            a.push({
                xtype: "syno_radio",
                name: "dual_fan_speed",
                id: this.qfanBtnId = Ext.id(),
                inputValue: "quietfan",
                hidden: true,
                boxLabel: _T("rcpower", "rcfancontrol_quiet")
            });
            a.push({
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("rcpower", "rcfancontrol_quiet_desc"),
                id: this.qfanDescId = Ext.id(),
                hidden: true
            });
            a.push({
                xtype: "syno_radio",
                name: "dual_fan_speed",
                id: this.qstopfanBtnId = Ext.id(),
                inputValue: "quietstopfan",
                hidden: true,
                boxLabel: _T("rcpower", "rcfancontrol_low_power")
            });
            a.push({
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("rcpower", "rcfancontrol_low_power_desc"),
                id: this.qstopfanDescId = Ext.id(),
                hidden: true
            })
        }
        return a
    },
    processReturnData: function(e, d, c) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        for (var b = 0; b < d.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                continue
            }
            if (false === d.result[b].success || !d.result[b].data) {
                this.module.appWin.getMsgBox().alert(_T("rcpower", "rcfancontrol_desc"), _T("rcpower", "rcfancontrol_desc") + ": " + SYNO.API.getErrorString(d.result[b].error.code));
                return
            }
            break
        }
        this.updateFanSpeedControl(d.result[b].success, d.result[b])
    },
    updateFanSpeedControl: function(b, a) {
        SYNO.Debug("support_fan_adjust_dual_mode: " + this._D("support_fan_adjust_dual_mode"));
        if (this._D("support_fan_adjust_dual_mode") === "yes") {
            Ext.getCmp(this.hfanBtnId).disable();
            Ext.getCmp(this.lfanBtnId).disable();
            Ext.getCmp(this.cfanBtnId).disable();
            Ext.getCmp(this.qfanBtnId).disable();
            Ext.getCmp(this.qstopfanBtnId).disable();
            SYNO.Debug("obj.data.cool_fan: " + a.data.cool_fan);
            if (a.data.cool_fan === "no") {
                Ext.getCmp(this.hfanBtnId).setVisible(true);
                Ext.getCmp(this.hfanBtnId).enable();
                Ext.getCmp(this.lfanBtnId).setVisible(true);
                Ext.getCmp(this.lfanBtnId).enable()
            } else {
                if (this.FAN_MODE_ENUM.DUAL_MODE_HIGH & a.data.fan_type) {
                    Ext.getCmp(this.cfanBtnId).setVisible(true);
                    Ext.getCmp(this.cfanBtnId).enable();
                    Ext.getCmp(this.cfanDescId).setVisible(true)
                }
                if (this.FAN_MODE_ENUM.DUAL_MODE_LOW & a.data.fan_type) {
                    Ext.getCmp(this.qfanBtnId).setVisible(true);
                    Ext.getCmp(this.qfanBtnId).enable();
                    Ext.getCmp(this.qfanDescId).setVisible(true)
                }
                if (this.FAN_MODE_ENUM.DUAL_MODE_LOW_STOP & a.data.fan_type) {
                    Ext.getCmp(this.qstopfanBtnId).setVisible(true);
                    Ext.getCmp(this.qstopfanBtnId).enable();
                    Ext.getCmp(this.qstopfanDescId).setVisible(true)
                }
                if (this._D("support_fan_adjust_by_ext_nic") === "yes" && a.data.has_ext_nic === "yes") {
                    Ext.getCmp(this.extNicDescId).setVisible(true);
                    Ext.getCmp(this.cfanBtnId).disable();
                    Ext.getCmp(this.qfanBtnId).disable();
                    Ext.getCmp(this.qstopfanBtnId).disable()
                }
            }
        }
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm");
SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.BeepControlForm = Ext.extend(SYNO.ux.FieldSet, {
    formType: "beepcontrol",
    webapi: {
        api: "SYNO.Core.Hardware.BeepControl",
        methods: {
            get: "get",
            set: "set"
        },
        version: 1
    },
    constructor: function(b) {
        var a;
        this.module = b.module;
        a = Ext.apply({
            labelWidth: 250,
            title: _T("beep", "beep_title"),
            items: this.getItemList()
        }, b);
        SYNO.LayoutConfig.fill(a);
        SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.BeepControlForm.superclass.constructor.call(this, a)
    },
    getItemList: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("rcpower", "beep_desc")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "fan_fail",
            boxLabel: _T("beep", "fan_fail"),
            hideLabel: true
        });
        a.push({
            xtype: "syno_checkbox",
            name: "volume_crash",
            boxLabel: _T("beep", "volume_crash"),
            hideLabel: true
        });
        a.push({
            xtype: "syno_checkbox",
            name: "ssd_cache_crash",
            boxLabel: _T("beep", "ssd_cache_crash"),
            hideLabel: true
        });
        a.push({
            xtype: "syno_checkbox",
            name: "sas_link_fail",
            boxLabel: _T("beep", "sas_link_fail"),
            hideLabel: true
        });
        a.push({
            xtype: "syno_checkbox",
            name: "poweron_beep",
            boxLabel: _T("beep", "poweron_beep"),
            hideLabel: true
        });
        a.push({
            xtype: "syno_checkbox",
            name: "poweroff_beep",
            boxLabel: _T("beep", "poweroff_beep"),
            hideLabel: true
        });
        a.push({
            xtype: "syno_checkbox",
            name: "reset_beep",
            boxLabel: _T("beep", "reset_beep"),
            hideLabel: true
        });
        a.push({
            xtype: "syno_displayfield",
            id: this.beepReasonId = Ext.id(),
            value: _T("beep", "beep_reason") + " " + _T("common", "none"),
            disabled: false
        });
        a.push({
            xtype: "syno_button",
            id: this.btnBeepOffId = Ext.id(),
            text: _T("volume", "volume_beepoff"),
            handler: this.onBeepOff,
            disabled: true,
            scope: this
        });
        return a
    },
    processReturnData: function(e, d, c) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        for (var b = 0; b < d.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                continue
            }
            if (false === d.result[b].success || !d.result[b].data) {
                this.module.appWin.getMsgBox().alert(_T("beep", "beep_title"), _T("beep", "beep_title") + ": " + SYNO.API.getErrorString(d.result[b].error.code));
                return
            }
            break
        }
        this.updateBeepControl(d.result[b].success, d.result[b])
    },
    generateReasonString: function(d) {
        var e = "";
        var c;
        var a = new Array("reason_fan_fail", "reason_volume_crash", "reason_power_on", "reason_power_off", "reason_reset_btn", "reason_sas_link_fail", "reason_ssd_cache_crash");
        for (var b = 0; b < a.length; b++) {
            if (-1 != d.search(a[b])) {
                c = a[b];
                if (e !== "") {
                    e += ","
                }
                e += _T("beep", c)
            }
        }
        return e
    },
    generateDualheadModelBeepReason: function(a) {
        var b = "";
        if (a.remote_beep_reason) {
            b += "Remote host: ";
            b += this.generateReasonString(a.remote_beep_reason)
        }
        if (a.leader_guest_beep_reason) {
            if (b !== "") {
                b += "<br>"
            }
            b += "Guest " + a.leader_sn + ": ";
            b += this.generateReasonString(a.leader_guest_beep_reason)
        }
        if (a.nonleader_guest_beep_reason) {
            if (b !== "") {
                b += "<br>"
            }
            b += "Guest " + a.nonleader_sn + ": ";
            b += this.generateReasonString(a.nonleader_guest_beep_reason)
        }
        return b
    },
    updateBeepReason: function(d) {
        var c = _T("beep", "beep_reason") + " ";
        var e = "";
        var b = "";
        var a = Ext.getCmp(this.btnBeepOffId);
        a.disable();
        if (d.beep_reason) {
            e += this.generateReasonString(d.beep_reason)
        }
        b = this.generateDualheadModelBeepReason(d);
        if (b !== "") {
            if (e !== "") {
                e += "<br>"
            }
            e += b
        }
        if (e === "") {
            e = _T("common", "none")
        } else {
            a.enable();
            e = '<span class="red-status">' + e + "</span>"
        }
        this.setBeepReason(c + e)
    },
    setBeepReason: function(a) {
        var b = Ext.getCmp(this.beepReasonId);
        b.setValue(a);
        b.originalValue = b.getValue()
    },
    updateBeepControl: function(e, d) {
        if (!e || !d || !d.data) {
            return
        }
        var c = function(g, f) {
            SYNO.SDS.Utils.DisplayField(g, f, false);
            g.findField(f).disable()
        };
        var b = this.parent.getForm();
        var a = d.data;
        if (!a.support_fan_fail) {
            c(b, "fan_fail")
        }
        if (!a.support_volume_crash) {
            c(b, "volume_crash")
        }
        if (!a.support_ssd_cache_crash) {
            c(b, "ssd_cache_crash")
        }
        if (!a.support_sas_link_fail) {
            c(b, "sas_link_fail")
        }
        if (!a.support_poweron_beep) {
            c(b, "poweron_beep")
        }
        if (!a.support_poweroff_beep) {
            c(b, "poweroff_beep")
        }
        if (!a.support_reset_beep) {
            c(b, "reset_beep")
        }
        this.updateBeepReason(d.data)
    },
    onBeepOff: function() {
        var a = Ext.getCmp(this.btnBeepOffId);
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.Hardware.BeepControl",
            method: "stop_beep",
            params: {},
            version: 1,
            callback: function(e, c, d, b) {
                if (!e) {
                    this.module.appWin.getMsgBox().alert(_T("volume", "volume_beepoff"), _T("volume", "volume_beepoff") + ": " + SYNO.API.getErrorString(c.code));
                    return
                } else {
                    a.disable();
                    this.setBeepReason(_T("beep", "beep_reason") + " " + _T("common", "none"))
                }
            },
            scope: this
        })
    }
});
Ext.ns("SYNO.SDS.AdminCenter.HardwareControl");
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.GeneralTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.mainPanelFieldSets = [];
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.settingFormList = [];
        if (this._D("unique") === "synology_monaco_ds216play") {
            this.settingFormList.push({
                id: "memory_layout",
                name: "_memory_layout_",
                api: "SYNO.Core.Hardware.MemoryLayout"
            })
        }
        if (this._D("support_zram") == "yes") {
            this.settingFormList.push({
                id: "zram",
                name: _T("zram", "zram"),
                api: "SYNO.Core.Hardware.ZRAM"
            })
        }
        if (this._D("supportrcpower") == "yes" || ("yes" === this._D("support_wol") && "no" === this._D("support_dual_head", "no"))) {
            this.settingFormList.push({
                id: "recovery",
                name: _T("rcpower", "rcpower_title"),
                api: "SYNO.Core.Hardware.PowerRecovery"
            })
        }
        this.settingFormList.push({
            id: "beepcontrol",
            name: _T("beep", "beep_title"),
            api: "SYNO.Core.Hardware.BeepControl"
        });
        if (this._D("support_fan_adjust_dual_mode") == "yes") {
            this.settingFormList.push({
                id: "fanspeed",
                name: _T("rcpower", "rcfancontrol_desc"),
                api: "SYNO.Core.Hardware.FanSpeed"
            })
        }
        if (this._D("support_led_brightness_adjustment") == "yes") {
            this.settingFormList.push({
                id: "ledBrightness",
                name: _T("led_brightness", "led_brightness_desc"),
                api: "SYNO.Core.Hardware.Led.Brightness"
            })
        }
        var c = 0;
        for (c = 0; c < this.settingFormList.length; c++) {
            var d = this.getPanelClassName(this.settingFormList[c].id);
            SYNO.Debug("create form: " + this.settingFormList[c].id);
            this.mainPanelFieldSets.push(new d({
                itemId: this.settingFormList[c].id,
                api: this.settingFormList[c].api,
                module: this.module,
                stateId: String.format("{0}::{1}::{2}", "SYNO.SDS.AdminCenter.HardwareControl.Main", "general", this.settingFormList[c].id),
                collapsible: true,
                parent: this
            }));
            SYNO.Debug("create form: " + this.settingFormList[c].id)
        }
        var b = {
            title: _T("mediaservice", "generic_setting"),
            autoScroll: true,
            items: this.mainPanelFieldSets
        };
        Ext.apply(b, a);
        return b
    },
    setBeepWarn: function() {
        this.getComponent("beepcontrol").expand();
        this.mon(this, "afterlayout", function() {
            this.fleXcrollTo.defer(100, this, [this.getComponent("beepcontrol").el])
        }, this, {
            single: true
        })
    },
    getPanelClassName: function(a) {
        for (var b in SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm) {
            if (Ext.isFunction(SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm[b]) && SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm[b].prototype && SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm[b].prototype.formType === a) {
                return SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm[b]
            }
        }
        return null
    },
    processReturnData: function(e, b, a) {
        for (var d in this.mainPanelFieldSets) {
            if (Ext.isFunction(this.mainPanelFieldSets[d].processReturnData)) {
                this.mainPanelFieldSets[d].processReturnData(e, b, a)
            }
        }
        this.callParent(arguments);
        this.doLayout()
    },
    getHelpParam: function() {
        return "AdminCenter/system_hardware_general.html"
    },
    onBeforeRequest: function(a) {
        for (var b in this.mainPanelFieldSets) {
            if (Ext.isFunction(this.mainPanelFieldSets[b].onBeforeRequest)) {
                if (!this.mainPanelFieldSets[b].onBeforeRequest(a)) {
                    return false
                }
            }
        }
        return true
    }
});
Ext.ns("SYNO.SDS.AdminCenter.HardwareControl");
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.LcmTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            var a;
            a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_password", ["password", "password_confirm"])
        }, this, {
            single: true
        })
    },
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            title: _T("lcm", "lcm_title"),
            autoScroll: true,
            itemId: "LcmTab",
            webapi: {
                api: "SYNO.Core.Hardware.LCM",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: this.getItemList()
        };
        Ext.apply(b, a);
        return SYNO.LayoutConfig.fill(b)
    },
    getItemList: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("lcm", "lcm_desc")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "enable_password",
            boxLabel: _T("lcm", "lcm_password_enable")
        });
        a.push({
            synotype: "password",
            fieldLabel: _T("lcm", "lcm_password"),
            name: "password",
            maxlength: 8,
            vtype: "digit",
            allowBlank: false,
            width: 300
        });
        a.push({
            synotype: "password_confirm",
            fieldLabel: _T("lcm", "lcm_password_confirm"),
            name: "password_confirm",
            confirmFor: "password",
            maxlength: 8,
            vtype: "digit",
            allowBlank: false,
            width: 300
        });
        return a
    },
    onBeforeRequest: function(a) {
        if (this.webapi.methods.set !== a) {
            return true
        }
        if (!this.getForm().isValid()) {
            this.module.panel.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            this.module.panel.setActiveTab("LcmTab");
            return false
        }
        return true
    },
    getHelpParam: function() {
        return "AdminCenter/system_hardware_lcm.html"
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl");
SYNO.SDS.AdminCenter.HardwareControl.ScheduleSummaryDialog = Ext.extend(SYNO.SDS.ModalWindow, {
    grid: undefined,
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.isSupportAutoPowerOn = b.supportAutoPowerOn;
        this.store = new Ext.data.JsonStore({
            autoDestroy: true,
            fields: ["date", "on", "off"],
            data: []
        });
        this.grid = new SYNO.ux.GridPanel({
            ds: this.store,
            cm: new Ext.grid.ColumnModel([{
                header: _T("time", "time_date"),
                dataIndex: "date",
                width: 150
            }, {
                header: _T("system", "poweron_opt"),
                dataIndex: "on",
                hidden: (this.isSupportAutoPowerOn) ? false : true,
                width: 200
            }, {
                header: _T("system", "poweroff_opt"),
                dataIndex: "off",
                width: 200
            }])
        });
        var a = {
            width: 650,
            height: 380,
            title: _T("schedule", "schedule_summary"),
            layout: "fit",
            items: [this.grid],
            buttons: [{
                text: _T("common", "alt_finish"),
                scope: this,
                handler: function() {
                    this.close()
                }
            }]
        };
        Ext.apply(a, b);
        SYNO.SDS.AdminCenter.HardwareControl.ScheduleSummaryDialog.superclass.constructor.call(this, a)
    },
    loadTasks: function(e) {
        var b = e.poweron_tasks;
        var j = e.poweroff_tasks;
        var f = 0;
        var h = 0;
        var c = [];
        var a = "";
        var d = [{
            date: _T("schedule", "schedule_sun"),
            on: "",
            on_array: [],
            off: "",
            off_array: []
        }, {
            date: _T("schedule", "schedule_mon"),
            on: "",
            on_array: [],
            off: "",
            off_array: []
        }, {
            date: _T("schedule", "schedule_tue"),
            on: "",
            on_array: [],
            off: "",
            off_array: []
        }, {
            date: _T("schedule", "schedule_wed"),
            on: "",
            on_array: [],
            off: "",
            off_array: []
        }, {
            date: _T("schedule", "schedule_thu"),
            on: "",
            on_array: [],
            off: "",
            off_array: []
        }, {
            date: _T("schedule", "schedule_fri"),
            on: "",
            on_array: [],
            off: "",
            off_array: []
        }, {
            date: _T("schedule", "schedule_sat"),
            on: "",
            on_array: [],
            off: "",
            off_array: []
        }];
        var g = function(k, i) {
            var o = k.split(":");
            var n = i.split(":");
            var m = parseInt(o[0], 10) * 60 + parseInt(o[1], 10);
            var l = parseInt(n[0], 10) * 60 + parseInt(n[1], 10);
            return m - l
        };
        for (h = 0; h < 7; ++h) {
            for (f = 0; f < b.length; ++f) {
                c = b[f];
                if (!c.enabled) {
                    continue
                }
                if (c.weekdays.search(h.toString()) < 0) {
                    continue
                }
                a = String.format("{0}:{1}", c.hour, this.module.convert2Digits(c.min));
                if (d[h].on_array.indexOf(a) < 0) {
                    d[h].on_array.push(a)
                }
            }
            for (f = 0; f < j.length; ++f) {
                c = j[f];
                if (!c.enabled) {
                    continue
                }
                if (c.weekdays.search(h.toString()) < 0) {
                    continue
                }
                a = String.format("{0}:{1}", c.hour, this.module.convert2Digits(c.min));
                if (d[h].off_array.indexOf(a) < 0) {
                    d[h].off_array.push(a)
                }
            }
            d[h].on_array.sort(g);
            d[h].on = d[h].on_array.join(", ");
            d[h].off_array.sort(g);
            d[h].off = d[h].off_array.join(", ")
        }
        this.store.loadData(d)
    },
    onOpen: function() {
        var a = this.module.getSubmitData();
        this.loadTasks(a);
        SYNO.SDS.AdminCenter.HardwareControl.ScheduleSummaryDialog.superclass.onOpen.call(this)
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl");
SYNO.SDS.AdminCenter.HardwareControl.ScheduleTaskDialog = Ext.extend(SYNO.SDS.ModalWindow, {
    record: undefined,
    mode: "add",
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        this.isSupportAutoPowerOn = b.supportAutoPowerOn;
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        var a = {
            width: 500,
            height: 260,
            resizable: false,
            title: ("edit" == b.mode) ? _T("rcpower", "edit_task") : _T("rcpower", "add_task"),
            items: [this.panel],
            buttons: [{
                text: _T("common", "alt_apply"),
                itemId: "apply",
                scope: this,
                btnStyle: "blue",
                handler: this.onApply
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                btnStyle: "gray",
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        SYNO.SDS.AdminCenter.HardwareControl.ScheduleTaskDialog.superclass.constructor.call(this, a)
    },
    createPanel: function() {
        var b = [];
        b.push({
            xtype: "syno_radio",
            name: "action",
            itemId: "on",
            boxLabel: _T("system", "poweron_opt"),
            inputValue: "on",
            hidden: (this.isSupportAutoPowerOn) ? false : true
        });
        b.push({
            xtype: "syno_radio",
            name: "action",
            itemId: "off",
            boxLabel: _T("system", "poweroff_opt"),
            inputValue: "off"
        });
        b.push({
            xtype: "syno_schedulefield",
            name: "date",
            fieldLabel: _T("time", "time_date"),
            allowBlank: false,
            editable: false,
            width: 300,
            labelWidth: 100
        });
        b.push({
            xtype: "syno_compositefield",
            labelWidth: 100,
            fieldLabel: _T("time", "time_time"),
            items: [{
                xtype: "syno_combobox",
                name: "hour",
                width: 142,
                displayField: "display",
                valueField: "value",
                store: SYNO.SDS.Utils.createTimeItemStore("hour")
            }, {
                xtype: "syno_displayfield",
                value: ":",
                width: 6
            }, {
                xtype: "syno_combobox",
                name: "min",
                width: 142,
                displayField: "display",
                valueField: "value",
                store: SYNO.SDS.Utils.createTimeItemStore("min")
            }]
        });
        var a = {
            trackResetOnLoad: true,
            border: false,
            items: b
        };
        SYNO.LayoutConfig.fill(a);
        return new Ext.form.FormPanel(a)
    },
    getTaskValue: function() {
        var a = {
            action: this.form.findField("action").getGroupValue(),
            triggertime: String.format("{0}:{1}:{2}", this.form.findField("date").getValue(), this.form.findField("hour").getValue(), this.form.findField("min").getValue())
        };
        return a
    },
    setTaskValue: function(a) {
        this.record = a;
        var b = a.get("triggertime").split(":");
        this.form.findField("date").setValue(b[0]);
        this.form.findField("hour").setValue(b[1]);
        this.form.findField("min").setValue(b[2]);
        this.form.findField("action").setValue(a.get("action"))
    },
    setDefault: function() {
        var a = "on";
        this.form.findField("date").setValue("0,1,2,3,4,5,6");
        this.form.findField("hour").setValue(0);
        this.form.findField("min").setValue(0);
        if (this.isSupportAutoPowerOn !== true) {
            a = "off"
        }
        this.form.findField("action").setValue(a)
    },
    onOpen: function() {
        this.setStatusBusy();
        var a = this.module;
        this.setDefault();
        if ("edit" == this.mode) {
            this.record = a.getSelectionModel().getSelected();
            this.setTaskValue(this.record)
        }
        this.clearStatusBusy();
        SYNO.SDS.AdminCenter.HardwareControl.ScheduleTaskDialog.superclass.onOpen.call(this)
    },
    onApply: function() {
        var d = this.getTaskValue();
        var c = this.module;
        var a = c.getStore().indexOf(this.record);
        var b = c.getStore().findBy(function(j, l) {
            var f = j.get("triggertime").split(":");
            var h = d.triggertime.split(":");
            var k = [];
            var e = [];
            var g = 0;
            if (f[1] != h[1] || f[2] != h[2]) {
                return false
            }
            if (a == j.store.indexOf(j)) {
                return false
            }
            k = f[0].split(",");
            if (!k[0]) {
                k[0] = f[0]
            }
            e = h[0].split(",");
            if (!e[0]) {
                e[0] = h[0]
            }
            for (g = 0; g < e.length; g++) {
                if (-1 < k.indexOf(e[g])) {
                    return true
                }
            }
            return false
        });
        if (-1 != b) {
            this.setStatusError({
                text: _T("network", "route_static_rule_error"),
                clear: true
            });
            return
        }
        if ("add" == this.mode) {
            c.getStore().loadData([
                [true, d.triggertime, d.action]
            ], true)
        } else {
            if ("edit" == this.mode) {
                this.record.set("triggertime", d.triggertime);
                this.record.set("action", d.action)
            }
        }
        this.close()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.HardwareControl");
SYNO.SDS.AdminCenter.HardwareControl.MAX_POWER_SCHEDULE_TASKS = 200;
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.ScheduleTab", {
    extend: "SYNO.ux.EditorGridPanel",
    taskAddOrRemoved: false,
    constructor: function(a) {
        var b;
        this.module = a.module;
        b = {
            title: _T("rcpower", "power_schedule"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Hardware.PowerSchedule",
                methods: {
                    get: "load",
                    set: "save"
                },
                version: 1
            }
        };
        this.isSupportAutoPowerOn = (this._D("support_auto_poweron") === "yes");
        Ext.apply(b, a);
        b = this.fillConfig(b);
        this.callParent([b]);
        this.mon(this.getSelectionModel(), "selectionchange", this.onChgButtonStatus, this, {
            buffer: 50
        });
        this.mon(this.getStore(), "update", this.onChgButtonStatus, this);
        this.mon(this.getStore(), "remove", function(d, c, e) {
            this.taskAddOrRemoved = true;
            this.onChgButtonStatus()
        }, this);
        this.mon(this.getStore(), "add", function(d, c, e) {
            this.taskAddOrRemoved = true;
            this.onChgButtonStatus()
        }, this);
        this.mon(this, "celldblclick", function(e, f, d, c) {
            this.openTaskDialog("edit")
        }, this)
    },
    fillConfig: function(j) {
        var c = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["enabled", "triggertime", "action"],
            data: []
        });
        var h = {
            header: _T("common", "enabled"),
            dataIndex: "enabled",
            width: 80,
            menuDisabled: true,
            align: "center"
        };
        var i = new SYNO.ux.EnableColumn(h);
        var g = function(m) {
            var l = "";
            var n = [];
            if (m == "0,1,2,3,4,5,6") {
                l = _T("schedule", "schedule_daily")
            } else {
                if (m == "0,6") {
                    l = _T("schedule", "schedule_weekend")
                } else {
                    if (m == "1,2,3,4,5") {
                        l = _T("schedule", "schedule_weekdays")
                    } else {
                        l = m;
                        l = l.replace("0", _T("schedule", "schedule_sun"));
                        l = l.replace("1", _T("schedule", "schedule_mon"));
                        l = l.replace("2", _T("schedule", "schedule_tue"));
                        l = l.replace("3", _T("schedule", "schedule_wed"));
                        l = l.replace("4", _T("schedule", "schedule_thu"));
                        l = l.replace("5", _T("schedule", "schedule_fri"));
                        l = l.replace("6", _T("schedule", "schedule_sat"));
                        n = l.split(",");
                        l = n.join(", ")
                    }
                }
            }
            return l
        };
        var e = function(o, n) {
            var l = "";
            var m = o.split(":");
            l = String.format("{0} {1}:{2}", g(m[0]), m[1], this.convert2Digits(m[2]));
            return l
        };
        var d = function(m, l) {
            if (m == "on") {
                return _T("system", "poweron_opt")
            } else {
                return _T("system", "poweroff_opt")
            }
        };
        var b = new Ext.form.ComboBox({
            store: new Ext.data.ArrayStore({
                fields: ["value", "display"],
                data: [
                    ["on", _T("system", "poweron_opt")],
                    ["off", _T("system", "poweroff_opt")]
                ]
            }),
            lazyRender: true,
            mode: "local",
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            editable: false
        });
        var k = new Ext.grid.ColumnModel([i, {
            width: 150,
            header: _T("rcpower", "trigger_time"),
            dataIndex: "triggertime",
            align: "center",
            sortable: true,
            scope: this,
            renderer: e
        }, {
            header: _T("rcpower", "action"),
            dataIndex: "action",
            sortable: true,
            renderer: d,
            editable: this.isSupportAutoPowerOn,
            editor: b,
            align: "center",
            scope: this,
            width: 100
        }]);
        var f = function(m, o, l, n) {
            if (l == 2) {
                m.startEditing(o, 2)
            }
        };
        var a = {
            ds: c,
            cm: k,
            loadMask: false,
            hideMode: "offsets",
            cls: "without-dirty-red-grid",
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            plugins: [i],
            tbar: [{
                xtype: "syno_button",
                disabled: this._S("ha_running"),
                text: _T("common", "create"),
                itemId: "create",
                scope: this,
                handler: function(m, l) {
                    this.openTaskDialog("add")
                }
            }, {
                xtype: "syno_button",
                disabled: this._S("ha_running"),
                text: _T("common", "alt_edit"),
                itemId: "edit",
                scope: this,
                handler: function(m, l) {
                    this.openTaskDialog("edit")
                }
            }, {
                xtype: "syno_button",
                disabled: this._S("ha_running"),
                text: _T("common", "delete"),
                itemId: "delete",
                scope: this,
                handler: function() {
                    var l = this.getSelectionModel().getSelections();
                    var n = this.getStore();
                    for (var m = 0; m < l.length; m++) {
                        n.remove(l[m])
                    }
                    this.handlerChgTasks(n)
                }
            }, {
                xtype: "syno_button",
                disabled: this._S("ha_running"),
                text: _T("schedule", "schedule_summary"),
                itemId: "summary",
                scope: this,
                handler: this.openSummaryDialog
            }, {
                xtype: "syno_button",
                disabled: this._S("demo_mode") || this._S("ha_running"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "save"),
                itemId: "save",
                scope: this,
                handler: this.saveTasks
            }],
            listeners: {
                cellclick: {
                    delay: 100,
                    fn: f
                }
            }
        };
        return SYNO.LayoutConfig.fill(Ext.apply(a, j))
    },
    processReturnData: function(e, d, c) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        for (var b = 0; b < d.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                continue
            }
            if (false === d.result[b].success || !d.result[b].data) {
                this.module.appWin.getMsgBox().alert(_T("rcpower", "power_schedule"), _T("rcpower", "power_schedule") + ": " + SYNO.API.getErrorString(d.result[b].error.code));
                return
            }
            break
        }
        this.updatePowerSchedule(d.result[b].success, d.result[b]);
        this.onChgButtonStatus()
    },
    updatePowerSchedule: function(e, d) {
        if (!e || !d || !d.data) {
            return false
        }
        var b = "";
        var a = 0;
        var c = this.getStore();
        var f = [];
        SYNO.Debug("obj.data.poweron_tasks: " + d.data.poweron_tasks.length);
        SYNO.Debug("obj.data.poweroff_tasks: " + d.data.poweroff_tasks.length);
        if (d.data.poweron_tasks) {
            for (a = 0; a < d.data.poweron_tasks.length; ++a) {
                b = String.format("{0}:{1}:{2}", d.data.poweron_tasks[a].weekdays, d.data.poweron_tasks[a].hour, d.data.poweron_tasks[a].min);
                f.push([d.data.poweron_tasks[a].enabled, b, "on"])
            }
        }
        if (d.data.poweroff_tasks) {
            for (a = 0; a < d.data.poweroff_tasks.length; ++a) {
                b = String.format("{0}:{1}:{2}", d.data.poweroff_tasks[a].weekdays, d.data.poweroff_tasks[a].hour, d.data.poweroff_tasks[a].min);
                f.push([d.data.poweroff_tasks[a].enabled, b, "off"])
            }
        }
        c.loadData(f);
        this.taskAddOrRemoved = false;
        this.handlerChgTasks(c);
        return true
    },
    onChgButtonStatus: function() {
        var e = this.getSelectionModel();
        var c = this.getTopToolbar().getComponent("create");
        var d = this.getTopToolbar().getComponent("edit");
        var a = this.getTopToolbar().getComponent("delete");
        var b = this.getTopToolbar().getComponent("save");
        if (!this._S("ha_running") && (this.getStore().getCount() < SYNO.SDS.AdminCenter.HardwareControl.MAX_POWER_SCHEDULE_TASKS)) {
            c.enable()
        } else {
            c.disable()
        }
        if (!this._S("ha_running") && (e.getCount() == 1)) {
            d.enable()
        } else {
            d.disable()
        }
        if (!this._S("ha_running") && (e.getCount() > 0)) {
            a.enable()
        } else {
            a.disable()
        }
        if ((!this._S("demo_mode") && !this._S("ha_running")) && (this.isScheduleModified())) {
            b.enable()
        } else {
            b.disable()
        }
    },
    isScheduleModified: function() {
        var b, a;
        if ("yes" === this._D("support_power_schedule")) {
            b = this.getStore();
            a = b.getModifiedRecords().length;
            if (a > 0 || this.taskAddOrRemoved) {
                return true
            } else {
                return false
            }
        } else {
            return false
        }
    },
    handlerChgTasks: function(a) {
        a.commitChanges();
        a.fireEvent("update", a, a.getModifiedRecords(), Ext.data.Record.EDIT)
    },
    getSubmitData: function() {
        var g = this.getStore();
        var f = {};
        var a = [];
        var e = [];
        for (var c = 0; c < g.getCount(); c++) {
            var h = g.getAt(c);
            var b = {};
            var d = h.get("triggertime").split(":");
            b.enabled = h.get("enabled");
            b.weekdays = d[0];
            b.hour = parseInt(d[1], 10);
            b.min = parseInt(d[2], 10);
            if (h.get("action") == "on") {
                a.push(b)
            } else {
                e.push(b)
            }
        }
        f = {
            poweron_tasks: a,
            poweroff_tasks: e
        };
        return f
    },
    openTaskDialog: function(b) {
        var a = new SYNO.SDS.AdminCenter.HardwareControl.ScheduleTaskDialog({
            owner: this.module.appWin,
            module: this,
            mode: b,
            supportAutoPowerOn: this.isSupportAutoPowerOn
        });
        a.open()
    },
    convert2Digits: function(a) {
        if (a < 10) {
            return "0" + a.toString()
        } else {
            return a.toString()
        }
    },
    openSummaryDialog: function() {
        var a = new SYNO.SDS.AdminCenter.HardwareControl.ScheduleSummaryDialog({
            owner: this.module.appWin,
            module: this,
            supportAutoPowerOn: this.isSupportAutoPowerOn
        });
        a.open()
    },
    saveTasks: function() {
        if (this.isScheduleModified() !== true) {
            return
        }
        this.module.appWin.setStatusBusy({
            text: _T("common", "saving")
        });
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.Hardware.PowerSchedule",
            method: "save",
            params: this.getSubmitData(),
            version: 1,
            callback: this.saveScheduleHandler,
            scope: this
        })
    },
    saveScheduleHandler: function(e, c, d, a) {
        this.module.appWin.clearStatusBusy();
        if (!e) {
            this.module.appWin.setStatusError({
                text: SYNO.API.getErrorString(c.error.code)
            });
            return
        }
        var b = this.getStore();
        this.handlerChgTasks(b);
        this.taskAddOrRemoved = false;
        this.onChgButtonStatus()
    },
    getHelpParam: function() {
        return "AdminCenter/system_hardware_schedule.html"
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.DCOutputTaskDialog", {
    extend: "SYNO.SDS.ModalWindow",
    DEFAULT_MODE: "edit",
    constructor: function(b) {
        this.mode = b.mode || this.DEFAULT_MODE;
        this.panel = this.createPanel();
        var a = Ext.apply({
            title: ("edit" == this.mode) ? _T("rcpower", "edit_task") : _T("rcpower", "add_task"),
            width: 500,
            height: 300,
            resizable: false,
            items: [this.panel],
            buttons: [{
                text: _T("common", "alt_apply"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                text: _T("common", "alt_cancel"),
                btnStyle: "gray",
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a])
    },
    createPanel: function() {
        var a = [];
        Ext.each(["on", "off", "reset"], function(b) {
            a.push({
                xtype: "syno_radio",
                name: "action",
                itemId: b,
                boxLabel: _T("schedule", "dcoutput_" + b) || b.toUpperCase(),
                inputValue: b
            })
        });
        a.push({
            xtype: "syno_schedulefield",
            name: "weekdays",
            fieldLabel: _T("time", "time_date"),
            allowBlank: false,
            editable: false,
            width: 300,
            labelWidth: 100
        });
        a.push({
            xtype: "syno_compositefield",
            labelWidth: 100,
            fieldLabel: _T("time", "time_time"),
            items: [{
                xtype: "syno_combobox",
                name: "hour",
                width: 142,
                displayField: "display",
                valueField: "value",
                store: SYNO.SDS.Utils.createTimeItemStore("hour")
            }, {
                xtype: "syno_displayfield",
                value: ":",
                width: 6
            }, {
                xtype: "syno_combobox",
                name: "minute",
                width: 142,
                displayField: "display",
                valueField: "value",
                store: SYNO.SDS.Utils.createTimeItemStore("min")
            }]
        });
        return new Ext.form.FormPanel({
            trackResetOnLoad: true,
            border: false,
            items: a
        })
    },
    onOpen: function(a) {
        this.task = a;
        this.changed = false;
        this.panel.getForm().setValues({
            action: a.action,
            weekdays: a.weekdays.join(","),
            hour: a.hour,
            minute: a.minute
        });
        this.callParent([])
    },
    onApply: function() {
        var b = this.panel.getForm();
        if ("edit" === this.mode && !b.isDirty()) {
            this.close();
            return
        }
        var a = [];
        Ext.each(b.findField("weekdays").getValue().split(","), function(c) {
            a.push(parseInt(c, 10))
        });
        Ext.apply(this.task, {
            action: b.findField("action").getGroupValue(),
            hour: b.findField("hour").getValue(),
            minute: b.findField("minute").getValue(),
            weekdays: a
        });
        this.changed = true;
        this.close()
    },
    onCancel: function() {
        if (this.panel.getForm().isDirty()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        } else {
            this.close()
        }
    },
    getResultTask: function() {
        return (this.changed) ? this.task : null
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.DCOutputTab", {
    extend: "SYNO.ux.GridPanel",
    DEFAULT_TASK: {
        task_name: "",
        enabled: true,
        action: "on",
        hour: 0,
        minute: 0,
        weekdays: [0, 1, 2, 3, 4, 5, 6]
    },
    TASK_FIELDS: ["task_id", "task_name", "enabled", "action", "hour", "minute", "weekdays"],
    constructor: function(b) {
        this.createTasks = [];
        this.deleteTasks = [];
        this.module = b.module;
        var a = this.fillConfig();
        this.callParent([a]);
        this.mon(this, "celldblclick", function() {
            this.openTaskDialog("edit")
        }, this);
        this.mon(this.store, "update", function() {
            this.updateButtons()
        }, this);
        this.mon(this.getSelectionModel(), "selectionchange", function() {
            this.updateButtons()
        }, this, {
            buffer: 50
        });
        this.mon(this, "keydown", function(c) {
            if (c.getKey() === c.DELETE) {
                this.deleteHandler()
            }
        }, this)
    },
    getStore: function() {
        if (Ext.isDefined(this.store)) {
            return this.store
        }
        this.store = new SYNO.API.JsonStore({
            autoDestroy: true,
            appWindow: this.findAppWindow(),
            api: "SYNO.Core.Hardware.DCOutput.Task",
            method: "load",
            version: 1,
            root: "tasks",
            idProperty: "task_id",
            fields: this.TASK_FIELDS
        });
        return this.store
    },
    getColumnModel: function() {
        if (Ext.isDefined(this.colModel)) {
            return this.colModel
        }
        var b = function(d) {
            var c = d.sort().join(",");
            if (c === "0,1,2,3,4,5,6") {
                return _T("schedule", "schedule_daily")
            } else {
                if (c === "0,6") {
                    return _T("schedule", "schedule_weekend")
                } else {
                    if (c === "1,2,3,4,5") {
                        return _T("schedule", "schedule_weekdays")
                    }
                }
            }
            c = c.replace("0", _T("schedule", "schedule_sun"));
            c = c.replace("1", _T("schedule", "schedule_mon"));
            c = c.replace("2", _T("schedule", "schedule_tue"));
            c = c.replace("3", _T("schedule", "schedule_wed"));
            c = c.replace("4", _T("schedule", "schedule_thu"));
            c = c.replace("5", _T("schedule", "schedule_fri"));
            c = c.replace("6", _T("schedule", "schedule_sat"));
            return c
        };
        var a = function(c) {
            return (10 > c) ? "0" + c : c
        };
        this.colModel = new Ext.grid.ColumnModel([new SYNO.ux.EnableColumn({
            header: _T("common", "enabled"),
            width: 80,
            align: "center",
            menuDisabled: true,
            id: "enabled",
            dataIndex: "enabled"
        }), {
            header: _T("rcpower", "trigger_time"),
            width: 150,
            align: "center",
            menuDisabled: true,
            renderer: function(e, d, c) {
                return String.format("{0} {1}:{2}", b(c.get("weekdays")), a(c.get("hour")), a(c.get("minute")))
            },
            scope: this
        }, {
            header: _T("rcpower", "action"),
            width: 100,
            align: "center",
            sortable: true,
            dataIndex: "action",
            renderer: function(c) {
                return (_T("schedule", "dcoutput_" + c) || c.toUpperCase())
            },
            scope: this
        }]);
        return this.colModel
    },
    fillConfig: function() {
        return SYNO.LayoutConfig.fill({
            title: _T("schedule", "dcoutput_title") || "DC Output",
            autoScroll: true,
            loadMask: true,
            hideMode: "offsets",
            cls: "without-dirty-red-grid",
            ds: this.getStore(),
            cm: this.getColumnModel(),
            plugins: [this.getColumnModel().getColumnById("enabled")],
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            tbar: [{
                xtype: "syno_button",
                text: _T("common", "create"),
                itemId: "create",
                scope: this,
                handler: function(b, a) {
                    this.openTaskDialog("create")
                }
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_edit"),
                itemId: "edit",
                disabled: true,
                scope: this,
                handler: function(b, a) {
                    this.openTaskDialog("edit")
                }
            }, {
                xtype: "syno_button",
                text: _T("common", "delete"),
                itemId: "delete",
                disabled: true,
                scope: this,
                handler: function(b, a) {
                    this.deleteHandler()
                }
            }, {
                xtype: "syno_button",
                disabled: true,
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "save"),
                itemId: "save",
                scope: this,
                handler: this.saveTasks
            }]
        })
    },
    deleteHandler: function() {
        Ext.each(this.getSelectionModel().getSelections(), function(a) {
            this.store.remove(a);
            this.updateEditStatus("delete", a.get("task_id"))
        }, this)
    },
    resetEditStatus: function() {
        this.nextTaskId = -1;
        this.createTasks = [];
        this.deleteTasks = [];
        this.store.commitChanges();
        this.updateButtons()
    },
    updateEditStatus: function(b, c) {
        if ("create" === b) {
            this.createTasks.push(c);
            this.nextTaskId = c - 1
        } else {
            if ("delete" === b) {
                if (0 < c) {
                    this.deleteTasks.push(c)
                } else {
                    var a = this.createTasks.indexOf(c);
                    if (-1 !== a) {
                        this.createTasks.splice(a, 1)
                    }
                }
            }
        }
        this.updateButtons()
    },
    updateButtons: function() {
        var d = this.getSelectionModel();
        var b = this.getTopToolbar().getComponent("edit");
        var c = this.getTopToolbar().getComponent("delete");
        var a = this.getTopToolbar().getComponent("save");
        if (1 === d.getCount()) {
            b.enable()
        } else {
            b.disable()
        }
        if (0 < d.getCount()) {
            c.enable()
        } else {
            c.disable()
        }
        if (!this._S("demo_mode") && this.isScheduleModified()) {
            a.enable()
        } else {
            a.disable()
        }
    },
    openTaskDialog: function(c) {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.SDS.AdminCenter.HardwareControl.DCOutputTaskDialog({
            owner: this.findAppWindow(),
            mode: c
        });
        b.mon(b, "close", function() {
            var d = b.getResultTask();
            if (Ext.isObject(d)) {
                if ("edit" === b.mode) {
                    a.set("action", d.action);
                    a.set("hour", d.hour);
                    a.set("minute", d.minute);
                    a.set("weekdays", d.weekdays)
                } else {
                    this.store.loadData({
                        tasks: [d]
                    }, true);
                    this.updateEditStatus("create", d.task_id)
                }
            }
        }, this);
        b.open(Ext.copyTo({
            task_id: this.nextTaskId
        }, ("edit" === c) ? a.data : this.DEFAULT_TASK, this.TASK_FIELDS))
    },
    isScheduleModified: function() {
        var a = false;
        Ext.each(this.store.getModifiedRecords(), function(b) {
            if (b.get("task_id") > 0) {
                a = true;
                return false
            }
        });
        return (0 < this.createTasks.length || 0 < this.deleteTasks.length || a)
    },
    saveTasks: function() {
        if (!this.isScheduleModified()) {
            return
        }
        this.ownerCt.setStatusBusy({
            text: _T("common", "saving")
        });
        var a = [];
        Ext.each(this.store.getModifiedRecords(), function(b) {
            if (b.get("task_id") < 0) {
                return true
            }
            a.push(b.data)
        });
        Ext.each(this.createTasks, function(b) {
            a.push(this.store.getById(b).data)
        }, this);
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.Hardware.DCOutput.Task",
                    method: "update",
                    version: 1,
                    params: {
                        tasks: a
                    }
                }, {
                    api: "SYNO.Core.Hardware.DCOutput.Task",
                    method: "delete",
                    version: 1,
                    params: {
                        tasks: this.deleteTasks
                    }
                }]
            },
            scope: this,
            callback: function(e, d) {
                this.ownerCt.clearStatusBusy();
                var c = _T("common", "error_system");
                if (!e) {} else {
                    if (d.has_fail) {
                        var b = SYNO.API.Util.GetFirstError(d);
                        if (SYNO.API.Erros.core[b]) {
                            c = SYNO.API.Erros.core[b]
                        }
                    } else {
                        this.store.load();
                        this.resetEditStatus();
                        return
                    }
                }
                this.ownerCt.getMsgBox().alert(this.title, c);
                this.updateButtons()
            }
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.DCOutputDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.panel = new SYNO.SDS.AdminCenter.HardwareControl.DCOutputTab({
            module: b.module
        });
        var a = Ext.apply({
            title: _T("dcoutput", "dcoutput_schedule_title"),
            width: 560,
            height: 500,
            minWidth: 460,
            minHeight: 400,
            layout: "fit",
            buttons: [{
                text: _T("common", "alt_close"),
                scope: this,
                handler: this.beforeClose
            }],
            items: [this.panel]
        }, b);
        this.callParent([a]);
        this.mon(this, "show", function() {
            this.panel.resetEditStatus();
            this.panel.getStore().load()
        }, this)
    },
    beforeClose: function() {
        if (this.panel.isScheduleModified()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        } else {
            this.close()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.DCOutputForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        this.callParent([this.fillConfig()]);
        var b;
        b = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable", [this.btnSchedule])
    },
    fillConfig: function() {
        return SYNO.LayoutConfig.fill({
            title: _T("schedule", "dcoutput_title"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Hardware.DCOutput",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                hideLabel: true,
                value: _T("dcoutput", "dcoutput_desc")
            }, {
                xtype: "syno_checkbox",
                name: "enable",
                boxLabel: _T("dcoutput", "enable_dcoutput")
            }, {
                xtype: "syno_button",
                name: "schedule",
                id: this.btnSchedule = Ext.id(),
                text: _T("dcoutput", "schedule_dcoutput"),
                indent: 1,
                scope: this,
                handler: this.openScheduleDialog
            }, {
                xtype: "syno_displayfield",
                name: "status_on",
                value: _T("dcoutput", "dcoutput_status_title") + ': <font class="green-status">' + _T("dcoutput", "dcoutput_status_on") + "</font>",
                hidden: true
            }, {
                xtype: "syno_displayfield",
                name: "status_off",
                value: _T("dcoutput", "dcoutput_status_title") + ': <font class="red-status">' + _T("dcoutput", "dcoutput_status_off") + "</font>",
                hidden: true
            }]
        })
    },
    processReturnData: function(d, c, b) {
        var a = {
            api: "SYNO.Core.Hardware.DCOutput",
            method: "get",
            version: 1
        };
        Ext.each(c.result, function(f) {
            if (f.success && SYNO.ux.Utils.checkApiConsistency(a, f)) {
                var e = this.getForm();
                if ("on" === f.data.status) {
                    e.findField("status_on").show();
                    e.findField("status_off").hide()
                } else {
                    e.findField("status_on").hide();
                    e.findField("status_off").show()
                }
            }
        }, this);
        this.callParent(arguments)
    },
    openScheduleDialog: function() {
        var a = new SYNO.SDS.AdminCenter.HardwareControl.DCOutputDialog({
            module: this.module,
            owner: this.findAppWindow()
        });
        a.open()
    },
    getHelpParam: function() {
        return "AdminCenter/system_hardware_dc_output.html"
    }
});
Ext.ns("SYNO.SDS.AdminCenter.HardwareControl");
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.HibernationTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.addTip, this, {
            single: true
        })
    },
    fillConfig: function(a) {
        var b = {
            title: (0 <= this._D("unique").indexOf("qoriq")) ? _T("hibernation", "hibernation_title") : _T("helptoc", "power_hibernation"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Hardware.Hibernation",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: this.getItemList()
        };
        Ext.apply(b, a);
        return SYNO.LayoutConfig.fill(b)
    },
    getItemList: function() {
        var a = [];
        if (0 < parseInt(this._D("maxdisks", "0"), 10) || "0x0" !== this._D("esataportcfg", "0x0")) {
            this.getSATASleepCfg(a)
        }
        if ("0x0" !== this._D("esataportcfg", "0x0")) {
            a.push({
                xtype: "syno_checkbox",
                name: "eunit_deep_sleep",
                boxLabel: _T("hddsleep", "eunit_deep_sleep_subject"),
                id: this.eunitDeepSleepBtnId = Ext.id(),
                disabled: true,
                hideLabel: true
            })
        }
        a.push({
            synotype: "desc"
        });
        a.push({
            xtype: "syno_displayfield",
            value: _T("hddsleep", "usb_hddsleep_desc")
        });
        a.push({
            xtype: "syno_combobox",
            name: "usb_idletime",
            id: this.usbIdleTimeComboId = Ext.id(),
            disabled: this._S("ha_running"),
            fieldLabel: _T("time", "time_time"),
            store: this.getUSBSleepStore(),
            displayField: "display",
            valueField: "value",
            labelWidth: 50,
            width: 200,
            listeners: {
                scope: this,
                select: this.onUSBIdleTimeSelect
            }
        });
        a.push({
            synotype: "desc"
        });
        a.push({
            xtype: "syno_displayfield",
            value: _T("hddsleep", "hdd_wakeup_log_desc")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "enable_log",
            boxLabel: _T("hddsleep", "hdd_wakeup_log_subject"),
            id: this.wakeUpLogCheckBoxId = Ext.id(),
            disabled: true,
            hideLabel: true
        });
        if (0 < parseInt(this._D("maxdisks", "0"), 10) && "yes" === this._D("support_wol")) {
            a.push({
                synotype: "desc"
            });
            this.getAutoPoweroffCfg(a)
        }
        return a
    },
    getSATASleepCfg: function(a) {
        a.push({
            xtype: "syno_displayfield",
            value: _T("hddsleep", "hddsleep_desc")
        });
        a.push({
            xtype: "syno_combobox",
            name: "internal_hd_idletime",
            id: this.hddIdleTimeComboId = Ext.id(),
            disabled: this._S("ha_running"),
            fieldLabel: _T("time", "time_time"),
            store: this.getHDDSleepStore(),
            displayField: "display",
            valueField: "value",
            labelWidth: 50,
            width: 200,
            listeners: {
                scope: this,
                select: this.onHDDIdleTimeSelect
            }
        });
        if ("yes" !== this._D("sata_deep_sleep_en")) {
            return
        }
        a.push({
            xtype: "syno_checkbox",
            name: "sata_deep_sleep",
            boxLabel: (0 <= this._D("unique").indexOf("qoriq")) ? _T("hibernation", "hibernation_system_deepsleep_statement") : String.format(_T("hddsleep", "sata_deep_sleep_subject"), this._D("upnpmodelname")),
            id: this.sataDeepSleepBtnId = Ext.id(),
            disabled: true,
            hideLabel: true,
            listeners: {
                scope: this,
                check: function(c, b) {
                    if (b) {
                        Ext.getCmp(this.ignoreNetbiosBroadcastCheckBoxId).enable()
                    } else {
                        Ext.getCmp(this.ignoreNetbiosBroadcastCheckBoxId).disable()
                    }
                },
                enable: function(c) {
                    var b = Ext.getCmp(this.ignoreNetbiosBroadcastCheckBoxId);
                    if (c.getValue()) {
                        b.enable()
                    } else {
                        b.disable()
                    }
                },
                disable: function() {
                    Ext.getCmp(this.ignoreNetbiosBroadcastCheckBoxId).disable()
                }
            }
        });
        a.push({
            xtype: "syno_checkbox",
            name: "ignore_netbios_broadcast",
            boxLabel: _T("hibernation", "hibernation_ignore_netbios_broadcast"),
            id: this.ignoreNetbiosBroadcastCheckBoxId = Ext.id(),
            disabled: true,
            hideLabel: true,
            hidden: (0 > this._D("unique").indexOf("qoriq"))
        })
    },
    getAutoPoweroffCfg: function(a) {
        a.push({
            xtype: "syno_displayfield",
            value: _T("autopoweroff", "autopoweroff_desc")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "auto_poweroff_enable",
            boxLabel: _T("autopoweroff", "autopoweroff_service"),
            id: this.autoPoweroffCheckBoxId = Ext.id(),
            disabled: true,
            hideLabel: true,
            listeners: {
                scope: this,
                check: function(c, b) {
                    var d = Ext.getCmp(this.autoPoweroffComboBoxId);
                    if (b) {
                        d.enable();
                        d.setValue(10)
                    } else {
                        d.disable()
                    }
                }
            }
        });
        a.push({
            xtype: "syno_combobox",
            name: "auto_poweroff_time",
            id: this.autoPoweroffComboBoxId = Ext.id(),
            disabled: true,
            fieldLabel: _T("time", "time_time"),
            store: this.getAutoPoweroffStore(),
            displayField: "display",
            valueField: "value",
            labelWidth: 50,
            width: 200
        })
    },
    getHDDSleepStore: function() {
        var a = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: [
                [0, _T("hddsleep", "hddsleep_none")],
                [10, "10 " + _T("hddsleep", "hddsleep_min")],
                [15, "15 " + _T("hddsleep", "hddsleep_min")],
                [20, "20 " + _T("hddsleep", "hddsleep_min")],
                [30, "30 " + _T("hddsleep", "hddsleep_min")],
                [60, "1 " + _T("hddsleep", "hddsleep_hour")],
                [120, "2 " + _T("hddsleep", "hddsleep_hours")],
                [180, "3 " + _T("hddsleep", "hddsleep_hours")],
                [240, "4 " + _T("hddsleep", "hddsleep_hours")],
                [300, "5 " + _T("hddsleep", "hddsleep_hours")]
            ]
        });
        return a
    },
    getUSBSleepStore: function() {
        var a = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: [
                [0, _T("hddsleep", "hddsleep_none")],
                [10, "10 " + _T("hddsleep", "hddsleep_min")],
                [15, "15 " + _T("hddsleep", "hddsleep_min")],
                [20, "20 " + _T("hddsleep", "hddsleep_min")],
                [30, "30 " + _T("hddsleep", "hddsleep_min")],
                [60, "1 " + _T("hddsleep", "hddsleep_hour")],
                [120, "2 " + _T("hddsleep", "hddsleep_hours")],
                [180, "3 " + _T("hddsleep", "hddsleep_hours")],
                [240, "4 " + _T("hddsleep", "hddsleep_hours")],
                [300, "5 " + _T("hddsleep", "hddsleep_hours")]
            ]
        });
        return a
    },
    getAutoPoweroffStore: function() {
        var a = new Ext.data.SimpleStore({
            fields: ["value", "display"],
            data: [
                [10, "10 " + _T("hddsleep", "hddsleep_min")],
                [15, "15 " + _T("hddsleep", "hddsleep_min")],
                [20, "20 " + _T("hddsleep", "hddsleep_min")],
                [30, "30 " + _T("hddsleep", "hddsleep_min")],
                [60, "1 " + _T("hddsleep", "hddsleep_hour")],
                [120, "2 " + _T("hddsleep", "hddsleep_hours")],
                [180, "3 " + _T("hddsleep", "hddsleep_hours")],
                [240, "4 " + _T("hddsleep", "hddsleep_hours")],
                [300, "5 " + _T("hddsleep", "hddsleep_hours")]
            ]
        });
        return a
    },
    onHDDIdleTimeSelect: function(g, b, c) {
        var a = b.get("value"),
            e = this.ownerCt.GeneralTab.getForm(),
            f = false;
        if (this.enable_eunit_deep_sleep === "yes" && !this._S("ha_running")) {
            if (0 !== a && this.support_eunit_deep_sleep && this.eunit_dsleep_blacklist === "none") {
                Ext.getCmp(this.eunitDeepSleepBtnId).enable()
            } else {
                Ext.getCmp(this.eunitDeepSleepBtnId).disable();
                Ext.getCmp(this.eunitDeepSleepBtnId).setValue(false)
            }
        }
        if (this._D("sata_deep_sleep_en") === "yes" && !this._S("ha_running") && this.sata_dsleep_blacklist === "none") {
            if (0 !== a) {
                Ext.getCmp(this.sataDeepSleepBtnId).enable()
            } else {
                Ext.getCmp(this.sataDeepSleepBtnId).disable();
                Ext.getCmp(this.sataDeepSleepBtnId).setValue(false)
            }
        }
        if (0 !== a || 0 !== Ext.getCmp(this.usbIdleTimeComboId).getValue()) {
            Ext.getCmp(this.wakeUpLogCheckBoxId).enable()
        } else {
            Ext.getCmp(this.wakeUpLogCheckBoxId).disable();
            Ext.getCmp(this.wakeUpLogCheckBoxId).setValue(false)
        }
        if (0 !== a) {
            for (var d = 1; d <= (this._D("maxlanport") || 1); d++) {
                if (true === (f = e.findField("wol" + d).getValue())) {
                    break
                }
            }
            if (true === f) {
                Ext.getCmp(this.autoPoweroffCheckBoxId).enable()
            }
        } else {
            Ext.getCmp(this.autoPoweroffCheckBoxId).disable();
            Ext.getCmp(this.autoPoweroffCheckBoxId).setValue(false);
            Ext.getCmp(this.autoPoweroffComboBoxId).disable()
        }
    },
    onUSBIdleTimeSelect: function(c, a, b) {
        if (0 !== a.get("value") || 0 !== Ext.getCmp(this.hddIdleTimeComboId).getValue()) {
            Ext.getCmp(this.wakeUpLogCheckBoxId).enable()
        } else {
            Ext.getCmp(this.wakeUpLogCheckBoxId).disable();
            Ext.getCmp(this.wakeUpLogCheckBoxId).setValue(false)
        }
    },
    processReturnData: function(g, e, d) {
        this.callParent(arguments);
        var a = {
                api: this.webapi.api,
                method: this.webapi.methods.get,
                version: this.webapi.version
            },
            b;
        for (var c = 0; c < e.result.length; c++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, e.result[c])) {
                continue
            }
            if (false === e.result[c].success || !e.result[c].data) {
                var f = ((0 <= this._D("unique").indexOf("qoriq")) ? _T("hibernation", "hibernation_title") : _T("helptoc", "power_hibernation"));
                this.module.appWin.getMsgBox().alert(f, f + ": " + SYNO.API.getErrorString(e.result[c].error.code));
                return
            }
            b = e.result[c].data;
            break
        }
        this.updateDeepSleepControl(e.result[c].success, e.result[c]);
        if (0 === b.internal_hd_idletime && 0 === b.usb_idletime) {
            Ext.getCmp(this.wakeUpLogCheckBoxId).disable();
            Ext.getCmp(this.wakeUpLogCheckBoxId).setValue(false)
        } else {
            Ext.getCmp(this.wakeUpLogCheckBoxId).enable()
        }
        if (true === b.auto_poweroff_enable) {
            Ext.getCmp(this.autoPoweroffCheckBoxId).enable()
        } else {
            if (0 === b.internal_hd_idletime) {
                this.updateAutoPoweroff("internal_hibernation", false)
            } else {
                this.updateAutoPoweroff("internal_hibernation", true)
            }
        }
    },
    updateDeepSleepControl: function(g, f) {
        this.enable_eunit_deep_sleep = f.data.enable_eunit_deep_sleep;
        this.eunit_dsleep_blacklist = f.data.eunit_dsleep_blacklist;
        this.sata_dsleep_blacklist = f.data.sata_dsleep_blacklist;
        Ext.QuickTips.init();
        if ("0x0" !== this._D("esataportcfg", "0x0")) {
            if (f.data.enable_eunit_deep_sleep === "yes") {
                this.support_eunit_deep_sleep = f.data.support_eunit_deep_sleep;
                Ext.getCmp(this.eunitDeepSleepBtnId).setVisible(true);
                if (f.data.support_eunit_deep_sleep && f.data.internal_hd_idletime && f.data.eunit_dsleep_blacklist === "none") {
                    Ext.getCmp(this.eunitDeepSleepBtnId).enable()
                } else {
                    Ext.getCmp(this.eunitDeepSleepBtnId).disable()
                }
                var e = Ext.getCmp(this.eunitDeepSleepBtnId).boxlabelEl;
                if (f.data.eunit_dsleep_blacklist !== "none") {
                    var d = String.format(_T("hddsleep", "eunit_dsleep_disable_tip"), f.data.eunit_dsleep_blacklist);
                    if (e) {
                        e.dom.setAttribute("ext:qtip", d)
                    }
                } else {
                    if (!f.data.support_eunit_deep_sleep) {
                        var b = _T("hddsleep", "eunit_dsleep_manual_disable_tip");
                        if (e) {
                            e.dom.setAttribute("ext:qtip", b)
                        }
                    } else {
                        if (e) {
                            if (e.dom.getAttribute("ext:qtip")) {
                                e.dom.removeAttribute("ext:qtip")
                            }
                        }
                    }
                }
            } else {
                Ext.getCmp(this.eunitDeepSleepBtnId).setVisible(false)
            }
        }
        if (this._D("sata_deep_sleep_en") === "yes") {
            var h = (0 <= this._D("unique").indexOf("qoriq")) ? _T("hibernation", "hibernation_system_deepsleep_statement").replace("_MODEL_", this._D("upnpmodelname")) : String.format(_T("hddsleep", "sata_deep_sleep_subject"), this._D("upnpmodelname"));
            var c = Ext.getCmp(this.sataDeepSleepBtnId).boxlabelEl;
            if (c) {
                c.update(h);
                if (f.data.sata_dsleep_blacklist !== "none") {
                    var a = String.format(_T("hddsleep", "sata_dsleep_disable_tip"), f.data.sata_dsleep_blacklist);
                    c.dom.setAttribute("ext:qtip", a)
                } else {
                    if (c.dom.getAttribute("ext:qtip")) {
                        c.dom.removeAttribute("ext:qtip")
                    }
                }
            }
            if (f.data.internal_hd_idletime && f.data.sata_dsleep_blacklist === "none") {
                Ext.getCmp(this.sataDeepSleepBtnId).enable()
            } else {
                Ext.getCmp(this.sataDeepSleepBtnId).disable()
            }
        }
    },
    updateAutoPoweroff: function(a, b) {
        if ("internal_hibernation" === a) {
            this.internal_hibernation_enable = b
        } else {
            if ("wol" === a) {
                this.wol_enable = b
            }
        }
        if (this.internal_hibernation_enable && this.wol_enable) {
            Ext.getCmp(this.autoPoweroffCheckBoxId).enable()
        }
    },
    getHelpParam: function() {
        return "AdminCenter/system_hardware_hibernation.html"
    },
    addTip: function() {
        if (0 < parseInt(this._D("maxdisks", "0"), 10) && "yes" === this._D("support_wol")) {
            SYNO.SDS.Utils.AddTip(Ext.getCmp(this.autoPoweroffCheckBoxId).getEl(), _T("autopoweroff", "autopoweroff_note"))
        }
    }
});
Ext.ns("SYNO.SDS.AdminCenter.HardwareControl");
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.DetailsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    title: _T("volume", "volume_details"),
    constructor: function(a) {
        this.store = a.store;
        this.owner = a.owner;
        SYNO.SDS.AdminCenter.HardwareControl.DetailsDialog.superclass.constructor.call(this, Ext.apply(a, {
            plain: true,
            layout: "fit",
            items: [{
                xtype: "syno_gridpanel",
                stripeRows: true,
                columns: [{
                    header: _T("status", "header_item"),
                    width: 100,
                    sortable: false,
                    dataIndex: "name"
                }, {
                    header: _T("status", "header_value"),
                    useHtmlEncodeRender: false,
                    width: 220,
                    sortable: false,
                    dataIndex: "value"
                }],
                store: this.store
            }],
            buttons: [{
                text: _T("common", "close"),
                scope: this,
                handler: function() {
                    this.close()
                }
            }]
        }))
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.ACLListDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        this.UPSInfo = b.UPSInfo;
        this.form = this.createForm();
        var a = Ext.apply({
            title: _T("ups", "networkups_desc"),
            width: 520,
            height: 260,
            layout: "fit",
            resizable: false,
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "apply"),
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [this.form]
        }, b);
        SYNO.SDS.AdminCenter.HardwareControl.ACLListDialog.superclass.constructor.call(this, a)
    },
    createForm: function() {
        var b = 300;
        var a = {
            border: false,
            trackResetOnLoad: true,
            labelWidth: 120,
            items: [{
                xtype: "syno_textfield",
                fieldLabel: _T("common", "ip_addr") + " 1",
                name: "acl0",
                value: this.UPSInfo.ACL_list[0],
                vtype: "ip",
                width: b
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "ip_addr") + " 2",
                name: "acl1",
                value: this.UPSInfo.ACL_list[1],
                vtype: "ip",
                width: b
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "ip_addr") + " 3",
                name: "acl2",
                value: this.UPSInfo.ACL_list[2],
                vtype: "ip",
                width: b
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "ip_addr") + " 4",
                name: "acl3",
                value: this.UPSInfo.ACL_list[3],
                vtype: "ip",
                width: b
            }, {
                xtype: "syno_textfield",
                fieldLabel: _T("common", "ip_addr") + " 5",
                name: "acl4",
                value: this.UPSInfo.ACL_list[4],
                vtype: "ip",
                width: b
            }]
        };
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    apply: function() {
        var c = this.form.getForm();
        var d = "";
        var b = 0;
        var a = 5;
        if (!c.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        for (b = 0; b < a; b++) {
            d = "acl" + b;
            if ("" !== c.findField(d).getValue()) {
                break
            }
        }
        if (a == b) {
            this.getMsgBox().alert(_T("tree", "leaf_ups"), _T("common", "error_emptyip"));
            return
        }
        if (!c.isDirty()) {
            this.close()
        }
        for (b = 0; b < a; b++) {
            d = "acl" + b;
            this.UPSInfo.ACL_list[b] = c.findField(d).getValue()
        }
        this.module.getForm().findField("ACL_modified").setValue("true");
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.UPSTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        if ("yes" !== this._D("supportups")) {
            return
        }
        this.verSupportSNMPV3 = 4936;
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.setEnableService = false;
        this.update = false;
        this.mon(this.getForm().findField("enable"), "check", this.switchLayout, this);
        this.mon(this.getForm().findField("ACL_enable"), "check", this.switchLayout, this);
        this.mon(this.getForm().findField("mode"), "select", this.switchLayout, this);
        this.mon(this.getForm().findField("ups_set_safemode_waittime"), "check", this.switchLayout, this);
        this.mon(this.getForm().findField("ups_time_unit_list"), "select", this.clearWaittimeInvalid, this);
        if (this._S("version") > this.verSupportSNMPV3) {
            this.mon(this.getForm().findField("snmp_version"), "select", this.switchLayout, this);
            this.mon(this.getForm().findField("snmp_auth"), "check", this.setSNMPAuthPrivacy, this);
            this.mon(this.getForm().findField("snmp_privacy"), "check", this.setSNMPPrivacy, this)
        }
    },
    setSNMPAuthPrivacy: function() {
        if (false === this.getForm().findField("snmp_auth").getValue()) {
            this.setCompEnable(["snmp_auth_type", "snmp_auth_key", "snmp_privacy", "snmp_privacy_type", "snmp_privacy_key"], false)
        } else {
            this.setCompEnable(["snmp_auth_type", "snmp_auth_key", "snmp_privacy"], true);
            this.setSNMPPrivacy()
        }
    },
    setSNMPPrivacy: function() {
        if (false === this.getForm().findField("snmp_privacy").getValue()) {
            this.setCompEnable(["snmp_privacy_type", "snmp_privacy_key"], false)
        } else {
            this.setCompEnable(["snmp_privacy_type", "snmp_privacy_key"], true)
        }
    },
    clearWaittimeInvalid: function() {
        this.getForm().findField("ups_customized_waittime").clearInvalid()
    },
    switchLayout: function() {
        var b = this.update ? this.getForm().findField("enable").getValue() : this.UPSInfo.enable;
        var d = this.update ? this.getForm().findField("mode").getValue() : this.UPSInfo.mode;
        var a = this.update ? this.getForm().findField("ACL_enable").getValue() : this.UPSInfo.ACL_enable;
        var c = this.getForm().findField("ups_set_safemode_waittime").getValue();
        if ("USB" === d) {
            this.setFieldUsed(["ups_set_safemode_waittime", "shutdown_device", "ACL_enable"], true);
            this.setFieldUsed(["mode", "net_server_ip", "snmp_server_ip", "snmp_version", "snmp_community", "snmp_mib"], false);
            this.setFieldUsed(["snmp_user", "snmp_auth", "snmp_auth_type", "snmp_auth_key", "snmp_privacy", "snmp_privacy_type", "snmp_privacy_key"], false);
            this.getForm().findField("mode").enable();
            this.getComponent("ups_waittime").enable();
            this.getComponent("ACL_list_btn").setVisible(true);
            this.setFieldAndOriginalValues(this.getForm().findField("ups_system_waittime"), '<font class="blue-status">' + _T("ups", "ups_safemode_until_lowbatt") + "</font>")
        } else {
            if ("SNMP" === d) {
                this.setFieldUsed(["mode", "ups_set_safemode_waittime", "snmp_server_ip", "snmp_version", "snmp_community", "snmp_mib", "ACL_enable"], true);
                this.setFieldUsed(["shutdown_device", "net_server_ip"], false);
                this.getComponent("ups_waittime").enable();
                this.getComponent("ACL_list_btn").setVisible(true);
                this.setFieldAndOriginalValues(this.getForm().findField("ups_system_waittime"), '<font class="blue-status">' + _T("ups", "ups_safemode_until_lowbatt") + "</font>");
                if (this._S("version") > this.verSupportSNMPV3) {
                    if ("v3" === this.getForm().findField("snmp_version").getValue()) {
                        this.setFieldUsed(["snmp_user", "snmp_auth", "snmp_auth_type", "snmp_auth_key", "snmp_privacy", "snmp_privacy_type", "snmp_privacy_key"], true);
                        this.setFieldUsed(["snmp_community"], false);
                        this.setSNMPAuthPrivacy()
                    } else {
                        this.setFieldUsed(["snmp_user", "snmp_auth", "snmp_auth_type", "snmp_auth_key", "snmp_privacy", "snmp_privacy_type", "snmp_privacy_key"], false);
                        this.setFieldUsed(["snmp_community"], true)
                    }
                    if ("" === this.UPSInfo.snmp_auth_type) {
                        this.getForm().findField("snmp_auth_type").setValue("MD5")
                    }
                    if ("" === this.UPSInfo.snmp_privacy_type) {
                        this.getForm().findField("snmp_privacy_type").setValue("DES")
                    }
                    this.doLayout()
                }
            } else {
                if ("SLAVE" === d) {
                    this.setFieldUsed(["mode", "ups_set_safemode_waittime", "net_server_ip"], true);
                    this.setFieldUsed(["shutdown_device", "ACL_enable", "snmp_server_ip", "snmp_version", "snmp_community", "snmp_mib"], false);
                    this.setFieldUsed(["snmp_user", "snmp_auth", "snmp_auth_type", "snmp_auth_key", "snmp_privacy", "snmp_privacy_type", "snmp_privacy_key"], false);
                    this.getComponent("ups_waittime").enable();
                    this.getComponent("ACL_list_btn").setVisible(false);
                    this.setFieldAndOriginalValues(this.getForm().findField("ups_system_waittime"), '<font class="blue-status">' + _T("ups", "ups_safemode_same_as_server") + "</font>");
                    if ("localhost" === this.getForm().findField("net_server_ip").getValue()) {
                        this.getForm().findField("net_server_ip").setValue("")
                    }
                }
            }
        }
        if (c) {
            this.getComponent("ups_waittime").show();
            this.setFieldUsed(["ups_system_waittime"], false)
        } else {
            this.getComponent("ups_waittime").hide();
            this.setFieldUsed(["ups_system_waittime"], true)
        }
        if (a) {
            this.getComponent("ACL_list_btn").enable()
        } else {
            this.getComponent("ACL_list_btn").disable()
        }
        if (!b) {
            this.setCompEnable(["mode", "shutdown_device", "net_server_ip", "snmp_server_ip", "snmp_version", "snmp_community", "snmp_mib", "snmp_user", "snmp_auth", "snmp_auth_type", "snmp_auth_key", "snmp_privacy", "snmp_privacy_type", "snmp_privacy_key", "ACL_list_btn", "ACL_enable", "ups_waittime", "ups_set_safemode_waittime", "ups_system_waittime"], false);
            this.setFieldVisible(["no_ups_message"], true);
            this.setFieldVisible(["networkups_noconn"], false);
            this.getComponent("device_info").setVisible(false);
            return
        }
        if ((d != "USB") && ((d != this.UPSInfo.mode) || (!this.UPSInfo.enable))) {
            this.setFieldVisible(["no_ups_message"], true);
            this.setFieldVisible(["networkups_noconn"], false);
            this.getComponent("device_info").setVisible(false)
        } else {
            this.setFieldVisible(["no_ups_message"], false);
            if ((undefined !== this.UPSInfo.manufacture) && ("" !== this.UPSInfo.manufacture)) {
                this.setFieldVisible(["networkups_noconn"], false);
                this.getComponent("device_info").setVisible(true)
            } else {
                this.setFieldVisible(["networkups_noconn"], true);
                this.getComponent("device_info").setVisible(false)
            }
        }
    },
    getHelpParam: function() {
        var a = "AdminCenter/system_hardware_ups.html";
        return a
    },
    setFieldUsed: function(b, a) {
        this.setFieldVisible(b, a);
        this.setCompEnable(b, a)
    },
    setFieldVisible: function(c, a) {
        for (var b = 0; b < c.length; b++) {
            this.getForm().findField(c[b]).setVisible(a)
        }
    },
    setCompEnable: function(a, b) {
        for (var c = 0; c < a.length; c++) {
            if (b) {
                this.getComponent(a[c]).enable()
            } else {
                this.getComponent(a[c]).disable()
            }
        }
    },
    fillConfig: function(a) {
        var b = {
            title: _T("tree", "leaf_ups"),
            itemId: "UpsTab",
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.ExternalDevice.UPS",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: this.getUPSItems()
        };
        Ext.apply(b, a);
        return b
    },
    getUPSItems: function() {
        this.labelWidth = 300;
        this.comboboxWidth = 200;
        this.fieldWidth = 200;
        var b = /^[0-9a-zA-Z~`!@#$%^&*()_\-\+\=\|\/\{\[\}\];:<>,.?]+$/;
        var a = [{
            xtype: "syno_displayfield",
            hideLabel: true,
            value: _T("ups", "ups_desc")
        }, {
            xtype: "syno_checkbox",
            name: "enable",
            boxLabel: _T("ups", "usb_ups_enable")
        }, {
            xtype: "syno_combobox",
            fieldLabel: _T("ups", "networkups_type_choose"),
            labelWidth: this.labelWidth,
            name: "mode",
            itemId: "mode",
            indent: 1,
            width: this.comboboxWidth,
            store: this.getModeStore(),
            value: this.mode_select[0][0],
            valueField: "value",
            displayField: "display"
        }, {
            xtype: "syno_checkbox",
            name: "ups_set_safemode_waittime",
            itemId: "ups_set_safemode_waittime",
            indent: 1,
            boxLabel: _T("ups", "ups_wait_time_desc")
        }, {
            indent: 2,
            fieldLabel: "Custom Set Time",
            hideLabel: true,
            xtype: "syno_compositefield",
            itemId: "ups_waittime",
            items: [{
                xtype: "syno_numberfield",
                width: 80,
                allowBlank: false,
                value: "0",
                name: "ups_customized_waittime"
            }, {
                xtype: "syno_displayfield",
                width: 3,
                hidden: true,
                name: "delay_time"
            }, {
                xtype: "syno_combobox",
                width: 100,
                hiddenName: "ups_time_unit_list",
                valueField: "id",
                displayField: "display",
                value: "1",
                store: new Ext.data.ArrayStore({
                    fields: ["id", "display"],
                    idProperty: "id",
                    data: [
                        [1, _T("status", "status_second")],
                        [60, _T("status", "status_minute")],
                        [3600, _T("status", "status_hour")]
                    ]
                })
            }]
        }, {
            indent: 2,
            xtype: "syno_displayfield",
            hideLabel: true,
            name: "ups_system_waittime",
            itemId: "ups_system_waittime",
            value: _T("ups", "ups_safemode_until_lowbatt")
        }, {
            xtype: "syno_textfield",
            vtype: "ip",
            fieldLabel: _T("ups", "upsmon_server"),
            labelWidth: this.labelWidth,
            name: "net_server_ip",
            itemId: "net_server_ip",
            maxLength: 64,
            indent: 1,
            width: this.fieldWidth,
            allowBlank: false,
            maskRe: b,
            regex: b
        }, {
            xtype: "syno_textfield",
            vtype: "ip",
            fieldLabel: _T("ups", "snmpups_ip"),
            labelWidth: this.labelWidth,
            name: "snmp_server_ip",
            itemId: "snmp_server_ip",
            maxLength: 64,
            indent: 1,
            width: this.fieldWidth,
            allowBlank: false,
            maskRe: b,
            regex: b
        }, {
            xtype: "syno_combobox",
            fieldLabel: "SNMP MIB",
            labelWidth: this.labelWidth,
            name: "snmp_mib",
            itemId: "snmp_mib",
            indent: 1,
            hidden: (this._S("version") < 4935),
            width: this.comboboxWidth,
            store: this.getSNMPMibStore(),
            value: this.snmp_mib_select[0][0],
            valueField: "value",
            displayField: "display"
        }, {
            xtype: "syno_combobox",
            fieldLabel: _T("ups", "snmpups_version"),
            labelWidth: this.labelWidth,
            name: "snmp_version",
            itemId: "snmp_version",
            indent: 1,
            width: this.comboboxWidth,
            store: this.getSNMPVersionStore(),
            value: this.snmp_version_select[1][0],
            valueField: "value",
            displayField: "display"
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("ups", "snmpups_community"),
            labelWidth: this.labelWidth,
            name: "snmp_community",
            itemId: "snmp_community",
            maxLength: 64,
            indent: 1,
            width: this.fieldWidth,
            allowBlank: false
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("common", "owner"),
            labelWidth: this.labelWidth,
            name: "snmp_user",
            itemId: "snmp_user",
            minLength: 1,
            maxLength: 64,
            indent: 1,
            width: this.fieldWidth,
            allowBlank: false
        }, {
            xtype: "syno_checkbox",
            name: "snmp_auth",
            itemId: "snmp_auth",
            indent: 1,
            boxLabel: _T("snmp", "snmp_auth")
        }, {
            xtype: "syno_combobox",
            fieldLabel: _T("snmp", "snmp_protocol"),
            labelWidth: this.labelWidth,
            name: "snmp_auth_type",
            itemId: "snmp_auth_type",
            indent: 2,
            width: this.comboboxWidth,
            store: new Ext.data.ArrayStore({
                fields: ["value", "display"],
                data: [
                    ["MD5", "MD5"],
                    ["SHA", "SHA"]
                ]
            }),
            value: "MD5",
            valueField: "value",
            displayField: "display"
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("common", "password"),
            textType: "password",
            labelWidth: this.labelWidth,
            name: "snmp_auth_key",
            itemId: "snmp_auth_key",
            minLength: 8,
            maxLength: 64,
            indent: 2,
            width: this.fieldWidth
        }, {
            xtype: "syno_checkbox",
            name: "snmp_privacy",
            itemId: "snmp_privacy",
            indent: 1,
            boxLabel: _T("snmp", "snmp_privacy")
        }, {
            xtype: "syno_combobox",
            fieldLabel: _T("snmp", "snmp_protocol"),
            labelWidth: this.labelWidth,
            name: "snmp_privacy_type",
            itemId: "snmp_privacy_type",
            indent: 2,
            width: this.comboboxWidth,
            store: new Ext.data.ArrayStore({
                fields: ["value", "display"],
                data: [
                    ["DES", "DES"],
                    ["AES", "AES"]
                ]
            }),
            value: "DES",
            valueField: "value",
            displayField: "display"
        }, {
            xtype: "syno_textfield",
            fieldLabel: _T("common", "password"),
            textType: "password",
            labelWidth: this.labelWidth,
            name: "snmp_privacy_key",
            itemId: "snmp_privacy_key",
            minLength: 8,
            maxLength: 64,
            indent: 2,
            width: this.fieldWidth
        }, {
            xtype: "syno_checkbox",
            name: "shutdown_device",
            itemId: "shutdown_device",
            boxLabel: _T("ups", "ups_safemode_shutdown"),
            indent: 1
        }, {
            xtype: "syno_checkbox",
            name: "ACL_enable",
            itemId: "ACL_enable",
            boxLabel: _T("ups", "networkups_enable"),
            indent: 1
        }, {
            xtype: "syno_button",
            name: "ACL_list_btn",
            btnStyle: "default",
            itemId: "ACL_list_btn",
            autoWidth: true,
            indent: 2,
            id: this.ACLListBtnId = Ext.id(),
            disabled: true,
            text: _T("ups", "networkups_desc"),
            scope: this,
            handler: function() {
                var c = new SYNO.SDS.AdminCenter.HardwareControl.ACLListDialog({
                    owner: this.module.appWin,
                    module: this,
                    UPSInfo: this.UPSInfo
                });
                c.show()
            }
        }, {
            xtype: "syno_displayfield",
            name: "no_ups_message",
            value: _T("ups", "usb_ups_status_title") + ": <font class='red-status'>" + _T("ups", "usb_noups") + "</font>",
            hidden: true
        }, {
            xtype: "syno_displayfield",
            name: "networkups_noconn",
            value: _T("ups", "usb_ups_status_title") + ": <font class='red-status'>" + _T("ups", "networkups_noconn") + "</font>",
            hidden: true
        }, {
            xtype: "syno_displayfield",
            name: "next_line"
        }, {
            xtype: "syno_displayfield",
            name: "ACL_modified",
            value: "",
            hidden: true
        }, {
            xtype: "syno_button",
            name: "device_info",
            btnStyle: "default",
            itemId: "device_info",
            id: this.deviceInfoBtnId = Ext.id(),
            autoWidth: true,
            text: _T("ups", "usb_ups_status_title"),
            scope: this,
            handler: this.onClickStatusButton
        }];
        return a
    },
    onClickStatusButton: function() {
        var e = [];
        var b = new Ext.data.ArrayStore({
            fields: ["name", "value"]
        });
        var d;
        if ("usb_ups_status_online" == this.UPSInfo.status) {
            d = _T("ups", this.UPSInfo.status)
        } else {
            d = "<font class='red-status'>" + _T("ups", this.UPSInfo.status) + "</font>"
        }
        var a;
        if (-1 == this.UPSInfo.runtime) {
            a = _T("status", "status_not_available")
        } else {
            a = this.UPSInfo.runtime + " " + _T("time", "time_second")
        }
        e.push([_T("ups", "usb_ups_manufacture"), this.UPSInfo.manufacture]);
        e.push([_T("ups", "usb_ups_model"), this.UPSInfo.model]);
        e.push([_T("usb", "usb_status"), d]);
        e.push([_T("ups", "usb_ups_charge"), this.UPSInfo.charge + "%"]);
        e.push([_T("ups", "usb_ups_runtime"), a]);
        b.loadData(e);
        var c = new SYNO.SDS.AdminCenter.HardwareControl.DetailsDialog({
            owner: this.module.appWin,
            store: b,
            width: 500,
            height: 260
        });
        c.open()
    },
    getModeStore: function() {
        this.mode_select = [
            ["SLAVE", _T("ups", "networkups_type_syno")],
            ["SNMP", _T("ups", "networkups_type_snmp")]
        ];
        var a = new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: this.mode_select
        });
        return a
    },
    getSNMPVersionStore: function() {
        this.snmp_version_select = [
            ["v1", "v1"],
            ["v2c", "v2c"],
            ["v3", "v3"]
        ];
        var a = new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: this.snmp_version_select
        });
        return a
    },
    getSNMPMibStore: function() {
        var c = ["auto", "ietf", "mge", "apcc", "netvision", "pw", "aphel_genesisII", "aphel_revelation", "raritan", "baytech", "cpqpower", "cyberpower"];
        this.snmp_mib_select = [];
        for (var b = 0; b < c.size(); b++) {
            this.snmp_mib_select.push([c[b], c[b]])
        }
        var a = new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: this.snmp_mib_select
        });
        return a
    },
    checkWaittimeValid: function() {
        var d = "";
        var c = 0;
        var b = this.getForm().findField("ups_time_unit_list").getValue();
        var a = 3 * 24 * 60 * 60;
        if (this.getForm().findField("ups_set_safemode_waittime").getValue()) {
            c = this.getForm().findField("ups_customized_waittime").getValue() * b;
            if (c > a) {
                if (1 === b) {
                    d = "0 - 259200"
                } else {
                    if (60 === b) {
                        d = "0 - 4320"
                    } else {
                        d = "0 - 72"
                    }
                }
                this.getForm().findField("ups_customized_waittime").markInvalid(d);
                return false
            }
            this.getForm().findField("delay_time").setValue(c)
        } else {
            this.getForm().findField("delay_time").setValue(-1)
        }
        return true
    },
    onBeforeRequest: function(a) {
        if (this.webapi.methods.set !== a) {
            return true
        }
        if (!this.getForm().isValid() || !this.checkWaittimeValid()) {
            this.module.panel.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            this.module.panel.setActiveTab("UpsTab");
            return false
        }
        return true
    },
    onServiceAction: function(c) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.set,
            version: this.webapi.version
        };
        for (var b = 0; b < c.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, c.result[b])) {
                continue
            }
            if (false === c.result[b].success) {
                SYNO.Debug("Ups onServiceAction fail");
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_ups"), _T("tree", "tree_ups") + ": " + SYNO.API.getErrorString(c.result[b].error.code));
                return
            }
            break
        }
    },
    setFieldAndOriginalValues: function(b, a) {
        b.setValue(a);
        b.originalValue = b.getValue()
    },
    processUPSGetInfo: function(e, d) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        for (var b = 0; b < e.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, e.result[b])) {
                continue
            }
            if (false === e.result[b].success || !e.result[b].data) {
                SYNO.Debug("UPS processUPSGetInfo fail");
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_ups"), _T("tree", "tree_ups") + ": " + SYNO.API.getErrorString(e.result[b].error.code));
                return
            }
            break
        }
        if ((this.setEnableService) && ("USB" != e.result[b].data.mode) && ("" === e.result[b].data.manufacture)) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_ups"), _T("ups", "networkups_noconn"))
        }
        this.setEnableService = false;
        this.UPSInfo = e.result[b].data;
        if ("" === this.UPSInfo.snmp_version) {
            e.result[b].data.snmp_version = "v2c"
        }
        if ("" === this.UPSInfo.snmp_mib) {
            e.result[b].data.snmp_mib = this.snmp_mib_select[0][0]
        }
        var c = this.getForm();
        c.loadRecords(e.result, d.compound);
        this.setFieldAndOriginalValues(this.getForm().findField("ACL_modified"), "false");
        if (this.UPSInfo.delay_time >= 0) {
            this.setFieldAndOriginalValues(this.getForm().findField("ups_set_safemode_waittime"), true)
        } else {
            this.setFieldAndOriginalValues(this.getForm().findField("ups_set_safemode_waittime"), false)
        }
        var h = this.getForm().findField("ups_customized_waittime");
        var g = this.getForm().findField("ups_time_unit_list");
        if (this.getForm().findField("ups_set_safemode_waittime").getValue()) {
            var f = this.UPSInfo.delay_time;
            this.setFieldAndOriginalValues(h, f);
            this.setFieldAndOriginalValues(g, 1);
            if ((0 < f) && (0 === (f % 60))) {
                f = f / 60;
                if (f % 60) {
                    this.setFieldAndOriginalValues(h, f);
                    this.setFieldAndOriginalValues(g, 60)
                } else {
                    f = f / 60;
                    this.setFieldAndOriginalValues(h, f);
                    this.setFieldAndOriginalValues(g, 3600)
                }
            }
        }
    },
    processGetData: function(b, a) {
        this.update = false;
        this.processUPSGetInfo(b, a);
        this.update = true;
        this.onServiceAction(b);
        this.switchLayout()
    },
    processSetData: function(d) {
        var c = d;
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.set,
            version: this.webapi.version
        };
        for (var b = 0; b < c.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, c[b])) {
                continue
            }
            if (this.getForm().isDirty() && this.getForm().findField("enable").getValue()) {
                this.setEnableService = true
            }
            if ("true" == this.getForm().findField("ACL_modified").getValue()) {
                c[b].params.ACL_list = this.UPSInfo.ACL_list
            }
            c[b].params.delay_time = this.getForm().findField("delay_time").getValue();
            break
        }
        return c
    },
    processReturnData: function(c, b, a) {
        this.processGetData(b, a);
        this.callParent(arguments)
    },
    processParams: function(b, a) {
        if ("set" === b) {
            this.processSetData(a)
        }
        return a
    }
});
Ext.ns("SYNO.SDS.AdminCenter.HardwareControl");
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function() {
        this.callParent()
    },
    getHelpParam: function() {
        return this.panel.getActiveTab().getHelpParam()
    },
    getPanel: function() {
        if (Ext.isEmpty(this.panel)) {
            this.panel = new SYNO.SDS.AdminCenter.HardwareControl.TabPanel({
                module: this
            })
        }
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm();
        if (a && a.beepWarn) {
            this.panel.GeneralTab.setBeepWarn()
        }
        return true
    },
    deactivate: function() {
        for (var a in this.panel.tabList) {
            if (Ext.isFunction(this.panel.tabList[a].constructor)) {
                if (Ext.isFunction(this.panel.tabList[a].getForm)) {
                    if (this.panel.tabList[a].getForm().isDirty()) {
                        return false
                    }
                }
                if (Ext.isFunction(this.panel.tabList[a].isScheduleModified)) {
                    if (this.panel.tabList[a].isScheduleModified()) {
                        return false
                    }
                }
            }
        }
        if (this.panel.pollingTask) {
            this.panel.pollingTask.remove();
            this.panel.pollingTask = null
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.HardwareControl.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.LcmTab = null;
        this.ScheduleTab = null;
        this.tabList = [];
        this.module = a.module;
        if ("yes" === this._D("support_fan_adjust_dual_mode") || "yes" === this._D("supportrcpower") || ("yes" === this._D("support_wol") && "no" === this._D("support_dual_head", "no")) || "yes" === this._D("support_buzzer")) {
            this.GeneralTab = new SYNO.SDS.AdminCenter.HardwareControl.GeneralTab({
                module: this.module
            });
            this.tabList.push(this.GeneralTab)
        }
        if (this._D("support_acm", "no") === "yes") {
            this.LcmTab = new SYNO.SDS.AdminCenter.HardwareControl.LcmTab({
                module: this.module
            });
            this.tabList.push(this.LcmTab)
        }
        if ("yes" === this._D("support_power_schedule")) {
            this.ScheduleTab = new SYNO.SDS.AdminCenter.HardwareControl.ScheduleTab({
                module: this.module
            });
            this.tabList.push(this.ScheduleTab)
        }
        if (this._D("support_disk_hibernation", "yes") === "yes") {
            this.HibernationTab = new SYNO.SDS.AdminCenter.HardwareControl.HibernationTab({
                module: this.module
            });
            this.tabList.push(this.HibernationTab)
        }
        if ("yes" === this._D("supportups")) {
            this.UpsTab = new SYNO.SDS.AdminCenter.HardwareControl.UPSTab({
                module: this.module
            });
            this.tabList.push(this.UpsTab)
        }
        if ("yes" === this._D("usbstation", "no")) {
            this.DCOutputForm = new SYNO.SDS.AdminCenter.HardwareControl.DCOutputForm({
                module: this.module
            });
            this.tabList.push(this.DCOutputForm)
        }
        var b = Ext.apply({
            activeTab: 0,
            items: this.tabList
        }, a);
        this.callParent([b])
    },
    getApiArray: function(c) {
        var b = this.callParent(arguments);
        var a = {
            api: "SYNO.Core.Hardware.PowerSchedule",
            method: "load",
            version: 1
        };
        b.push(a);
        return b
    },
    processReturnData: function(c, b, a) {
        this.callParent(arguments);
        if (null !== this.ScheduleTab) {
            this.ScheduleTab.processReturnData(c, b, a)
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.EnterIPStep", {
    extend: "SYNO.SDS.Utils.FormPanel",
    originIP: null,
    constructor: function(b) {
        var a = Ext.apply({
            headline: _T("usb", "net_prntr_welcome"),
            border: false,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_displayfield",
                value: _T("usb", "net_prntr_intro")
            }, {
                xtype: "syno_displayfield",
                value: _T("usb", "net_prntr_enter_ip")
            }, {
                xtype: "syno_displayfield",
                height: 30
            }, {
                xtype: "syno_textfield",
                width: 300,
                allowBlank: false,
                fieldLabel: _T("common", "ip_addr"),
                name: "ip",
                enableKeyEvents: true,
                maxlength: 15,
                vtype: "v4ip"
            }, {
                name: "ip_dup",
                hidden: true,
                xtype: "syno_textfield",
                enableKeyEvents: true,
                maxlength: 15,
                vtype: "v4ip"
            }]
        }, b);
        this.callParent([a])
    },
    activate: function() {
        this.owner.getStep("np_conf").isSet = false;
        this.originIP = this.getForm().findField("ip").getValue()
    },
    getNext: function() {
        var a;
        if (!this.getForm().isValid()) {
            this.owner.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (this._S("demo_mode")) {
            this.owner.goNext(this.nextId);
            return false
        }
        a = this.getForm().findField("ip").getValue();
        if (this.originIP != a) {
            this.owner.el.mask(_T("common", "searching"), "x-mask-loading");
            this.owner.sendWebAPI({
                api: "SYNO.Core.ExternalDevice.Printer.Network.Host",
                version: 1,
                method: "get",
                params: {
                    ip: a
                },
                scope: this,
                callback: function(f, c, e, b) {
                    if (this.isDestroyed) {
                        return
                    }
                    var d;
                    if (!f) {
                        d = SYNO.API.getErrorString(c.code);
                        this.owner.getMsgBox().alert(_T("usb", "net_prntr_wizard_title"), d);
                        return
                    }
                    this.owner.conf = c;
                    this.owner.goNext(this.nextId);
                    this.owner.el.unmask()
                }
            })
        } else {
            this.owner.goNext(this.nextId)
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.NPConfStep", {
    extend: "SYNO.SDS.Utils.FormPanel",
    isSet: false,
    constructor: function(b) {
        var a = Ext.apply({
            headline: _T("usb", "net_prntr_detail"),
            border: false,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_displayfield",
                value: _T("usb", "net_prntr_enter_info")
            }, {
                xtype: "syno_displayfield",
                height: 15
            }, {
                xtype: "syno_textfield",
                width: 300,
                name: "cups_name",
                id: this.NameId = Ext.id(),
                fieldLabel: _T("usb", "net_prntr_name"),
                allowBlank: false,
                maxlength: 32,
                validationEvent: "blur",
                validator: function() {
                    var d = false;
                    var c = this.getValue();
                    if (0 <= c.search(/[^a-zA-Z0-9_]/)) {
                        return _T("error", "error_bad_field")
                    }
                    this.ownerCt.owner.printerStore.each(function(e) {
                        if (c == e.get("cups_name")) {
                            d = true
                        }
                    });
                    if (d) {
                        return _T("usb", "net_prntr_name_exist_error")
                    }
                    this.clearInvalid();
                    return true
                }
            }, {
                xtype: "syno_combobox",
                width: 300,
                name: "protocol",
                fieldLabel: _T("usb", "net_prntr_ptl"),
                id: this.ProtocolId = Ext.id(),
                autoSelect: true,
                allowBlank: false,
                store: this.backendList = new Ext.data.ArrayStore({
                    fields: ["protocol_id", "protocol_text"],
                    data: [
                        ["lpd", _T("usb", "net_prntr_lpr")],
                        ["ipp", _T("usb", "net_prntr_ipp")],
                        ["socket", _T("usb", "net_prntr_socket")],
                        ["bjnp", _T("usb", "net_prntr_bjnp")]
                    ]
                }),
                displayField: "protocol_text",
                valueField: "protocol_id"
            }, {
                xtype: "syno_textfield",
                width: 300,
                name: "qname",
                id: this.QueueNameId = Ext.id(),
                allowBlank: false,
                fieldLabel: _T("usb", "net_prntr_qname"),
                enableKeyEvents: true,
                maxlength: 32,
                validationEvent: "keyup",
                validator: function() {
                    var c = this.getValue();
                    if (0 <= c.search("usbprinter")) {
                        return _T("error", "error_bad_field")
                    }
                    if (this.originalValue !== c && this.originalValue !== "") {
                        if (0 <= c.search(/[^a-zA-Z0-9_]/)) {
                            return _T("error", "error_bad_field")
                        } else {
                            this.clearInvalid();
                            return true
                        }
                    }
                    return true
                }
            }, {
                xtype: "syno_displayfield",
                width: 300,
                name: "mfg",
                id: this.BrandId = Ext.id(),
                fieldLabel: _T("usb", "usb_printer_brand")
            }, {
                xtype: "syno_displayfield",
                width: 300,
                name: "mdl",
                id: this.ModelId = Ext.id(),
                fieldLabel: _T("usb", "net_prntr_mdl")
            }, {
                xtype: "syno_textfield",
                name: "stringid",
                hidden: true
            }]
        }, b);
        this.callParent([a]);
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.getForm().findField("qname").getEl(), _T("usb", "net_qname_tip"))
        }, this, {
            single: true
        })
    },
    activate: function() {
        this.owner.mon(this.getForm().findField("protocol"), "select", function() {
            if ("bjnp" === this.getForm().findField("protocol").getValue() || "socket" === this.getForm().findField("protocol").getValue()) {
                this.getForm().findField("qname").disable();
                this.getForm().findField("qname").clearInvalid()
            } else {
                this.getForm().findField("qname").enable()
            }
        }, this);
        if (false === this.isSet) {
            this.getForm().setValues(this.owner.conf);
            this.getForm().findField("protocol").fireEvent("select");
            this.isSet = true
        }
        if ("" === this.getForm().findField("mfg").getValue()) {
            this.getForm().findField("mfg").setValue(_T("usb", "info_not_found"))
        }
        if ("" === this.getForm().findField("mdl").getValue()) {
            this.getForm().findField("mdl").setValue(_T("usb", "info_not_found"))
        }
    },
    getNext: function() {
        if (!this.getForm().isValid()) {
            this.owner.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (this._S("demo_mode")) {
            this.owner.goNext(this.nextId);
            return false
        }
        this.getForm().findField("cups_name").clearInvalid();
        if (this.supportOAuth) {
            this.owner.el.mask(_T("common", "msg_waiting"), "x-mask-loading");
            this.owner.sendWebAPI({
                api: "SYNO.Core.ExternalDevice.Printer.OAuth",
                version: 1,
                method: "get",
                scope: this,
                callback: function(e, b, d, a) {
                    if (this.isDestroyed) {
                        return
                    }
                    var c;
                    if (!e) {
                        c = SYNO.API.getErrorString(b.code);
                        this.owner.getMsgBox().alert(_T("usb", "net_prntr_wizard_title"), c);
                        return
                    }
                    this.owner.needLogin = (b.account.length === 0);
                    this.owner.goNext(this.nextId);
                    this.owner.el.unmask()
                }
            })
        } else {
            this.owner.goNext(this.nextId)
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.NPSettingStep", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        this.owner = b.owner;
        this.module = b.module;
        var a = Ext.apply({
            headline: _T("usb", "prntr_ap_gcp_setting"),
            border: false,
            trackResetOnLoad: true,
            items: [{
                xtype: "syno_displayfield",
                value: _T("usb", "net_prntr_set_func")
            }, {
                xtype: "syno_displayfield",
                height: 10
            }, {
                xtype: "syno_checkbox",
                name: "enable_airprint",
                boxLabel: _T("usb", "usb_printer_airprint_enable")
            }, {
                xtype: "syno_checkbox",
                name: "with_oauth",
                checked: true,
                hidden: true,
                disabled: !b.supportOAuth
            }, {
                xtype: "syno_checkbox",
                name: "enable_gcp",
                boxLabel: _T("usb", "usb_printer_gcp_enable")
            }, {
                xtype: "syno_button",
                text: _T("common", "login"),
                name: "gcp_login_btn",
                id: this.GCPbtnID = Ext.id(),
                scope: this,
                indent: 1,
                handler: this.gcpcallback,
                hidden: !this.supportOAuth,
                disabled: true,
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
            }, {
                xtype: "syno_textfield",
                width: 300,
                indent: 1,
                allowBlank: false,
                fieldLabel: _T("usb", "usb_printer_gcp_info_account"),
                name: "gcp_account",
                disabled: b.supportOAuth,
                hidden: b.supportOAuth
            }, {
                xtype: "syno_textfield",
                width: 300,
                textType: "password",
                indent: 1,
                allowBlank: false,
                fieldLabel: _T("usb", "usb_printer_gcp_info_pass"),
                name: "gcp_passwd",
                disabled: b.supportOAuth,
                hidden: b.supportOAuth
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("usb", "usb_printer_gcp_info_manager_server_link"),
                hidden: b.supportOAuth
            }, {
                xtype: "syno_checkbox",
                name: "fit_to_page",
                boxLabel: _T("usb", "fit_to_page")
            }, {
                xtype: "syno_displayfield",
                height: 20
            }, {
                xtype: "syno_combobox",
                width: 300,
                name: "driver_brand",
                fieldLabel: _T("usb", "usb_printer_brand"),
                displayField: "value",
                autoSelect: true,
                store: this.brandList = new Ext.data.ArrayStore({
                    fields: ["value"]
                }),
                listeners: {
                    scope: this,
                    select: function(d) {
                        var c = this.getForm().findField("driver_model");
                        c.getStore().loadData(this.owner.module.driverList[d.getValue()]);
                        c.setValue(c.getStore().getAt(0).get("value"))
                    }
                },
                resizable: true
            }, {
                xtype: "syno_combobox",
                width: 300,
                name: "driver_model",
                fieldLabel: _T("usb", "usb_printer_driver"),
                displayField: "value",
                valueField: "value",
                autoSelect: true,
                store: new Ext.data.ArrayStore({
                    fields: ["value"]
                }),
                resizable: true
            }, {
                xtype: "syno_displayfield",
                name: "np_loading_status",
                value: _T("usb", "usb_printer_driver_loading")
            }]
        }, b);
        this.callParent([a])
    },
    activate: function() {
        var b;
        this.mon(this, "afterlayout", function(c, d) {
            this.getForm().findField("driver_brand").disable();
            this.getForm().findField("driver_model").disable();
            this.getForm().findField("enable_airprint").on("check", this.CheckBrandDriver, this);
            c.mon(this.getForm().findField("enable_gcp"), "check", function(e, f) {
                this.CheckBrandDriver();
                if (this._S("demo_mode")) {
                    return
                }
                Ext.getCmp(this.GCPbtnID).setDisabled(!f)
            }, this);
            if (!this.supportOAuth) {
                b = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_gcp", ["gcp_account", "gcp_passwd"])
            }
            this.CheckBrandDriver()
        }, this);
        var a = Ext.getCmp(this.GCPbtnID);
        if (this.owner.needLogin) {
            a.show()
        } else {
            a.hide()
        }
    },
    CheckBrandDriver: function() {
        if (this.getForm().findField("enable_airprint").getValue() || this.getForm().findField("enable_gcp").getValue()) {
            this.getForm().findField("driver_brand").enable();
            this.getForm().findField("driver_model").enable();
            this.getForm().findField("fit_to_page").enable()
        } else {
            this.getForm().findField("driver_brand").disable();
            this.getForm().findField("driver_model").disable();
            this.getForm().findField("fit_to_page").disable()
        }
    },
    getNext: function() {
        if (this._S("demo_mode")) {
            this.owner.getMsgBox().alert(_T("usb", "net_prntr_wizard_title"), _JSLIBSTR("uicommon", "error_demo"));
            return false
        }
        this.owner.onApply();
        return false
    },
    checkState: function() {
        SYNO.SDS.Wizard.Step.prototype.checkState.apply(this, arguments);
        this.owner.checkDriverList()
    },
    gcpcallback: function(f, d) {
        if (f.getText() === _T("common", "login")) {
            window.clickBtn = f;
            window._loginCallback = this.onLoginGoogle.createDelegate(this);
            var g = "_loginCallback";
            var b = window.location.href.indexOf("/", window.location.protocol.length + 2);
            var e = window.location.href.slice(0, b) + "/webman/modules/ExternalDevices/index_ds.php";
            var a = "https://update.synology.com/google_cloud_print/login.php?callback=" + g + "&fmHost=" + e;
            window.open(a, "mywindow", "menubar=1,resizable=0,width=600,height=520, top=100, left=300")
        } else {
            var c = Ext.getCmp(this.GCPbtnID);
            c.hide()
        }
    },
    onLoginGoogle: function(b) {
        var a = {
            refresh_token: b.refresh_token,
            email: b.email
        };
        this.onSaveToken(a, window.clickBtn)
    },
    onSaveToken: function(b, a) {
        a.hide();
        this.owner.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Printer.OAuth",
            version: 1,
            method: "set",
            params: b,
            scope: this
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.AddNetPrinterWizardDialog", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    conf: null,
    blHasUsbshare: false,
    loadDriverFailed: false,
    mfgList: [],
    mdlList: [],
    constructor: function(c) {
        this.owner = c.owner;
        this.module = c.module;
        this.blHasUsbshare = c.blHasUsbshare;
        this.loadDriverFailed = c.loadDriverFailed;
        this.printerStore = c.printerStore;
        this.supportOAuth = (this._S("version") > 4995);
        var a = [this.IPFormPanel = new SYNO.SDS.AdminCenter.ExternalDevices.EnterIPStep({
            itemId: "np_ip",
            nextId: "np_conf"
        }), this.ConfFormPanel = new SYNO.SDS.AdminCenter.ExternalDevices.NPConfStep({
            itemId: "np_conf",
            nextId: "np_setting",
            supportOAuth: this.supportOAuth
        }), this.SettingFormPanel = new SYNO.SDS.AdminCenter.ExternalDevices.NPSettingStep({
            itemId: "np_setting",
            nextId: null,
            supportOAuth: this.supportOAuth,
            owner: this.appWin,
            module: this.module
        })];
        var b = Ext.apply({
            title: _T("usb", "net_prntr_wizard_title"),
            resizable: false,
            width: 600,
            height: 580,
            steps: a
        }, c);
        this.IPForm = this.IPFormPanel.getForm();
        this.ConfForm = this.ConfFormPanel.getForm();
        this.SettingForm = this.SettingFormPanel.getForm();
        this.callParent([b]);
        this.IPFormPanel.mon(this.IPForm.findField("ip"), "keyup", function() {
            this.IPForm.findField("ip_dup").setValue(this.IPForm.findField("ip").getValue());
            if (this.IPForm.findField("ip_dup").isValid()) {
                this.getButton("next").enable()
            } else {
                this.getButton("next").disable()
            }
        }, this)
    },
    onApply: function() {
        var b = 1;
        var a = this.IPForm.getValues();
        a = Ext.apply(a, this.ConfForm.getValues());
        a = Ext.apply(a, this.SettingForm.getValues());
        a = Ext.apply({
            google_cloud_print: {}
        }, a);
        a.mfg = this.ConfForm.findField("mfg").getValue();
        a.mdl = this.ConfForm.findField("mdl").getValue();
        if (undefined === a.qname) {
            a.qname = ""
        }
        if (this.SettingForm.findField("enable_gcp").getValue()) {
            a.google_cloud_print.enable = true
        } else {
            a.google_cloud_print.enable = false
        }
        if (!this.supportOAuth && a.google_cloud_print.enable) {
            if (!this.SettingForm.findField("gcp_passwd").getValue()) {
                b = 0;
                this.SettingForm.findField("gcp_passwd").markInvalid(_T("common", "forminvalid"))
            } else {
                a.google_cloud_print.passwd = this.SettingForm.findField("gcp_passwd").getValue()
            }
            if (!this.SettingForm.findField("gcp_account").getValue()) {
                b = 0;
                this.SettingForm.findField("gcp_account").markInvalid(_T("common", "forminvalid"))
            } else {
                a.google_cloud_print.account = this.SettingForm.findField("gcp_account").getValue()
            }
            if (b === 0) {
                this.printerSetupDialog.setStatusError({
                    text: _T("common", "forminvalid"),
                    clear: true
                });
                return
            }
        }
        delete a.enable_gcp;
        delete a.gcp_account;
        delete a.gcp_passwd;
        delete a.ip_dup;
        if (this.SettingForm.findField("enable_airprint").getValue() || this.SettingForm.findField("enable_gcp").getValue()) {
            if (this.SettingForm.findField("fit_to_page").getValue()) {
                a.fit_to_page = true
            } else {
                a.fit_to_page = false
            }
        } else {
            a.fit_to_page = false
        }
        this.setStatusBusy({
            text: _T("common", "saving")
        });
        this.module.appWin.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Printer.Network",
            version: 1,
            method: "create",
            params: a,
            callback: function(g, d, f, c) {
                if (this.isDestroyed) {
                    return
                }
                this.clearStatusBusy();
                var e;
                if (!g) {
                    e = SYNO.API.getErrorString(d.code);
                    this.getMsgBox().alert(_T("usb", "net_prntr_wizard_title"), e);
                    return
                }
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.favor_lpr", false);
                if (f.enable_airprint) {
                    SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.airprint", false)
                }
                this.close()
            },
            scope: this
        })
    },
    onOpen: function() {
        this.callParent(arguments);
        this.getButton("next").disable()
    },
    checkDriverList: function() {
        var d = (null !== this.module.driverList);
        var a = [];
        var c = null;
        var b = this.getStep("np_setting").getForm().findField("np_loading_status");
        if (this.loadDriverFailed) {
            b.setValue(_T("usb", "usb_printer_driver_loading_fail"))
        }
        b.originalValue = b.getValue();
        SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "enable_airprint", d);
        SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "enable_gcp", d);
        SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "fit_to_page", d);
        SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "driver_brand", d);
        SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "driver_model", d);
        SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "np_loading_status", !d);
        if (!this.supportOAuth) {
            SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "gcp_account", d);
            SYNO.SDS.Utils.DisplayField(this.getStep("np_setting").getForm(), "gcp_passwd", d)
        }
        this.getButton("next").setDisabled(!d);
        if (d && 0 === this.getStep("np_setting").brandList.getCount()) {
            Ext.iterate(this.module.driverList, function(e) {
                a.push([e])
            }, this);
            this.getStep("np_setting").brandList.loadData(a);
            c = this.getStep("np_setting").getForm().findField("driver_brand")
        }
        if (d) {
            this.checkDriver()
        }
    },
    checkDriver: function() {
        var a = null,
            h = null,
            g = null,
            c = null,
            i = false;
        var d = function(l, k) {
                for (var j in l) {
                    if (j.toLowerCase() === k.toLowerCase()) {
                        return j
                    }
                }
                return null
            },
            b = function(j, o) {
                var n = j.split(" ");
                var k = n.length - 1;
                var m = n[k].toLowerCase();
                var l = o.toLowerCase();
                if (0 <= n[k].search(/(ser|printer)/i) && 0 < k) {
                    k--;
                    m = n[k].toLowerCase()
                } else {
                    if (!isNaN(n[k]) && 0 < k) {
                        k--;
                        m = n[k].toLowerCase() + " " + m
                    }
                }
                while (0 <= n[k].search(/(PS3|MFP|PLUS|XL|LF)/i) && 0 < k) {
                    k--;
                    m = n[k].toLowerCase() + " " + m
                }
                if (0 > l.search(m)) {
                    return false
                }
                return true
            };
        g = this.getStep("np_conf").getForm().findField("mfg").getValue();
        c = this.getStep("np_conf").getForm().findField("mdl").getValue();
        if ("" !== h) {
            a = this.getStep("np_conf").getForm().findField("mfg").getValue()
        } else {
            if ("" !== g && "" !== c) {
                a = this.mfgList[g];
                h = this.mdlList[c]
            }
        }
        if (a && h) {
            i = true
        } else {
            a = d(this.module.driverList, g);
            if (null === a) {
                Ext.iterate(this.module.driverList, function(k, j) {
                    Ext.each(j, function(l) {
                        if (b(c, l[0])) {
                            h = l[0];
                            a = k;
                            i = true;
                            return false
                        }
                        return true
                    }, this);
                    if (i) {
                        return false
                    }
                    return true
                }, this)
            } else {
                Ext.each(this.module.driverList[a], function(j) {
                    if (b(c, j[0])) {
                        h = j[0];
                        i = true;
                        return false
                    }
                    return true
                }, this)
            }
        }
        var e = this.getStep("np_setting").getForm().findField("driver_brand");
        var f = this.getStep("np_setting").getForm().findField("driver_model");
        if (null !== a) {
            if (e.findRecord("value", a)) {
                e.onSelect(e.findRecord("value", a))
            }
            e.originalValue = e.getValue();
            if (i) {
                f.setValue(h);
                f.originalValue = f.getValue()
            }
        } else {
            e.onSelect(e.getStore().getAt(0))
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.ShareGrid", {
    extend: "SYNO.ux.GridPanel",
    DEFAULT_ROLES: [
        ["system", _T("share", "share_system_user")],
        ["local_user", _T("share", "share_local_user")]
    ],
    GROUP_ROLES: [
        ["local_group", _T("share", "share_local_group")]
    ],
    DOMAIN_ROLES: [
        ["domain_user", _T("share", "share_domain_user")],
        ["domain_group", _T("share", "share_domain_group")]
    ],
    LDAP_ROLES: [
        ["ldap_user", _T("share", "ldap_user")],
        ["ldap_group", _T("share", "ldap_group")]
    ],
    constructor: function(d) {
        this.pageSize = 50;
        this.store = this.createStore(d);
        var c = {
            header: _T("share", "share_permission_readonly"),
            dataIndex: "is_readonly",
            disableSelectAll: true,
            width: 120
        };
        this.colRo = new SYNO.ux.EnableColumn(c);
        this.colRw = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_writable"),
            dataIndex: "is_writable",
            disableSelectAll: true,
            width: 120,
            id: "is_writable"
        });
        this.colNa = new SYNO.ux.EnableColumn({
            header: _T("share", "share_permission_none"),
            dataIndex: "is_deny",
            disableSelectAll: true,
            width: 120
        });
        var b = [{
            header: _T("share", "share_add_permission"),
            dataIndex: "is_join",
            width: 40,
            renderer: this.joinRenderer
        }, {
            id: "name",
            header: _T("share", "share_name"),
            dataIndex: "name",
            width: 100,
            align: "left",
            renderer: function(f, e) {
                if (f.toLowerCase() === "ftp") {
                    return "Anonymous FTP/WebDAV"
                }
                return f
            }
        }, this.colNa, this.colRw, this.colRo];
        if (d.colCu) {
            this.colCu = d.colCu;
            b.push(this.colCu)
        }
        var a = Ext.apply({
            title: _T("share", "share_rights"),
            layout: "fit",
            cls: "without-dirty-red-grid",
            store: this.store,
            width: 700,
            autoExpandMax: 160,
            autoExpandMin: 160,
            autoExpandColumn: "name",
            enableColumnMove: false,
            enableHdMenu: false,
            hideMode: "offsets",
            colModel: new Ext.grid.ColumnModel({
                defaults: {
                    align: "center"
                },
                columns: b
            }),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            plugins: [this.colRo, this.colRw, this.colNa],
            tbar: this.createTopToolbar(d),
            bbar: new SYNO.ux.PagingToolbar({
                store: this.store,
                pageSize: this.pageSize,
                displayInfo: true
            })
        }, d);
        this.callParent([a]);
        this.mon(this, "cellclick", this.onGridCellClick, this);
        this.mon(this, "afterlayout", function(e, f) {
            e.getView().updateScroller()
        }, this)
    },
    joinRenderer: function(e, d, a, f, c, b) {
        if (a.data.is_readonly || a.data.is_writable || a.data.is_deny || a.data.is_custom) {
            return '<div style="width:16px;height:16px;margin-top:6px;background-image:url(/scripts/ext-3/resources/images/default/menu/group-checked.gif)"></div>'
        }
        return ""
    },
    createStore: function(a) {
        return new SYNO.API.JsonStore({
            autoDestroy: true,
            remoteSort: true,
            appWindow: a.owner,
            api: "SYNO.Core.ExternalDevice.DefaultPermission",
            method: "get",
            version: 1,
            baseParams: {
                offset: 0,
                limit: this.pageSize
            },
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onStoreException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            },
            root: "items",
            idProperty: "name",
            totalProperty: "total",
            fields: ["name", "is_writable", "is_readonly", "is_deny", "is_custom", "is_admin"]
        })
    },
    createTopToolbar: function(a) {
        var b = new SYNO.ux.Toolbar({
            items: [{
                xtype: "syno_combobox",
                itemId: "roleFilter",
                valueField: "role",
                displayField: "display",
                store: {
                    xtype: "arraystore",
                    autoDestroy: true,
                    fields: ["role", "display"]
                },
                mode: "local",
                triggerAction: "all",
                editable: false,
                forceSelection: true,
                width: 200,
                listeners: {
                    beforeselect: {
                        scope: this,
                        fn: this.onRoleFilterSelect
                    }
                }
            }, "->", {
                xtype: "syno_displayfield",
                value: _T("helptoc", "directory_service_domain") + ": ",
                hidden: true,
                itemId: "domainListLabel"
            }, {
                xtype: "syno_combobox",
                itemId: "domainFilter",
                valueField: "value",
                displayField: "domain",
                store: {
                    xtype: "arraystore",
                    autoDestroy: true,
                    fields: ["domain", "value", "comment"]
                },
                hidden: true,
                resizable: true,
                mode: "local",
                triggerAction: "all",
                editable: false,
                value: "",
                forceSelection: true,
                tpl: '<tpl for="."><div ext:qtip="{comment}" class="x-combo-list-item">{domain}</div></tpl>',
                listeners: {
                    beforeselect: {
                        scope: this,
                        fn: this.onDomainFilterSelect
                    }
                }
            }, this.nameFilter = new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                emptyText: _T("share", "share_filter_text"),
                store: this.store,
                queryParam: "substr",
                pageSize: this.pageSize
            })]
        });
        this.roleFilter = b.getComponent("roleFilter");
        this.domainFilter = b.getComponent("domainFilter");
        this.domainListLabel = b.getComponent("domainListLabel");
        return b
    },
    showDomainFilter: function(a) {
        this.domainListLabel.setVisible(a);
        this.domainFilter.setVisible(a)
    },
    onDomainFilterSelect: function(b, a) {
        this.store.baseParams.domain = a.data.value;
        this.store.load({
            params: {
                offset: 0
            }
        })
    },
    onGridCellClick: function(c, i, d, h) {
        var a = c.getStore().getAt(i);
        var g = c.getColumnModel().getDataIndex(d);
        var f = function(e) {
            return (e === "is_readonly" || e === "is_writable" || e === "is_deny")
        };
        var b = function(k, e, j) {
            if ("is_readonly" !== k) {
                e.set("is_readonly", false);
                j.colRo.checkSelectAll(j.getStore())
            }
            if ("is_writable" !== k) {
                e.set("is_writable", false);
                j.colRw.checkSelectAll(j.getStore())
            }
            if ("is_deny" !== k) {
                e.set("is_deny", false);
                j.colNa.checkSelectAll(j.getStore())
            }
            if ("is_custom" !== k) {
                e.set("is_custom", false)
            }
        };
        if (f(g)) {
            if (a.get(g) === true) {
                b(g, a, c)
            }
        }
    },
    isChanged: function() {
        return (this.store.getModifiedRecords().length !== 0)
    },
    getModifiedPermissions: function() {
        var b = this.getWebAPI();
        var a = [];
        if (b.length === 1) {
            Ext.each(b[0].params.permissions, function(c) {
                a.push({
                    is_readonly: c.is_readonly,
                    is_deny: c.is_deny,
                    is_writable: c.is_writable,
                    is_custom: c.is_custom ? true : false
                })
            })
        }
        return a
    },
    onStoreException: function(d, e, f, c, b, a) {
        this.owner.clearStatusBusy();
        SYNO.Debug("Store exception: options:", d, e, f, c, b, a);
        this.owner.getMsgBox().alert(this.title, SYNO.API.Erros.core[b.code] || _T("common", "commfail"))
    },
    onBeforeLoad: function(a, b) {
        this.owner.setStatusBusy({
            text: _T("common", "loading")
        });
        if (!this.isChanged()) {
            return true
        }
        this.owner.clearStatusBusy();
        this.owner.getMsgBox().confirm(this.title, _T("share", "share_save_chg_before_reload"), function(c) {
            if (c === "yes") {
                var d = this.getWebAPI();
                this.sendApplyRequest(d, b)
            } else {
                this.store.rejectChanges();
                this.store.load(b)
            }
        }, this);
        return false
    },
    onLoad: function() {
        this.prevRole = undefined;
        this.owner.clearStatusBusy();
        this.getSelectionModel().selectFirstRow()
    },
    onException: function(d, e, f, c, b, a) {
        this.owner.clearStatusBusy();
        this.owner.getMsgBox().alert(this.title, SYNO.API.Erros.core[b.code] || _T("common", "commfail"))
    },
    onRoleFilterSelect: function(b, a) {
        var c = a.data.role;
        this.prevRole = b.getValue();
        this.store.baseParams.user_group_type = c;
        if (c === "domain_user" || c === "domain_group") {
            this.showDomainFilter(true)
        } else {
            this.showDomainFilter(false)
        }
        this.store.load({
            params: {
                offset: 0
            }
        })
    },
    loadPermissions: function(g) {
        var f = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Directory.LDAP", "get", "enable_client");
        var e = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Directory.Domain", "get", "enable_domain");
        var a = SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Directory.Domain", "test_dc", "test_join_success");
        var b = this._D("supportdomain") === "yes" ? SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Directory.Domain", "get_domain_list", "domain_list") : false;
        var d = this.roleFilter.getStore();
        var c = this.domainFilter.getStore();
        var h = [];
        d.loadData(this.DEFAULT_ROLES);
        d.loadData(this.GROUP_ROLES, true);
        if (f) {
            d.loadData(this.LDAP_ROLES, true)
        }
        if (e && a) {
            d.loadData(this.DOMAIN_ROLES, true);
            Ext.each(b, function(i) {
                if (typeof i === "object") {
                    h.push(i)
                } else {
                    h.push([i, i, i])
                }
            }, this);
            c.loadData(h);
            if (!this.domainFilter.getValue()) {
                this.domainFilter.setValue(h[0][1] || "")
            }
            this.store.baseParams.domain = this.domainFilter.getValue();
            if (1 === SYNO.API.Util.GetValByAPI(g, "SYNO.Core.Directory.Domain", "get", "manage_mode")) {
                this.domainListLabel.setValue(_T("directory_service", "organizational_unit") + ": ")
            } else {
                this.domainListLabel.setValue(_T("helptoc", "directory_service_domain") + ": ")
            }
        }
        this.showDomainFilter(false);
        this.roleFilter.setValue("local_user");
        this.nameFilter.reset();
        this.store.baseParams.user_group_type = this.roleFilter.getValue();
        this.store.load()
    },
    getOpenConfig: function() {
        var a = this.getSelectionModel().getSelected().get("name");
        var c = "user";
        var b = this.roleFilter.getValue();
        if (b === "local_group" || b === "domain_group" || b === "ldap_group") {
            c = "group"
        } else {
            if (a === "http") {
                c = "group"
            }
        }
        return {
            userName: a.toLowerCase(),
            userType: c
        }
    },
    getWebAPI: function() {
        var a = [];
        Ext.each(this.store.getModifiedRecords(), function(c) {
            a.push({
                name: c.data.name,
                is_readonly: c.data.is_readonly,
                is_writable: c.data.is_writable,
                is_deny: c.data.is_deny,
                is_custom: c.data.is_custom
            })
        }, this);
        var b = {
            user_group_type: this.prevRole || this.roleFilter.getValue(),
            permissions: a
        };
        return (a.length === 0) ? undefined : {
            api: "SYNO.Core.ExternalDevice.DefaultPermission",
            method: "set",
            version: 1,
            params: b
        }
    },
    sendApplyRequest: function(a, b) {
        this.owner.setStatusBusy({
            text: _T("common", "saving")
        });
        this.owner.sendWebAPI(Ext.apply(a, {
            scope: this,
            callback: function(d, c) {
                this.owner.clearStatusBusy();
                if (d) {
                    this.store.commitChanges();
                    this.store.load(b);
                    return
                }
                this.owner.getMsgBox().alert(this.title, SYNO.API.Erros.core[c.code] || _T("common", "commfail"))
            }
        }))
    }
});
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.ExternalSettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b, c) {
        this.option = c;
        this.defaulPermissionGrid = new SYNO.SDS.AdminCenter.ExternalDevices.ShareGrid({
            module: b.module,
            owner: this,
            cls: "external-sharegrid",
            flex: 1
        });
        this.externalDefaultPermissionTab = new SYNO.SDS.Utils.FormPanel({
            module: b.module,
            owner: this,
            title: _T("externaldevice", "externaldevice_default_permission"),
            itemId: "ExternalDefaultPermissionTab",
            layout: "vbox",
            layoutConfig: {
                align: "stretch"
            },
            items: [this.defaulPermissionGrid, {
                xtype: "panel",
                border: false,
                items: [{
                    xtype: "syno_displayfield",
                    value: '<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + _T("externaldevice", "externaldevice_default_permission_dialog_desc")
                }]
            }]
        });
        this.writeCacheTab = new SYNO.SDS.AdminCenter.ExternalDevices.StorageSettingTab({
            module: b.module,
            owner: this,
            itemId: "StorageSettingTab"
        }, c);
        var a = Ext.apply({
            width: 800,
            height: 570,
            minWidth: 780,
            minHeight: 370,
            layout: "fit",
            title: _T("externaldevice", "externaldevice_global_settings"),
            items: [{
                xtype: "syno_tabpanel",
                plain: true,
                itemId: "tab",
                activeTab: 0,
                items: [this.externalDefaultPermissionTab, this.writeCacheTab]
            }],
            buttons: [{
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                disabled: _S("demo_mode"),
                tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                handler: this.onApply
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a]);
        this.loadDefaultPermission()
    },
    loadDefaultPermission: function() {
        var a = [{
            api: "SYNO.Core.Directory.LDAP",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.Directory.Domain",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.Directory.Domain",
            method: "test_dc",
            version: 1
        }];
        if (this._D("supportdomain") === "yes") {
            var b = {
                api: "SYNO.Core.Directory.Domain",
                method: "get_domain_list",
                version: 1
            };
            if (this._S("version") > 4946) {
                b.version = 2
            }
            a.push(b)
        }
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(f, c, e) {
                this.clearStatusBusy();
                if (!f || c.has_fail) {
                    var d = SYNO.API.Util.GetFirstError(c);
                    this.getMsgBox().alert("share", SYNO.API.Erros.core[d.code] || _T("common", "commfail"));
                    return
                }
                this.defaulPermissionGrid.loadPermissions(c)
            }
        })
    },
    isChanged: function() {
        return (this.defaulPermissionGrid.isChanged() || this.writeCacheTab.getForm().isDirty())
    },
    onApply: function() {
        if (!this.isChanged()) {
            this.close();
            return
        }
        var d = this;
        var c = this.defaulPermissionGrid.getWebAPI();
        var a = this.writeCacheTab.getWebAPI();
        var b = [];
        if (c) {
            b.push(c)
        }
        if (a) {
            b.push(a)
        }
        if (a) {
            this.getMsgBox().confirm(_T("hddsleep", "dcache_title"), _T("usb", "apply_delalloc_warning"), function(e) {
                if (e == "yes") {
                    Ext.getCmp(d.option.btnSettingId).disable();
                    Ext.getCmp(d.option.btnFormatId).disable();
                    Ext.getCmp(d.option.btnEjectId).disable();
                    d.sendWebAPI({
                        params: {},
                        compound: {
                            stopwhenerror: false,
                            params: b
                        },
                        scope: this,
                        callback: this.onApplyCallback
                    })
                }
            }, d)
        } else {
            this.sendWebAPI({
                params: {},
                compound: {
                    stopwhenerror: false,
                    params: b
                },
                scope: this,
                callback: this.onApplyCallback
            })
        }
    },
    onApplyCallback: function(e, c, b) {
        if (e && !c.has_fail) {
            this.close();
            return
        }
        var a = SYNO.API.Util.GetFirstError(c);
        var d = SYNO.API.Erros.core[a.code] || _T("common", "error_system");
        this.getMsgBox().alert("warning_msg", d)
    },
    onCancel: function() {
        if (this.isChanged()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        } else {
            this.close()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.StorageSettingTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a, c) {
        var b = Ext.apply({
            border: false,
            owner: this.appWin,
            title: _T("hddsleep", "dcache_title"),
            webapi: {
                api: "SYNO.Core.ExternalDevice.Storage.Setting",
                version: 1,
                method: "set"
            },
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("usb", "delalloc_opt"),
                name: "delalloc",
                checked: c.delalloc
            }, {
                xtype: "syno_displayfield",
                value: _T("usb", "delalloc_desc")
            }]
        }, a);
        this.callParent([b])
    },
    getWebAPI: function() {
        var b = {};
        var a = this.getForm();
        if (a.isDirty()) {
            b.delalloc = a.getValues().delalloc;
            return {
                api: "SYNO.Core.ExternalDevice.Storage.Setting",
                method: "set",
                version: 1,
                params: b
            }
        } else {
            return undefined
        }
    }
});
SYNO.SDS.AdminCenter.ExternalDevices.EXT_FORMAT_MIN_MB_SIZE = 100;
SYNO.SDS.AdminCenter.ExternalDevices.FAT_FORMAT_MAX_MB_SIZE = 2 * 1024 * 1024;
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    appWin: null,
    deviceStore: null,
    printerStore: null,
    deviceList: [],
    printerList: [],
    driverList: null,
    mfgList: [],
    mdlList: [],
    brandList: null,
    backendList: null,
    bonjourPrinterEnabled: false,
    loadDriverFailed: false,
    printerSetupDialog: null,
    printerForm: null,
    blHasUsbshare: false,
    isUsbPrntr: true,
    npWizard: null,
    hasVolume: true,
    copyDestField: null,
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.isUsbStation = ("yes" === this.appWin._D("usbstation"));
        this.supportOAuth = (this.appWin._S("version") > 4995);
        this.deviceStore = new SYNO.API.CompoundStore({
            compound: {
                stopwhenerror: false,
                params: [{
                    api: "SYNO.Core.ExternalDevice.Storage.USB",
                    version: 1,
                    method: "list",
                    params: {
                        additional: ["all"]
                    }
                }, {
                    api: "SYNO.Core.ExternalDevice.Storage.eSATA",
                    version: 1,
                    method: "list",
                    params: {
                        additional: ["all"]
                    }
                }, {
                    api: "SYNO.Core.ExternalDevice.Storage.EUnit",
                    version: 1,
                    method: "list"
                }]
            },
            idProperty: "dev_id",
            fields: ["title", "status", "cls", "iconCls", "dev_id", "dev_title", "total_size_mb", "dev_type", "formatable", "producer", "product", "status", "progress", "partitions", "share_name"],
            root: "devices",
            blReloadMask: false,
            appWindow: this.appWin,
            listeners: {
                scope: this,
                load: function(b) {
                    if (this.deviceStore.blReloadMask) {
                        this.appWin.clearStatusBusy();
                        this.appWin.unmask();
                        this.deviceStore.blReloadMask = false
                    }
                }
            },
            onCompoundResponse: this.processDeviceStore(),
            reload_withmask: function() {
                this.deviceStore.blReloadMask = true;
                this.appWin.setStatusBusy({
                    text: _T("common", "loading")
                }, 0.4, 1);
                this.deviceStore.reload()
            }
        });
        this.printerStore = new SYNO.API.JsonStore({
            api: "SYNO.Core.ExternalDevice.Printer",
            method: "list",
            version: 1,
            baseParams: {
                additional: ["all"]
            },
            idProperty: "printer_id",
            fields: ["printer_id", "cups_name", "printer_mode", "mfg", "mdl", "driver_brand", "driver_model", "enable_airprint", "google_cloud_print", "fit_to_page", "printer_cmd_set", "lockby", "print_queue", "ip", "status", "protocol", "qname"],
            root: "printers",
            blReloadMask: false,
            appWindow: this.appWin,
            listeners: {
                scope: this,
                load: function(c, b) {
                    this.processPrinterStore(b);
                    if (this.printerStore.blReloadMask) {
                        this.appWin.clearStatusBusy();
                        this.appWin.unmask();
                        this.printerStore.blReloadMask = false
                    }
                }
            },
            reload_withmask: function() {
                this.printerStore.blReloadMask = true;
                this.appWin.setStatusBusy({
                    text: _T("common", "loading")
                }, 0.4, 1);
                this.printerStore.reload()
            }
        });
        this.backendList = new Ext.data.ArrayStore({
            fields: ["protocol_id", "protocol_text"],
            data: [
                ["lpd", _T("usb", "net_prntr_lpr")],
                ["ipp", _T("usb", "net_prntr_ipp")],
                ["socket", _T("usb", "net_prntr_socket")],
                ["bjnp", _T("usb", "net_prntr_bjnp")]
            ]
        });
        this.createPanel();
        this.deviceView.mon(this.deviceView, "selectionchange", function(b, d) {
            var c = this.deviceView.getSelectedRecords();
            if (c && c[0]) {
                if ("deviceTab" === this.panel.getActiveTab().itemId) {
                    this.lastSelectedRecord = c[0];
                    this.printerView.clearSelections()
                }
            }
            this.dataViewSelectionChange(d)
        }, this);
        this.printerView.mon(this.printerView, "selectionchange", function(d, c) {
            var b = this.printerView.getSelectedRecords();
            if (b && b[0]) {
                if ("printerTab" === this.panel.getActiveTab().itemId) {
                    this.lastSelectedRecord = b[0];
                    this.deviceView.clearSelections()
                }
            }
            this.dataViewSelectionChange(c)
        }, this);
        this.hasVolPollingConf = {
            interval: 5,
            immediate: true,
            webapi: {
                api: "SYNO.Core.Storage.Volume",
                version: 1,
                method: "list",
                params: {
                    offset: 0,
                    limit: -1,
                    location: (this.isUsbStation) ? "external" : "internal"
                }
            },
            status_callback: function(f, d, e, b) {
                var c;
                if (!f) {
                    return
                }
                if (d.code) {
                    this.appWin.getMsgBox().alert(this.title, _T("common", "commfail"), function() {
                        this.deactivate()
                    }, this);
                    return
                }
                this.blHasUsbshare = false;
                this.deviceStore.reload();
                this.printerStore.reload();
                this.hasVolume = (d.total > 0) ? true : false;
                if (this.isUsbStation) {
                    c = this.panel.getComponent("printerTab");
                    if (!this.hasVolume) {
                        c.el.mask(_T("volume", "volume_share_noexternal"), "syno-ux-mask-info")
                    } else {
                        c.el.unmask()
                    }
                }
                Ext.getCmp(this.btnAddNPId).enable()
            },
            scope: this
        };
        this.BonjourSharingPollingConf = {
            interval: 5,
            immediate: true,
            webapi: {
                api: "SYNO.Core.ExternalDevice.Printer.BonjourSharing",
                version: 1,
                method: "get"
            },
            status_callback: function(e, c, d, b) {
                if (!e) {
                    return
                }
                this.bonjourPrinterEnabled = c.enable_bonjour_support
            },
            scope: this
        };
        if (this.isUsbStation) {
            this.SystemDBPollingConf = {
                interval: 5,
                immediate: true,
                webapi: {
                    api: "SYNO.Core.SystemDB",
                    version: 1,
                    method: "get"
                },
                status_callback: function(e, c, d, b) {
                    if (!e) {
                        return
                    }
                    this.systemdb_share = c.systemdb_shares
                },
                scope: this
            }
        }
        this.extDevSettingPollingConf = {
            interval: 5,
            immediate: true,
            webapi: {
                api: "SYNO.Core.ExternalDevice.Storage.Setting",
                version: 1,
                method: "get"
            },
            status_callback: function(e, c, d, b) {
                if (!e) {
                    return
                }
                this.delalloc = c.delalloc;
                if (c.setting) {
                    Ext.getCmp(this.btnSettingId).disable()
                } else {
                    Ext.getCmp(this.btnSettingId).enable()
                }
            },
            scope: this
        };
        this.shareChooser = new SYNO.SDS.ShareChooser({
            shareType: ["local", "dec"],
            owner: this.appWin,
            appWindow: this.appWin,
            singleSelect: true,
            title: _T("common", "choose")
        }, true)
    },
    processDeviceStore: function() {
        return function(a, b) {
            if (0 >= b.totalRecords) {
                return b
            }
            b.records.each(function(c) {
                var d = SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice(c.data.status);
                c.set("status", d);
                if ("EUnit" != c.get("dev_type")) {
                    c.set("title", c.data.dev_title);
                    if ("usbDisk" == c.get("dev_type")) {
                        c.set("cls", "usb-normal-status");
                        if (SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("corrupt") == c.get("status")) {
                            c.set("cls", "usb-error-status")
                        } else {
                            if (SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating") == c.get("status") || SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("init") == c.get("status")) {
                                c.set("cls", "usb-format-status")
                            }
                        }
                    } else {
                        if ("sdCard" == c.get("dev_type")) {
                            c.set("cls", "sd-normal-status");
                            if (SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("corrupt") == c.get("status")) {
                                c.set("cls", "sd-error-status")
                            } else {
                                if (SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating") == c.get("status") || SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("init") == c.get("status")) {
                                    c.set("cls", "sd-format-status")
                                }
                            }
                        } else {
                            if ("eSataDisk" == c.get("dev_type")) {
                                c.set("cls", "esata-normal-status");
                                if (SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("corrupt") == c.get("status")) {
                                    c.set("cls", "esata-error-status")
                                } else {
                                    if (SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating") == c.get("status") || SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("init") == c.get("status")) {
                                        c.set("cls", "esata-format-status")
                                    }
                                }
                            }
                        }
                    }
                    if (undefined === c.get("producer") || "" === c.get("producer")) {
                        c.set("producer", "-")
                    }
                    if (undefined === c.get("product") || "" === c.get("product")) {
                        c.set("product", "-")
                    }
                    if (undefined !== c.get("partitions") && Ext.isArray(c.get("partitions"))) {
                        c.get("partitions").each(function(e) {
                            if (undefined === e.filesystem || "" === e.filesystem) {
                                e.filesystem = _T("usb", "usb_fs_other")
                            }
                            if (undefined === e.share_name || "" === e.share_name) {
                                e.share_name = _T("usb", "usb_notmounted")
                            }
                            if (undefined === e.used_size_mb) {
                                e.usage = "-- / --"
                            } else {
                                if (e.total_size_mb > 1024) {
                                    e.usage = Ext.util.Format.round((e.used_size_mb) / 1024, 2) + "/" + Ext.util.Format.round((e.total_size_mb) / 1024, 2) + " GB"
                                } else {
                                    e.usage = e.used_size_mb + "/" + e.total_size_mb + " MB"
                                }
                            }
                            if ("formating" === e.status) {
                                c.set("status", e.partition_title + " " + d + " " + c.get("progress"))
                            }
                        }, this)
                    }
                } else {
                    c.set("title", c.data.product);
                    c.set("cls", "eunit");
                    c.set("iconCls", "default");
                    c.set("producer", "Synology")
                }
            }, this);
            return b
        }
    },
    processPrinterStore: function(a) {
        if (0 >= a.length) {
            return
        }
        a.each(function(b) {
            b.set("title", _T("usb", "usb_printer_lpr"));
            b.set("iconCls", "default");
            b.set("cls", "default");
            if ("usbip" == b.get("printer_mode")) {
                var c = SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbPrinter(b.data.lockby);
                b.set("title", _T("usb", "usb_printer_usbip"));
                b.set("cls", "usbip");
                b.set("status", c)
            } else {
                if ("netPrinter" == b.get("printer_mode")) {
                    if ("Offline" == b.get("status")) {
                        b.set("cls", "np-badstatus");
                        b.set("status", _T("usbbackup", "usbbkp_offline"))
                    } else {
                        b.set("cls", "np-goodstatus");
                        b.set("status", _T("usbbackup", "usbbkp_online"))
                    }
                } else {
                    b.set("status", _T("bluetooth", "bluetooth_connected"))
                }
            }
        }, this)
    },
    getHelpParam: function() {
        if ("deviceTab" === this.panel.activeTab.itemId) {
            return "AdminCenter/system_externaldevice_devicelist.html"
        } else {
            if ("usbsdCopyTab" === this.panel.activeTab.itemId) {
                return "AdminCenter/system_externaldevice_usbsdcopy.html"
            } else {
                if ("printerTab" === this.panel.activeTab.itemId) {
                    return "AdminCenter/system_externaldevice_printer.html"
                }
            }
        }
        return "AdminCenter/system_externaldevice_desc.html"
    },
    getPanel: function() {
        return this.panel
    },
    activate: function() {
        this.panel.loadAllForm();
        this.appWin.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Printer.Driver",
            version: 1,
            method: "list",
            scope: this,
            callback: function(d, b, c, a) {
                if (!d) {
                    this.loadDriverFailed = true;
                    this.checkPrinterDriverList();
                    if (null !== this.npWizard) {
                        this.npWizard.checkDriverList()
                    }
                    return
                }
                this.driverList = b;
                this.loadDriverFailed = false;
                this.checkPrinterDriverList();
                this.createDeviceId();
                if (null !== this.npWizard) {
                    this.npWizard.checkDriverList()
                }
            }
        });
        this.shareChooser.on("hide", this.afterShareChooser, this);
        this.pollingTaskStart();
        return true
    },
    pollingTaskStart: function() {
        if (this.hasVolPollingID === undefined) {
            this.hasVolPollingID = this.appWin.pollReg(this.hasVolPollingConf)
        }
        if (this.BonjourSharingPollingID === undefined) {
            this.BonjourSharingPollingID = this.appWin.pollReg(this.BonjourSharingPollingConf)
        }
        if (this.isUsbStation) {
            if (this.SystemDBPollingID === undefined) {
                this.SystemDBPollingID = this.appWin.pollReg(this.SystemDBPollingConf)
            }
        }
        if (undefined === this.extDevSettingPollingID) {
            this.extDevSettingPollingID = this.appWin.pollReg(this.extDevSettingPollingConf)
        }
    },
    pollingTaskStop: function() {
        if (this.hasVolPollingID !== undefined) {
            this.appWin.pollUnreg(this.hasVolPollingID);
            this.hasVolPollingID = undefined
        }
        if (this.BonjourSharingPollingID !== undefined) {
            this.appWin.pollUnreg(this.BonjourSharingPollingID);
            this.BonjourSharingPollingID = undefined
        }
        if (this.isUsbStation) {
            if (this.SystemDBPollingID !== undefined) {
                this.appWin.pollUnreg(this.SystemDBPollingID);
                this.SystemDBPollingID = undefined
            }
        }
        if (undefined !== this.extDevSettingPollingID) {
            this.appWin.pollUnreg(this.extDevSettingPollingID);
            this.extDevSettingPollingID = undefined
        }
    },
    deactivate: function() {
        this.deviceView.clearSelections();
        this.printerView.clearSelections();
        this.pollingTaskStop();
        this.printerForm = null;
        this.driverList = null;
        this.brandList = null;
        var a = this.panel.get("usbsdCopyTab");
        if (a && a.getForm().isDirty()) {
            return false
        }
        return true
    },
    createPanel: function() {
        var d = new SYNO.ux.Panel(this.createDeviceTabObj());
        var c = new SYNO.ux.Panel(this.createPrinterTabObj());
        var b = new SYNO.SDS.Utils.FormPanel(this.createUsbSdCopyTabObj());
        var e = [];
        var a;
        e.push(d);
        if (true !== SYNO.SDS.isNVR) {
            e.push(c)
        }
        if (this.appWin._D("usbcopy") === "yes" || this.appWin._D("sdcopy") === "yes") {
            e.push(b)
        }
        this.panel = new SYNO.SDS.Utils.TabPanel({
            module: this,
            title: _T("controlpanel", "devices_and_printers"),
            activeTab: 0,
            items: e
        });
        this.panel.mon(this.printerStore, "load", this.checkPrinterPort, this);
        if (this.appWin._D("usbcopy") === "yes") {
            this.panel.mon(this.panel.getComponent("usbsdCopyTab"), "afterlayout", function(f, g) {
                a = new SYNO.ux.Utils.EnableCheckGroup(f.getForm(), "enable_usbcopy", ["usbcopy_desc", "usbcopy_share_folder", this.usbcopy_btn_id])
            }, this, {
                single: true
            })
        }
        if (this.appWin._D("sdcopy") === "yes") {
            this.panel.mon(this.panel.getComponent("usbsdCopyTab"), "afterlayout", function(f, g) {
                a = new SYNO.ux.Utils.EnableCheckGroup(f.getForm(), "enable_sdcopy", ["sdcopy_desc", "sdcopy_share_folder", this.sdcopy_btn_id])
            }, this, {
                single: true
            })
        }
    },
    createDeviceViewTpl: function(a) {
        var d = '<dt class="ex-dev-info-title" style="width:30%">{0}</dt>';
        var c = '<dt class="ex-dev-info-value" style="width:70%">{0}</dt>';
        var e = new Ext.XTemplate('<tpl for="partitions">', "<dl>", '<dt class="sm-disk-list-column" style="width:30%">{partition_title}</dt>', '<dt class="sm-disk-list-column" style="width:20%">{share_name}</dt>', '<dt class="sm-disk-list-column" style="width:30%">{usage}</dt>', '<dt class="sm-disk-list-column" style="width:20%">{filesystem}</dt>', "</dl>", '<div class="x-clear"></div>', "</tpl>");
        var b = new Ext.XTemplate('<tpl for=".">', "<dl>", String.format(d, _T("usb", "usb_producer")), String.format(c, "{producer}"), "</dl>", '<div class="x-clear"></div>', "<dl>", String.format(d, _T("usb", "usb_productname")), String.format(c, "{product}"), "</dl>", '<div class="x-clear"></div>', "</tpl>", '<tpl if="values.partitions">', '<div class="sm-disk-list">', '<div class="sm-disk-list-header">', "<dl>", String.format('<dt class="sm-disk-list-column" style="width:30%">{0}</dt>', _T("common", "name")), String.format('<dt class="sm-disk-list-column" style="width:20%">{0}</dt>', _T("tree", "leaf_sharefolder")), String.format('<dt class="sm-disk-list-column" style="width:30%">{0}</dt>', _T("usb", "usb_size")), String.format('<dt class="sm-disk-list-column" style="width:20%">{0}</dt>', _T("usb", "usb_FStype")), "</dl>", '<div class="x-clear"></div>', "</div>", '<div class="sm-disk-list-body">', e.html, "</div>", "</div>", '<div class="x-clear"></div>', "</tpl>");
        return b
    },
    createDeviceTabObj: function() {
        var b = [{
            xtype: "syno_button",
            text: _T("smart", "smart_toolbar_smart_info"),
            id: this.btnInfoId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.onClickInfoBtn
        }, {
            xtype: "syno_button",
            text: _T("smart", "smart_toolbar_smart_test"),
            id: this.btnTestId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.onClickTestBtn
        }, {
            xtype: "syno_button",
            text: _T("usb", "usb_btnformat"),
            id: this.btnFormatId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.onClickFormatBtn
        }, {
            xtype: "syno_button",
            text: _T("usb", "usb_eject"),
            id: this.btnEjectId = Ext.id(),
            disabled: true,
            tooltip: String.format(_T("usb", "usb_ejectnote"), _T("usb", "usb_eject")),
            scope: this,
            handler: this.onClickEjectBtn
        }, {
            xtype: "syno_button",
            text: _T("download", "download_table_heading_setting"),
            id: this.btnSettingId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.onClickSettingBtn
        }];
        var c = new Ext.Toolbar({
            items: b
        });
        this.deviceView = new SYNO.ux.ExpandableListView({
            store: this.deviceStore,
            innerTpl: this.createDeviceViewTpl(),
            cls: "ex-dev-storage-listview"
        });
        var a = {
            itemId: "deviceTab",
            title: _T("tree", "node_device"),
            trackResetOnLoad: true,
            layout: "fit",
            hideMode: "offsets",
            tbar: c,
            items: [this.deviceView]
        };
        return a
    },
    createPrinterViewTpl: function() {
        var c = '<dt class="ex-dev-info-title" style="width:30%">{0}</dt>';
        var b = '<dt class="ex-dev-info-value" style="width:70%">{0}</dt>';
        var a = new Ext.XTemplate("<tpl>", "<dl>", String.format(c, _T("common", "name")), String.format(b, "{cups_name}"), '</dl><div class="x-clear"></div>', '<tpl if="ip">', "<dl>", String.format(c, _T("status", "status_ipaddr")), String.format(b, "{ip}"), '</dl><div class="x-clear"></div>', "<dl>", String.format(c, _T("usb", "net_prntr_ptl")), String.format(b, "{protocol}"), '</dl><div class="x-clear"></div>', "<dl>", String.format(c, _T("usb", "net_prntr_qname")), String.format(b, "{qname}"), '</dl><div class="x-clear"></div>', "</tpl>", "<dl>", String.format(c, _T("usb", "usb_producer")), String.format(b, "{mfg}"), '</dl><div class="x-clear"></div>', "<dl>", String.format(c, _T("usb", "usb_productname")), String.format(b, "{mdl}"), '</dl><div class="x-clear"></div>', "<dl>", String.format(c, _T("usb", "usb_printer_command_set")), String.format(b, "{printer_cmd_set}"), '</dl><div class="x-clear"></div>', '<tpl if="lockby">', "<dl>", String.format(c, _T("usb", "usb_printer_wait_queue")), String.format(b, "{print_queue}"), '</dl><div class="x-clear"></div>', "</tpl>", "</tpl>");
        return a
    },
    createPrinterTabObj: function() {
        var b = [{
            xtype: "syno_button",
            text: _T("usb", "net_prntr_add"),
            id: this.btnAddNPId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.onClickAddNPBtn
        }, {
            xtype: "syno_button",
            text: _T("common", "remove"),
            id: this.btnPEjectId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.onClickEjectBtn
        }];
        var d = [{
            text: _T("usb", "usb_printer_usbip_setup"),
            id: this.btnSetupId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.onClickSetupBtn
        }, {
            text: _T("usb", "usb_cleannote").replace("_CLEAN_", _T("usb", "usb_clean")),
            id: this.printerCleanSpoolBtnId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.printerCleanSpool
        }, {
            text: _T("usb", "usb_print_test_page"),
            id: this.printTestPageId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.printTestPage
        }, {
            text: _T("usb", "usb_printer_usbip_release_lock"),
            id: this.btnPrinterReleaseLockId = Ext.id(),
            disabled: true,
            scope: this,
            handler: this.printerReleaseLock
        }];
        if (this.appWin._D("supportMFP") !== "yes") {
            d.pop()
        }
        b.push(new Ext.Action({
            xtype: "syno_button",
            text: _T("usb", "prntr_mgr"),
            scope: this,
            id: this.btnPrintmgrId = Ext.id(),
            disabled: true,
            menu: new Ext.menu.Menu({
                items: d
            })
        }));
        if (this.supportOAuth) {
            b.push({
                xtype: "syno_button",
                text: _T("usb", "usb_printer_gcp"),
                scope: this,
                handler: this.onClickGCPBtn
            })
        }
        var c = new Ext.Toolbar({
            items: b,
            defaultType: "syno_button"
        });
        this.printerView = new SYNO.ux.ExpandableListView({
            store: this.printerStore,
            innerTpl: this.createPrinterViewTpl(),
            cls: "ex-dev-printer-listview"
        });
        var a = {
            itemId: "printerTab",
            title: _T("usb", "prntr_device"),
            trackResetOnLoad: true,
            layout: "fit",
            hideMode: "offsets",
            tbar: c,
            items: [this.printerView]
        };
        return a
    },
    checkPrinterPort: function() {
        var c = false;
        var b = false;
        var a = false;
        this.printerStore.each(function(d) {
            switch (d.get("printer_mode")) {
                case "usbip":
                    c = true;
                    break;
                case "favor_lpr":
                case "netPrinter":
                    b = true;
                    break
            }
            if ("on" === d.get("airprint_enabled")) {
                a = true
            }
        }, this);
        if (c) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.usbip", false)
        }
        if (b) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.favor_lpr", false)
        }
        if (a) {
            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.airprint", false)
        }
    },
    createUsbSdCopyTabObj: function() {
        var a = [];
        if (this.appWin._D("usbcopy") == "yes") {
            a.push(this.createUsbCopyTabObj())
        }
        if (this.appWin._D("sdcopy") == "yes") {
            a.push(this.createSdCopyTabObj())
        }
        var b = {
            itemId: "usbsdCopyTab",
            title: _T("tree", "leaf_usbcopy") + "/" + _T("tree", "leaf_sdcopy"),
            trackResetOnLoad: true,
            hideMode: "offsets",
            labelWidth: 200,
            items: a
        };
        return b
    },
    createUsbCopyTabObj: function() {
        var c = new SYNO.ux.TextField({
            xtype: "syno_textfield",
            name: "usbcopy_share_folder",
            width: 150,
            readOnly: true,
            allowBlank: false,
            tabIndex: 2
        });
        c.on("disable", function() {
            this.setValue()
        });
        var a = new SYNO.ux.Button({
            xtype: "syno_button",
            id: this.usbcopy_btn_id = Ext.id(),
            text: _T("common", "choose"),
            scope: this,
            handler: this.chooserBtnHandler(c)
        });
        var b = {
            itemId: "usbCopyTab",
            title: _T("tree", "leaf_usbcopy"),
            webapi: {
                api: "SYNO.Core.ExternalDevice.Storage.USB",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            xtype: "syno_fieldset",
            items: [{
                xtype: "syno_checkbox",
                name: "enable_usbcopy",
                boxLabel: _T("usbcopyset", "usbcopy_enable")
            }, {
                xtype: "syno_displayfield",
                name: "usbcopy_desc",
                indent: 1,
                value: _T("usbcopyset", "usb_selectfolder")
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("localbkp", "localbkp_dest"),
                hideLabel: false,
                indent: 1,
                items: [c, a]
            }]
        };
        return b
    },
    chooserBtnHandler: function(a) {
        return function(c, b) {
            this.appWin.setStatusBusy({
                text: _T("common", "loading")
            });
            this.appWin.sendWebAPI({
                api: "SYNO.Core.Share",
                version: 1,
                method: "list",
                params: {
                    shareType: ["local", "dec"]
                },
                scope: this,
                callback: function(g, e, f, d) {
                    this.appWin.clearStatusBusy();
                    if (!g) {
                        this.appWin.getMsgBox().alert(_T("log", "log_link_copy"), _T("common", "error_system"));
                        return
                    }
                    if (0 < e.total) {
                        this.shareChooser.show();
                        this.copyDestField = a
                    } else {
                        this.appWin.getMsgBox().confirm(_T("log", "log_link_copy"), _T("filebrowser", "prompt_noshare"), function(h) {
                            if ("ok" === h) {
                                this.appWin.startModule("SYNO.SDS.AdminCenter.Share.Main")
                            }
                        }, this, Ext.MessageBox.OKCANCEL)
                    }
                }
            })
        }
    },
    afterShareChooser: function(b) {
        var a = b.getRecords();
        if (a.length == 1) {
            this.copyDestField.setValue(a[0].get("name"))
        }
    },
    createSdCopyTabObj: function() {
        var c = new SYNO.ux.TextField({
            xtype: "syno_textfield",
            name: "sdcopy_share_folder",
            width: 150,
            readOnly: true,
            allowBlank: false,
            tabIndex: 2
        });
        c.on("disable", function() {
            this.setValue()
        });
        var a = new SYNO.ux.Button({
            xtype: "syno_button",
            id: this.sdcopy_btn_id = Ext.id(),
            text: _T("common", "choose"),
            scope: this,
            handler: this.chooserBtnHandler(c)
        });
        var b = {
            itemId: "sdCopyTab",
            title: _T("tree", "leaf_sdcopy"),
            webapi: {
                api: "SYNO.Core.ExternalDevice.Storage.SD",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            xtype: "syno_fieldset",
            items: [{
                xtype: "syno_checkbox",
                name: "enable_sdcopy",
                boxLabel: _T("usbcopyset", "sdcopy_enable")
            }, {
                xtype: "syno_displayfield",
                name: "sdcopy_desc",
                indent: 1,
                value: _T("usbcopyset", "sd_selectfolder")
            }, {
                xtype: "syno_compositefield",
                fieldLabel: _T("localbkp", "localbkp_dest"),
                hideLabel: false,
                indent: 1,
                items: [c, a]
            }]
        };
        return b
    },
    dataViewSelectionChange: function(d) {
        var e;
        Ext.getCmp(this.btnInfoId).disable();
        Ext.getCmp(this.btnTestId).disable();
        Ext.getCmp(this.btnFormatId).disable();
        Ext.getCmp(this.btnEjectId).disable();
        Ext.getCmp(this.btnPEjectId).disable();
        Ext.getCmp(this.printerCleanSpoolBtnId).disable();
        Ext.getCmp(this.printTestPageId).disable();
        Ext.getCmp(this.btnSetupId).disable();
        Ext.getCmp(this.btnPrintmgrId).disable();
        if (this.appWin._D("supportMFP") === "yes") {
            Ext.getCmp(this.btnPrinterReleaseLockId).disable()
        }
        if (d.length <= 0) {
            return
        }
        if ("deviceTab" == this.panel.getActiveTab().itemId) {
            e = this.lastSelectedRecord.get("dev_type")
        } else {
            if ("printerTab" == this.panel.getActiveTab().itemId) {
                e = this.lastSelectedRecord.get("printer_mode")
            }
        }
        var b = this.lastSelectedRecord.get("status");
        switch (e) {
            case "usbDisk":
            case "sdCard":
                if (-1 == b.indexOf(SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating")) && b !== SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating") && b !== SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("init")) {
                    Ext.getCmp(this.btnEjectId).enable()
                }
                if (this.lastSelectedRecord.get("formatable")) {
                    switch (b) {
                        case SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("normal"):
                        case SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("hddfail"):
                        case SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("corrupt"):
                            Ext.getCmp(this.btnFormatId).enable();
                            break
                    }
                }
                break;
            case "eSataDisk":
                if (b == SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("normal")) {
                    Ext.getCmp(this.btnFormatId).enable()
                }
                if (-1 == b.indexOf(SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating")) && b != SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating") && b != SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("init")) {
                    Ext.getCmp(this.btnEjectId).enable();
                    Ext.getCmp(this.btnInfoId).enable();
                    Ext.getCmp(this.btnTestId).enable()
                }
                break;
            case "EUnit":
                break;
            case "usbip":
            case "lpr":
            case "favor_lpr":
                var c = this.lastSelectedRecord;
                Ext.getCmp(this.btnPEjectId).enable();
                Ext.getCmp(this.btnSetupId).enable();
                Ext.getCmp(this.btnPrintmgrId).enable();
                if (this.appWin._D("supportMFP") === "yes" && this.lastSelectedRecord.get("printer_mode") === "usbip") {
                    if (c.get("lockby") === "Free" || c.get("lockby") === "Removing printer lock" || c.get("lockby") === "Ejecting printer" || c.get("lockby") === "Changing mode" || c.get("lockby") === "Ejected") {
                        Ext.getCmp(this.btnPrinterReleaseLockId).disable()
                    } else {
                        Ext.getCmp(this.btnPrinterReleaseLockId).enable()
                    }
                } else {
                    Ext.getCmp(this.printerCleanSpoolBtnId).enable()
                }
                if (c.get("driver_model") !== "" && (c.get("enable_airprint") || c.get("google_cloud_print").enable)) {
                    Ext.getCmp(this.printTestPageId).enable()
                }
                break;
            case "netPrinter":
                var a = this.lastSelectedRecord;
                Ext.getCmp(this.btnPEjectId).enable();
                Ext.getCmp(this.btnSetupId).enable();
                Ext.getCmp(this.btnPrintmgrId).enable();
                Ext.getCmp(this.printerCleanSpoolBtnId).enable();
                if (a.get("driver_model") !== "" && (a.get("enable_airprint") || a.get("google_cloud_print").enable)) {
                    Ext.getCmp(this.printTestPageId).enable()
                }
                break
        }
    },
    getFormatDataList: function(a) {
        var b = [];
        Ext.each(a.json.partitions, function(c) {
            var d = [];
            d.push(c.name_id, c.partition_title);
            b.push(d)
        }, this);
        return b
    },
    onClickInfoBtn: function() {
        var b = "/dev/" + this.lastSelectedRecord.get("dev_id");
        var a = this.lastSelectedRecord.get("dev_title");
        this.InfoFormPanel = new SYNO.SDS.StorageManager.SmartInfo({
            owner: this.appWin,
            appWin: this.appWin
        });
        this.InfoDialog = new SYNO.SDS.ModalWindow({
            owner: this.appWin,
            dsmStyle: "v5",
            layout: "fit",
            resizable: false,
            width: 700,
            height: 450,
            hideLabel: false,
            title: _T("smart", "smart_toolbar_smart_info") + " " + a,
            buttons: [{
                text: _T("common", "alt_close"),
                scope: this,
                handler: function() {
                    this.InfoDialog.close()
                }
            }],
            items: this.InfoFormPanel
        });
        this.InfoDialog.open();
        this.appWin.sendWebAPI({
            api: "SYNO.Core.Storage.Disk",
            version: 1,
            method: "get_smart_info",
            params: {
                device: b
            },
            callback: function(f, d, e, c) {
                if (!f) {
                    this.appWin.getMsgBox().alert(_T("tree", "node_device"), _T("common", "error_system"));
                    return
                }
                this.InfoFormPanel.getComponent("grid").getStore().loadData(d)
            },
            scope: this
        })
    },
    onClickTestBtn: function() {
        var a = "/dev/" + this.lastSelectedRecord.get("dev_id");
        this.TestDialog = new SYNO.SDS.StorageManager.Wizard.SmartTest({
            owner: this.appWin
        });
        this.TestDialog.open({
            device: a,
            blExternal: true
        })
    },
    onClickFormatBtn: function() {
        if (0 === this.deviceView.getSelectionCount()) {
            return
        }
        this.pollingTaskStop();
        var c = this.lastSelectedRecord.get("dev_type");
        var d = this.lastSelectedRecord.get("dev_title");
        var a = this.getFormatDataList(this.lastSelectedRecord);
        var e = _T("sata", "sata_format_wizard_fs_type");
        if (c == "usbDisk" || c == "sdCard") {
            e = _T("usb", "usb_format_wizard_fs_type")
        }
        var b = {
            border: false,
            owner: this.appWin,
            webapi: {
                methods: {
                    set: "format"
                },
                version: 1
            },
            items: [{
                xtype: "syno_fieldset",
                title: _T("externaldevice", "externaldevice_format_option"),
                items: [{
                    xtype: "syno_radio",
                    name: "formatopt",
                    inputValue: "entiredisk",
                    boxLabel: _T("externaldevice", "externaldevice_format_entire_disk"),
                    checked: true
                }, {
                    xtype: "syno_displayfield",
                    indent: 1,
                    value: _T("externaldevice", "externaldevice_format_entire_disk_desc")
                }, {
                    xtype: "syno_radio",
                    name: "formatopt",
                    inputValue: "selectpartition",
                    boxLabel: _T("externaldevice", "externaldevice_format_selected_partition"),
                    disabled: (a.length < 2) ? true : false,
                    checked: false
                }, {
                    xtype: "syno_combobox",
                    indent: 1,
                    width: 250,
                    hideLabel: true,
                    value: a.length ? a[0][0] : "",
                    name: "partitions",
                    displayField: "display",
                    valueField: "value",
                    autoDestroy: true,
                    triggerAction: "all",
                    editable: false,
                    mode: "local",
                    disabled: true,
                    store: new Ext.data.ArrayStore({
                        fields: ["value", "display"],
                        data: a
                    })
                }]
            }, {
                xtype: "syno_fieldset",
                title: e,
                items: this.appWin._D("supportext4", "no") === "yes" ? [{
                    xtype: "syno_radio",
                    name: "filesystem",
                    inputValue: "ext4",
                    boxLabel: _T("volume", "volume_ext4"),
                    checked: true
                }, {
                    xtype: "syno_displayfield",
                    indent: 1,
                    value: _T("volume", "volume_ext4_desc")
                }, {
                    xtype: "syno_radio",
                    name: "filesystem",
                    inputValue: "fat",
                    boxLabel: _T("usb", "usb_fat32")
                }, {
                    xtype: "syno_displayfield",
                    indent: 1,
                    value: _T("usb", "usb_fat32_descr")
                }] : [{
                    xtype: "syno_radio",
                    name: "filesystem",
                    inputValue: "ext3",
                    boxLabel: _T("volume", "volume_ext3")
                }, {
                    xtype: "syno_displayfield",
                    indent: 1,
                    value: _T("volume", "volume_ext3_desc")
                }, {
                    xtype: "syno_radio",
                    name: "filesystem",
                    inputValue: "fat",
                    boxLabel: _T("usb", "usb_fat32")
                }, {
                    xtype: "syno_displayfield",
                    indent: 1,
                    value: _T("usb", "usb_fat32_descr")
                }]
            }]
        };
        this.formatFormPanel = new SYNO.SDS.Utils.FormPanel(b);
        this.formatDialog = new SYNO.SDS.ModalWindow({
            owner: this.appWin,
            layout: "fit",
            width: 600,
            height: this.appWin._D("supportext4", "no") === "yes" ? 510 : 470,
            resizable: false,
            hideLabel: false,
            title: _T("usb", "usb_btnformat") + " " + d,
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "ok"),
                scope: this,
                handler: this.formatHandler
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: function() {
                    this.formatDialog.close();
                    this.pollingTaskStart()
                }
            }],
            items: this.formatFormPanel,
            listeners: {
                scope: this,
                afterrender: function() {
                    var f;
                    f = new SYNO.ux.Utils.EnableRadioGroup(this.formatFormPanel.getForm(), "formatopt", {
                        entiredisk: [],
                        selectpartition: ["partitions"]
                    })
                }
            }
        });
        this.formatDialog.open()
    },
    formatHandler: function() {
        var j = this.formatFormPanel.getForm();
        var k = this.lastSelectedRecord.get("share_name");
        var c = j.findField("partitions");
        var i = "";
        var b = this.lastSelectedRecord.get("dev_id");
        var h = this.lastSelectedRecord.get("dev_type");
        var l = this.lastSelectedRecord.get("dev_title");
        var f = 0;
        var a = "";
        if (k === "" || k == _T("usb", "usb_inactive_disk")) {
            if (j.findField("formatopt").getGroupValue() === "selectpartition") {
                var e = c.findRecord(c.valueField, c.getValue());
                l = e.get(c.displayField);
                var g = c.store.find("display", l);
                f = this.lastSelectedRecord.json.partitions[g].total_size_mb
            } else {
                f = this.lastSelectedRecord.get("total_size_mb")
            }
            i = String.format(_T("usb", "usb_formatwarn_noshare"), l);
            i = i + " " + _T("usb", "format_disk_confirm")
        } else {
            i = _T("volume", "volume_adddisk_type_two_warning")
        }
        var d = j.findField("filesystem").getGroupValue();
        if (((d === "ext3") || (d === "ext4")) && (f < SYNO.SDS.AdminCenter.ExternalDevices.EXT_FORMAT_MIN_MB_SIZE)) {
            a = String.format(_T("usb", "usb_format_size_warning"), l);
            this.formatDialog.getMsgBox().alert(_T("usb", "usb_btnformat"), a)
        } else {
            if (((d === "fat")) && (f > SYNO.SDS.AdminCenter.ExternalDevices.FAT_FORMAT_MAX_MB_SIZE)) {
                a = String.format(_T("usb", "usb_format_fat_size_warning"), l);
                this.formatDialog.getMsgBox().alert(_T("usb", "usb_btnformat"), a)
            } else {
                this.formatDialog.getMsgBox().confirm(_T("usb", "usb_btnformat"), i, function(n, p) {
                    if (n == "yes") {
                        var m = j.getValues();
                        var o;
                        if (j.findField("formatopt").getGroupValue() === "entiredisk") {
                            m.dev_id = b
                        } else {
                            m.dev_id = c.getValue()
                        }
                        if (h == "usbDisk" || h == "sdCard") {
                            o = "SYNO.Core.ExternalDevice.Storage.USB"
                        } else {
                            o = "SYNO.Core.ExternalDevice.Storage.eSATA"
                        }
                        j.webapi.api = o;
                        j.doAction("apply", {
                            method: "POST",
                            params: m
                        });
                        this.lastSelectedRecord.set("status", SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice("formating"));
                        if ("usbDisk" == this.lastSelectedRecord.get("dev_type")) {
                            this.lastSelectedRecord.set("cls", "usb-format-status")
                        } else {
                            if ("sdCard" == this.lastSelectedRecord.get("dev_type")) {
                                this.lastSelectedRecord.set("cls", "sd-format-status")
                            } else {
                                if ("eSataDisk" == this.lastSelectedRecord.get("dev_type")) {
                                    this.lastSelectedRecord.set("cls", "esata-format-status")
                                }
                            }
                        }
                        Ext.getCmp(this.btnFormatId).disable();
                        Ext.getCmp(this.btnEjectId).disable();
                        Ext.getCmp(this.btnInfoId).disable();
                        Ext.getCmp(this.btnTestId).disable();
                        this.pollingTaskStart();
                        this.formatDialog.close()
                    }
                }, this)
            }
        }
    },
    onClickExternalDefaultPermission: function() {
        var a = new SYNO.SDS.AdminCenter.ExternalDevices.ExternalDefaultPermissionDialog({
            owner: this.appWin,
            module: this.module
        });
        a.loadPermissionData()
    },
    onClickEjectBtn: function() {
        if (0 === this.deviceView.getSelectionCount() && 0 === this.printerView.getSelectionCount()) {
            return
        }
        var c = _T("usb", "usb_ejectwarn");
        if (this.isUsbStation) {
            var a = this.deviceView.getSelectedRecords();
            var b;
            a.each(function(d) {
                b = d.data.partitions;
                b.each(function(e) {
                    if (this.systemdb_share === e.share_name) {
                        c = _T("system", "eject_sys_database_warning")
                    }
                }, this)
            }, this)
        }
        this.appWin.getMsgBox().confirm(_T("tree", "node_device"), c, function(d, e) {
            if (d == "yes") {
                this.pollingTaskStop();
                this.doEjectAction();
                this.pollingTaskStart()
            }
        }, this)
    },
    doEjectAction: function() {
        var e = this.appWin.getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        var d = false;
        var b = _T("tree", "node_device");
        var c;
        var a = {
            method: "eject",
            version: 1,
            params: {}
        };
        if ("deviceTab" == this.panel.getActiveTab().itemId) {
            c = this.lastSelectedRecord.get("dev_type")
        } else {
            if ("printerTab" == this.panel.getActiveTab().itemId) {
                c = this.lastSelectedRecord.get("printer_mode")
            }
        }
        if (c == "usbDisk" || c == "sdCard") {
            a.api = "SYNO.Core.ExternalDevice.Storage.USB";
            a.params.dev_id = this.lastSelectedRecord.get("dev_id")
        } else {
            if (c == "eSataDisk") {
                a.api = "SYNO.Core.ExternalDevice.Storage.eSATA";
                a.params.dev_id = this.lastSelectedRecord.get("dev_id")
            } else {
                if ("netPrinter" == c) {
                    a.api = "SYNO.Core.ExternalDevice.Printer.Network";
                    a.params.printer_id = this.lastSelectedRecord.get("printer_id");
                    d = true
                } else {
                    a.api = "SYNO.Core.ExternalDevice.Printer.USB";
                    a.params.printer_id = this.lastSelectedRecord.get("printer_id");
                    d = true
                }
            }
        }
        if (d && false === this.hasVolume) {
            if (e) {
                this.appWin.getMsgBox().alert(b, _T("cms", "cms_no_volumes"));
                return
            }
            this.appWin.getMsgBox().alert(b, (this.isUsbStation) ? _T("volume", "volume_share_volumeno") : _T("error", "volume_no_volumes"), function(f) {
                if ("ok" === f) {
                    SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                }
            }, this);
            return
        }
        this.appWin.setStatusBusy({
            text: _T("common", "loading")
        }, 0.4, 1);
        this.appWin.sendWebAPI({
            api: a.api,
            version: a.version,
            method: a.method,
            params: a.params,
            scope: this,
            callback: function(j, g, i, f) {
                var h;
                if (!j) {
                    h = SYNO.API.getErrorString(g.code);
                    this.appWin.getMsgBox().alert(b, h);
                    this.appWin.clearStatusBusy();
                    return
                }
                SYNO.SDS.StatusNotifier.fireEvent("externaldeviceactivity", "ejectdevice");
                if ("printerTab" === this.panel.getActiveTab().getItemId()) {
                    this.printerView.deselect(this.lastSelectedRecord);
                    this.printerStore.reload_withmask.call(this)
                } else {
                    this.deviceView.deselect(this.lastSelectedRecord);
                    this.deviceStore.reload_withmask.call(this)
                }
            }
        })
    },
    onClickSettingBtn: function() {
        this.pollingTaskStop();
        this.settingDialog = new SYNO.SDS.AdminCenter.ExternalDevices.ExternalSettingDialog({
            owner: this.appWin,
            module: this.module
        }, {
            delalloc: this.delalloc,
            btnSettingId: this.btnSettingId,
            btnFormatId: this.btnFormatId,
            btnEjectId: this.btnEjectId
        });
        this.settingDialog.mon(this.settingDialog, "close", function() {
            this.pollingTaskStart.defer(1000, this)
        }, this, {
            single: true
        });
        this.settingDialog.open()
    },
    checkBonjourPrinter: function(a, b) {
        if (b && !this.bonjourPrinterEnabled) {
            this.appWin.getMsgBox().confirm(_T("usb", "usb_printer_airprint"), String.format(_T("usb", "usb_printer_airprint_notice"), _T("network", "bonjourPrinter_subject")), function(c) {
                if ("no" === c) {
                    a.setValue(false)
                }
            }, this)
        }
    },
    cleanPasswd: function() {
        this.printerForm.findField("gcp_passwd").setValue("");
        this.printerForm.findField("gcp_passwd").clearInvalid()
    },
    fillPrinterItems: function(a) {
        this.isUsbPrntr = true;
        a.push({
            xtype: "syno_fieldset",
            title: _T("usb", "prntr_ap_gcp_setting"),
            name: "airprint_field",
            items: [{
                xtype: "syno_checkbox",
                name: "enable_airprint",
                boxLabel: _T("usb", "usb_printer_airprint_enable")
            }, {
                xtype: "syno_checkbox",
                name: "with_oauth",
                checked: true,
                disabled: !this.supportOAuth,
                hidden: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_gcp",
                boxLabel: _T("usb", "usb_printer_gcp_enable")
            }, {
                xtype: "syno_textfield",
                indent: 1,
                allowBlank: false,
                width: 250,
                fieldLabel: _T("usb", "usb_printer_gcp_info_account"),
                name: "gcp_account",
                enableKeyEvents: true,
                hidden: this.supportOAuth,
                disabled: this.supportOAuth,
                listeners: {
                    scope: this,
                    keypress: this.cleanPasswd,
                    keydown: this.cleanPasswd
                }
            }, {
                xtype: "syno_textfield",
                textType: "password",
                indent: 1,
                width: 250,
                allowBlank: false,
                fieldLabel: _T("usb", "usb_printer_gcp_info_pass"),
                hidden: this.supportOAuth,
                disabled: this.supportOAuth,
                name: "gcp_passwd"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                hidden: this.supportOAuth,
                value: _T("usb", "usb_printer_gcp_info_manager_server_link")
            }, {
                xtype: "syno_checkbox",
                name: "fit_to_page",
                boxLabel: _T("usb", "fit_to_page")
            }, {
                xtype: "syno_displayfield",
                height: 20
            }, {
                xtype: "syno_combobox",
                name: "driver_brand",
                fieldLabel: _T("usb", "usb_printer_brand"),
                displayField: "value",
                autoSelect: true,
                width: 250,
                store: this.brandList = new Ext.data.ArrayStore({
                    fields: ["value"]
                }),
                listeners: {
                    scope: this,
                    select: function(c) {
                        var b = this.printerForm.findField("driver_model");
                        b.getStore().loadData(this.driverList[c.getValue()]);
                        b.setValue(b.getStore().getAt(0).get("value"))
                    }
                },
                resizable: true
            }, {
                xtype: "syno_combobox",
                name: "driver_model",
                fieldLabel: _T("usb", "usb_printer_driver"),
                displayField: "value",
                valueField: "value",
                autoSelect: true,
                width: 250,
                store: new Ext.data.ArrayStore({
                    fields: ["value"]
                }),
                resizable: true
            }, {
                xtype: "syno_displayfield",
                name: "loading_status",
                value: _T("usb", "usb_printer_driver_loading")
            }]
        }, {
            xtype: "syno_textfield",
            name: "printer_id",
            hidden: true
        });
        if ("netPrinter" == this.lastSelectedRecord.json.printer_mode) {
            this.isUsbPrntr = false;
            this.fillNetPrinterItems(a)
        } else {
            if (this.appWin._D("supportMFP") != "yes") {
                return
            }
            this.fillUsbPrinterItems(a)
        }
    },
    fillNetPrinterItems: function(a) {
        a.unshift({
            xtype: "syno_fieldset",
            itemId: "ptl_setting",
            title: _T("usb", "net_prntr_conf"),
            items: [{
                xtype: "syno_displayfield",
                name: "ip",
                width: 250,
                fieldLabel: _T("common", "ip_addr")
            }, {
                xtype: "syno_textfield",
                name: "cups_name",
                id: this.NameId = Ext.id(),
                fieldLabel: _T("usb", "net_prntr_name"),
                enableKeyEvents: true,
                allowBlank: false,
                maxlength: 32,
                width: 250,
                validationEvent: "keyup",
                validator: function() {
                    var b = this.getValue();
                    if (0 <= b.search(/[^a-zA-Z0-9_]/)) {
                        return _T("error", "error_bad_field")
                    } else {
                        this.clearInvalid();
                        return true
                    }
                }
            }, {
                xtype: "syno_combobox",
                name: "protocol",
                width: 250,
                fieldLabel: _T("usb", "net_prntr_ptl"),
                autoSelect: true,
                allowBlank: false,
                store: this.backendList,
                displayField: "protocol_text",
                valueField: "protocol_id"
            }, {
                xtype: "syno_textfield",
                allowBlank: false,
                fieldLabel: _T("usb", "net_prntr_qname"),
                name: "qname",
                width: 250,
                enableKeyEvents: true,
                maxlength: 32,
                validationEvent: "keyup",
                validator: function() {
                    var b = this.getValue();
                    if (0 <= b.search("usbprinter")) {
                        return _T("error", "error_bad_field")
                    }
                    if (this.originalValue !== b && this.originalValue !== "") {
                        if (0 <= b.search(/[^a-zA-Z0-9_]/)) {
                            return _T("error", "error_bad_field")
                        } else {
                            this.clearInvalid();
                            return true
                        }
                    }
                    return true
                }
            }]
        })
    },
    fillUsbPrinterItems: function(a) {
        a.unshift({
            xtype: "syno_fieldset",
            itemId: "mode_setting",
            title: _T("usb", "usb_printer_mode"),
            items: [{
                xtype: "syno_radio",
                name: "printer_mode",
                inputValue: "favor_lpr",
                boxLabel: _T("usb", "usb_printer_lpr_prefer_title")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("usb", "usb_printer_lpr_prefer_desc")
            }, {
                xtype: "syno_radio",
                name: "printer_mode",
                inputValue: "usbip",
                boxLabel: _T("usb", "usb_printer_usbip_prefer_title")
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _T("usb", "usb_printer_usbip_prefer_desc")
            }]
        }, {
            xtype: "syno_textfield",
            name: "cups_name",
            hidden: true
        }, {
            xtype: "syno_textfield",
            name: "mdl",
            hidden: true
        }, {
            xtype: "syno_textfield",
            name: "mfg",
            hidden: true
        })
    },
    CheckBrandDriver: function() {
        if (this.printerForm.findField("enable_airprint").getValue() || this.printerForm.findField("enable_gcp").getValue()) {
            this.printerForm.findField("driver_brand").enable();
            this.printerForm.findField("driver_model").enable();
            this.printerForm.findField("fit_to_page").enable()
        } else {
            this.printerForm.findField("driver_brand").disable();
            this.printerForm.findField("driver_model").disable();
            this.printerForm.findField("fit_to_page").disable()
        }
    },
    onClickSetupBtn: function() {
        var a = null;
        if (0 === this.printerView.getSelectionCount()) {
            return
        }
        if (!this.hasVolume) {
            this.appWin.getMsgBox().alert(this.title, (this.isUsbStation) ? _T("volume", "volume_share_volumeno") : _T("error", "volume_no_volumes"));
            return
        }
        this.pollingTaskStop();
        var c;
        var b = [];
        this.fillPrinterItems(b);
        c = {
            border: false,
            trackResetOnLoad: true,
            items: b
        };
        this.printerSetupDialog = new SYNO.SDS.ModalWindow({
            owner: this.appWin,
            layout: "fit",
            module: this,
            width: 580,
            height: (false === this.isUsbPrntr) ? 580 : (this.appWin._D("supportMFP") === "yes" ? 580 : 520),
            resizable: true,
            hideLabel: false,
            title: _T("usb", "usb_printer_usbip_setup"),
            hasGoogleAccount: false,
            savePrinterMode: function() {
                var i = 1;
                if (!this.printerForm.isValid()) {
                    this.printerSetupDialog.setStatusError({
                        text: _T("common", "forminvalid"),
                        clear: true
                    });
                    return
                }
                if (!this.printerForm.isDirty()) {
                    this.printerSetupDialog.setStatusError({
                        text: _T("error", "nochange_subject"),
                        clear: true
                    });
                    return
                }
                var d = a.getForm();
                var f = d.getValues();
                f = Ext.apply({
                    google_cloud_print: {}
                }, f);
                if (this.printerForm.findField("enable_gcp").getValue()) {
                    f.google_cloud_print.enable = true
                } else {
                    f.google_cloud_print.enable = false
                }
                if (!this.supportOAuth && f.google_cloud_print.enable) {
                    var h = this.printerForm.findField("gcp_account");
                    var g = this.printerForm.findField("gcp_passwd");
                    if (!g.getValue()) {
                        i = 0;
                        this.printerForm.findField("gcp_passwd").markInvalid(_T("common", "forminvalid"))
                    }
                    if (!h.getValue()) {
                        i = 0;
                        this.printerForm.findField("gcp_account").markInvalid(_T("common", "forminvalid"))
                    }
                    if (h.isDirty() || g.isDirty()) {
                        f.google_cloud_print.account = h.getValue();
                        f.google_cloud_print.passwd = g.getValue()
                    }
                    if (i === 0) {
                        this.printerSetupDialog.setStatusError({
                            text: _T("common", "forminvalid"),
                            clear: true
                        });
                        return
                    }
                }
                delete f.enable_gcp;
                delete f.gcp_account;
                delete f.gcp_passwd;
                delete f.mfg;
                delete f.mdl;
                var e;
                if (this.isUsbPrntr) {
                    e = "SYNO.Core.ExternalDevice.Printer.USB"
                } else {
                    e = "SYNO.Core.ExternalDevice.Printer.Network";
                    if (undefined === f.qname) {
                        f.qname = ""
                    }
                }
                if (this.printerForm.findField("enable_airprint").getValue() || this.printerForm.findField("enable_gcp").getValue()) {
                    if (this.printerForm.findField("fit_to_page").getValue()) {
                        f.fit_to_page = true
                    } else {
                        f.fit_to_page = false
                    }
                } else {
                    f.fit_to_page = false
                }
                this.printerSetupDialog.setStatusBusy({
                    text: _T("common", "saving")
                });
                this.appWin.sendWebAPI({
                    api: e,
                    version: 1,
                    method: "set",
                    scope: this,
                    params: f,
                    timeout: 300000,
                    callback: function(r, o, m, j) {
                        this.printerSetupDialog.clearStatusBusy();
                        this.printerSetupDialog.unmask();
                        var l;
                        if (!r) {
                            l = SYNO.API.getErrorString(o.code);
                            this.printerSetupDialog.getMsgBox().alert(_T("tree", "node_device"), l);
                            return
                        }
                        this.printerSetupDialog.setStatusOK({
                            text: _T("common", "setting_applied")
                        });
                        var s = this.printerForm.getValues();
                        var p = this.printerForm.findField("enable_airprint");
                        var k = this.printerForm.findField("enable_gcp");
                        this.printerForm.setValues(s);
                        p.originalValue = p.getValue();
                        k.originalValue = k.getValue();
                        if ("SYNO.Core.ExternalDevice.Printer.Network" == j.params.api) {
                            var n = "",
                                q = "";
                            if (this.printerForm.findField("printer_id")) {
                                n = this.printerForm.findField("printer_id").getValue();
                                q = n.substr(0, n.indexOf("-") + 1);
                                q = q + this.printerForm.findField("cups_name").getValue();
                                this.printerForm.findField("printer_id").setValue(q)
                            }
                        }
                        this.printerSetupDialog.blNeedReload = true;
                        switch (j.params.printer_mode) {
                            case "usbip":
                                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.usbip", false);
                                break;
                            case "favor_lpr":
                            case "netPrinter":
                                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.favor_lpr", false);
                                break
                        }
                        if (j.params.enable_airprint) {
                            SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.ExternalDevices.airprint", false)
                        }
                    }
                })
            },
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "save"),
                scope: this,
                handler: function() {
                    this.printerSetupDialog.savePrinterMode.call(this)
                }
            }, {
                text: _T("common", "close"),
                scope: this,
                handler: function() {
                    if (this.printerSetupDialog.blNeedReload) {
                        this.printerStore.reload_withmask.call(this)
                    }
                    this.printerSetupDialog.close();
                    this.pollingTaskStart()
                }
            }],
            items: a = new SYNO.SDS.Utils.FormPanel(c)
        });
        this.printerForm = a.getForm();
        this.printerSetupDialog.blNeedReload = false;
        this.panel.mon(a, "afterlayout", function(d, e) {
            if (this.supportOAuth) {
                this.printerSetupDialog.setStatusBusy({
                    text: _T("common", "msg_waiting")
                });
                this.printerSetupDialog.sendWebAPI({
                    api: "SYNO.Core.ExternalDevice.Printer.OAuth",
                    version: 1,
                    method: "get",
                    scope: this,
                    callback: function(h, f, g) {
                        if (h) {
                            if (0 !== f.account.length) {
                                this.printerSetupDialog.hasGoogleAccount = true
                            } else {
                                this.printerSetupDialog.hasGoogleAccount = false
                            }
                        }
                        this.afterLayout(d, e);
                        this.printerSetupDialog.clearStatusBusy()
                    }
                })
            } else {
                this.afterLayout(d, e)
            }
        }, this);
        this.printerSetupDialog.open()
    },
    afterLayout: function(a, c) {
        var d;
        this.printerForm.findField("enable_airprint").on("check", this.CheckBrandDriver, this);
        this.printerForm.findField("enable_gcp").on("check", this.CheckBrandDriver, this);
        if (!this.supportOAuth) {
            d = new SYNO.ux.Utils.EnableCheckGroup(this.printerForm, "enable_gcp", ["gcp_account", "gcp_passwd"])
        } else {
            a.mon(this.printerForm.findField("enable_gcp"), "check", function(f, e) {
                if (!e || this.printerSetupDialog.hasGoogleAccount) {
                    return
                }
                this.appWin.getMsgBox().confirm(_T("usb", "usb_printer_gcp"), _T("usb", "usb_printer_gcp_enable_warning"), function(g) {
                    if ("yes" === g) {
                        f.reset();
                        this.printerSetupDialog.close();
                        this.onClickGCPBtn()
                    } else {
                        f.reset()
                    }
                }, this)
            }, this)
        }
        if ("netPrinter" == this.lastSelectedRecord.json.printer_mode) {
            this.panel.mon(this.printerForm.findField("protocol"), "select", function() {
                if ("bjnp" === this.printerForm.findField("protocol").getValue() || "socket" === this.printerForm.findField("protocol").getValue()) {
                    this.printerForm.findField("qname").disable();
                    this.printerForm.findField("qname").clearInvalid()
                } else {
                    this.printerForm.findField("qname").enable()
                }
            }, this);
            SYNO.SDS.Utils.AddTip(this.printerForm.findField("qname").getEl(), _T("usb", "net_qname_tip"))
        }
        if (0 !== this.printerView.getSelectionCount()) {
            var b = this.lastSelectedRecord.data;
            b.enable_gcp = b.google_cloud_print.enable;
            b.gcp_account = b.google_cloud_print.account;
            if (!this.supportOAuth && (b.google_cloud_print.enable || "" !== b.google_cloud_print.account)) {
                b.gcp_passwd = "12345678"
            }
            this.printerForm.setValues(b);
            if ("netPrinter" == this.lastSelectedRecord.json.printer_mode) {
                this.printerForm.findField("protocol").fireEvent("select")
            }
        }
        this.panel.mon(this.printerForm.findField("enable_airprint"), "check", this.checkBonjourPrinter, this);
        this.checkPrinterDriverList();
        this.CheckBrandDriver()
    },
    detectDriver: function() {
        var a = null,
            i = null,
            h = null,
            g = null,
            c = null,
            j = false;
        var d = function(m, l) {
            for (var k in m) {
                if (k.toLowerCase() === l.toLowerCase()) {
                    return k
                }
            }
            return null
        };
        var b = function(k, p) {
            var o = k.split(" ");
            var l = o.length - 1;
            var n = o[l].toLowerCase();
            var m = p.toLowerCase();
            if (0 <= o[l].search(/(ser|printer)/i) && 0 < l) {
                l--;
                n = o[l].toLowerCase()
            } else {
                if (!isNaN(o[l]) && 0 < l) {
                    l--;
                    n = o[l].toLowerCase() + " " + n
                }
            }
            while (0 <= o[l].search(/(PS3|MFP|PLUS|XL|LF)/i) && 0 < l) {
                l--;
                n = o[l].toLowerCase() + " " + n
            }
            if (0 > m.search(n)) {
                return false
            }
            return true
        };
        g = this.lastSelectedRecord.get("mfg");
        c = this.lastSelectedRecord.get("mdl");
        h = this.lastSelectedRecord.get("mdl");
        i = this.lastSelectedRecord.get("driver_model");
        if ("" !== i) {
            a = this.lastSelectedRecord.get("driver_brand")
        } else {
            if ("" !== g && "" !== c) {
                a = this.mfgList[g];
                i = this.mdlList[c]
            }
        }
        if (a && i) {
            j = true
        } else {
            a = d(this.driverList, this.lastSelectedRecord.get("driver_brand"));
            if (null === a) {
                Ext.iterate(this.driverList, function(l, k) {
                    Ext.each(k, function(m) {
                        if (b(h, m[0])) {
                            i = m[0];
                            a = l;
                            j = true;
                            return false
                        }
                        return true
                    }, this);
                    if (j) {
                        return false
                    }
                    return true
                }, this)
            } else {
                Ext.each(this.driverList[a], function(k) {
                    if (b(h, k[0])) {
                        i = k[0];
                        j = true;
                        return false
                    }
                    return true
                }, this)
            }
        }
        var e = this.printerForm.findField("driver_brand");
        var f = this.printerForm.findField("driver_model");
        if (null !== a) {
            e.onSelect(e.findRecord("value", a));
            e.originalValue = e.getValue();
            if (j) {
                f.setValue(i);
                f.originalValue = f.getValue()
            }
        } else {
            e.onSelect(e.getStore().getAt(0))
        }
    },
    checkPrinterDriverList: function() {
        if (null === this.printerForm) {
            return
        }
        var d = (null !== this.driverList);
        var a = [];
        var c = null;
        var b = this.printerForm.findField("loading_status");
        if (this.loadDriverFailed) {
            b.setValue(_T("usb", "usb_printer_driver_loading_fail"))
        }
        b.originalValue = b.getValue();
        SYNO.SDS.Utils.DisplayField(this.printerForm, "enable_airprint", d);
        SYNO.SDS.Utils.DisplayField(this.printerForm, "enable_gcp", d);
        SYNO.SDS.Utils.DisplayField(this.printerForm, "fit_to_page", d);
        SYNO.SDS.Utils.DisplayField(this.printerForm, "driver_brand", d);
        SYNO.SDS.Utils.DisplayField(this.printerForm, "driver_model", d);
        SYNO.SDS.Utils.DisplayField(this.printerForm, "loading_status", !d);
        if (!this.supportOAuth) {
            SYNO.SDS.Utils.DisplayField(this.printerForm, "gcp_account", d);
            SYNO.SDS.Utils.DisplayField(this.printerForm, "gcp_passwd", d)
        }
        if (d && 0 === this.brandList.getCount()) {
            Ext.iterate(this.driverList, function(e) {
                a.push([e])
            }, this);
            this.brandList.loadData(a);
            c = this.printerForm.findField("driver_brand")
        }
        if (d) {
            this.detectDriver()
        }
    },
    createDeviceId: function() {
        if (!this.driverList) {
            return
        }
        Ext.iterate(this.driverList, function(b, a) {
            Ext.each(a, function(c) {
                if ("" === c[3] || "" === c[2]) {
                    return true
                }
                this.mfgList[c[2]] = b;
                this.mdlList[c[3]] = c[0]
            }, this)
        }, this)
    },
    printTestPage: function() {
        var a = this.appWin;
        if (!this.hasVolume) {
            this.appWin.getMsgBox().alert(this.title, (this.isUsbStation) ? _T("volume", "volume_share_volumeno") : _T("error", "volume_no_volumes"));
            return
        }
        a.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.appWin.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Printer",
            version: 1,
            method: "print_test",
            params: {
                printer_id: this.lastSelectedRecord.get("printer_id")
            },
            callback: function(e, c, d, b) {
                a.clearStatusBusy();
                if (!e) {
                    this.appWin.getMsgBox().alert(_T("tree", "node_device"), _T("common", "error_system"));
                    return
                }
                a.setStatusOK({
                    text: _T("common", "completed")
                })
            },
            scope: this
        })
    },
    printerCleanSpool: function() {
        var a = this.appWin;
        a.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.appWin.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Printer",
            version: 1,
            method: "clean",
            callback: function(e, c, d, b) {
                a.clearStatusBusy();
                if (!e) {
                    this.appWin.getMsgBox().alert(_T("tree", "node_device"), _T("common", "error_system"));
                    return
                }
                a.setStatusOK({
                    text: _T("common", "completed")
                })
            },
            scope: this
        })
    },
    printerReleaseLock: function() {
        var a = this.appWin;
        this.appWin.getMsgBox().confirm(_T("usb", "usb_printer_usbip_release_lock"), _T("usb", "usb_printer_usbip_release_lock_warning"), function(b, c) {
            if (b == "yes") {
                a.setStatusBusy({
                    text: _T("common", "msg_waiting")
                });
                this.appWin.sendWebAPI({
                    api: "SYNO.Core.ExternalDevice.Printer.USB",
                    version: 1,
                    method: "release_mfp",
                    params: {
                        printer_id: this.lastSelectedRecord.get("printer_id")
                    },
                    callback: function(g, e, f, d) {
                        a.clearStatusBusy();
                        if (!g) {
                            this.appWin.getMsgBox().alert(_T("tree", "node_device"), _T("common", "error_system"));
                            return
                        }
                        a.setStatusOK({
                            text: _T("common", "completed")
                        });
                        Ext.getCmp(this.btnPrinterReleaseLockId).disable()
                    },
                    scope: this
                })
            }
        }, this)
    },
    onClickAddNPBtn: function() {
        var a = this.appWin.getOpenConfig("className") === "SYNO.SDS.CMS.Application";
        if (false === this.hasVolume) {
            if (a) {
                this.appWin.getMsgBox().alert(this.title, (this.isUsbStation) ? _T("volume", "volume_share_volumeno") : _T("cms", "cms_no_volumes"));
                return
            }
            this.appWin.getMsgBox().alert(_T("tree", "node_device"), (this.isUsbStation) ? _T("volume", "volume_share_volumeno") : _T("error", "volume_no_volumes"), function(b) {
                if ("ok" === b && !this.isUsbStation) {
                    SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                }
            }, this);
            return
        }
        this.npWizard = new SYNO.SDS.AdminCenter.ExternalDevices.AddNetPrinterWizardDialog({
            owner: this.appWin,
            module: this,
            blHasUsbshare: this.blHasUsbshare,
            loadDriverFailed: this.loadDriverFailed,
            printerStore: this.printerStore
        });
        this.npWizard.mon(this.npWizard, "close", function() {
            this.npWizard = null
        }, this, {
            single: true
        });
        this.npWizard.open()
    },
    onClickGCPBtn: function() {
        if (!this.supportOAuth) {
            return
        }
        this.printerGCPDialog = new SYNO.SDS.AdminCenter.ExternalDevices.OAuth.Dialog(Ext.apply({
            module: this.module,
            owner: this.appWin
        }));
        this.printerGCPDialog.open()
    }
});
SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbPrinter = function(a) {
    if (a === "Free" || a === "Removing printer lock" || a === "Ejecting printer" || a === "Changing mode" || a === "Ejected") {
        return _T("usb", "usb_printer_usbip_free")
    } else {
        if (-1 != a.indexOf("CUPS")) {
            return _T("usb", "usb_printer_lpr_printing")
        } else {
            return String.format(_T("usb", "usb_printer_usbip_lockby"), a)
        }
    }
};
SYNO.SDS.AdminCenter.ExternalDevices.getStatusForUsbDevice = function(b) {
    var a = b.toLowerCase();
    switch (a) {
        case "normal":
            return _T("usb", "usb_st_normal");
        case "formating":
            return _T("usb", "usb_st_format");
        case "hddfail":
            return _T("usb", "usb_st_fail");
        case "corrupt":
            return _T("usb", "usb_st_needfsck");
        case "init":
            return _T("usb", "usb_st_init");
        case "fsck":
            return _T("usb", "usb_st_fsck");
        case "usbcopy":
            return _T("usb", "usb_st_usbcopy");
        case "usbbackup":
            return _T("usb", "usb_st_backingup");
        default:
            return _T("bluetooth", "bluetooth_connected")
    }
};
Ext.define("SYNO.SDS.AdminCenter.ExternalDevices.OAuth.Dialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        var b = [{
            xtype: "syno_displayfield",
            name: "gcp_status",
            id: this.GCPStatusID = Ext.id(),
            scope: this,
            fieldLabel: _T("usb", "usb_printer_gcp_info_account"),
            value: ""
        }, {
            xtype: "syno_button",
            text: _T("common", "login"),
            id: this.GCPbtnID = Ext.id(),
            scope: this,
            handler: this.gcpcallback,
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
        }, {
            xtype: "syno_displayfield",
            id: this.OAuth_warning = Ext.id(),
            value: '<span class="red-status">' + _T("usb", "usb_printer_gcp_warning_msg") + "</span>",
            hidden: true
        }, {
            xtype: "syno_displayfield",
            value: _T("usb", "usb_printer_gcp_info_manager_server_link")
        }];
        var d = {
            border: false,
            trackResetOnLoad: true,
            items: b
        };
        this.GCP_form = new SYNO.SDS.Utils.FormPanel(d);
        var c = {
            layout: "fit",
            width: 580,
            height: 200,
            resizable: false,
            hideLabel: false,
            title: _T("usb", "usb_printer_gcp"),
            buttons: [{
                text: _T("common", "close"),
                scope: this,
                handler: function() {
                    this.close()
                }
            }],
            items: this.GCP_form
        };
        Ext.apply(c, a);
        this.callParent([c]);
        this.setStatusBusy({
            text: _T("common", "msg_waiting")
        });
        this.owner.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Printer.OAuth",
            version: 1,
            method: "get",
            scope: this,
            callback: function(j, h, i) {
                if (j) {
                    var e = Ext.getCmp(this.GCPbtnID);
                    var g = Ext.getCmp(this.GCPStatusID);
                    var f = Ext.getCmp(this.OAuth_warning);
                    if (0 !== h.account.length) {
                        e.setText(_T("common", "logout"));
                        g.setValue("<span class='green-status'>" + h.account + "</span>");
                        if (!h.OAuth) {
                            f.show()
                        } else {
                            f.hide()
                        }
                    }
                }
                this.clearStatusBusy()
            }
        })
    },
    gcpcallback: function(g, d) {
        if (g.getText() === _T("common", "login")) {
            window.clickBtn = g;
            window._loginCallback = this.onLoginGoogle.createDelegate(this);
            var h = "_loginCallback";
            var b = window.location.href.indexOf("/", window.location.protocol.length + 2);
            var e = window.location.href.slice(0, b) + "/webman/modules/ExternalDevices/index_ds.php";
            var a = "https://update.synology.com/google_cloud_print/login.php?callback=" + h + "&fmHost=" + e;
            window.open(a, "mywindow", "menubar=1,resizable=0,width=600,height=520, top=100, left=300")
        } else {
            var c = Ext.getCmp(this.GCPbtnID);
            var f = Ext.getCmp(this.GCPStatusID);
            c.setText(_T("common", "login"));
            f.setValue("");
            this.owner.sendWebAPI({
                api: "SYNO.Core.ExternalDevice.Printer.OAuth",
                version: 1,
                method: "revoke",
                scope: this
            })
        }
    },
    onLoginGoogle: function(b) {
        var a = {
            refresh_token: b.refresh_token,
            email: b.email
        };
        this.onSaveToken(a, window.clickBtn)
    },
    onSaveToken: function(d, a) {
        var c = Ext.getCmp(this.GCPStatusID);
        var b = Ext.getCmp(this.OAuth_warning);
        a.setText(_T("common", "logout"));
        c.setValue("<span class='green-status'>" + decodeURI(d.email) + "</span>");
        b.hide();
        this.owner.sendWebAPI({
            api: "SYNO.Core.ExternalDevice.Printer.OAuth",
            version: 1,
            method: "set",
            params: d,
            scope: this
        })
    }
});
Ext.define("SYNO.SDS.AdminCenter.Config.UploadConfigDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.dss_id = null;
        this.dss_version = null;
        this.owner = a.owner;
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("confbackup", "confbkp_import"),
            resizable: false,
            closable: true,
            width: 600,
            height: 200,
            useStatusBar: true,
            items: this.getItems(),
            layout: "fit",
            buttons: [{
                disabled: _S("demo_mode"),
                tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.onSubmit
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: function() {
                    this.close()
                }
            }]
        }, a);
        this.callParent([b])
    },
    getItems: function() {
        var a = [];
        a.push(new SYNO.SDS.Utils.FormPanel({
            itemId: "upload_config_form",
            fileUpload: true,
            trackResetOnLoad: true,
            frame: false,
            border: false,
            webapi: {
                api: "SYNO.Backup.Config.Restore",
                method: "upload",
                version: 1
            },
            items: [{
                xtype: "syno_displayfield",
                value: _T("confbackup", "imp_assign_file")
            }, {
                xtype: "syno_filebutton",
                fieldLabel: _T("itunes", "itunes_path"),
                name: "dss_file"
            }],
            onApiSuccess: Ext.createDelegate(this.onConfigUploadSuccess, this),
            onApiFailure: Ext.createDelegate(this.onConfigUploadFailed, this)
        }));
        return a
    },
    onSubmit: function() {
        var a = this.get("upload_config_form");
        if (!this.validFileName(a.getForm().findField("dss_file"))) {
            return
        }
        this.setStatusBusy({
            text: _T("confbackup", "uploading")
        });
        a.upload()
    },
    validFileName: function(c) {
        if (!c) {
            return false
        }
        if (!c.isDirty()) {
            this.getMsgBox().alert(_T("tree", "leaf_bkp"), _T("error", "error_nochoosefile"));
            return false
        }
        var b = c.getValue();
        var a = b.substr(b.length - 4, 4);
        if (a != ".dss") {
            this.getMsgBox().alert(_T("tree", "leaf_bkp"), _T("confbackup", "error_filename"));
            return false
        }
        return true
    },
    onConfigUploadSuccess: function(d, a, c) {
        var b = this;
        b.clearStatusBusy();
        b.dss_id = a.dss_id;
        b.dss_version = a.dss_version;
        b.close()
    },
    onConfigUploadFailed: function(d, a, c) {
        var b = this;
        b.clearStatusBusy();
        b.getMsgBox().alert(_T("tree", "leaf_bkp"), SYNO.SDS.Backup.GetErrorString(a.code), function() {
            b.close()
        })
    },
    getDssId: function() {
        return this.dss_id
    },
    getDssVersion: function() {
        return this.dss_version
    },
    isDssReady: function() {
        if (!Ext.isEmpty(this.dss_id)) {
            return true
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.Config.ConfigTreeDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.dss_id = a.dss_id;
        this.dss_version = a.dss_version;
        this.owner = a.owner;
        this.checkBox = new SYNO.ux.Checkbox({
            boxLabel: _T("confbackup", "bkp_overwrite")
        });
        var b = Ext.apply({
            dsmStyle: "v5",
            title: _T("netbackup", "netbkp_recovery"),
            resizable: false,
            closable: true,
            width: 600,
            height: 500,
            useStatusBar: true,
            padding: "0px 20px 0px 20px",
            items: [{
                xtype: "syno_fieldset",
                title: _T("confbackup", "confbkp_restore_select"),
                items: [this.checkBox, this.createTreePanel()]
            }],
            buttons: [{
                disabled: _S("demo_mode"),
                tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.onSubmit
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: function() {
                    this.deleteDss();
                    this.close()
                }
            }]
        }, a);
        this.callParent([b])
    },
    createTreePanel: function() {
        var d = this.owner._S("version");
        var c = d >= 4980;
        this.treePanel = new SYNO.SDS.Backup.Restore.ConfigTreePanel({
            dss_id: this.dss_id,
            dss_version: this.dss_version,
            dsm_version: d,
            loader: new SYNO.SDS.Backup.TreeLoader(),
            rootVisible: true,
            height: 330
        });
        var e = new SYNO.SDS.Backup.TreeLoader({
            sendWebAPI: this.treePanel.sendWebAPI.createDelegate(this.treePanel),
            webapi: {
                api: "SYNO.Backup.Config.Restore",
                method: "list",
                version: c ? 2 : 1
            },
            parseWebApiResponse: function(g, f) {
                return c ? f.config_info_list : f
            },
            createNodeFn: this.treePanel.createConfigNodeFn,
            createNodeScope: this
        });
        e.on("beforeload", function(h, g, f) {
            this.setStatusBusy();
            h.baseParams.dss_id = this.dss_id;
            if (c) {
                h.baseParams.is_show_shared_folder = true
            }
        }, this);
        e.on("loadexception", function(i, h, f) {
            var g = this;
            g.clearStatusBusy();
            g.getMsgBox().alert(_T("tree", "leaf_bkp"), SYNO.SDS.Backup.GetErrorString(f.code), function() {
                g.close()
            })
        }, this);
        e.on("load", function(h, g, f) {
            this.clearStatusBusy()
        }, this);
        var b = _T("confbackup", "confbkp_all");
        var a = new Ext.tree.AsyncTreeNode({
            expanded: true,
            hidden: "" === b ? true : false,
            id: "config_root",
            allowDrop: false,
            text: b,
            qtip: b,
            leaf: false,
            checked: false,
            iconCls: "syno-backup-config",
            loader: e,
            uiProvider: SYNO.SDS.Backup.TriTreeNodeUI
        });
        this.treePanel.setRootNode(a);
        return this.treePanel
    },
    isOverwrite: function() {
        return this.checkBox.getValue()
    },
    isRestoreConfig: function() {
        return this.treePanel.isRestoreConfig()
    },
    onSubmit: function() {
        if (!this.isRestoreConfig()) {
            this.getMsgBox().alert(_T("tree", "leaf_bkp"), _T("confbackup", "confbkp_no_service_select"));
            return
        }
        this.treePanel.checkUGConflict(this.isOverwrite(), this.readyForImport, this, true)
    },
    deleteDss: function() {
        this.sendWebAPI({
            api: "SYNO.Backup.Config.Restore",
            method: "delete",
            version: 1,
            params: {
                dss_id: this.dss_id
            }
        })
    },
    readyForImport: function() {
        var a = this;
        a.restoreParams = {
            dss_id: a.dss_id,
            overwrite: a.isOverwrite(),
            category_or_service_ids: a.treePanel.getRestoreServiceList()
        };
        a.close()
    },
    getRestoreParam: function() {
        return this.restoreParams
    },
    isRestoreParamReady: function() {
        return undefined !== this.restoreParams
    }
});
Ext.define("SYNO.SDS.AdminCenter.Config.ConfigTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            title: _T("tree", "leaf_bkp"),
            itemId: "ConfigTab",
            items: [{
                xtype: "syno_displayfield",
                value: _T("confbackup", "confbkp_desc")
            }, {
                xtype: "syno_displayfield",
                value: _T("confbackup", "bkp_export")
            }, {
                xtype: "syno_button",
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                disabled: this._S("demo_mode"),
                text: _T("confbackup", "confbkp_export"),
                scope: this,
                itemId: "config_export_btn",
                handler: this.requestExportServiceList
            }, {
                xtype: "box",
                height: "8px"
            }, {
                xtype: "syno_displayfield",
                value: _T("confbackup", "bkp_import")
            }, {
                xtype: "syno_button",
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                disabled: this._S("demo_mode"),
                text: _T("confbackup", "confbkp_import"),
                scope: this,
                itemId: "config_import_btn",
                handler: this.openUploadConfigDialog
            }]
        };
        Ext.apply(b, a);
        return b
    },
    requestExportServiceList: function() {
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Backup.Config.Backup",
            method: "list",
            version: 1,
            params: {},
            scope: this,
            callback: function(e, a, c, b) {
                this.module.appWin.clearStatusBusy();
                if (!e) {
                    this.module.appWin.getMsgBox().alert(_T("tree", "leaf_bkp"), SYNO.SDS.Backup.GetErrorString(a.code));
                    return
                }
                var d = _T("confbackup", "confbkp_bkp_item_desc") + "<br>";
                d += this.getServicesText(a.services);
                this.module.appWin.getMsgBox().confirm(_T("tree", "leaf_bkp"), d, this.exportConfig, this)
            }
        })
    },
    exportConfig: function(a) {
        if ("yes" !== a) {
            return
        }
        this.module.appWin.setStatusBusy({
            text: _T("confbackup", "bkp_export_prepare")
        });
        this.sendWebAPI({
            api: "SYNO.Backup.Config.Backup",
            method: "start",
            version: 1,
            params: {},
            scope: this,
            callback: function(e, b, d, c) {
                if (!e) {
                    this.module.appWin.clearStatusBusy();
                    this.module.appWin.getMsgBox().alert(_T("tree", "leaf_bkp"), SYNO.SDS.Backup.GetErrorString(b.code));
                    return
                }
                this.onStartExportPolling(b.task_id)
            }
        })
    },
    onStartExportPolling: function(a) {
        this.exportPollingID = this.pollReg({
            webapi: {
                api: "SYNO.Backup.Config.Backup",
                method: "status",
                version: 1,
                params: {
                    task_id: a
                }
            },
            interval: 1,
            immediate: true,
            scope: this,
            status_callback: this.onExportPollingDone
        })
    },
    onExportPollingDone: function(d, a, c, b) {
        if (!d) {
            this.clearStatusBusy();
            this.pollUnreg(this.exportPollingID);
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_bkp"), SYNO.SDS.Backup.GetErrorString(a.code));
            return
        }
        if (!a.finish) {
            return
        }
        this.clearStatusBusy();
        this.pollUnreg(this.exportPollingID);
        this.module.appWin.findAppWindow().downloadWebAPI({
            webapi: {
                api: "SYNO.Backup.Config.Backup",
                version: 1,
                method: "download",
                params: {
                    task_id: a.task_id
                }
            },
            scope: this
        })
    },
    openConfigTreeDialog: function(d, b) {
        var c = this,
            a = new SYNO.SDS.AdminCenter.Config.ConfigTreeDialog({
                owner: c.module.appWin,
                module: c.module,
                dss_id: d,
                dss_version: b
            });
        c.mon(a, "close", function(e) {
            if (!e.isRestoreParamReady()) {
                return
            }
            this.updateStatus("initializing");
            c.sendWebAPI({
                api: "SYNO.Backup.Config.Restore",
                method: "start",
                version: 1,
                params: e.getRestoreParam(),
                scope: c,
                callback: function(i, f, h, g) {
                    if (i !== true) {
                        c.unmaskDesk(SYNO.SDS.Backup.GetErrorString(f.code));
                        return
                    }
                    c.onStartImportPolling(f.task_id)
                }
            })
        }, c, {
            single: true
        });
        a.open()
    },
    openUploadConfigDialog: function() {
        var b = this,
            a = new SYNO.SDS.AdminCenter.Config.UploadConfigDialog({
                owner: b.module.appWin,
                module: b.module
            });
        b.mon(a, "close", function(c) {
            if (c.isDssReady()) {
                b.openConfigTreeDialog(c.getDssId(), c.getDssVersion())
            }
        }, b, {
            single: true
        });
        a.open()
    },
    IsCMSMode: function() {
        var b = this.module.appWin.findAppWindow().getOpenConfig("className") === "SYNO.SDS.CMS.Application",
            a = this.module.appWin.findAppWindow().getOpenConfig("cms_self") === true;
        if (b && !a) {
            return true
        }
        return false
    },
    unmaskDesk: function(b) {
        var a = this;
        a.getDeskMsgBox().hide();
        a.module.appWin.getMsgBox().alert(_T("tree", "leaf_bkp"), b)
    },
    onStartImportPolling: function(a) {
        this.importPollingID = this.pollReg({
            webapi: {
                api: "SYNO.Backup.Config.Restore",
                method: "status",
                version: 1,
                params: {
                    task_id: a
                }
            },
            interval: 1,
            immediate: true,
            scope: this,
            status_callback: this.onImportPollingDone
        })
    },
    getServicesText: function(b) {
        var a = "";
        Ext.each(b, function(c) {
            if ("" !== a) {
                a += ", "
            }
            a += SYNO.SDS.Backup.converLanString(c.text)
        });
        return a
    },
    getImportErrText: function(a) {
        var b = SYNO.SDS.Backup.GetErrorString(a.code);
        if (SYNO.SDS.Backup.ERR_CONFIG_SERVICE_FAIL === a.code) {
            b += this.getServicesText(a.errors.failed_services)
        }
        if (true === a.errors.detail_in_log) {
            b += "<p><p>" + _T("confbackup", "verify_log")
        }
        return b
    },
    onImportPollingDone: function(d, a, c, b) {
        if (!d) {
            this.pollUnreg(this.importPollingID);
            this.unmaskDesk(this.getImportErrText(a));
            return
        }
        if (!a.finish) {
            this.updateStatus(a.status, a);
            return
        }
        this.pollUnreg(this.importPollingID);
        this.unmaskDesk(_T("confbackup", "bkp_done"))
    },
    updateStatus: function(b, c) {
        var e = this,
            g = "",
            d = 0;
        var f;
        var a = e.getDeskMsgBox();
        if ("initializing" === b) {
            d = 0;
            f = _T("confbackup", "confbkp_st_init")
        } else {
            if ("stopping_system_service" === b) {
                f = _T("confbackup", "confbkp_st_service_stop")
            } else {
                if ("restoring_service" === b) {
                    f = SYNO.SDS.Backup.converLanString(c.current_service.text)
                } else {
                    if ("starting_system_service" === b) {
                        f = _T("confbackup", "confbkp_st_service_start")
                    } else {
                        return
                    }
                }
            }
        }
        if (c) {
            d = c.percentage
        }
        g = _T("confbackup", "confbkp_footer_desc") + " " + f;
        if (!a.isVisible()) {
            a.show({
                progress: true,
                closable: false,
                maxWidth: 300,
                title: _T("tree", "leaf_bkp"),
                msg: g
            })
        }
        a.updateProgress(d / 100, d.floor() + "%", g)
    },
    getDeskMsgBox: function() {
        var a = this;
        if (a.IsCMSMode()) {
            return a.module.appWin.getMsgBox()
        }
        if (!a.DeskmsgBox || a.DeskmsgBox.isDestroyed) {
            a.DeskmsgBox = new SYNO.SDS.MessageBoxV5({
                modal: true,
                draggable: false,
                renderTo: document.body
            })
        }
        return a.DeskmsgBox.getWrapper()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Reset.ResetTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var c = this._S("ha_running") || this._S("demo_mode");
        var b = {
            title: _T("tree", "leaf_default"),
            itemId: "ResetTab",
            items: [{
                xtype: "syno_displayfield",
                hideLabel: true,
                value: _T("default1", "default_opt2")
            }, {
                xtype: "syno_button",
                text: _T("default1", "default_btn_apply"),
                btnStyle: (c) ? "grey" : "red",
                disabled: c,
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.onClickResetBtn
            }]
        };
        Ext.apply(b, a);
        return b
    },
    onClickResetBtn: function() {
        var a = new SYNO.SDS.AdminCenter.Reset.ResetTab.ConfirmDialog({
            owner: this.module.appWin,
            module: this.module
        });
        a.show()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Reset.ResetTab.ConfirmDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.buttonCounter = 0;
        var b = Ext.apply({
            resizable: false,
            title: _T("tree", "leaf_default"),
            width: 594,
            height: 205,
            buttons: [{
                xtype: "syno_button",
                text: _T("default1", "default_btn_apply"),
                itemId: "apply",
                btnStyle: "red",
                disabled: true,
                scope: this,
                handler: this.onClickDelete
            }, {
                xtype: "syno_button",
                text: _T("common", "no"),
                scope: this,
                handler: this.onClickNo
            }],
            items: [{
                xtype: "syno_formpanel",
                items: [{
                    xtype: "syno_displayfield",
                    value: _T("default1", "default_confirm")
                }, {
                    xtype: "syno_checkbox",
                    boxLabel: String.format('<span class="red-status" style="word-break: break-word;">{0}</span>', _T("default1", "default_confirm_check")),
                    listeners: {
                        check: {
                            fn: function(d, c) {
                                if (c) {
                                    this.buttonCounter = 5;
                                    this.countDownButtonTask = new Ext.util.DelayedTask(this.countDownButtonEnable, this);
                                    this.countDownButtonEnable()
                                } else {
                                    this.countDownButtonDisable()
                                }
                            },
                            scope: this
                        }
                    }
                }]
            }]
        }, a);
        SYNO.SDS.AdminCenter.Reset.ResetTab.ConfirmDialog.superclass.constructor.call(this, b)
    },
    countDownButtonEnable: function() {
        var b = _T("default1", "default_btn_apply"),
            a = this.getFooterToolbar().getComponent("apply");
        if (!this.countDownButtonTask) {
            a.setText(b);
            return
        }
        if (0 === this.buttonCounter) {
            a.setText(b);
            a.setDisabled(false);
            return
        }
        if (this.countDownButtonTask) {
            this.countDownButtonTask.delay(1000)
        }
        a.setText(b + "&nbsp(" + this.buttonCounter + ")");
        this.buttonCounter--
    },
    countDownButtonDisable: function() {
        var a = this.getFooterToolbar().getComponent("apply");
        if (this.countDownButtonTask) {
            delete this.countDownButtonTask
        }
        a.setText(_T("default1", "default_btn_apply"));
        a.setDisabled(true)
    },
    onClickDelete: function() {
        var a = this;
        a.sendWebAPI({
            api: "SYNO.Core.System",
            method: "reset",
            version: 1
        });
        if (a.IsCMSMode()) {
            a.owner.getMsgBox().alert(_T("tree", "leaf_default"), _JSLIBSTR("uicommon", "system_reboot_timeout"), function() {
                a.module.appWin.close()
            })
        } else {
            SYNO.SDS.Desktop.getMsgBox().show({
                closable: false,
                maxWidth: 300,
                title: this._D("product"),
                msg: _JSLIBSTR("uicommon", "system_reboot_timeout")
            })
        }
    },
    onClickNo: function() {
        this.countDownButtonDisable();
        this.close()
    },
    IsCMSMode: function() {
        if (this.owner.getOpenConfig("cms_id") !== undefined) {
            return true
        }
        return false
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Update_Reset");
Ext.define("SYNO.SDS.AdminCenter.Update_Reset.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.Update_Reset.TabPanel({
            module: this
        })
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "ResetTab":
                return "AdminCenter/system_restoredefaults.html";
            case "ConfigTab":
                return "AdminCenter/system_configbackup.html";
            case "UpdateTab":
                return "AdminCenter/system_dsmupdate.html";
            default:
                return "AdminCenter/system_update_reset_desc.html"
        }
    },
    getPanel: function() {
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    deactivate: function() {
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.Update_Reset.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = Ext.apply({
            activeTab: 0,
            useDefaultBtn: false,
            items: [new SYNO.SDS.AdminCenter.Update.UpdateTab({
                module: this.module
            }), new SYNO.SDS.AdminCenter.Config.ConfigTab({
                module: this.module
            }), new SYNO.SDS.AdminCenter.Reset.ResetTab({
                module: this.module
            })]
        }, a);
        this.callParent([b])
    }
});
Ext.define("SYNO.SDS.AdminCenter.WebServices.Web.VHostEditor", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.store = this.getStore();
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.panel = this.getComponent("panel");
        this.btnDelete = this.panel.getTopToolbar().getComponent("btnDelete");
        this.MaxVHosts = this._D("maxvhost");
        this.numVHosts = this.store.getCount()
    },
    fillConfig: function(a) {
        this.grid = new SYNO.ux.EditorGridPanel({
            itemId: "panel",
            cls: "without-dirty-red-grid",
            tbar: {
                items: [{
                    xtype: "syno_button",
                    itemId: "btnCreate",
                    text: _T("common", "create"),
                    scope: this,
                    handler: this.createHandler
                }, {
                    xtype: "syno_button",
                    itemId: "btnDelete",
                    text: _T("common", "delete"),
                    scope: this,
                    handler: this.deleteHandler
                }]
            },
            columns: [{
                dataIndex: "folder",
                header: _T("service", "service_sub_folder"),
                width: 130,
                align: "left",
                editor: new SYNO.ux.TextField({
                    vtype: "sharename",
                    maxlength: 32
                })
            }, {
                dataIndex: "host",
                header: _T("service", "service_host_name"),
                width: 130,
                align: "left",
                editor: new SYNO.ux.TextField({
                    vtype: "hostname"
                })
            }, {
                dataIndex: "protocol",
                header: _T("service", "service_vhost_type"),
                width: 130,
                align: "left",
                renderer: function(c) {
                    return Ext.util.Format.uppercase(c)
                },
                editor: new SYNO.ux.ComboBox({
                    lazyRender: true,
                    store: new Ext.data.ArrayStore({
                        id: "value",
                        fields: ["value", "display"],
                        data: [
                            ["http", "HTTP"],
                            ["https", "HTTPS"]
                        ]
                    }),
                    displayField: "display",
                    valueField: "value",
                    listeners: {
                        select: {
                            scope: this,
                            fn: function(f, e, d) {
                                var c = this.panel.getSelectionModel().getSelected();
                                c.set("port", ("https" === f.getValue()) ? 443 : 80)
                            }
                        }
                    }
                })
            }, {
                dataIndex: "port",
                header: _T("service", "service_vhost_port"),
                width: 130,
                align: "left",
                editor: new SYNO.ux.TextField({
                    vtype: "port",
                    maxlength: 5
                })
            }],
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            viewConfig: {
                forceFit: true
            },
            enableHdMenu: false,
            enableColumnMove: false,
            enableColLock: false,
            clicksToEdit: 1,
            listeners: {
                validateedit: {
                    scope: this,
                    fn: function(c) {
                        if ("host" === c.field) {
                            return !Ext.form.VTypes.ip(c.value)
                        }
                        if ("port" === c.field) {
                            if (!Ext.form.VTypes.portVal.test(c.value)) {
                                this.getMsgBox().alert(_T("tree", "leaf_service"), _T("common", "error_badport"));
                                c.value = c.originalValue
                            }
                        }
                    }
                },
                beforeedit: {
                    scope: this,
                    fn: function(c) {
                        if (c.grid.getSelectionModel().hasSelection()) {
                            this.curRow = c.row;
                            this.btnDelete.enable()
                        } else {
                            this.btnDelete.disable()
                        }
                    }
                },
                afteredit: {
                    scope: this,
                    fn: function(d) {
                        var c = d.column,
                            f = d.record.get("protocol");
                        if (3 !== c) {
                            return
                        }
                        if (SYNO.SDS.Utils.isReservedPort(f, d.value, d.value)) {
                            this.getMsgBox().alert(_T("tree", "leaf_service"), _T("service", "error_dl_port_in_used"));
                            d.record.set("port", d.originalValue)
                        }
                    }
                }
            },
            store: this.store
        });
        var b = {
            title: _T("service", "service_virtual_host_list"),
            width: 400,
            height: 300,
            minWidth: 400,
            minHeight: 300,
            layout: "fit",
            items: [this.grid],
            buttons: [{
                text: _T("common", "apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.applyHandler
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.cancelHandler
            }]
        };
        Ext.apply(b, a);
        return b
    },
    getStore: function() {
        if (!this.store) {
            this.store = new SYNO.API.JsonStore({
                api: "SYNO.Core.Web.HTTP.VHost",
                version: 1,
                method: "get",
                root: "vhosts",
                totalProperty: "total",
                fields: ["folder", "host", "protocol", "port"],
                appWindow: this.owner,
                autoDestroy: true,
                autoLoad: true,
                scope: this,
                listeners: {
                    load: {
                        scope: this,
                        fn: function(b, a, c) {
                            this.numVHosts = this.store.data.length
                        }
                    }
                }
            })
        }
        return this.store
    },
    createHandler: function() {
        var b = this.panel.getStore(),
            a = this.panel.getSelectionModel(),
            c = b.getCount();
        this.panel.stopEditing();
        if (c >= this.MaxVHosts) {
            this.getMsgBox().alert(_T("tree", "leaf_service"), String.format(_T("service", "service_max_vhosts"), this.MaxVHosts));
            return
        } else {
            if (1 > this.MaxVHosts) {
                this.getMsgBox().alert(_T("tree", "leaf_service"), _T("service", "service_max_vhosts_error"));
                return
            }
        }
        b.insert(c, new b.recordType({
            folder: "",
            host: "",
            protocol: "http",
            port: 80
        }));
        a.selectRow(c);
        this.panel.startEditing(c, 0)
    },
    deleteHandler: function() {
        var c = this.panel.getStore(),
            b = this.panel.getSelectionModel(),
            a = b.getSelected(),
            d;
        if (!a) {
            return
        }
        this.panel.stopEditing();
        c.remove(a);
        d = c.getCount();
        if (!d) {
            this.btnDelete.disable();
            return
        }
        if (this.curRow >= d) {
            this.curRow = d - 1
        }
        b.selectRow(this.curRow)
    },
    applyHandler: function() {
        this.setStatusBusy();
        var c = {
                vhosts: []
            },
            h = {},
            e = this.store.getRange(),
            f = this.store.getCount(),
            a, k, j, b, g;
        for (var d = 0; d < f; d++) {
            a = e[d].get("folder");
            k = e[d].get("host");
            j = e[d].get("protocol");
            b = e[d].get("port");
            g = k + ":" + b;
            if (!a.length || !k.length) {
                this.clearStatusBusy();
                this.owner.getMsgBox().alert(_T("tree", "leaf_service"), _T("service", "service_vhost_empty_error"));
                return
            }
            if (h[g]) {
                this.clearStatusBusy();
                this.owner.getMsgBox().alert(_T("tree", "leaf_service"), _T("service", "service_vhost_conflict"));
                return
            } else {
                h[g] = true
            }
            c.vhosts.push({
                folder: a,
                host: k,
                protocol: j,
                port: parseInt(b, 10)
            })
        }
        if (0 === this.store.getModifiedRecords().length && this.numVHosts === f) {
            this.close();
            return
        }
        this.sendWebAPI({
            api: "SYNO.Core.Web.HTTP.VHost",
            method: "set",
            version: 1,
            params: c,
            scope: this,
            callback: function(m, l, i) {
                this.clearStatusBusy();
                if (!m) {
                    this.owner.getMsgBox().alert(_T("tree", "leaf_service"), _T("common", "error_system"));
                    return false
                }
                this.close();
                return
            }
        })
    },
    cancelHandler: function() {
        if (0 === this.store.getModifiedRecords().length) {
            this.close();
            return
        }
        this.owner.getMsgBox().confirm(_T("tree", "leaf_service"), _T("common", "confirm_lostchange"), function(a) {
            if ("yes" === a) {
                this.close()
            }
        }, this)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.WebServices.Util");
SYNO.SDS.AdminCenter.WebServices.Util.getReqCompoundParam = function(a, c) {
    if (!(c instanceof Array)) {
        return null
    }
    for (var b = 0; b < c.length; b++) {
        if (false === SYNO.ux.Utils.checkApiConsistency(a, c[b])) {
            continue
        }
        return c[b]
    }
    return null
};
SYNO.SDS.AdminCenter.WebServices.Util.getSuccessRespCompoundData = function(b, d) {
    if (!(d.result instanceof Array)) {
        return null
    }
    for (var c = 0; c < d.result.length; c++) {
        var a = d.result[c];
        if (false === SYNO.ux.Utils.checkApiConsistency(b, a)) {
            continue
        }
        if (true === a.has_fail || false === a.success) {
            break
        }
        if (d.result[c].data) {
            return d.result[c].data
        } else {
            return null
        }
    }
    return null
};
SYNO.SDS.AdminCenter.WebServices.Util.getFailRespCompoundParam = function(b, d) {
    if (false === d.has_fail) {
        return null
    }
    if (!(d.result instanceof Array)) {
        return null
    }
    for (var c = 0; c < d.result.length; c++) {
        var a = d.result[c];
        if (b != a.api) {
            continue
        }
        if (false === a.success) {
            return a.error
        }
    }
    return null
};
Ext.define("SYNO.SDS.AdminCenter.WebServices.HTTPTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        });
        this.volume_crashed = false
    },
    enableCheckGroup: function() {
        var a;
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_http_port", ["DF_http_port", "http_port"]);
        if ("yes" === this._D("supportHTTPS")) {
            if ("yes" === this._D("support_spdy")) {
                a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https", ["DF_enable_https", "DF_certificate", "enable_https_port", "enable_hsts", "enable_hsts_desc", "enable_spdy", "enable_spdy_desc"])
            } else {
                a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https", ["DF_enable_https", "DF_certificate", "enable_https_port", "enable_hsts", "enable_hsts_desc"])
            }
            a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_https_port", ["DF_https_port", "https_port"])
        }
        this.updateUI()
    },
    fillConfig: function(a) {
        var b = {
            title: _T("tree", "leaf_service"),
            itemId: "HTTPTab",
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Web.HTTP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [this.createWebItems(), this.createHTTPItems()]
        };
        Ext.apply(b, a);
        return b
    },
    createWebItems: function() {
        var a = [];
        a.push({
            xtype: "syno_checkbox",
            name: "enable_web",
            boxLabel: _T("service", "service_web"),
            listeners: {
                scope: this,
                check: this.updateUI
            }
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            value: _T("service", "service_desc_web")
        });
        a.push({
            xtype: "syno_button",
            itemId: "setBtnId",
            id: this.BtnVHostEditor = Ext.id(),
            name: "vhost_editor",
            indent: 1,
            text: _T("service", "service_edit_vhost"),
            scope: this,
            handler: function() {
                var b = new SYNO.SDS.AdminCenter.WebServices.Web.VHostEditor({
                    owner: this.module.appWin,
                    module: this
                });
                b.show()
            }
        });
        a.push({
            xtype: "syno_checkbox",
            name: "enable_userdir",
            boxLabel: _T("service", "service_web_localuser_enable"),
            listeners: {
                check: {
                    scope: this,
                    fn: function(c, b) {
                        if (!b || this.enable_home) {
                            return
                        }
                        this.module.appWin.getMsgBox().confirm(_T("service", "service_web_localuser"), _T("service", "service_web_localuser_warning"), function(d) {
                            if ("yes" === d) {
                                c.reset();
                                SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", Ext.apply({
                                    fn: "SYNO.SDS.AdminCenter.User.Main",
                                    userHomeDialog: true
                                }, this.module.appWin.findAppWindow().openConfig))
                            } else {
                                c.setValue(false)
                            }
                        }, this)
                    }
                }
            }
        });
        a.push({
            xtype: "syno_displayfield",
            indent: 1,
            value: _T("service", "service_decs_web_localuser")
        });
        return {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.WebServices.Main::web::web",
            title: _T("service", "service_web_app"),
            collapsible: true,
            items: a
        }
    },
    createHTTPItems: function() {
        var a = [];
        a.push({
            xtype: "syno_checkbox",
            name: "enable_http_port",
            boxLabel: _T("service", "service_httpport"),
            listeners: {
                scope: this,
                check: this.updateUI
            }
        }, {
            xtype: "syno_displayfield",
            name: "DF_http_port",
            indent: 1,
            value: _T("service", "service_desc_httpport")
        }, {
            xtype: "syno_numberfield",
            name: "http_port",
            indent: 1,
            maxlength: 5,
            vtype: "port",
            validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("http"),
            fieldLabel: "HTTP"
        });
        if ("yes" === this._D("supportHTTPS")) {
            a.push({
                xtype: "syno_checkbox",
                name: "enable_https",
                boxLabel: _T("service", "service_web_secureui"),
                listeners: {
                    scope: this,
                    check: this.updateUI
                }
            }, {
                xtype: "syno_displayfield",
                name: "DF_enable_https",
                indent: 1,
                value: _T("service", "service_desc_web_secureui")
            }, {
                xtype: "syno_displayfield",
                name: "DF_certificate",
                indent: 1,
                value: String.format(_T("certificate", "goto_certificate"), '<a href="javascript: void(0)" onclick="SYNO.SDS.AdminCenter.PublicAccess.Utils.onClickCertificate(\'' + this.getId() + "');\">" + _T("certificate", "certificate") + "</a>")
            });
            if ("yes" === this._D("support_spdy")) {
                a.push({
                    xtype: "syno_checkbox",
                    name: "enable_spdy",
                    boxLabel: _T("service", "enable_spdy")
                }, {
                    xtype: "syno_displayfield",
                    name: "enable_spdy_desc",
                    indent: 1,
                    value: _T("service", "enable_spdy_desc")
                })
            }
            a.push({
                xtype: "syno_checkbox",
                name: "enable_hsts",
                boxLabel: _T("service", "enable_hsts")
            }, {
                xtype: "syno_displayfield",
                name: "enable_hsts_desc",
                indent: 1,
                value: _T("service", "enable_hsts_desc")
            });
            a.push({
                xtype: "syno_checkbox",
                name: "enable_https_port",
                boxLabel: _T("service", "service_httpsport"),
                listeners: {
                    scope: this,
                    check: this.updateUI
                }
            }, {
                xtype: "syno_displayfield",
                name: "DF_https_port",
                indent: 1,
                value: _T("service", "service_desc_httpsport")
            }, {
                xtype: "syno_numberfield",
                name: "https_port",
                indent: 1,
                maxlength: 5,
                vtype: "port",
                validator: SYNO.SDS.AdminCenter.PublicAccess.Utils.PortValidator("https"),
                fieldLabel: "HTTPS"
            })
        }
        return {
            xtype: "syno_fieldset",
            stateId: "SYNO.SDS.AdminCenter.WebServices.Main::web::http",
            title: _T("service", "service_http_serv_options"),
            collapsible: true,
            items: a
        }
    },
    updateUI: function() {
        var a = !this.getForm().findField("enable_web").checked;
        Ext.getCmp(this.BtnVHostEditor).setDisabled(a);
        this.module.panel.get("PHPTab").setDisabled(a)
    },
    processParams: function(b, a) {
        this.callParent(arguments);
        if ("set" === b) {
            this.setParam(a);
            this.webChg = this.getForm().findField("enable_web").isDirty();
            this.userdirChg = this.getForm().findField("enable_userdir").isDirty();
            this.httpExtraChg = this.getForm().findField("enable_http_port").isDirty();
            this.httpPortChg = this.getForm().findField("http_port").isDirty();
            if ("yes" === this._D("supportHTTPS")) {
                this.httpsChg = this.getForm().findField("enable_https").isDirty();
                this.httpsExtraChg = this.getForm().findField("enable_https_port").isDirty();
                this.httpsPortChg = this.getForm().findField("https_port").isDirty()
            }
        } else {
            if ("get" === b) {
                a.push({
                    api: "SYNO.Core.User.Home",
                    method: "get",
                    version: 1
                });
                a.push({
                    api: "SYNO.Core.Web.HTTP.Dependency",
                    method: "get",
                    version: 1
                })
            }
        }
        return a
    },
    processReturnData: function(c, b, a) {
        this.module.appWin.clearStatusBusy();
        this.el.unmask();
        if (true === b.has_fail) {
            this.errorHandling(SYNO.API.Util.GetFirstError(b).code);
            return
        }
        if ("get" === c) {
            this.enable_home = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.User.Home", "get").enable;
            this.dependent_packages = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Web.HTTP.Dependency", "get").packages
        }
        if ("set" === c) {
            if (this.webChg) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.WebStation", !this.getForm().findField("enable_web").getValue())
            }
            if (this.userdirChg) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.WebStation.Personal", !this.getForm().findField("enable_userdir").getValue())
            }
            if (this.httpPortChg) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.WebStation.HTTP_EXTRA", true)
            }
            if (this.httpExtraChg || this.httpPortChg) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.WebStation.HTTP_EXTRA", !this.getForm().findField("enable_http_port").getValue())
            }
            if ("yes" === this._D("supportHTTPS")) {
                if (this.httpsChg) {
                    SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.WebStation.HTTPS", !this.getForm().findField("enable_https").getValue())
                }
                if (this.httpsPortChg) {
                    SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.WebStation.HTTPS_EXTRA", true)
                }
                if (this.httpsExtraChg || this.httpsPortChg) {
                    SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.WebStation.HTTPS_EXTRA", !this.getForm().findField("enable_https_port").getValue())
                }
            }
        }
        this.getParam(b, a);
        this.getForm().loadRecords(b.result, a.compound);
        this.is_confirmed = false
    },
    getParam: function(d, c) {
        var b = {
            api: this.webapi.api,
            method: this.webapi.methods.get,
            version: this.webapi.version
        };
        var a = SYNO.SDS.AdminCenter.WebServices.Util.getSuccessRespCompoundData(b, d);
        if (null === a) {
            SYNO.Debug("Error");
            return
        }
        this.getForm().setValues({
            enable_http_port: (null !== a.http_port) ? true : false,
            enable_https_port: (null !== a.https_port) ? true : false
        })
    },
    setParam: function(c) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.set,
            version: this.webapi.version
        };
        var b = SYNO.SDS.AdminCenter.WebServices.Util.getReqCompoundParam(a, c);
        if (null === b) {
            SYNO.Debug("Error");
            return
        }
        b.params.http_port = b.params.enable_http_port ? b.params.http_port : 0;
        b.params.https_port = b.params.enable_https_port ? b.params.https_port : 0;
        ["enable_http_port", "enable_https_port"].each(function(d) {
            delete b.params[d]
        }, this)
    },
    onBeforeRequest: function(h) {
        if ("get" === h) {
            return true
        }
        if (this.volume_crashed) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(3552));
            return false
        }
        var e = this.getForm(),
            c = e.findField("enable_web").getValue(),
            g = e.findField("enable_http_port").getValue(),
            d = e.findField("http_port").getValue(),
            f = e.findField("enable_https").getValue(),
            b = e.findField("enable_https_port").getValue(),
            a = e.findField("https_port").getValue();
        if (!c && 0 < this.dependent_packages.length && !this.is_confirmed) {
            this.module.appWin.getMsgBox().confirm(_T("controlpanel", "leaf_service"), String.format(_T("service", "service_app_uhconflict"), this.dependent_packages.join(", ")), function(l) {
                if ("yes" === l) {
                    this.module.appWin.setStatusBusy();
                    var k = [];
                    for (var j = 0; j < this.dependent_packages.length; j++) {
                        k.push({
                            api: "SYNO.Core.Package.Control",
                            method: "stop",
                            version: 1,
                            params: {
                                id: this.dependent_packages[j]
                            }
                        })
                    }
                    this.sendWebAPI({
                        params: {},
                        compound: {
                            stopwhenerror: false,
                            params: k
                        },
                        scope: this,
                        callback: function(n, m, i) {
                            if (!n || m.has_fail) {
                                this.module.appWin.getMsgBox().alert(_T("controlpanel", "leaf_service"), this.dependent_packages.join(", ") + " " + _T("pkgmgr", "pkgmgr_pkg_stop_failed"))
                            }
                            this.is_confirmed = true;
                            this.module.panel.applyAllForm()
                        }
                    })
                }
            }, this);
            return false
        }
        if (g && "80" === d) {
            this.module.appWin.getMsgBox().alert(_T("tree", "leaf_service"), _T("service", "service_wrong_port3"));
            return false
        }
        if ("yes" === this._D("supportHTTPS") && f) {
            if (b && "443" === a) {
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_service"), _T("service", "service_wrong_https_port"));
                return false
            }
            if (g && b && d === a) {
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_service"), _T("service", "httpport_and_httpsport_same"));
                return false
            }
        }
        return true
    },
    errorHandling: function(a) {
        if (3552 === a) {
            this.volume_crashed = true
        } else {
            if (3550 === a) {
                this.el.mask(_T("volume", "volume_no_volumes"), "syno-ux-mask-info");
                if ("SYNO.SDS.CMS.Application" === this.findAppWindow().getOpenConfig("className")) {
                    this.module.appWin.getMsgBox().alert(this.title, _T("cms", "cms_no_volumes"));
                    return
                }
                var b = ("yes" === this._D("usbstation", "no")) ? String.format(_T("service", "no_ext4_external_devices"), _T("tree", "leaf_service")) : _T("volume", "volume_share_volumeno");
                this.module.appWin.getMsgBox().alert(_T("tree", "leaf_service"), b, function() {
                    if ("yes" !== this._D("usbstation", "no")) {
                        SYNO.SDS.AppLaunch("SYNO.SDS.StorageManager.Instance")
                    }
                }, this)
            } else {
                this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(a))
            }
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.WebServices.PHP.ExtensionSelector", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.owner = a.owner;
        this.store = this.getStore();
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        this.colIndexed = new SYNO.ux.EnableColumn({
            id: "enable",
            dataIndex: "enable",
            menuDisabled: true,
            bindRowClick: true,
            align: "center",
            width: 30,
            fixed: true
        });
        this.grid = new SYNO.ux.GridPanel({
            cls: "without-dirty-red-grid",
            tbar: {
                items: [{
                    xtype: "syno_button",
                    itemId: "btnCreate",
                    text: _T("common", "default"),
                    scope: this,
                    handler: this.restoreToDefault
                }]
            },
            plugins: [this.colIndexed],
            colModel: new Ext.grid.ColumnModel([this.colIndexed, {
                header: _T("share", "share_name"),
                id: "name",
                dataIndex: "name",
                menuDisabled: true,
                width: 200,
                resizable: false
            }]),
            autoExpandColumn: "name",
            selModel: new Ext.grid.RowSelectionModel(),
            store: this.store
        });
        var b = {
            title: _T("service", "service_web_php_ext_selector"),
            width: 400,
            height: 400,
            minWidth: 250,
            layout: "fit",
            items: [this.grid],
            buttons: [{
                text: _T("common", "apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                scope: this,
                handler: this.applyHandler
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.cancelHandler
            }]
        };
        Ext.apply(b, a);
        return b
    },
    getStore: function() {
        if (!this.store) {
            this.store = new SYNO.API.JsonStore({
                api: "SYNO.Core.Web.PHP.Extension",
                method: "get",
                version: 1,
                root: "extensions",
                idProperty: "name",
                fields: ["enable", "enable_default", "name"],
                appWindow: this.owner,
                autoDestroy: true,
                autoLoad: true,
                scope: this
            })
        }
        return this.store
    },
    applyHandler: function() {
        this.setStatusBusy();
        var b = {},
            a = [];
        this.store.each(function(c) {
            a.push(c.data)
        });
        b.extensions = a;
        this.sendWebAPI({
            api: "SYNO.Core.Web.PHP.Extension",
            method: "set",
            version: 1,
            params: b,
            scope: this,
            callback: function(e, d, c) {
                this.clearStatusBusy();
                if (!e) {
                    this.owner.getMsgBox().alert(_T("tree", "leaf_service"), _T("common", "error_system"));
                    return false
                }
                this.close();
                return true
            }
        })
    },
    cancelHandler: function() {
        if (0 === this.store.getModifiedRecords().length) {
            this.close();
            return
        }
        this.owner.getMsgBox().confirm(_T("tree", "leaf_service"), _T("common", "confirm_lostchange"), function(a) {
            if ("yes" === a) {
                this.close()
            }
        }, this)
    },
    restoreToDefault: function() {
        this.store.each(function(a) {
            a.set("enable", a.get("enable_default"))
        }, this);
        this.colIndexed.checkSelectAll(this.store)
    }
});
Ext.define("SYNO.SDS.AdminCenter.WebServices.PHPTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        })
    },
    enableCheckGroup: function() {
        var a;
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "custom_open_basedir", ["open_basedir", "open_basedir_desc"])
    },
    fillConfig: function(a) {
        var b = {
            title: _T("service", "service_web_php_setting"),
            itemId: "PHPTab",
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Web.PHP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_checkbox",
                name: "enable_cache",
                boxLabel: _T("service", "service_web_php_cache_enabled")
            }, {
                xtype: "syno_checkbox",
                name: "display_errors",
                boxLabel: _T("service", "service_web_php_display_errors")
            }, {
                xtype: "syno_checkbox",
                name: "custom_open_basedir",
                boxLabel: _T("service", "service_web_php_openbasedir_customize")
            }, {
                xtype: "syno_textfield",
                id: this.open_basedir = Ext.id(),
                name: "open_basedir",
                indent: 1,
                width: 500,
                maxlength: 400,
                fieldLabel: "open_basedir"
            }, {
                xtype: "syno_displayfield",
                id: this.open_basedir_desc = Ext.id(),
                name: "open_basedir_desc",
                indent: 1,
                value: _T("service", "service_web_php_openbasedir_warning")
            }, {
                xtype: "syno_button",
                itemId: "setBtnId",
                id: this.BtnExtensionSelector = Ext.id(),
                text: _T("service", "service_web_php_ext_select"),
                scope: this,
                handler: function() {
                    var c = new SYNO.SDS.AdminCenter.WebServices.PHP.ExtensionSelector({
                        owner: this.module.appWin,
                        module: this
                    });
                    c.show()
                }
            }]
        };
        Ext.apply(b, a);
        return b
    },
    onBeforeRequest: function(f) {
        if ("get" === f) {
            return true
        }
        if (!this.getForm().isDirty() || this.isChangeopen_basedir) {
            return true
        }
        if (this.getForm().findField("custom_open_basedir").getValue()) {
            var e = this.getForm().findField("open_basedir").getValue().split(":");
            var a = ["/var/services/tmp", "/var/services/web"],
                c = [],
                b, d;
            for (b = 0; b < a.length; b++) {
                if (-1 === e.indexOf(a[b])) {
                    c.push(a[b])
                }
            }
            if (0 !== c.length) {
                d = String.format(_T("service", "service_web_php_openbasedir_customize_warning"), c.join(":"));
                this.module.appWin.getMsgBox().confirm(_T("tree", "leaf_service"), d, function(g) {
                    if ("yes" === g) {
                        this.isChangeopen_basedir = true;
                        this.module.panel.applyAllForm()
                    }
                }, this);
                return false
            }
        }
        return true
    },
    processReturnData: function(c, b, a) {
        if (a && Ext.isArray(a.compound)) {
            this.getForm().loadRecords(b.result, a.compound)
        }
        this.isChangeopen_basedir = false
    }
});
Ext.define("SYNO.SDS.AdminCenter.WebServices.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.WebServices.TabPanel({
            module: this
        })
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "HTTPTab":
                return "AdminCenter/application_webserv_http.html";
            case "PHPTab":
                return "AdminCenter/application_webserv_php.html";
            default:
                return "AdminCenter/application_webserv_desc.html"
        }
    },
    getPanel: function() {
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    deactivate: function() {
        var a = this.panel.getAllForms();
        for (var b = 0; b < a.length; b++) {
            if (a[b].isDirty()) {
                return false
            }
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.WebServices.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.module = a.module;
        var b;
        b = Ext.apply({
            items: [new SYNO.SDS.AdminCenter.WebServices.HTTPTab({
                module: this.module
            }), new SYNO.SDS.AdminCenter.WebServices.PHPTab({
                module: this.module
            })]
        }, a);
        this.callParent([b])
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.PreviewGrid", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 20,
    constructor: function(b) {
        this.store = new SYNO.API.JsonStore({
            api: "SYNO.Core.AppPriv.App",
            method: "list",
            baseParams: {
                offset: 0,
                limit: this.pageSize
            },
            version: 2,
            appWindow: b.module,
            autoDestroy: true,
            root: "applications",
            totalProperty: "total",
            fields: ["name"],
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onListAppException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            }
        });
        var a = Ext.apply({
            header: false,
            border: false,
            ds: this.store,
            cm: new Ext.grid.ColumnModel([{
                id: "application",
                header: _T("user", "user_application"),
                dataIndex: "name",
                width: 200,
                scope: this
            }, {
                header: _T("app_privilege", "effective_permission"),
                id: "preview",
                dataIndex: "preview",
                align: "center",
                width: 200,
                renderer: function(c) {
                    if (c === "allow") {
                        return _T("app_privilege", "allow_privilege")
                    } else {
                        if (c === "deny") {
                            return _T("app_privilege", "deny_privilege")
                        } else {
                            if (c === "custom") {
                                return _T("app_privilege", "grant_by_ip")
                            }
                        }
                    }
                }
            }]),
            autoExpandColumn: "application",
            enableHdMenu: false,
            listeners: {
                scope: this,
                activate: function() {
                    this.store.load()
                }
            }
        }, b);
        this.callParent([a])
    },
    onListAppException: function(d, e, f, c, b, a) {
        this.module.getMsgBox().alert(this.title, SYNO.API.getErrorString(b));
        this.module.clearStatusBusy()
    },
    onBeforeLoad: function(a, b) {
        this.module.setStatusBusy()
    },
    onLoad: function(b, a, c) {
        this.store.sort("name", "ASC");
        this.module.clearStatusBusy()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.PreviewDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(c) {
        this.gridPanel = new SYNO.SDS.AdminCenter.AppRulePrivileges.PreviewGrid({
            module: this,
            itemId: "preview",
            height: 300
        });
        this.fsPreview = new SYNO.ux.FieldSet({
            collapsible: false,
            items: [this.gridPanel]
        });
        var b = function(f, e) {
            return e.type + ":" + e.name
        };
        var d = this;
        this.fsInput = new SYNO.ux.FieldSet({
            collapsible: false,
            items: [new SYNO.FileStation.PropertyDialog.ACLPrivilege.UserGrpCombo({
                initComponent: function() {
                    Ext.apply(this, {
                        tpl: '<tpl for="."><div class="x-combo-list-item acl-icon-combo-item ' + this.iconClsPrefix + "{" + this.iconClsField + '}" ext:qtip={' + this.displayField + "}>{" + this.displayField + "}</div></tpl>"
                    });
                    SYNO.FileStation.PropertyDialog.ACLPrivilege.IconCombo.superclass.initComponent.call(this)
                },
                fieldLabel: _WFT("acl_editor", "user_or_group"),
                itemId: "cmb_owner",
                queryParam: "prefix",
                width: 325,
                listWidth: 325,
                store: new Ext.data.Store({
                    autoDestroy: true,
                    proxy: new SYNO.API.Proxy({
                        api: "SYNO.Core.ACL",
                        method: "list_owners",
                        version: 1,
                        appWindow: this
                    }),
                    reader: new Ext.data.JsonReader({
                        root: "owners",
                        totalProperty: "total",
                        id: "value"
                    }, [{
                        name: "name"
                    }, {
                        name: "type"
                    }, {
                        name: "value",
                        convert: b
                    }]),
                    paramNames: {
                        start: "offset",
                        limit: "limit"
                    },
                    remoteSort: true,
                    baseParams: {
                        include_everyone: false,
                        include_owner: false
                    },
                    pruneModifiedRecords: true
                })
            }), {
                xtype: "syno_textfield",
                width: 200,
                labelWidth: 100,
                fieldLabel: _T("tcpip", "tcpip_ipaddr"),
                name: "source_ip",
                itemId: "tcpip_ipaddr",
                vtype: "fwLooseip",
                validationEvent: "keyup",
                validator: function(e) {
                    if (e && !Ext.form.VTypes.fwLooseip(e)) {
                        return false
                    }
                    d.doPreview(d.fsInput.get("cmb_owner"));
                    return true
                }
            }]
        });
        var a = Ext.apply({
            width: 600,
            height: 500,
            minWidth: 500,
            minHeight: 400,
            layout: "fit",
            title: _WFT("acl_editor", "permission_viewer"),
            items: [new SYNO.ux.FormPanel({
                border: false,
                labelAlign: "left",
                items: [this.fsInput, this.fsPreview]
            })],
            buttons: [{
                text: _T("common", "close"),
                scope: this,
                handler: this.close
            }]
        }, c);
        this.callParent([a]);
        this.gridPanel.store.load();
        this.mon(this.fsInput.get("cmb_owner"), "valueset", this.doPreview, this)
    },
    renderDefaultUser: function(e) {
        var d = this.gridPanel.store.getCount();
        var b;
        var c = e ? "allow" : "deny";
        for (b = 0; b < d; b++) {
            var a = this.gridPanel.store.getAt(b);
            a.set("preview", c)
        }
    },
    doPreview: function(d) {
        if (!d || d.valueNotFound() || !d.getValue() || "" === d.getValue()) {
            d.assertValue();
            this.setStatusError({
                text: _WFT("acl_editor", "error_invalid_user_or_group"),
                clear: true
            });
            return
        }
        var c = d.getValue();
        var b = c.split(":")[0];
        var a = c.split(":")[1];
        var f = this.fsInput.get("tcpip_ipaddr").getValue();
        if (f && !Ext.form.VTypes.fwLooseip(f)) {
            this.setStatusError({
                text: _JSLIBSTR("vtype", "bad_ip"),
                clear: true
            });
            return
        }
        if (a === "admin" || a === "SynologyCMS") {
            this.renderDefaultUser(true);
            return
        } else {
            if (a === "guest") {
                this.renderDefaultUser(false);
                return
            }
        }
        var e = {};
        if ("user" === b) {
            e.username = a
        } else {
            e.groups = [a]
        }
        if (f) {
            e.ip = f
        }
        this.body.mask(_WFT("common", "loading"), "x-mask-loading");
        this.sendWebAPI({
            api: "SYNO.Core.AppPriv.App",
            method: "preview",
            version: 2,
            scope: this,
            params: e,
            callback: function(j, i, h) {
                if (this.isDestroyed) {
                    return
                }
                if (j) {
                    this.renderPriv(i.applications)
                } else {
                    var g = _WFT("common", "error_system");
                    if (Ext.isDefined(i.code)) {
                        g = SYNO.API.getErrorString(i.code)
                    }
                    this.getMsgBox().alert(this.title, g)
                }
                this.body.unmask()
            }
        })
    },
    renderPriv: function(f) {
        var g = this.gridPanel.store.getCount();
        var e = f.length;
        var d, c;
        for (d = 0; d < g; d++) {
            var a = this.gridPanel.store.getAt(d);
            var b = a.json.app_id;
            a.set("preview", null);
            for (c = 0; c < e; c++) {
                if (b === f[c].app_id) {
                    a.set("preview", f[c].privilelge)
                }
            }
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.AddIPDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.panel = this.createPanel();
        this.form = this.panel.getForm();
        var a = {
            width: 680,
            height: 250,
            title: _T("firewall", "firewall_source"),
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "alt_apply"),
                itemId: "ruleApply",
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.close
            }]
        };
        this.setDefault();
        Ext.apply(a, b);
        this.callParent([a]);
        this.OnSourceRadioClick(this.form.findField("source"), true)
    },
    createPanel: function() {
        var a = {
            xtype: "syno_fieldset",
            title: _T("firewall", "firewall_source"),
            itemId: "rule_source",
            items: [{
                xtype: "syno_displayfield"
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                defaults: {
                    flex: 1
                },
                items: [{
                    xtype: "syno_radio",
                    name: "source",
                    itemId: "nfs_fieldtitle_host",
                    boxLabel: _T("nfs", "nfs_fieldtitle_host"),
                    inputValue: "single",
                    scope: this,
                    checked: true,
                    handler: this.OnSourceRadioClick
                }, {
                    xtype: "syno_radio",
                    name: "source",
                    itemId: "firewall_source_network",
                    boxLabel: _T("firewall", "firewall_source_network"),
                    inputValue: "subnet",
                    scope: this,
                    handler: this.OnSourceRadioClick
                }]
            }, {
                xtype: "syno_textfield",
                width: 200,
                labelWidth: 340,
                fieldLabel: _T("tcpip", "tcpip_ipaddr"),
                name: "source_ip",
                itemId: "tcpip_ipaddr",
                vtype: "fwLooseip",
                validator: function(b) {
                    if (Ext.form.VTypes.fwLooseip(b)) {
                        this.nextSibling().validate();
                        return true
                    } else {
                        return false
                    }
                }
            }, {
                xtype: "syno_textfield",
                width: 200,
                labelWidth: 340,
                fieldLabel: _T("tcpip", "tcpip_mask"),
                name: "source_subnet_mask",
                itemId: "tcpip_mask",
                maskRe: /[.0-9]/,
                invalidText: _JSLIBSTR("vtype", "bad_mask"),
                allowBlank: false,
                validator: function(b) {
                    var c = this.previousSibling().getValue();
                    if (Ext.form.VTypes.fwLoosev6ipVal.test(c)) {
                        if (b >= 0 && b <= 128) {
                            return true
                        } else {
                            return _JSLIBSTR("vtype", "bad_ipv6prefixLeng")
                        }
                    } else {
                        if (Ext.form.VTypes.netmaskVal.test(b)) {
                            return true
                        }
                    }
                    return false
                }
            }]
        };
        return new SYNO.ux.FormPanel(a)
    },
    OnSourceRadioClick: function(a, b) {
        if (!a.checked) {
            return false
        }
        switch (a.value) {
            case "single":
                this.form.findField("source_ip").enable();
                this.form.findField("source_subnet_mask").disable();
                break;
            case "subnet":
                this.form.findField("source_ip").enable();
                this.form.findField("source_subnet_mask").enable();
                break;
            default:
                this.form.findField("source_ip").enable();
                this.form.findField("source_subnet_mask").disable();
                break
        }
    },
    setDefault: function() {
        this.form.findField("source_ip").enable();
        this.form.findField("source_subnet_mask").disable()
    },
    onApply: function() {
        if (!this.form.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return
        }
        var a;
        var b = this.form.findField("source").getGroupValue();
        if ("single" == b) {
            a = this.form.findField("source_ip").getValue()
        } else {
            if ("subnet" == b) {
                a = String.format("{0}/{1}", this.form.findField("source_ip").getValue(), this.form.findField("source_subnet_mask").getValue())
            } else {
                return
            }
        }
        this.module.ipList.push(a);
        this.module.store.loadData(this.module.ipList);
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.RuleList", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.appWin = b.appWin;
        this.ipList = b.ipList;
        this.store = new Ext.data.ArrayStore({
            model: "SYNO.SDS.AdminCenter.AppRulePrivileges.RuleModel",
            data: this.ipList,
            expandData: true,
            fields: ["ip"]
        });
        this.addBtn = new SYNO.ux.Button({
            itemId: "btn_create",
            text: _T("autoblock", "create_ip"),
            scope: this,
            handler: this.launchAddIPDialog
        });
        this.delBtn = new SYNO.ux.Button({
            itemId: "btn_del",
            text: _T("common", "remove"),
            scope: this,
            handler: this.deleteItem,
            disabled: true
        });
        var a = {
            ds: this.store,
            loadMask: true,
            height: 300,
            tbar: {
                items: [this.addBtn, this.delBtn]
            }
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.mon(this.getSelectionModel(), "selectionchange", this.onSelectionChange, this)
    },
    onSelectionChange: function(a) {
        if (0 < a.getCount()) {
            this.delBtn.enable()
        } else {
            this.delBtn.disable()
        }
    },
    launchAddIPDialog: function() {
        var a = new SYNO.SDS.AdminCenter.AppRulePrivileges.AddIPDialog({
            owner: this.appWin,
            module: this
        });
        a.open()
    },
    deleteItem: function() {
        var a = this.getSelectionModel().getSelections();
        var b;
        for (b = 0; b < a.length; b++) {
            this.ipList.remove(a[b].get("ip"))
        }
        this.store.loadData(this.ipList)
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.RuleEditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.blackListTab = new SYNO.SDS.AdminCenter.AppRulePrivileges.RuleList({
            appWin: this,
            title: _T("autoblock", "autoblock_view_list"),
            ipList: b.deny_ip.clone(),
            columns: [{
                header: _T("autoblock", "autoblock_ip"),
                id: "ip",
                dataIndex: "ip",
                sortable: true,
                menuDisabled: true
            }]
        });
        this.whiteListTab = new SYNO.SDS.AdminCenter.AppRulePrivileges.RuleList({
            appWin: this,
            title: _T("autoblock", "autoblock_white_list"),
            ipList: b.allow_ip.clone(),
            columns: [{
                header: _T("autoblock", "autoblock_allow_ip"),
                id: "ip",
                dataIndex: "ip",
                sortable: true,
                menuDisabled: true
            }]
        });
        var c = {
            xtype: "syno_tabpanel",
            activeTab: 0,
            items: [this.whiteListTab, this.blackListTab]
        };
        var a = {
            title: _T("autoblock", "autoblock_view_rules"),
            width: 600,
            height: 440,
            items: [c],
            layout: "fit",
            buttons: [{
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.onSave
            }, {
                btnStyle: "grey",
                text: _T("common", "close"),
                scope: this,
                handler: function() {
                    if (this.whiteListTab.ipList.toJSON() !== this.allow_ip.toJSON() || this.blackListTab.ipList.toJSON() !== this.deny_ip.toJSON()) {
                        this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(d) {
                            if ("yes" === d) {
                                this.close()
                            }
                        }, this)
                    } else {
                        this.close()
                    }
                }
            }]
        };
        Ext.apply(a, b);
        this.callParent([a]);
        this.mon(this, "close", function() {
            this.module.ownerGrid.loadRules()
        }, this)
    },
    onSave: function() {
        var c;
        var b = [];
        var a = {
            entity_name: this.entity_name,
            entity_type: this.entity_type,
            app_id: this.app_id
        };
        if ((this.whiteListTab.ipList.length + this.blackListTab.ipList.length) === 0) {
            c = "delete"
        } else {
            c = "set";
            a.allow_ip = this.whiteListTab.ipList;
            a.deny_ip = this.blackListTab.ipList
        }
        b.push(a);
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.AppPriv.Rule",
            version: 1,
            method: c,
            params: {
                rules: b
            },
            scope: this,
            callback: this.onApplyDone
        })
    },
    onApplyDone: function(c, b, a) {
        this.clearStatusBusy();
        if (!c) {
            this.getMsgBox().alert(this.title, _T("common", "error_system"));
            return
        }
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.CustomColumn", {
    extend: "Ext.grid.Column",
    constructor: function(b) {
        var a = Ext.apply({
            header: _T("app_privilege", "grant_by_ip"),
            name: undefined,
            app_id: undefined,
            ownerGrid: undefined,
            width: 120,
            align: "center",
            renderer: function(h, d, c, i, g, e) {
                var f = c.get("name");
                if (c.get("supportIP") === false) {
                    return '<div class="syno-ux-grid-enable-column-disabled"></div>'
                } else {
                    if (c.get("entity_type") === "user" && (f === "admin" || f === "SynologyCMS" || f === "guest")) {
                        return '<div class="syno-ux-grid-enable-column-disabled"></div>'
                    } else {
                        if (h) {
                            return '<div class="syno-ux-grid-enable-column-checked"></div>'
                        } else {
                            return '<div class="syno-ux-grid-enable-column-unchecked"></div>'
                        }
                    }
                }
            },
            listeners: {
                click: this.onCellClick,
                scope: this
            }
        }, b);
        this.callParent([a])
    },
    onCellClick: function(d, b, f) {
        var c = b.store.getAt(f).get("entity_type");
        var a = b.store.getAt(f).get("entity_name");
        var e = b.store.getAt(f).get("supportIP");
        if (e === false) {
            return
        }
        if (c === "user" && (a === "admin" || a === "SynologyCMS" || a === "guest")) {
            return
        }
        if (!Ext.isFunction(this.ownerGrid.isChanged) || !Ext.isFunction(this.ownerGrid.getWebAPI)) {
            console.log('"isChanged" or "getWebAPI" is missing!')
        }
        if (!Ext.isFunction(this.ownerGrid.isChanged) || !Ext.isFunction(this.ownerGrid.getWebAPI) || !this.ownerGrid.isChanged()) {
            this.launchEditorDialog(d, b, f);
            return
        }
        this.owner.getMsgBox().confirm(this.owner.title, _T("share", "share_save_chg_before_reload"), function(g) {
            if (g !== "yes") {
                return
            }
            this.owner.setStatusBusy({
                text: _T("common", "saving")
            });
            var h = function(l, k, j, i) {
                this.owner.clearStatusBusy();
                if (l) {
                    this.ownerGrid.getStore().commitChanges();
                    this.launchEditorDialog(d, b, f)
                } else {
                    this.getMsgBox().alert(this.title, SYNO.API.Erros.core[k.code] || _T("common", "commfail"))
                }
            };
            this.owner.sendWebAPI({
                compound: {
                    stopwhenerror: true,
                    params: this.ownerGrid.getWebAPI()
                },
                scope: this,
                callback: h
            })
        }, this)
    },
    launchEditorDialog: function(c, a, m) {
        var f = a.store.getAt(m);
        var l = f.get("entity_name");
        var g = f.get("entity_type");
        var h = f.get("app_id");
        var k = [];
        var b = [];
        if (true === f.get("custom")) {
            var d = a.getAppRules();
            var e;
            for (e = 0; e < d.size(); e++) {
                if (l === d[e].entity_name && g === d[e].entity_type && h == d[e].app_id) {
                    k = d[e].allow_ip;
                    b = d[e].deny_ip;
                    break
                }
            }
        }
        var j = new SYNO.SDS.AdminCenter.AppRulePrivileges.RuleEditDialog({
            owner: this.owner,
            module: this,
            entity_name: l,
            entity_type: g,
            app_id: h,
            allow_ip: k,
            deny_ip: b
        });
        j.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.FilterButton", {
    extend: "SYNO.ux.Button",
    constructor: function(c) {
        var d = "filter_";
        var e = "permission_type";
        var a = [{
            checked: true,
            group: e,
            itemId: d + "all",
            text: _T("common", "show_all")
        }, {
            group: e,
            itemId: d + "any",
            text: _T("share", "share_permission_any")
        }, {
            group: e,
            itemId: d + "allow",
            text: _T("app_privilege", "allow_privilege")
        }, {
            group: e,
            itemId: d + "deny",
            text: _T("app_privilege", "deny_privilege")
        }];
        if (c.supportIP) {
            a.push({
                group: e,
                itemId: d + "custom",
                text: _T("app_privilege", "grant_by_ip")
            })
        }
        var b = Ext.apply({
            currentFilter: "all",
            itemIdPrefix: d,
            tooltip: _T("common", "filter_label_text"),
            cls: "syno-share-filter-btn",
            menu: {
                cls: "syno-ux-searchfield-menu",
                items: a,
                defaults: {
                    checked: false
                },
                listeners: {
                    itemclick: this.onItemClick,
                    scope: this
                }
            }
        }, c);
        this.callParent([b])
    },
    onItemClick: function(b, a) {
        this.currentFilter = b.itemId.substr(this.itemIdPrefix.length);
        this.fireEvent("filterChanged", this.currentFilter)
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.DefaultPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(b) {
        var a = {
            title: _T("iscsitrg", "iscsitrg_masking_default"),
            items: [{
                name: "enable",
                xtype: "syno_checkbox",
                boxLabel: _T("app_privilege", "grant_default_privilege")
            }, {
                indent: 1,
                xtype: "syno_displayfield",
                name: "desc",
                value: _T("app_privilege", "grant_default_privilege_desc"),
                hideLabel: true
            }]
        };
        Ext.apply(a, b);
        this.callParent([a])
    },
    initForm: function(d) {
        var a;
        for (a = 0; a < d.size(); a++) {
            var c = d[a];
            if (c.entity_type === "everyone" && c.entity_name === "everyone") {
                if (c.allow_ip.size() === 1 && c.allow_ip[0] === "0.0.0.0" && c.deny_ip.size() === 0) {
                    var b = this.getForm();
                    b.setValues({
                        enable: true
                    })
                }
            }
        }
    },
    isDirty: function() {
        return this.getForm().isDirty()
    },
    getWebAPI: function() {
        var a = [];
        var b = [{
            entity_type: "everyone",
            entity_name: "everyone",
            app_id: this.owner.app_id,
            allow_ip: ["0.0.0.0"]
        }];
        if (true === this.getForm().findField("enable").getValue()) {
            a.push({
                api: "SYNO.Core.AppPriv.Rule",
                version: 1,
                method: "set",
                params: {
                    rules: b
                }
            })
        } else {
            a.push({
                api: "SYNO.Core.AppPriv.Rule",
                version: 1,
                method: "delete",
                params: {
                    rules: b
                }
            })
        }
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.PrivGrid", {
    extend: "SYNO.ux.GridPanel",
    LOCAL_USER_ROLES: [
        ["local_user", _T("share", "share_local_user")]
    ],
    LOCAL_GROUP_ROLES: [
        ["local_group", _T("share", "share_local_group")]
    ],
    DOMAIN_USER_ROLES: [
        ["domain_user", _T("share", "share_domain_user")]
    ],
    DOMAIN_GROUP_ROLES: [
        ["domain_group", _T("share", "share_domain_group")]
    ],
    LDAP_USER_ROLES: [
        ["ldap_user", _T("share", "ldap_user")]
    ],
    LDAP_GROUP_ROLES: [
        ["ldap_group", _T("share", "ldap_group")]
    ],
    constructor: function(d) {
        this.authType = "local";
        this.pageSize = 50;
        this.store = this.createStore(d);
        this.appWin = d.owner;
        this.app_id = d.owner.app_id;
        this.isStoreReady = false;
        this.isNeedRender = true;
        var b = d.entity_type === "user";
        var c = function(i, g) {
            var h = g.get("name");
            return (b && (h === "admin" || h === "SynologyCMS" || h === "guest"))
        };
        var e = function(j, i, g) {
            var h = g.get("name");
            if (b && (h === "admin" || h === "SynologyCMS" || h === "guest")) {
                return '<div class="syno-ux-grid-enable-column-disabled">&nbsp;</div>'
            } else {
                return SYNO.ux.EnableColumn.prototype.renderer(j, i, g)
            }
        };
        this.allowCol = new SYNO.ux.EnableColumn({
            header: _T("app_privilege", "allow_privilege"),
            dataIndex: "allow",
            disableSelectAll: false,
            width: 120,
            align: "center",
            id: "allow",
            isIgnore: c,
            renderer: e
        });
        this.denyCol = new SYNO.ux.EnableColumn({
            header: _T("app_privilege", "deny_privilege"),
            dataIndex: "deny",
            disableSelectAll: false,
            width: 120,
            align: "center",
            id: "deny",
            isIgnore: c,
            renderer: e
        });
        this.advCol = new SYNO.SDS.AdminCenter.AppRulePrivileges.CustomColumn({
            module: d.module,
            owner: d.owner,
            ownerGrid: this,
            dataIndex: "custom",
            disableSelectAll: true,
            width: 120,
            id: "custom",
            hidden: !d.supportIP
        });
        var f = b ? _T("controlpanel", "leaf_user") : _T("controlpanel", "leaf_group");
        var a = Ext.apply({
            module: this,
            title: f,
            header: false,
            border: false,
            height: 404,
            width: 750,
            ds: this.store,
            cm: new Ext.grid.ColumnModel({
                columns: [{
                    id: "name",
                    header: _T("common", "name"),
                    dataIndex: "name",
                    width: 100,
                    scope: this
                }, this.allowCol, this.denyCol, this.advCol]
            }),
            plugins: [this.allowCol, this.denyCol],
            autoExpandColumn: "name",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            tbar: this.configTopToolbar(d),
            bbar: new SYNO.ux.PagingToolbar({
                store: this.store,
                pageSize: this.pageSize,
                displayInfo: true
            })
        }, d);
        this.callParent([a]);
        this.mon(this, "afterrender", this.definePrivGridBehaviors, this);
        this.mon(this.typeFilter, "filterChanged", this.onTypeFilterChange, this)
    },
    definePrivGridBehaviors: function() {
        this.mon(this, "cellclick", this.onGridCellClick, this);
        this.mon(this, "headerclick", function(d, c, b) {
            var a = d.getColumnModel();
            var e = a.getColumnId(c);
            this.onGridHeaderClick.call(this, a.getColumnById(e))
        }, this)
    },
    onTypeFilterChange: function(a) {
        this.store.baseParams.filter_type = a;
        this.store.load({
            params: {
                offset: 0
            }
        })
    },
    restorePermission: function(b, a) {
        var c = b.getChanges();
        if (c.hasOwnProperty(a)) {
            b.set(a, !c[a])
        }
    },
    onGridCellClick: function(c, i, d, h) {
        var a = c.getStore().getAt(i);
        var g = c.getColumnModel().getDataIndex(d);
        var f = function(e) {
            return (e === "allow" || e === "deny")
        };
        var b = function(j, e) {
            if ("allow" !== j) {
                e.set("allow", false);
                c.allowCol.checkSelectAll(c.getStore())
            }
            if ("deny" !== j) {
                e.set("deny", false);
                c.denyCol.checkSelectAll(c.getStore())
            }
            if ("custom" !== j) {
                e.set("custom", false)
            }
        };
        if (f(g)) {
            if (a.get(g) === true) {
                b(g, a)
            } else {
                this.restorePermission(a, "custom")
            }
        }
    },
    onGridHeaderClick: function(a) {
        if (a.box_el) {
            if (a.box_el.hasClass("syno-ux-cb-checked")) {
                if (a.dataIndex !== "allow") {
                    this.allowCol.box_el.removeClass("syno-ux-cb-checked");
                    this.allowCol.onSelectAll()
                }
                if (a.dataIndex !== "deny") {
                    this.denyCol.box_el.removeClass("syno-ux-cb-checked");
                    this.denyCol.onSelectAll()
                }
                this.getStore().each(function(b) {
                    b.set("custom", false)
                }, this)
            } else {
                this.getStore().each(function(b) {
                    this.restorePermission(b, "custom")
                }, this)
            }
        }
    },
    createStore: function(d) {
        var e, c, b, a = 1;
        if (d.entity_type === "user") {
            e = "SYNO.Core.User";
            c = "users";
            b = "user"
        } else {
            e = "SYNO.Core.Group";
            c = "groups";
            b = "group"
        }
        if (d.module._S("version") > 5512) {
            e = "SYNO.Core.AppPriv";
            a = 2
        }
        return new SYNO.API.JsonStore({
            autoDestroy: true,
            remoteSort: true,
            appWindow: d.owner,
            api: e,
            method: "list",
            version: a,
            baseParams: {
                offset: 0,
                limit: this.pageSize,
                type: this.authType,
                app_id: d.owner.app_id,
                filter_type: "all",
                rule_type: b
            },
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onListUGException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            },
            root: c,
            totalProperty: "total",
            fields: ["name", "allow", "deny", "custom"],
            defaultSortable: true,
            scope: this
        })
    },
    onListUGException: function(d, e, f, c, b, a) {
        this.owner.getMsgBox().alert(this.title, SYNO.API.getErrorString(b));
        if (this === this.owner.get("tab").getActiveTab()) {
            this.appWin.clearStatusBusy()
        }
    },
    onBeforeLoad: function(a, b) {
        this.isStoreReady = false;
        this.isNeedRender = true;
        if (this.isChanged()) {
            this.owner.getMsgBox().confirm(this.title, _T("share", "share_save_chg_before_reload"), function(c) {
                if (c === "yes") {
                    this.owner.sendWebAPI({
                        compound: {
                            stopwhenerror: true,
                            params: this.getWebAPI()
                        },
                        scope: this,
                        callback: function(g, e, f, d) {
                            this.owner.clearStatusBusy();
                            if (!g || e.has_fail) {
                                this.owner.getMsgBox().alert(this.title, _T("common", "error_system"))
                            }
                            this.store.commitChanges();
                            this.store.load(b);
                            this.loadRules()
                        }
                    });
                    return true
                } else {
                    this.store.rejectChanges();
                    this.store.load(b)
                }
            }, this);
            return false
        }
        if (this === this.owner.get("tab").getActiveTab()) {
            this.appWin.setStatusBusy()
        }
    },
    onLoad: function(b, a, c) {
        this.isStoreReady = true;
        this.clearBusy()
    },
    clearBusy: function() {
        if (this.isStoreReady && this.owner.isRuleReady && this.isNeedRender) {
            this.renderPrivGrid();
            if (this === this.owner.get("tab").getActiveTab()) {
                this.appWin.clearStatusBusy()
            }
        }
    },
    renderPrivGrid: function() {
        var f = this.store.getCount();
        var g = this.owner.appRules;
        var d, c;
        for (d = 0; d < f; d++) {
            var a = this.store.getAt(d);
            var b = a.get("name");
            a.set("entity_type", this.entity_type);
            a.set("entity_name", b);
            a.set("app_id", this.app_id);
            a.set("allow", false);
            a.set("deny", false);
            a.set("custom", false);
            for (c = 0; c < g.size(); c++) {
                var e = g[c];
                if (e.entity_type === this.entity_type && e.entity_name === b) {
                    if (e.allow_ip.size() === 1 && e.allow_ip[0] === "0.0.0.0" && e.deny_ip.size() === 0) {
                        a.set("allow", true)
                    } else {
                        if (e.allow_ip.size() === 0 && e.deny_ip.size() === 1 && e.deny_ip[0] === "0.0.0.0") {
                            a.set("deny", true)
                        } else {
                            a.set("custom", true)
                        }
                    }
                }
            }
        }
        this.allowCol.checkSelectAll(this.getStore());
        this.denyCol.checkSelectAll(this.getStore());
        this.store.commitChanges();
        this.isNeedRender = false
    },
    configTopToolbar: function(a) {
        var b = new SYNO.ux.Toolbar({
            items: [{
                xtype: "syno_combobox",
                itemId: "roleFilter",
                valueField: "role",
                displayField: "display",
                store: {
                    xtype: "arraystore",
                    autoDestroy: true,
                    fields: ["role", "display"]
                },
                mode: "local",
                triggerAction: "all",
                editable: false,
                forceSelection: true,
                width: 200,
                listeners: {
                    beforeselect: {
                        scope: this,
                        fn: this.onRoleFilterSelect
                    }
                }
            }, "->", {
                xtype: "syno_displayfield",
                value: _T("helptoc", "directory_service_domain") + ": ",
                hidden: true,
                itemId: "domainListLabel"
            }, {
                xtype: "syno_combobox",
                itemId: "domainFilter",
                valueField: "value",
                displayField: "domain",
                store: {
                    xtype: "arraystore",
                    autoDestroy: true,
                    fields: ["domain", "value", "comment"]
                },
                hidden: true,
                resizable: true,
                mode: "local",
                triggerAction: "all",
                editable: false,
                value: "",
                forceSelection: true,
                tpl: '<tpl for="."><div ext:qtip="{comment}" class="x-combo-list-item">{domain}</div></tpl>',
                listeners: {
                    beforeselect: {
                        scope: this,
                        fn: this.onDomainFilterSelect
                    }
                }
            }, this.nameFilter = new SYNO.ux.TextFilter({
                conStyle: "filter",
                itemId: "search",
                queryAction: "list",
                enumAction: "list",
                emptyText: _T("user", "search_user"),
                store: this.store,
                queryParam: "substr",
                pageSize: this.pageSize
            }), this.typeFilter = new SYNO.SDS.AdminCenter.AppRulePrivileges.FilterButton({
                style: "margin-left: 6px",
                supportIP: a.supportIP,
                hidden: (a.module._S("version") <= 5512)
            })]
        });
        this.roleFilter = b.getComponent("roleFilter");
        this.domainFilter = b.getComponent("domainFilter");
        this.domainListLabel = b.getComponent("domainListLabel");
        return b
    },
    isSupport: function(c) {
        var b = this.owner.grant_type;
        var a;
        for (a = 0; a < b.size(); a++) {
            if (c === b[a]) {
                return true
            }
        }
        return false
    },
    onActivate: function() {
        var a = this.entity_type === "user";
        var b = [];
        this.roleFilter.getStore().loadData(a ? this.LOCAL_USER_ROLES : this.LOCAL_GROUP_ROLES);
        if (this.owner.enable_ldap && this.isSupport("ldap")) {
            this.roleFilter.getStore().loadData((a ? this.LDAP_USER_ROLES : this.LDAP_GROUP_ROLES), true)
        }
        if (this.owner.enable_domain && this.owner.join_domain && this.isSupport("domain")) {
            this.roleFilter.getStore().loadData((a ? this.DOMAIN_USER_ROLES : this.DOMAIN_GROUP_ROLES), true);
            this.owner.domain_list.each(function(c) {
                if (typeof c === "object") {
                    b.push(c)
                } else {
                    b.push([c, c, c])
                }
            });
            this.domainFilter.getStore().loadData(b);
            if (!this.domainFilter.getValue()) {
                this.domainFilter.setValue(b[0][1] || "")
            }
            this.store.baseParams.domain_name = this.domainFilter.getValue();
            if (1 === this.owner.manage_mode) {
                this.domainListLabel.setValue(_T("directory_service", "organizational_unit") + ": ")
            } else {
                this.domainListLabel.setValue(_T("helptoc", "directory_service_domain") + ": ")
            }
        }
        this.showDomainFilter(false);
        this.roleFilter.setValue(a ? "local_user" : "local_group");
        this.store.load()
    },
    onRoleFilterSelect: function(b, a) {
        var d = a.data.role;
        var c = (d.split("_"))[0];
        this.prevRole = b.getValue();
        if (c === "domain") {
            this.showDomainFilter(true)
        } else {
            this.showDomainFilter(false)
        }
        this.authType = this.store.baseParams.type = c;
        this.store.load({
            params: {
                offset: 0
            }
        })
    },
    onDomainFilterSelect: function(b, a) {
        this.store.baseParams.domain_name = a.data.value;
        this.store.load({
            params: {
                offset: 0
            }
        })
    },
    showDomainFilter: function(a) {
        this.domainListLabel.setVisible(a);
        this.domainFilter.setVisible(a)
    },
    isChanged: function() {
        return (this.store.getModifiedRecords().length !== 0)
    },
    getAppRules: function() {
        return this.owner.isRuleReady ? this.owner.appRules : []
    },
    loadRules: function() {
        this.isNeedRender = true;
        this.owner.loadRules()
    },
    getWebAPI: function() {
        var d = [],
            g = [];
        var h = this.store.getModifiedRecords();
        var b = h.size();
        var c;
        var e = [];
        var j = function(i) {
            return (!i.get("allow") && !i.get("deny") && !i.get("custom"))
        };
        if (b === 0) {
            return e
        }
        for (c = 0; c < b; c++) {
            var f = h[c];
            var a = {
                entity_type: f.get("entity_type"),
                entity_name: f.get("entity_name"),
                app_id: f.get("app_id")
            };
            if (j(f)) {
                d.push(a)
            } else {
                if (f.get("allow")) {
                    a.allow_ip = ["0.0.0.0"]
                } else {
                    a.deny_ip = ["0.0.0.0"]
                }
                g.push(a)
            }
        }
        if (d.size() > 0) {
            e.push({
                api: "SYNO.Core.AppPriv.Rule",
                version: 1,
                method: "delete",
                params: {
                    rules: d
                }
            })
        }
        if (g.size() > 0) {
            e.push({
                api: "SYNO.Core.AppPriv.Rule",
                version: 1,
                method: "set",
                params: {
                    rules: g
                }
            })
        }
        return e
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.EditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        this.appWin = b.appWin;
        this.app_id = b.app_id;
        this.isRuleReady = false;
        this.userPanel = new SYNO.SDS.AdminCenter.AppRulePrivileges.PrivGrid({
            entity_type: "user",
            module: b.module,
            owner: this,
            itemId: "userprivgrid",
            supportIP: b.supportIP
        });
        this.groupPanel = new SYNO.SDS.AdminCenter.AppRulePrivileges.PrivGrid({
            entity_type: "group",
            module: b.module,
            owner: this,
            itemId: "groupprivgrid",
            supportIP: b.supportIP
        });
        this.defaultPanel = new SYNO.SDS.AdminCenter.AppRulePrivileges.DefaultPanel({
            module: b.module,
            owner: this,
            itemId: "defaultpanel"
        });
        var a = Ext.apply({
            width: 800,
            height: 470,
            minWidth: 550,
            minHeight: 370,
            layout: "fit",
            title: b.appName,
            items: [{
                xtype: "syno_tabpanel",
                plain: true,
                itemId: "tab",
                activeTab: 0,
                items: [this.userPanel, this.groupPanel, this.defaultPanel]
            }],
            buttons: [{
                text: _T("common", "apply"),
                scope: this,
                btnStyle: "blue",
                handler: this.saveAppRulePriv
            }, {
                text: _T("common", "cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, b);
        this.callParent([a]);
        if (!b.supportIP) {
            this.groupPanel.disable();
            this.defaultPanel.disable()
        }
        this.loadRules();
        this.userPanel.onActivate();
        this.groupPanel.onActivate()
    },
    loadRules: function() {
        this.isRuleReady = false;
        this.sendWebAPI({
            api: "SYNO.Core.AppPriv.Rule",
            version: 1,
            method: "list",
            params: {
                app_id: this.app_id
            },
            scope: this,
            callback: function(c, b, a) {
                if (!c) {
                    this.appWin.getMsgBox().alert(this.title, _T("common", "error_system"));
                    return
                }
                this.appRules = b.rules;
                this.isRuleReady = true;
                this.userPanel.clearBusy();
                this.groupPanel.clearBusy();
                this.defaultPanel.initForm(b.rules)
            }
        })
    },
    isChanged: function() {
        return this.userPanel.isChanged() || this.groupPanel.isChanged() || this.defaultPanel.isDirty()
    },
    onCancel: function() {
        if (this.isChanged()) {
            this.getMsgBox().confirm(this.title, _T("common", "confirm_lostchange"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        } else {
            this.close()
        }
    },
    saveAppRulePriv: function() {
        if (!this.isChanged()) {
            this.close();
            return
        }
        this.onSaveAppRulePriv()
    },
    onSaveAppRulePriv: function() {
        this.setStatusBusy();
        var a = [];
        if (this.userPanel.isChanged()) {
            a = a.concat(this.userPanel.getWebAPI())
        }
        if (this.groupPanel.isChanged()) {
            a = a.concat(this.groupPanel.getWebAPI())
        }
        if (this.defaultPanel.isDirty()) {
            a = a.concat(this.defaultPanel.getWebAPI())
        }
        this.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: a
            },
            scope: this,
            callback: this.saveAppRulePrivDone
        })
    },
    saveAppRulePrivDone: function(d, b, c, a) {
        this.clearStatusBusy();
        if (!d || b.has_fail) {
            this.getMsgBox().alert(this.title, _T("common", "error_system"));
            return
        }
        this.close()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.AppGrid", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 20,
    constructor: function(b) {
        this.actionEdit = new Ext.Action({
            text: _T("common", "alt_edit"),
            itemId: "edit",
            scope: this,
            handler: function() {
                var e = this.getSelectionModel().getSelected();
                if (e) {
                    this.launchEditDialog(e)
                }
            }
        });
        var c = new Ext.Action({
            text: _WFT("acl_editor", "permission_viewer"),
            itemId: "preview",
            scope: this,
            handler: function() {
                this.launchPreviewDialog()
            }
        });
        var d = new Ext.Action({
            text: _T("iscsitrg", "iscsitrg_masking_default"),
            itemId: "default",
            scope: this,
            hidden: true,
            handler: function() {
                this.launchEditDefaultDialog()
            }
        });
        this.tbar = new Ext.Toolbar({
            defaultType: "syno_button",
            items: [this.actionEdit, c, d]
        });
        this.store = new SYNO.API.JsonStore({
            api: "SYNO.Core.AppPriv.App",
            method: "list",
            baseParams: {
                offset: 0,
                limit: this.pageSize
            },
            version: 2,
            appWindow: b.module.appWin,
            autoDestroy: true,
            root: "applications",
            totalProperty: "total",
            fields: ["name", "app_id", "grant_type", "supportIP"],
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onListAppException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            }
        });
        var a = Ext.apply({
            title: "Privileges",
            header: false,
            border: false,
            ds: this.store,
            cm: new Ext.grid.ColumnModel([{
                id: "application",
                header: _T("user", "user_application"),
                dataIndex: "name",
                width: 200,
                menuDisabled: true,
                scope: this
            }]),
            autoExpandColumn: "application",
            enableHdMenu: false,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            listeners: {
                scope: this,
                activate: function() {
                    this.store.load()
                },
                rowdblclick: {
                    scope: this,
                    fn: function(f, h, g) {
                        var e = this.store.getAt(h);
                        if (e) {
                            this.launchEditDialog(e)
                        }
                    }
                }
            },
            bbar: new SYNO.ux.PagingToolbar({
                store: this.store,
                pageSize: this.pageSize,
                displayInfo: true
            })
        }, b);
        this.callParent([a])
    },
    onListAppException: function(d, e, f, c, b, a) {
        this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(b));
        this.module.appWin.clearStatusBusy()
    },
    onBeforeLoad: function(a, b) {
        this.module.appWin.setStatusBusy()
    },
    onLoad: function(b, a, c) {
        this.store.sort("name", "ASC");
        this.module.appWin.clearStatusBusy();
        this.getSelectionModel().selectFirstRow()
    },
    launchEditDialog: function(b) {
        var a = new SYNO.SDS.AdminCenter.AppRulePrivileges.EditDialog({
            owner: this.module.appWin,
            module: this,
            appName: b.get("name"),
            app_id: b.get("app_id"),
            grant_type: b.get("grant_type"),
            supportIP: b.get("supportIP"),
            enable_domain: this.module.enable_domain,
            enable_ldap: this.module.enable_ldap,
            join_domain: this.module.join_domain,
            domain_list: this.module.domain_list,
            manage_mode: this.module.manage_mode
        });
        a.open()
    },
    launchPreviewDialog: function() {
        var a = new SYNO.SDS.AdminCenter.AppRulePrivileges.PreviewDialog({
            owner: this.module.appWin,
            module: this
        });
        a.open()
    },
    launchEditDefaultDialog: function() {
        var a = new SYNO.SDS.AdminCenter.AppRulePrivileges.DefaultPrivDialog({
            owner: this.module.appWin,
            module: this
        });
        a.open()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppRulePrivileges.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    enable_domain: false,
    enable_ldap: false,
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.AppRulePrivileges.AppGrid({
            module: this,
            title: _T("tree", "leaf_appprivilege")
        })
    },
    loadTypeStatus: function() {
        var b = [{
            api: "SYNO.Core.Directory.Domain",
            version: 1,
            method: "get"
        }, {
            api: "SYNO.Core.Directory.Domain",
            version: 1,
            method: "test_dc"
        }, {
            api: "SYNO.Core.Directory.LDAP",
            version: 1,
            method: "get"
        }];
        if (this.appWin._D("supportdomain") === "yes") {
            var a = {
                api: "SYNO.Core.Directory.Domain",
                method: "get_domain_list",
                version: 1
            };
            if (_S("version") > 4947) {
                a.version = 2
            }
            b.push(a)
        }
        this.appWin.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: b
            },
            scope: this,
            callback: this.loadTypeStatusHandler
        })
    },
    loadTypeStatusHandler: function(d, b, c, a) {
        if (this.appWin.isDestroyed) {
            return
        }
        if (!d || b.has_fail) {
            this.appWin.getMsgBox().alert(this.title, _T("common", "error_system"));
            return
        }
        this.enable_domain = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Directory.Domain", "get", "enable_domain");
        this.enable_ldap = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Directory.LDAP", "get", "enable_client");
        this.join_domain = SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Directory.Domain", "test_dc", "test_join_success");
        this.domain_list = this.appWin._D("supportdomain") === "yes" ? SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Directory.Domain", "get_domain_list", "domain_list") : false;
        this.manage_mode = this.appWin._D("supportdomain") === "yes" ? SYNO.API.Util.GetValByAPI(b, "SYNO.Core.Directory.Domain", "get", "manage_mode") : false
    },
    getPanel: function() {
        return this.panel
    },
    getHelpParam: function() {
        return "AdminCenter/application_appprivilege.html"
    },
    activate: function() {
        this.loadTypeStatus()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPortal", {
    statics: {
        defaultInputWidth: 100,
        getLocalAppDfValueMap: function() {
            var d = {};
            var a = [];
            a = SYNO.SDS.Utils.listAllowAltPortApp();
            for (var b = 0; b < a.length; b++) {
                var c = {};
                c.alias = SYNO.SDS.Config.FnMap[a[b]].config.defaultAlias;
                c.http = SYNO.SDS.Config.FnMap[a[b]].config.defaultHttp;
                c.https = SYNO.SDS.Config.FnMap[a[b]].config.defaultHttps;
                d[a[b]] = c
            }
            return d
        },
        fillRemoteAppDfValueMap: function(a) {
            var f = {};
            for (var b = 0; b < a.length; b++) {
                var c = null;
                try {
                    c = a[b].additional.default_setting
                } catch (d) {
                    continue
                }
                f[a[b].id] = {
                    alias: c.alias,
                    http: c.http_port,
                    https: c.https_port
                }
            }
            return f
        },
        isReservedPort: function(d, a, b) {
            var c = false;
            Ext.iterate(d, function(e, f, g) {
                if (e === a) {
                    return true
                }
                if (parseInt(f.http, 10) === b || parseInt(f.https, 10) === b) {
                    c = true;
                    return false
                }
            }, this);
            return c
        },
        isReservedAlias: function(d, a, b) {
            var c = false;
            Ext.iterate(d, function(e, f, g) {
                if (e === a) {
                    return true
                }
                if (f.alias === b) {
                    c = true;
                    return false
                }
            }, this);
            return c
        },
        getPortNameByServiceName: function(a) {
            var b = "";
            if ("SYNO.SDS.App.FileStation3.Instance" === a) {
                b = "cfs"
            } else {
                if ("SYNO.SDS.SurveillanceStation" === a) {
                    b = "custsurveillance"
                }
            }
            return b
        },
        LinkMaker: function(d, c, f, b, a) {
            var e = Ext.isEmpty(a) ? null : parseInt(a, 10);
            return function(h, j, p, i, k, o) {
                if (!k) {
                    return null
                }
                var n = Ext.util.Format.htmlEncode(k);
                var q;
                var g;
                var m, l;
                if (j) {
                    q = f ? "http:" : window.location.protocol;
                    if (o) {
                        var r = Ext.isNumber(e) ? String.format(":{0}", e) : "";
                        g = String.format("{0}//{1}{2}/{3}/", q, b, r, n)
                    } else {
                        q = c ? q : "http:";
                        g = String.format("{0}//{1}/{2}/", q, b, n)
                    }
                } else {
                    q = (p) ? "http" : "https";
                    g = String.format("{0}://{1}:{2}", q, b, n)
                }
                l = (i) ? g : n;
                if (h) {
                    if ((!j && !p && !d) || (!j && SYNO.SDS.QuickConnect.Utils.isInTunnel())) {
                        m = String.format('<span style="color:#404040 ">{0}</span>', l)
                    } else {
                        m = String.format('<a href="{0}" target="_blank">{1}</a>', g, l)
                    }
                } else {
                    m = l
                }
                return m
            }
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPortal.EditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.appWin = a.appWin;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var f = a.module.getSelectionModel().getSelected();
        var e = f.get("id");
        var g = Ext.apply({
            dialog: this,
            module: this.module,
            appWin: this.appWin,
            buttons: undefined
        }, a);
        var b = {
            api: "SYNO.Core.AppPortal.Image",
            method: "get",
            version: 1,
            params: {
                id: e
            }
        };
        var d = {
            api: "SYNO.Core.AppPortal.Style",
            methods: {
                set: "set",
                get: "get"
            },
            params: {
                get: {
                    id: e
                },
                set: {
                    id: e
                }
            },
            version: 1
        };
        var c = {
            width: 620,
            height: 540,
            autoScroll: false,
            layout: "fit",
            title: _T("app_port_alias", "desc_edit_port_alias_rules"),
            items: [{
                xtype: "syno_tabpanel",
                itemId: "tab",
                activeTab: 0,
                items: [this.editForm = new SYNO.SDS.AdminCenter.AppPortal.EditForm(Ext.apply({
                    itemId: "general",
                    title: _T("common", "general")
                }, g)), this.loginStyleForm = new SYNO.SDS.AdminCenter.LoginStyle.Form(Ext.apply({
                    itemId: "loginstyle",
                    title: _T("dsmoption", "login_style_label"),
                    webapi: d,
                    imageWebapi: b,
                    appName: e
                }, g))],
                listeners: {
                    scope: this,
                    tabchange: this.onTabChange
                }
            }],
            buttons: [this.previewBtn = new SYNO.ux.Button({
                disabled: this.IsAllowRelay(),
                hidden: true,
                btnStyle: "grey",
                text: _T("dsmoption", "login_preview"),
                scope: this,
                handler: this.onPreviewClick
            }), {
                text: _T("common", "ok"),
                btnStyle: "blue",
                scope: this,
                handler: this.onOkClick
            }, {
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.onCancelClick
            }]
        };
        this.loginStyleForm.mon(this.loginStyleForm, "activate", this.onLoginStyleFormActivate, this);
        this.loginStyleForm.processReturnData = function(j, i, h) {
            SYNO.SDS.AdminCenter.LoginStyle.Form.prototype.processReturnData.apply(this, arguments);
            this.dialog.clearStatusBusy();
            if (!this.hasFail && "set" === j && Ext.isFunction(this.afterSetReturn)) {
                this.afterSetReturn()
            }
        };
        this.loginStyleForm.setStatus = function() {
            if (this.dialog.rendered) {
                this.dialog.setStatus.apply(this.dialog, arguments)
            }
        };
        Ext.apply(c, a);
        return c
    },
    afterShow: function() {
        this.editForm.fillFormValues();
        this.editForm.setAliasGroupDisable(false);
        this.editForm.setHttpGroupDisable(false);
        this.editForm.setHttpsGroupDisable(false);
        this.callParent()
    },
    submitLoginStyleForm: function() {
        this.setStatusBusy({
            text: _T("common", "loading"),
            iconCls: "syno-ux-statusbar-loading"
        });
        this.loginStyleForm.afterSetReturn = function() {
            if (this.dialog.editForm.isDirty()) {
                this.dialog.submitEditForm()
            } else {
                this.dialog.close()
            }
        };
        this.loginStyleForm.applyHandler()
    },
    submitEditForm: function() {
        this.setStatusBusy({
            text: _T("common", "loading"),
            iconCls: "syno-ux-statusbar-loading"
        });
        this.editForm.afterSetReturn = function() {
            this.dialog.close()
        };
        this.editForm.applyHandler()
    },
    onOkClick: function() {
        if (this.editForm.isDirty() && !this.editForm.getForm().isValid()) {
            this.getComponent("tab").setActiveTab(this.editForm);
            this.setStatusError({
                text: _T("common", "forminvalid")
            });
            return
        }
        if (this.loginStyleForm.isDirty() && !this.loginStyleForm.getForm().isValid()) {
            this.getComponent("tab").setActiveTab(this.loginStyleForm);
            this.setStatusError({
                text: _T("common", "forminvalid")
            });
            return
        }
        if (this.loginStyleForm.isDirty()) {
            this.submitLoginStyleForm()
        } else {
            if (this.editForm.isDirty()) {
                this.submitEditForm()
            } else {
                this.close()
            }
        }
    },
    onCancelClick: function() {
        this.close()
    },
    onPreviewClick: function() {
        this.loginStyleForm.onPreview()
    },
    onLoginStyleFormActivate: function() {
        this.loginStyleForm.loadForm()
    },
    onTabChange: function(a, b) {
        if (b.itemId === "loginstyle") {
            this.previewBtn.show()
        } else {
            this.previewBtn.hide()
        }
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPortal.EditForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.store = a.store;
        this.appDfValueMap = a.appDfValueMap;
        this.httpsEnable = a.httpsEnable;
        this.httpsUserEnable = a.httpsUserEnable;
        this.linkMaker = a.module.linkMaker;
        var d = a.module.getSelectionModel().getSelected();
        this.serviceName = d.get("id");
        this.displayName = d.get("display_name");
        this.origAlias = d.get("alias");
        this.origHttpPort = d.get("http_port");
        this.origHttpsPort = d.get("https_port");
        this.origEnableRedirect = d.get("enable_redirect");
        var c = this.aliasItems();
        c.push.apply(c, this.httpItems());
        c.push.apply(c, this.httpsItems());
        var b = {
            trackResetOnLoad: true,
            border: false,
            webapi: this.webapiObj(),
            items: c
        };
        this.callParent([Ext.apply(b, a)]);
        this.toProcessAPI = {
            api: "SYNO.Core.AppPortal",
            method: "set",
            version: 1
        }
    },
    aliasItems: function() {
        return [{
            xtype: "syno_displayfield",
            value: _T("app_port_alias", "desc_appportalias")
        }, {
            xtype: "syno_displayfield",
            value: ""
        }, {
            xtype: "syno_checkbox",
            name: "aliasCheck",
            scope: this,
            checked: !Ext.isEmpty(this.origAlias),
            boxLabel: _T("app_port_alias", "desc_enable_alias"),
            id: this.aliasCheckId = Ext.id(),
            handler: this.onCheckAlias
        }, {
            xtype: "syno_textfield",
            name: "alias",
            indent: 1,
            allowBlank: false,
            vtype: "aliasname",
            width: SYNO.SDS.AdminCenter.AppPortal.defaultInputWidth * 2,
            fieldLabel: _T("app_port_alias", "desc_alias"),
            id: this.textAliasId = Ext.id(),
            validator: this.validateAlias.createDelegate(this)
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            name: "alias_linktip"
        }, {
            xtype: "syno_compositefield",
            name: "hiddenComposite",
            hideLabel: true,
            items: [{
                xtype: "syno_checkbox",
                indent: 1,
                name: "enable_redirect",
                checked: (this.origEnableRedirect) ? true : false,
                id: this.enableRedirectCheckId = Ext.id(),
                disabled: Ext.isEmpty(this.origAlias),
                boxLabel: _T("app_port_alias", "redirect_from") + _T("common", "colon"),
                scope: this
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                name: "aliasRedirect_linktip",
                cls: "syno-appportalias-redirect-tip"
            }]
        }]
    },
    httpItems: function() {
        return [{
            xtype: "syno_checkbox",
            name: "httpCheck",
            scope: this,
            checked: Ext.isNumber(this.origHttpPort),
            boxLabel: _T("app_port_alias", "desc_enable_http"),
            id: this.httpCheckId = Ext.id(),
            handler: this.onCheckHttp
        }, {
            xtype: "syno_numberfield",
            name: "http_port",
            indent: 1,
            allowBlank: false,
            width: SYNO.SDS.AdminCenter.AppPortal.defaultInputWidth,
            vtype: "port",
            maxlength: 5,
            fieldLabel: _T("app_port_alias", "desc_port"),
            id: this.httpPortId = Ext.id(),
            validator: this.validateHttpPort.createDelegate(this)
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            hidden: SYNO.SDS.QuickConnect.Utils.isInTunnel(),
            name: "http_linktip"
        }]
    },
    httpsItems: function() {
        return [{
            xtype: "syno_checkbox",
            name: "httpsCheck",
            checked: Ext.isNumber(this.origHttpsPort),
            scope: this,
            boxLabel: _T("app_port_alias", "desc_enable_https"),
            id: this.httpsCheckId = Ext.id(),
            handler: this.onCheckHttps
        }, {
            xtype: "syno_numberfield",
            name: "https_port",
            indent: 1,
            allowBlank: false,
            width: SYNO.SDS.AdminCenter.AppPortal.defaultInputWidth,
            vtype: "port",
            maxlength: 5,
            fieldLabel: _T("app_port_alias", "desc_port"),
            id: this.httpsPortId = Ext.id(),
            validator: this.validateHttpsPort.createDelegate(this)
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            hidden: SYNO.SDS.QuickConnect.Utils.isInTunnel(),
            name: "https_linktip"
        }]
    },
    webapiObj: function() {
        return {
            api: "SYNO.Core.AppPortal",
            methods: {
                set: "set",
                get: "get"
            },
            params: {
                get: {
                    id: this.serviceName
                },
                set: {
                    id: this.serviceName
                }
            },
            version: 1
        }
    },
    processParams: function(c, b) {
        if ("get" === c) {
            return b
        }
        var a = this;
        b.each(function(d) {
            if (SYNO.ux.Utils.checkApiConsistency(d, a.toProcessAPI)) {
                d.params = a.getSetParams()
            }
        });
        a = null;
        return b
    },
    processReturnData: function(g, d, c) {
        this.dialog.clearStatusBusy();
        this.callParent(arguments);
        if ("set" !== g || !Ext.isBoolean(d.has_fail) || d.has_fail) {
            this.hasFail = true;
            return
        }
        var f = false;
        var b = {
            api: "SYNO.Core.AppPortal",
            method: "set",
            version: 1
        };
        Ext.each(d.result, function(h) {
            if (SYNO.ux.Utils.checkApiConsistency(h, b) && Ext.isObject(h.data)) {
                f = h.data.restart_httpd
            }
        }, this);
        var a = this.module.loadData.createDelegate(this.module);
        if (f) {
            var e = SYNO.SDS.AdminCenter.Utils.WaitHttpdRestart(this.module.appWin, a);
            e()
        } else {
            a()
        }
        if (Ext.isFunction(this.afterSetReturn)) {
            this.afterSetReturn()
        }
    },
    onApiSuccess: function(d, b, a) {
        if ("set" === d) {
            if (!Ext.isBoolean(b.has_fail) || !b.has_fail) {
                this.hasFail = false;
                this.dialog.setStatusOK()
            } else {
                this.hasFail = true;
                var c = SYNO.API.getErrorString(b);
                this.dialog.clearStatusBusy();
                this.dialog.setStatusError({
                    text: c
                });
                return
            }
        }
        this.processReturnData(d, b, a)
    },
    getDefaultAlias: function() {
        if (!Ext.isObject(this.appDfValueMap) || Ext.isEmpty(this.appDfValueMap[this.serviceName])) {
            return ""
        }
        return this.appDfValueMap[this.serviceName].alias
    },
    getDefaultHttpPort: function() {
        if (!Ext.isObject(this.appDfValueMap) || Ext.isEmpty(this.appDfValueMap[this.serviceName])) {
            return ""
        }
        return parseInt(this.appDfValueMap[this.serviceName].http, 10)
    },
    getDefaultHttpsPort: function() {
        if (!Ext.isObject(this.appDfValueMap) || Ext.isEmpty(this.appDfValueMap[this.serviceName])) {
            return ""
        }
        return parseInt(this.appDfValueMap[this.serviceName].https, 10)
    },
    fillFormValues: function() {
        var d = this.getForm();
        var a = Ext.isEmpty(this.origAlias) ? this.getDefaultAlias() : this.origAlias;
        d.findField("alias").setValue(a);
        var b = Ext.isNumber(this.origHttpPort) ? this.origHttpPort : this.getDefaultHttpPort();
        d.findField("http_port").setValue(b);
        var c = Ext.isNumber(this.origHttpsPort) ? this.origHttpsPort : this.getDefaultHttpsPort();
        d.findField("https_port").setValue(c);
        var f = _T("service", "service_file_customized_tip") + _T("common", "colon") + " ";
        var e;
        var g = !Ext.isEmpty(this.origAlias);
        if (g) {
            e = {};
            e.linkTip = f + this.linkMaker(true, true, false, true, this.origAlias, true);
            e.redirect_linkTip = this.linkMaker(this.origEnableRedirect, true, false, true, this.origAlias, false)
        }
        this.triggerAlias(g, g, e);
        if (Ext.isNumber(this.origHttpPort)) {
            e = f + this.linkMaker(true, false, true, true, this.origHttpPort, true);
            this.triggerAltPort(false, true, true, e)
        }
        if (Ext.isNumber(this.origHttpsPort) && this.httpsEnable) {
            e = f + this.linkMaker(true, false, false, true, this.origHttpsPort, true);
            this.triggerAltPort(true, true, true, e)
        }
    },
    triggerAlias: function(a, b, d) {
        var c = this.getForm();
        c.findField("alias").setDisabled(!a);
        c.findField("enable_redirect").setDisabled(!(a && b));
        if (b) {
            c.findField("alias_linktip").setValue(d.linkTip);
            c.findField("aliasRedirect_linktip").setValue(d.redirect_linkTip)
        }
        SYNO.ux.Utils.displayFormField(c, "alias_linktip", a && b);
        SYNO.ux.Utils.displayFormField(c, "enable_redirect", a && b);
        SYNO.ux.Utils.displayFormField(c, "aliasRedirect_linktip", a && b)
    },
    triggerAltPort: function(h, a, c, g) {
        var f = this.getForm();
        var d = h ? "https_port" : "http_port";
        var e = h ? "https_linktip" : "http_linktip";
        var b = f.findField(e);
        f.findField(d).setDisabled(!a);
        if (c) {
            b.setValue(g)
        }
        SYNO.ux.Utils.displayFormField(f, e, a && c)
    },
    getAliasLinkTip: function(a) {
        var b = this.getForm();
        var d = {};
        if (b.findField("aliasCheck").getValue()) {
            var c = _T("service", "service_file_customized_tip") + _T("common", "colon") + " ";
            var f = (a !== this.origAlias);
            var e = b.findField("enable_redirect").getValue() && this.origEnableRedirect;
            d.linkTip = c + this.linkMaker(!f, true, false, true, a, true);
            d.redirect_linkTip = this.linkMaker(!f && e, true, false, true, a, false)
        }
        return d
    },
    getHttpLinkTip: function(a) {
        var b = this.getForm();
        var d = "";
        if (b.findField("httpCheck").getValue()) {
            var c = _T("service", "service_file_customized_tip") + _T("common", "colon") + " ";
            var e = (a !== this.origHttpPort);
            d = c + this.linkMaker(!e, false, true, true, a, true)
        }
        return d
    },
    getHttpsLinkTip: function(d) {
        var a = this.getForm();
        var c = "";
        if (a.findField("httpsCheck").getValue()) {
            var b = _T("service", "service_file_customized_tip") + _T("common", "colon") + " ";
            var e = (d !== this.origHttpsPort);
            c = b + this.linkMaker(!e, false, false, true, d, true)
        }
        return c
    },
    validateAlias: function(c) {
        var b = false;
        var d = this.getForm();
        var a = d.findField("aliasCheck").getValue();
        if (Ext.isEmpty(c)) {
            this.triggerAlias(true, false);
            return true
        }
        var e = this.getAliasLinkTip(c);
        this.triggerAlias(true, true, e);
        if (SYNO.SDS.AdminCenter.AppPortal.isReservedAlias(this.appDfValueMap, this.serviceName, c)) {
            return _T("app_port_alias", "err_alias_refused")
        }
        this.store.each(function(f) {
            if (a && this.origAlias !== c && f.data.alias === c) {
                b = true;
                return false
            }
        }, this);
        if (b) {
            return _T("app_port_alias", "err_alias_used")
        }
        return true
    },
    validateHttpPort: function(b) {
        var h = false;
        var a = this.getForm();
        var e = a.findField("httpsCheck").getValue();
        var d = a.findField("httpCheck").getValue();
        var g = Ext.isEmpty(b) ? 0 : parseInt(b, 10);
        if (!g) {
            this.triggerAltPort(false, true, false);
            return true
        }
        var i = this.getHttpLinkTip(g);
        this.triggerAltPort(false, true, true, i);
        if (d && this.origHttpPort !== g) {
            var c = a.findField("https_port").getValue();
            if (e && c === g) {
                return _T("app_port_alias", "err_port_dup")
            }
            var f = SYNO.SDS.AdminCenter.AppPortal.getPortNameByServiceName(this.serviceName);
            if (SYNO.SDS.AdminCenter.AppPortal.isReservedPort(this.appDfValueMap, this.serviceName, g)) {
                return _T("app_port_alias", "err_port_reserved")
            }
            if (SYNO.SDS.Utils.isReservedPort(f, g, g)) {
                return _T("app_port_alias", "err_port_reserved")
            }
            if (SYNO.SDS.Utils.isBrowserReservedPort(g, g)) {
                return _T("common", "err_browser_reserved_ports")
            }
            this.store.each(function(j) {
                if (j.data.http_port === g || j.data.https_port === g) {
                    h = true;
                    return false
                }
            }, this);
            if (h) {
                return _T("app_port_alias", "err_port_used")
            }
        }
        return true
    },
    validateHttpsPort: function(b) {
        var f = false;
        var a = this.getForm();
        var d = a.findField("httpsCheck").getValue();
        var c = a.findField("httpCheck").getValue();
        var i = Ext.isEmpty(b) ? 0 : parseInt(b, 10);
        if (!i) {
            this.triggerAltPort(true, true, false);
            return true
        }
        var g = this.getHttpsLinkTip(i);
        this.triggerAltPort(true, true, true, g);
        if (d && this.origHttpsPort !== i) {
            var h = a.findField("http_port").getValue();
            if (c && h === i) {
                return _T("app_port_alias", "err_port_dup")
            }
            var e = SYNO.SDS.AdminCenter.AppPortal.getPortNameByServiceName(this.serviceName);
            if (SYNO.SDS.AdminCenter.AppPortal.isReservedPort(this.appDfValueMap, this.serviceName, i)) {
                return _T("app_port_alias", "err_port_reserved")
            }
            if (SYNO.SDS.Utils.isReservedPort(e, i, i)) {
                return _T("app_port_alias", "err_port_reserved")
            }
            if (SYNO.SDS.Utils.isBrowserReservedPort(i, i)) {
                return _T("common", "err_browser_reserved_ports")
            }
            this.store.each(function(j) {
                if (j.data.http_port === i || j.data.https_port === i) {
                    f = true;
                    return false
                }
            }, this);
            if (f) {
                return _T("app_port_alias", "err_port_used")
            }
        }
        return true
    },
    setAliasGroupDisable: function(a) {
        Ext.getCmp(this.aliasCheckId).setDisabled(a);
        Ext.getCmp(this.textAliasId).setDisabled(!Ext.getCmp(this.aliasCheckId).getValue())
    },
    setHttpGroupDisable: function(a) {
        Ext.getCmp(this.httpCheckId).setDisabled(a);
        Ext.getCmp(this.httpPortId).setDisabled(!Ext.getCmp(this.httpCheckId).getValue())
    },
    setHttpsGroupDisable: function(a) {
        Ext.getCmp(this.httpsCheckId).setDisabled(a);
        Ext.getCmp(this.httpsPortId).setDisabled(!Ext.getCmp(this.httpsCheckId).getValue())
    },
    onCheckAlias: function(e, c) {
        if (!c) {
            this.triggerAlias(false, false)
        } else {
            var b = this.getForm().findField("alias").getValue();
            var a = !Ext.isEmpty(b);
            var d = {};
            if (a) {
                d = this.getAliasLinkTip(b)
            }
            this.triggerAlias(true, a, d);
            this.getForm().findField("hiddenComposite").doLayout()
        }
        this.doLayout()
    },
    onCheckHttp: function(e, c) {
        if (!c) {
            this.triggerAltPort(false, false, false)
        } else {
            var b = this.getForm().findField("http_port").getValue();
            var a = Ext.isNumber(b);
            var d = "";
            if (a) {
                d = this.getHttpLinkTip(b)
            }
            this.triggerAltPort(false, true, a, d)
        }
        this.doLayout()
    },
    onCheckHttps: function(e, c) {
        if (!c) {
            this.triggerAltPort(true, false, false)
        } else {
            var a = this.getForm().findField("https_port").getValue();
            var b = Ext.isNumber(a);
            var d = "";
            if (b) {
                d = this.getHttpsLinkTip(a)
            }
            this.triggerAltPort(true, true, b, d)
        }
        this.doLayout()
    },
    getSetParams: function() {
        var a = SYNO.ux.Utils.getApiParams(this.toProcessAPI, this.constructApplyParams(this.getForm().getValues(false, "set")));
        if (!Ext.isBoolean(a.enable_redirect)) {
            a.enable_redirect = false
        }
        if (!a.aliasCheck) {
            a.alias = null
        }
        delete a.aliasCheck;
        if (!a.httpCheck) {
            a.http_port = null
        }
        delete a.httpCheck;
        if (!a.httpsCheck) {
            a.https_port = null
        }
        delete a.httpsCheck;
        return a
    },
    applySetParams: function() {
        var a = this.getSetParams();
        this.origAlias = a.alias;
        this.origHttpPort = a.http_port;
        this.origHttpsPort = a.https_port;
        this.origEnableRedirect = a.enable_redirect
    },
    discardSetParams: function() {
        Ext.getCmp(this.aliasCheckId).setValue(!Ext.isEmpty(this.origAlias));
        Ext.getCmp(this.httpCheckId).setValue(!Ext.isEmpty(this.origHttpPort));
        Ext.getCmp(this.httpsCheckId).setValue(!Ext.isEmpty(this.origHttpsPort));
        Ext.getCmp(this.enableRedirectCheckId).setValue(this.origEnableRedirect);
        this.fillFormValues()
    },
    isDirty: function() {
        var c = this.getSetParams();
        var f = Ext.isEmpty(this.origAlias) ? null : this.origAlias;
        var d = Ext.isEmpty(this.origHttpPort) ? null : this.origHttpPort;
        var b = Ext.isEmpty(this.origHttpsPort) ? null : this.origHttpsPort;
        var a = Ext.isBoolean(this.origEnableRedirect) ? this.origEnableRedirect : false;
        var e = (f !== c.alias) || (d !== c.http_port) || (b !== c.https_port) || (a !== c.enable_redirect);
        return e
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPortal.OptionsDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b])
    },
    fillConfig: function(a) {
        var b = {
            width: 405,
            height: 255,
            minWidth: 200,
            minHeight: 200,
            constrainHeader: true,
            title: _WFT("common", "options"),
            layout: "fit",
            items: [this.optionsForm = new SYNO.SDS.AdminCenter.AppPortal.OptionsForm({
                dialog: this
            })],
            buttons: [{
                text: _T("common", "apply"),
                btnStyle: "blue",
                scope: this,
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : undefined,
                handler: this.onApplyHandler
            }, {
                text: _T("common", "cancel"),
                btnStyle: "grey",
                scope: this,
                handler: this.close
            }],
            keys: [{
                key: [10, 13],
                scope: this,
                handler: this.onApplyHandler
            }, {
                key: 27,
                scope: this,
                handler: this.close
            }],
            listeners: {
                scope: this,
                beforeshow: function() {
                    this.optionsForm.loadForm()
                }
            }
        };
        Ext.apply(b, a || {});
        return b
    },
    onApplyHandler: function() {
        var a = this.optionsForm.getForm();
        if (!a.isValid()) {
            return
        }
        if (!a.isDirty()) {
            this.close();
            return
        }
        this.optionsForm.applyHandler()
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPortal.OptionsForm", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        var a = {
            trackResetOnLoad: true,
            border: false,
            webapi: {
                api: "SYNO.Core.AppPortal.Config",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: this.getItems()
        };
        this.callParent([Ext.apply(a, b)])
    },
    getItems: function() {
        return {
            xtype: "syno_fieldset",
            title: _T("common", "remove_banner"),
            items: [{
                xtype: "syno_checkbox",
                name: "remove_banner",
                boxLabel: _T("common", "remove_banner")
            }, {
                xtype: "syno_displayfield",
                value: _T("common", "remove_banner_desc"),
                indent: 1
            }]
        }
    },
    processParams: function(b, a) {
        if ("set" !== b) {
            return a
        }
        a.each(function(c) {
            if ("SYNO.Core.AppPortal.Config" === c.api && "set" === c.method) {
                c.params.show_titlebar = !c.params.remove_banner;
                delete c.params.remove_banner
            }
        });
        return a
    },
    processReturnData: function(c, b, a) {
        if ("set" === c && Ext.isBoolean(b.has_fail) && !b.has_fail) {
            this.dialog.close();
            return
        }
        b.result.each(function(d) {
            if ("SYNO.Core.AppPortal.Config" === d.api && "get" === d.method) {
                d.data.remove_banner = !d.data.show_titlebar;
                delete d.data.show_titlebar
            }
        });
        this.callParent(arguments)
    },
    onApiSuccess: function(d, b, a) {
        if ("set" === d) {
            if (!Ext.isBoolean(b.has_fail) || !b.has_fail) {
                this.dialog.setStatusOK()
            } else {
                var c = SYNO.API.getErrorString(b);
                this.dialog.setStatusError({
                    text: c,
                    clear: true
                })
            }
        }
        this.processReturnData(d, b, a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPortal.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent([a]);
        this.appWin = a.appWin;
        this.createPanel()
    },
    createPanel: function() {
        this.grid = this.createGrid()
    },
    getPanel: function() {
        return this.grid
    },
    activate: function() {
        this.grid.blCheckHttpsEnable = true;
        this.grid.blFirstLoad = true;
        this.grid.loadData();
        return true
    },
    deactivate: function() {
        return true
    },
    createGrid: function() {
        var b = {
            appWin: this.appWin,
            module: this,
            border: false,
            title: _T("app_port_alias", "title"),
            header: false,
            height: 300
        };
        SYNO.LayoutConfig.fill(b);
        var a = new SYNO.SDS.AdminCenter.AppPortal.Grid(b);
        return a
    },
    getHelpParam: function() {
        return "AdminCenter/application_appportalias.html"
    }
});
Ext.define("SYNO.SDS.AdminCenter.AppPortal.Grid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        this.module = b.module;
        this.httpsEnable = false;
        this.httpsUserEnable = false;
        this.isRelay = this.module.appWin.IsAllowRelay();
        this.hostname = this.isRelay ? this.module.appWin.getDsmHost() : window.location.hostname;
        this.port = this.isRelay ? this.module.appWin.getDsmHttpPort() : window.location.port;
        this.store = this.createStore();
        var a = Ext.apply({
            store: this.store,
            columns: [{
                header: _T("app_port_alias", "desc_application"),
                dataIndex: "display_name",
                sortable: true
            }, {
                header: _T("app_port_alias", "desc_alias"),
                width: 50,
                dataIndex: "alias",
                scope: this,
                sortable: true,
                renderer: this.aliasRenderer
            }, {
                header: "HTTP",
                width: 30,
                dataIndex: "http_port",
                scope: this,
                sortable: true,
                renderer: this.httpRenderer
            }, {
                header: "HTTPS",
                width: 30,
                dataIndex: "https_port",
                scope: this,
                sortable: true,
                renderer: this.httpsRenderer
            }],
            tbar: {
                defaultType: "syno_button",
                items: [{
                    text: _T("common", "alt_edit"),
                    disabled: true,
                    itemId: "EditButton",
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    scope: this,
                    handler: this.openEditDialog
                }, {
                    text: _T("common", "webman_options"),
                    disabled: this._S("demo_mode"),
                    scope: this,
                    tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                    itemId: "OptionsButton",
                    handler: this.onOptionClick
                }]
            },
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true,
                listeners: {
                    selectionchange: {
                        fn: this.onSelectBehavior,
                        buffer: 50,
                        scope: this
                    }
                }
            }),
            listeners: {
                rowdblclick: function() {
                    this.openEditDialog()
                },
                scope: this
            }
        }, b);
        this.callParent([a]);
        this.mon(SYNO.SDS.StatusNotifier, "thirdpartychanged", this.onThirdPartyChanged, this)
    },
    aliasRenderer: function(f, b, a, g, d, c) {
        var e = this.linkMaker(false, true, false, true, f, true);
        if (e) {
            b.attr = String.format('qtip="{0}"', Ext.util.Format.htmlEncode(e))
        }
        return this.linkMaker(true, true, false, false, f, true)
    },
    httpRenderer: function(f, b, a, g, d, c) {
        var e = this.linkMaker(false, false, true, true, f, true);
        if (e) {
            b.attr = String.format('qtip="{0}"', Ext.util.Format.htmlEncode(e))
        }
        return this.linkMaker(true, false, true, false, f, true)
    },
    httpsRenderer: function(f, b, a, g, d, c) {
        var e = this.linkMaker(false, false, false, true, f, true);
        if (e) {
            if (this.httpsEnable) {
                b.attr = String.format('qtip="{0}"', Ext.util.Format.htmlEncode(e))
            } else {
                b.attr = String.format('qtip="{0}"', _T("app_port_alias", "tip_https_disable"))
            }
        }
        return this.linkMaker(true, false, false, false, f, true)
    },
    onSelectBehavior: function() {
        if (1 == this.getSelectionModel().getCount()) {
            this.onChgButtonStatus(false)
        } else {
            this.onChgButtonStatus(true)
        }
    },
    loadData: function() {
        this.requestHttpsEnable()
    },
    requestHttpsEnable: function() {
        this.WebDSMAPI = {
            api: "SYNO.Core.Web.DSM",
            method: "get",
            version: 1
        };
        this.WebHTTPAPI = {
            api: "SYNO.Core.Web.HTTP",
            method: "get",
            version: 1
        };
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            compound: {
                stopwhenerror: false,
                params: [this.WebDSMAPI, this.WebHTTPAPI]
            },
            callback: this.onRequestHttpsEnableDone,
            scope: this
        })
    },
    onRequestHttpsEnableDone: function(c, b, a) {
        this.module.appWin.clearStatusBusy();
        if (false === c || !b || !Ext.isArray(b.result)) {
            this.module.appWin.getMsgBox().alert(this.title, _T("common", "commfail"));
            return
        }
        Ext.each(b.result, function(d) {
            if (SYNO.ux.Utils.checkApiConsistency(this.WebDSMAPI, d) && true === d.success) {
                this.httpsEnable = !!d.data.enable_https
            } else {
                if (SYNO.ux.Utils.checkApiConsistency(this.WebHTTPAPI, d) && true === d.success) {
                    this.httpsUserEnable = !!d.data.enable_https
                }
            }
        }, this);
        this.linkMaker = SYNO.SDS.AdminCenter.AppPortal.LinkMaker(this.httpsEnable, this.httpsUserEnable, this.isRelay, this.hostname, this.port);
        this.loadAppPortal()
    },
    createStore: function() {
        var a = new Ext.data.JsonStore({
            root: "portal",
            id: "id",
            fields: ["id", "display_name", "alias", "http_port", "https_port", "enable_redirect"],
            defaultSortable: true,
            listeners: {
                exception: {
                    scope: this,
                    fn: this.onStoreException
                },
                beforeload: {
                    scope: this,
                    fn: this.onBeforeLoad
                },
                load: {
                    scope: this,
                    fn: this.onLoad
                }
            }
        });
        return a
    },
    loadAppPortal: function() {
        var b = this.isSupportingAPIVersion(2);
        var a = [];
        if (b) {
            a.push("default_setting")
        }
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.AppPortal",
            version: b ? 2 : 1,
            method: "list",
            params: {
                additional: a
            },
            callback: function(f, d, e, c) {
                this.module.appWin.clearStatusBusy();
                if (f) {
                    this.store.loadData(d);
                    if (b) {
                        this.appDfValueMap = SYNO.SDS.AdminCenter.AppPortal.fillRemoteAppDfValueMap(d.portal)
                    } else {
                        this.appDfValueMap = SYNO.SDS.AdminCenter.AppPortal.getLocalAppDfValueMap()
                    }
                } else {
                    this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(d))
                }
            },
            scope: this
        })
    },
    openEditDialog: function() {
        var a = new SYNO.SDS.AdminCenter.AppPortal.EditDialog({
            module: this,
            owner: this.module.appWin,
            store: this.store,
            appWin: this.module.appWin,
            appDfValueMap: this.appDfValueMap,
            httpsEnable: this.httpsEnable,
            httpsUserEnable: this.httpsUserEnable
        });
        this.mon(a, "close", this.checkReload, this);
        a.show()
    },
    onChgButtonStatus: function(a) {
        this.getTopToolbar().getComponent("EditButton").setDisabled(this._S("demo_mode") || a)
    },
    setButtonDisabled: function() {
        this.getTopToolbar().getComponent("EditButton").setDisabled(true)
    },
    onOptionClick: function() {
        var a = new SYNO.SDS.AdminCenter.AppPortal.OptionsDialog({
            owner: this.module.appWin
        });
        this.mon(a, "close", this.checkReload, this);
        a.show()
    },
    gotoHttpsEnablePage: function() {
        if (this.httpsEnable || !this.blCheckHttpsEnable) {
            return
        }
        var a = false;
        this.store.each(function(b) {
            if (b.data.https_port) {
                a = true;
                return false
            }
        });
        if (a) {
            this.module.appWin.getMsgBox().confirm(_T("app_port_alias", "title"), String.format(_T("service", "service_file_https_warning"), _T("service", "service_secureui")), function(b, c) {
                if ("yes" === b) {
                    this.module.appWin.startModule("SYNO.SDS.AdminCenter.Network.Main", {
                        tab: "DSMSettingTab"
                    })
                } else {
                    this.blCheckHttpsEnable = false
                }
            }, this)
        }
    },
    onStoreException: function() {
        SYNO.Debug("exception");
        this.module.appWin.clearStatusBusy()
    },
    onBeforeLoad: function() {
        this.module.appWin.setStatusBusy()
    },
    onLoad: function() {
        this.module.appWin.clearStatusBusy();
        if (!this.blFirstLoad && !this.backgroundLoad) {
            this.gotoHttpsEnablePage()
        }
        this.blFirstLoad = false;
        this.backgroundLoad = false
    },
    onThirdPartyChanged: function() {
        this.thirdPartyChanged = true;
        if (!this.isVisible()) {
            this.thirdPartyChanged = false;
            return
        }
        if (this.findAppWindow().el.isMasked()) {
            return
        }
        this.checkReload()
    },
    checkReload: function() {
        if (this.thirdPartyChanged) {
            this.thirdPartyChanged = false;
            this.backgroundLoad = true;
            this.loadData()
        }
    },
    isSupportingAPIVersion: function(a) {
        if (!Ext.isNumber(a)) {
            return false
        }
        var b = this.getKnownAPI("SYNO.Core.AppPortal");
        if (Ext.isObject(b) && Ext.isNumber(b.maxVersion) && b.maxVersion >= a) {
            return true
        }
        return false
    }
});
Ext.define("SYNO.SDS.AdminCenter.TerminalSNMP.SNMPTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    utils: new SYNO.SDS.AdminCenter.WebAPIUtils(),
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        })
    },
    enableCheckGroup: function() {
        var a;
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_snmp", ["enable_snmp_v1v2", "enable_snmp_v3", "rocommunity", "rouser", "password", "passwordConfirm", "name", "location", "contact"]);
        var c;
        c = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_snmp_v1v2", ["rocommunity"]);
        var b;
        b = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_snmp_v3", ["rouser", "password", "passwordConfirm"])
    },
    fillConfig: function(a) {
        var b = {
            title: _T("tree", "leaf_snmp"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.SNMP",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: this.getSNMPItems()
        };
        Ext.apply(b, a);
        return b
    },
    getSNMPItems: function() {
        var b = /^[0-9a-zA-Z~`!@#$%^&*()_\-\+\=\|\/\{\[\}\];:<>,.?]+$/;
        var a = [{
            itemId: "desc",
            xtype: "syno_displayfield",
            hideLabel: true,
            value: _T("snmp", "snmp_desc")
        }, {
            xtype: "syno_checkbox",
            name: "enable_snmp",
            boxLabel: _T("snmp", "snmp_enable")
        }, {
            xtype: "syno_checkbox",
            name: "enable_snmp_v1v2",
            boxLabel: _T("snmp", "snmp_desc_v1_v2c"),
            indent: 1
        }, {
            xtype: "syno_textfield",
            name: "rocommunity",
            maxLength: 64,
            indent: 2,
            width: 200,
            allowBlank: false,
            maskRe: b,
            regex: b,
            fieldLabel: _T("snmp", "snmp_rocommunity")
        }, {
            xtype: "syno_checkbox",
            name: "enable_snmp_v3",
            boxLabel: _T("snmp", "snmp_desc_v3"),
            indent: 1
        }, {
            xtype: "syno_textfield",
            name: "rouser",
            maxLength: 64,
            allowBlank: false,
            indent: 2,
            width: 200,
            maskRe: b,
            regex: b,
            fieldLabel: _T("common", "username")
        }, {
            xtype: "syno_textfield",
            name: "password",
            textType: "password",
            allowBlank: false,
            maxLength: 127,
            minLength: 8,
            indent: 2,
            width: 200,
            maskRe: b,
            regex: b,
            fieldLabel: _T("common", "password")
        }, {
            xtype: "syno_textfield",
            name: "passwordConfirm",
            textType: "password_confirm",
            allowBlank: false,
            maxLength: 127,
            minLength: 8,
            indent: 2,
            width: 200,
            maskRe: b,
            regex: b,
            fieldLabel: _T("user", "user_repswd"),
            validator: Ext.createDelegate(function(e) {
                var c = this.getForm().findField("password"),
                    d = c.getValue();
                if ((e !== d)) {
                    if ((e === "87654321") && (d === "12345678")) {
                        return true
                    }
                    return _T("error", "error_repswd")
                }
                return true
            }, this)
        }, {
            xtype: "syno_displayfield",
            indent: 1,
            value: _T("common", "info")
        }, {
            xtype: "syno_textfield",
            name: "name",
            maxLength: 255,
            indent: 2,
            width: 200,
            fieldLabel: _T("snmp", "snmp_sysName")
        }, {
            xtype: "syno_textfield",
            name: "location",
            maxLength: 255,
            indent: 2,
            width: 200,
            fieldLabel: _T("snmp", "snmp_sysLocation")
        }, {
            xtype: "syno_textfield",
            name: "contact",
            maxLength: 255,
            indent: 2,
            width: 200,
            fieldLabel: _T("snmp", "snmp_sysContact")
        }, {
            xtype: "syno_displayfield",
            value: _T("snmp", "MIB_desc")
        }];
        return a
    },
    onBeforeRequest: function(a) {
        if (this.webapi.methods.set !== a) {
            return true
        }
        if (!this.getForm().isValid()) {
            this.module.panel.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (!this.checkFormComplete(this.getForm())) {
            this.module.panel.setStatusError({
                text: _T("snmp", "warnning_select_v1v2_or_v3"),
                clear: true
            });
            return false
        }
        return true
    },
    sendServiceEvent: function(d) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.set,
            version: this.webapi.version
        };
        var c = this.getForm();
        for (var b = 0; b < d.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                continue
            }
            if (this.snmpChange) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.SNMP", !c.findField("enable_snmp").getValue())
            }
            break
        }
    },
    checkFormComplete: function(a) {
        var c = a.findField("enable_snmp").getValue(),
            b = a.findField("enable_snmp_v1v2").getValue(),
            d = a.findField("enable_snmp_v3").getValue();
        if (!c) {
            return true
        }
        if (!b && !d) {
            return false
        }
        return true
    },
    processSNMPGetData: function(d, c) {
        var a = SYNO.API.Util.GetValByAPI(d, this.webapi.api, this.webapi.methods.get);
        if (undefined === a) {
            SYNO.Debug("Error");
            return
        }
        var b = this.getForm();
        b.setValues(this.decaratorValueFromAPI(a))
    },
    processReturnData: function(c, b, a) {
        this.processSNMPGetData(b, a);
        this.sendServiceEvent(b)
    },
    decaratorValueFromAPI: function(a) {
        if ("" !== a.rouser) {
            a.password = "12345678";
            a.passwordConfirm = "87654321"
        } else {
            a.password = "";
            a.passwordConfirm = ""
        }
        return a
    },
    processSetSNMPData: function(b) {
        var a = this.utils.getReqCompoundParam(b, this.webapi.api, this.webapi.methods.set);
        if (undefined === a) {
            SYNO.Debug("Error");
            return
        }
        a = this.decoratorValueToAPI(a)
    },
    processParams: function(b, a) {
        if ("set" == b) {
            this.processSetSNMPData(a);
            this.snmpChange = this.getForm().findField("enable_snmp").isDirty()
        }
        return a
    },
    decoratorValueToAPI: function(a) {
        if (true === a.params.enable_snmp_v3) {
            if ("12345678" == a.params.password && "87654321" == a.params.passwordConfirm) {
                delete a.params.password;
                delete a.params.passwordConfirm
            } else {
                delete a.params.passwordConfirm
            }
        }
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.TerminalSNMP.SSHCrypto", {
    extend: "Object",
    statics: {
        type: ["cipher", "kex", "mac"],
        level: ["low", "medium", "high"],
        hw: ["hw", "nonhw"],
        compareCrypto: function(d, c) {
            if (d.name < c.name) {
                return -1
            } else {
                if (d.name > c.name) {
                    return 1
                }
            }
            return 0
        }
    },
    constructor: function(a) {
        var c = 0;
        var b = 0;
        this.cls = SYNO.SDS.AdminCenter.TerminalSNMP.SSHCrypto;
        this.map = {};
        this.hash = {};
        this.hwSupportForLevel = {};
        this.nowLevel = "custom";
        this.nowHw = false;
        Ext.each(this.cls.type, function(d) {
            this[d] = a[d].sort(this.cls.compareCrypto);
            for (c = 0; c < this[d].length; c++) {
                this[d][c].selected = this[d][c].in_use
            }
        }, this);
        Ext.each(this.cls.type, function(d) {
            this.map[d] = {};
            Ext.each(this.cls.level, function(e) {
                this.map[d][e] = {};
                Ext.each(this.cls.hw, function(f) {
                    this.map[d][e][f] = []
                }, this)
            }, this)
        }, this);
        Ext.each(this.cls.type, function(d) {
            Ext.each(this[d], function(e) {
                for (b = 0; b < this.cls.level.length; b++) {
                    if (e.security_level >= b) {
                        if (e.hardware_support) {
                            this.map[d][this.cls.level[b]].hw.push(e.name)
                        }
                        this.map[d][this.cls.level[b]].nonhw.push(e.name)
                    }
                }
            }, this)
        }, this);
        Ext.each(this.cls.level, function(f) {
            var e = "";
            var d = [];
            this.hwSupportForLevel[f] = this.hasHwSupportForLevel(f);
            if (this.hwSupportForLevel[f]) {
                Ext.each(this.cls.type, function(g) {
                    if (0 < this.map[g][f].hw.length) {
                        d = d.concat(this.map[g][f].hw)
                    } else {
                        d = d.concat(this.map[g][f].nonhw)
                    }
                }, this);
                e = d.join(",");
                this.hash[e] = [f, true]
            }
            e = [].concat(this.map.cipher[f].nonhw, this.map.kex[f].nonhw, this.map.mac[f].nonhw).join(",");
            this.hash[e] = [f, false]
        }, this);
        this.updateLevelAndHw()
    },
    hasHwSupportForLevel: function(b) {
        if ("high" !== b && "medium" !== b && "low" !== b) {
            return false
        }
        var a = this.map.cipher[b].hw.length + this.map.kex[b].hw.length + this.map.mac[b].hw.length;
        return (0 !== a)
    },
    hasHwSupport: function() {
        return this.hasHwSupportForLevel("low")
    },
    getCryptoName: function(b, c, a) {
        if (a && 0 !== this.map[b][c].hw.length) {
            return this.map[b][c].hw
        } else {
            return this.map[b][c].nonhw
        }
    },
    selectCryptoByLevelAndHw: function(e, a) {
        var b = 0;
        var c = [];
        var d = {};
        Ext.each(this.cls.type, function(f) {
            c = c.concat(this.getCryptoName(f, e, a))
        }, this);
        for (b = 0; b < c.length; b++) {
            d[c[b]] = 1
        }
        Ext.each(this.cls.type, function(f) {
            Ext.each(this[f], function(g) {
                g.selected = (g.name in d)
            }, this)
        }, this);
        this.updateLevelAndHw()
    },
    getCryptoByLevelAndHw: function(f, a) {
        var b = 0;
        var e = {
            cipher: [],
            kex: [],
            mac: []
        };
        var c = [];
        var d = {};
        Ext.each(this.cls.type, function(g) {
            c = c.concat(this.getCryptoName(g, f, a))
        }, this);
        for (b = 0; b < c.length; b++) {
            d[c[b]] = 1
        }
        Ext.each(this.cls.type, function(g) {
            Ext.each(this[g], function(i) {
                var h = {};
                Ext.apply(h, i);
                h.selected = (i.name in d);
                e[g].push(h)
            }, this)
        }, this);
        return e
    },
    selectCryptoByNames: function(a) {
        var b = {};
        Ext.each(a, function(c) {
            b[c] = 1
        }, this);
        Ext.each(this.cls.type, function(c) {
            Ext.each(this[c], function(d) {
                d.selected = (d.name in b)
            }, this)
        }, this);
        this.updateLevelAndHw()
    },
    getCryptoLevelAndHw: function(a) {
        var c = "";
        var b = ["custom", false];
        c = a.join(",");
        if (c in this.hash) {
            b = this.hash[c]
        }
        return b
    },
    updateLevelAndHw: function() {
        var b = 0;
        var c = [];
        var a = [];
        Ext.each(this.cls.type, function(d) {
            for (b = 0; b < this[d].length; b++) {
                if (this[d][b].selected) {
                    c.push(this[d][b].name)
                }
            }
        }, this);
        a = this.getCryptoLevelAndHw(c);
        this.nowLevel = a[0];
        this.nowHw = a[1]
    },
    isDirty: function() {
        var a = 0;
        var b = false;
        Ext.each(this.cls.type, function(c) {
            for (a = 0; a < this[c].length; a++) {
                if (this[c][a].in_use != this[c][a].selected) {
                    b = true;
                    return false
                }
            }
        }, this);
        return b
    },
    getCryptoNameArray: function() {
        var a = {
            cipher: [],
            kex: [],
            mac: []
        };
        Ext.each(this.cls.type, function(b) {
            Ext.each(this[b], function(c) {
                if (c.selected) {
                    a[b].push(c.name)
                }
            }, this)
        }, this);
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.TerminalSNMP.SSHCryptoDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.form = this.configForm();
        this.bottomForm = this.bottomForm();
        this.cipherGrid = this.configGrid("Cipher");
        this.kexGrid = this.configGrid("KEX");
        this.macGrid = this.configGrid("MAC");
        var b = Ext.apply({
            title: _T("terminal", "ssh_crypto_level_customize"),
            autoDestroy: true,
            width: 830,
            height: 580,
            padding: 20,
            layout: {
                type: "vbox",
                pack: "start",
                align: "stretch"
            },
            items: [this.form, {
                xtype: "container",
                autoHeight: true,
                layout: {
                    type: "hbox",
                    pack: "start",
                    aligh: "stretch",
                    defaultMargins: {
                        top: 0,
                        right: 8,
                        bottom: 0,
                        left: 8
                    }
                },
                items: [this.cipherGrid, this.kexGrid, this.macGrid]
            }, this.bottomForm],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "apply"),
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.load, this);
        this.on("afterlayout", function(c, d) {
            SYNO.SDS.Utils.AddTip(this.bottomForm.getForm().findField("hw_acc_cipher_only").getEl(), _T("terminal", "ssh_crypto_level_hw_acc_desc"));
            if (this.owner.crypto.hasHwSupport()) {
                this.bottomForm.getForm().findField("hw_acc_cipher_only").setVisible(true)
            }
        }, this, {
            single: true
        })
    },
    load: function() {
        var a = this.owner.crypto.nowLevel;
        var b = this.owner.crypto.nowHw;
        if ("custom" === a) {
            a = _T("common", "customize")
        }
        this.setValues({
            security_level: a,
            hw_acc_cipher_only: b
        });
        this.loadCryptoToGrids(this.owner.crypto);
        this.updateHwAccBtn()
    },
    setValues: function(a) {
        this.form.getForm().setValues(a);
        this.bottomForm.getForm().setValues(a)
    },
    getValues: function() {
        var b = {};
        var a = {};
        a = this.form.getForm().getValues();
        Ext.apply(b, a);
        Ext.apply(b, {
            hw_acc_cipher_only: this.bottomForm.getForm().findField("hw_acc_cipher_only").getValue()
        });
        return b
    },
    onApply: function() {
        var b = this.getCryptoFromGrids();
        var d = [this.cipherGrid, this.kexGrid, this.macGrid];
        var a = false;
        Ext.each(d, function(g) {
            var h = 0;
            g.getStore().each(function(i) {
                if (i.data.selected) {
                    h++
                }
            });
            if (0 === h) {
                a = true;
                return false
            }
        }, this);
        if (a) {
            this.setStatusError({
                text: _T("terminal", "ssh_crypto_no_algorithm"),
                clear: true
            });
            return false
        }
        this.owner.crypto.selectCryptoByNames(b);
        var e = this.owner.panel.getForm().findField("security_level");
        var f = this.owner.crypto.nowLevel;
        var c = this.owner.crypto.nowHw;
        e.setValue(f);
        this.owner.panel.getForm().findField("hw_acc_cipher_only").setValue(c);
        this.close()
    },
    getCryptoFromGrids: function() {
        var b = [this.cipherGrid, this.kexGrid, this.macGrid];
        var a = [];
        Ext.each(b, function(c) {
            c.getStore().each(function(d) {
                if (d.data.selected) {
                    a.push(d.data.name)
                }
            })
        }, this);
        return a
    },
    loadCryptoToGrids: function(a) {
        this.cipherGrid.getStore().loadData(a.cipher, false);
        this.kexGrid.getStore().loadData(a.kex, false);
        this.macGrid.getStore().loadData(a.mac, false)
    },
    configForm: function() {
        var a = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: [
                [_T("terminal", "ssh_crypto_level_high"), "high"],
                [_T("terminal", "ssh_crypto_level_medium"), "medium"],
                [_T("terminal", "ssh_crypto_level_low"), "low"]
            ]
        });
        var b = new SYNO.ux.FormPanel({
            autoHeight: true,
            items: [{
                xtype: "syno_compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_displayfield",
                    value: _T("terminal", "ssh_crypto_level") + _T("common", "colon")
                }, {
                    xtype: "syno_combobox",
                    hideLabel: true,
                    displayField: "display",
                    valueField: "value",
                    name: "security_level",
                    store: a,
                    width: 150,
                    listeners: {
                        select: this.reloadGrids,
                        scope: this
                    }
                }]
            }, {
                xtype: "syno_displayfield",
                height: 20
            }]
        });
        return b
    },
    bottomForm: function() {
        var a = new SYNO.ux.FormPanel({
            autoHeight: true,
            items: [{
                xtype: "syno_checkbox",
                boxLabel: _T("terminal", "ssh_hw_acc_cipher_only"),
                name: "hw_acc_cipher_only",
                hidden: true,
                handler: this.reloadGrids,
                scope: this
            }]
        });
        return a
    },
    updateHwAccBtn: function() {
        var a = this.getValues();
        var b = a.security_level;
        if (this.owner.crypto.hasHwSupportForLevel(b)) {
            this.bottomForm.getForm().findField("hw_acc_cipher_only").setDisabled(false)
        } else {
            this.bottomForm.getForm().setValues({
                hw_acc_cipher_only: false
            });
            this.bottomForm.getForm().findField("hw_acc_cipher_only").setDisabled(true)
        }
    },
    reloadGrids: function() {
        if (this.notUpdateGrid === true) {
            return true
        }
        this.notUpdateGrid = true;
        this.updateHwAccBtn();
        this.notUpdateGrid = false;
        var c = this.getValues();
        var d = c.security_level;
        var b = c.hw_acc_cipher_only;
        var a = this.owner.crypto.getCryptoByLevelAndHw(d, b);
        this.loadCryptoToGrids(a);
        return true
    },
    configGrid: function(d) {
        var a = new Ext.data.JsonStore({
            fields: ["name", "hardware_support", "security_level", "selected", "in_use"],
            listeners: {
                update: {
                    fn: function() {
                        var g = this.getCryptoFromGrids();
                        var e = this.owner.crypto.getCryptoLevelAndHw(g);
                        var h = e[0];
                        var f = e[1];
                        this.notUpdateGrid = true;
                        if ("custom" === h) {
                            this.setValues({
                                security_level: _T("common", "customize"),
                                hw_acc_cipher_only: false
                            })
                        } else {
                            this.setValues({
                                security_level: h,
                                hw_acc_cipher_only: f
                            })
                        }
                        this.updateHwAccBtn();
                        this.notUpdateGrid = false
                    },
                    buffer: 50
                },
                scope: this
            }
        });
        var c = new SYNO.ux.EnableColumn({
            header: "",
            dataIndex: "selected",
            align: "center",
            width: 40
        });
        var b = new SYNO.ux.GridPanel({
            flex: 1,
            height: 375,
            enableColumnMove: false,
            colModel: new Ext.grid.ColumnModel({
                columns: [c, {
                    id: "name",
                    header: d,
                    dataIndex: "name",
                    renderer: function(j, f, e, l, h, g) {
                        var i = Ext.util.Format.htmlDecode(j);
                        var k = Ext.util.Format.htmlEncode(i);
                        f.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(k) + '"';
                        if (e.data.hardware_support) {
                            k = '<font color="red">' + k + "</font>"
                        }
                        return k
                    }
                }],
                defaults: {
                    sortable: false,
                    menuDisabled: true
                }
            }),
            autoExpandColumn: "name",
            store: a,
            plugins: [c]
        });
        return b
    }
});
Ext.define("SYNO.SDS.AdminCenter.TerminalSNMP.SSHAdvSettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.panel = this.configForm();
        this.customBtn = Ext.getCmp(this.customBtnId);
        var b = Ext.apply({
            title: _T("common", "adv_setting"),
            autoDestroy: true,
            width: 500,
            height: 430,
            layout: "fit",
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "commit"),
                scope: this,
                handler: this.onApply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.load, this);
        this.on("afterlayout", function(c, f) {
            SYNO.SDS.Utils.AddTip(this.panel.getForm().findField("hw_acc_cipher_only").getEl(), _T("terminal", "ssh_crypto_level_hw_acc_desc"));
            var g = SYNO.ux.Utils.getRadioGroup(this.panel.getForm(), "security_level");
            for (var e = 0; e < g.length; e++) {
                var d = g[e];
                d.mon(d, "check", this.onCheckLevel, this)
            }
        }, this, {
            single: true
        })
    },
    onApply: function() {
        var d = {};
        var c = this.panel.getForm().getValues();
        var f = c.security_level;
        var a = this.panel.getForm().findField("hw_acc_cipher_only").getValue();
        var e = {};
        var b = false;
        if ("custom" == f) {
            b = this.crypto.isDirty()
        } else {
            if (f != this.crypto.nowLevel || a != this.crypto.nowHw) {
                this.crypto.selectCryptoByLevelAndHw(f, a)
            }
            b = this.crypto.isDirty()
        }
        if (!b) {
            this.close();
            return true
        }
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        d = this.crypto.getCryptoNameArray();
        e.ssh_cipher = d.cipher;
        e.ssh_kex = d.kex;
        e.ssh_mac = d.mac;
        this.sendWebAPI({
            api: "SYNO.Core.Terminal",
            method: "set",
            version: 3,
            scope: this,
            params: e,
            callback: function(i, h, g) {
                this.clearStatusBusy();
                if (i) {
                    this.close();
                    return true
                } else {
                    this.setStatusError()
                }
            }
        })
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.Terminal",
            method: "get",
            version: 3,
            scope: this,
            callback: function(c, b, a) {
                if (c) {
                    this.afterLoad(b);
                    this.clearStatusBusy()
                } else {
                    this.clearStatusBusy()
                }
            }
        })
    },
    afterLoad: function(a) {
        this.crypto = new SYNO.SDS.AdminCenter.TerminalSNMP.SSHCrypto({
            cipher: a.ssh_cipher,
            kex: a.ssh_kex,
            mac: a.ssh_mac
        });
        this.panel.getForm().setValues({
            security_level: this.crypto.nowLevel,
            hw_acc_cipher_only: this.crypto.nowHw
        });
        if (this.crypto.hasHwSupport()) {
            this.panel.getForm().findField("hw_acc_cipher_only").setVisible(true)
        }
    },
    onCheckLevel: function(a, b) {
        var c = a.getGroupValue();
        var d = this.panel.getForm().findField("hw_acc_cipher_only");
        this.customBtn.setDisabled("custom" !== c);
        if ("custom" !== c && this.crypto.hasHwSupportForLevel(c)) {
            d.setDisabled(false)
        } else {
            this.panel.getForm().setValues({
                hw_acc_cipher_only: false
            });
            d.setDisabled(true)
        }
    },
    configForm: function() {
        var a = new SYNO.ux.FormPanel({
            items: [{
                xtype: "syno_displayfield",
                value: _T("terminal", "ssh_crypto_level_desc")
            }, {
                xtype: "syno_radio",
                boxLabel: _T("terminal", "ssh_crypto_level_high"),
                name: "security_level",
                value: "high"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("terminal", "ssh_crypto_level_medium"),
                name: "security_level",
                value: "medium"
            }, {
                xtype: "syno_radio",
                boxLabel: _T("terminal", "ssh_crypto_level_low"),
                name: "security_level",
                value: "low"
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_radio",
                    boxLabel: "",
                    name: "security_level",
                    value: "custom"
                }, {
                    xtype: "syno_button",
                    text: _T("common", "customize"),
                    style: "margin-left: 29px",
                    id: this.customBtnId = Ext.id(),
                    name: "customize",
                    handler: function() {
                        var b = new SYNO.SDS.AdminCenter.TerminalSNMP.SSHCryptoDialog({
                            module: this.module,
                            owner: this
                        });
                        b.open()
                    },
                    scope: this
                }]
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("terminal", "ssh_hw_acc_cipher_only"),
                name: "hw_acc_cipher_only",
                hidden: true
            }]
        });
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.TerminalSNMP.TerminalTab", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        this.apiMaxVersion = this.getKnownAPI("SYNO.Core.Terminal").maxVersion;
        this.sshCipherTipAdded = false;
        var b = this.fillConfig(a);
        this.callParent([b]);
        if (this._D("supportssh") === "yes" && 2 <= this.apiMaxVersion) {
            this.on("afterlayout", function(c, d) {
                this.checkSSHPort = new SYNO.ux.Utils.EnableCheckGroup(c.getForm(), "enable_ssh", ["ssh_port"]);
                if (3 === this.apiMaxVersion) {
                    c.mon(c.getForm().findField("enable_ssh"), "check", function(e, f) {
                        this.getComponent("advBtnId").setDisabled(!f)
                    }, this)
                }
            }, this, {
                single: true
            })
        }
    },
    fillConfig: function(a) {
        var b = {
            title: _T("tree", "leaf_terminal"),
            autoScroll: true,
            webapi: {
                api: "SYNO.Core.Terminal",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [this.getTerminalItems()]
        };
        b.webapi.version = this.apiMaxVersion;
        Ext.apply(b, a);
        return b
    },
    getTerminalItems: function() {
        var a = [];
        a.push({
            xtype: "syno_displayfield",
            value: _T("terminal", "terminal_desc")
        });
        a.push({
            xtype: "syno_checkbox",
            name: "enable_telnet",
            boxLabel: _T("terminal", "telnet_enable")
        });
        if (this._D("supportssh") === "yes") {
            a.push({
                xtype: "syno_checkbox",
                name: "enable_ssh",
                boxLabel: _T("terminal", "ssh_enable")
            });
            if (2 <= this.apiMaxVersion) {
                a.push({
                    xtype: "syno_numberfield",
                    indent: 1,
                    name: "ssh_port",
                    vtype: "port",
                    maxlength: 5,
                    fieldLabel: _T("common", "port")
                });
                if (2 == this.apiMaxVersion) {
                    a.push({
                        xtype: "syno_displayfield",
                        hidden: true,
                        itemId: "ssh_hw_acc_cipher_only_desc",
                        name: "ssh_hw_acc_cipher_only_desc",
                        value: _T("terminal", "ssh_hw_acc_cipher_only_desc")
                    }, {
                        xtype: "syno_checkbox",
                        hidden: true,
                        itemId: "ssh_hw_acc_cipher_only",
                        name: "ssh_hw_acc_cipher_only",
                        boxLabel: _T("terminal", "ssh_hw_acc_cipher_only")
                    })
                }
                if (3 == this.apiMaxVersion) {
                    a.push({
                        xtype: "syno_button",
                        indent: 1,
                        text: _T("common", "adv_setting"),
                        itemId: "advBtnId",
                        handler: function() {
                            var b = new SYNO.SDS.AdminCenter.TerminalSNMP.SSHAdvSettingDialog({
                                module: this.module,
                                owner: this.module.appWin
                            });
                            b.open()
                        },
                        scope: this
                    })
                }
            }
        }
        a.push({
            xtype: "displayfield",
            height: 10
        }, {
            xtype: "syno_displayfield",
            fieldLabel: "Note",
            hideLabel: true,
            value: '<span class="syno-ux-note">' + _T("common", "note") + _T("common", "colon") + " </span>" + _T("terminal", "terminal_password_desc")
        });
        return a
    },
    processParams: function(b, a) {
        if ("set" == b) {
            this.telnetChange = (this.getForm().findField("enable_telnet").isDirty()) ? true : false;
            this.sshChange = (this.getForm().findField("enable_ssh").isDirty()) ? true : false
        }
        return this.callParent(arguments)
    },
    processReturnData: function(f, d, c) {
        var a = {
            api: "SYNO.Core.Terminal",
            method: "get",
            version: 2
        };
        for (var b = 0; b < d.result.length; b++) {
            if (true === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                if (d.result[b].data.ssh_hw_acc_cipher_support) {
                    this.getComponent("ssh_hw_acc_cipher_only").setVisible(true);
                    this.getComponent("ssh_hw_acc_cipher_only_desc").setVisible(true);
                    if (!this.sshCipherTipAdded) {
                        SYNO.SDS.Utils.AddTip(this.getForm().findField("ssh_hw_acc_cipher_only").getEl(), String.format(_T("terminal", "ssh_hw_acc_cipher"), d.result[b].data.ssh_hw_acc_cipher_list));
                        this.sshCipherTipAdded = true
                    }
                }
            }
        }
        this.getForm().loadRecords(d.result, c.compound);
        if (3 === this.apiMaxVersion) {
            var e = this.getForm().findField("enable_ssh").getValue();
            this.getComponent("advBtnId").setDisabled(!e)
        }
        this.sendServiceEvent(d)
    },
    sendServiceEvent: function(d) {
        var a = {
            api: this.webapi.api,
            method: this.webapi.methods.set,
            version: this.webapi.version
        };
        var c = this.getForm();
        for (var b = 0; b < d.result.length; b++) {
            if (false === SYNO.ux.Utils.checkApiConsistency(a, d.result[b])) {
                continue
            }
            if (this.telnetChange) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.Terminal.TELNET", !c.findField("enable_telnet").getValue())
            }
            if (this.sshChange) {
                SYNO.SDS.StatusNotifier.setServiceDisabled("SYNO.SDS.AdminCenter.Terminal.SSH", !c.findField("enable_ssh").getValue())
            }
            break
        }
    },
    errorHandling: function(a) {
        if (2403 == a) {
            this.getForm().findField("ssh_port").markInvalid(SYNO.API.Erros.core[a])
        }
        this.module.appWin.getMsgBox().alert(this.title, _T("error", "error_bad_field"))
    }
});
Ext.ns("SYNO.SDS.AdminCenter.TerminalSNMP");
Ext.define("SYNO.SDS.AdminCenter.TerminalSNMP.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.TerminalSNMP.TabPanel({
            module: this
        })
    },
    getHelpParam: function() {
        switch (this.panel.getActiveTab().itemId) {
            case "terminal":
                return "AdminCenter/system_terminal.html";
            case "snmp":
                return "AdminCenter/system_snmp.html";
            default:
                return "AdminCenter/system_terminal_snmp_desc.html"
        }
    },
    getPanel: function() {
        return this.panel
    },
    setActivateParams: function(a) {
        if (a && a.tab) {
            this.panel.setActiveTab(a.tab)
        }
    },
    activate: function(a) {
        this.setActivateParams(a);
        this.panel.loadAllForm()
    },
    deactivate: function() {
        var a = this.panel.getAllForms();
        for (var b = 0; b < a.length; b++) {
            if (a[b].isDirty()) {
                return false
            }
        }
        return true
    }
});
Ext.define("SYNO.SDS.AdminCenter.TerminalSNMP.TabPanel", {
    extend: "SYNO.SDS.Utils.TabPanel",
    constructor: function(a) {
        this.module = a.module;
        this.terminalTab = new SYNO.SDS.AdminCenter.TerminalSNMP.TerminalTab({
            itemId: "terminal",
            module: this.module
        });
        var b;
        b = Ext.apply({
            activeTab: 0,
            items: [this.terminalTab, new SYNO.SDS.AdminCenter.TerminalSNMP.SNMPTab({
                itemId: "snmp",
                module: this.module
            })]
        }, a);
        this.callParent([b])
    },
    processReturnData: function(c, b, a) {
        if (true === b.has_fail) {
            this.errorHandling(b);
            return
        }
        this.callParent(arguments)
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "commfail");
        if (2403 == b.code) {
            this.terminalTab.errorHandling(b.code);
            this.setActiveTab("terminal");
            return
        }
        if (SYNO.API.Erros.core[b.code]) {
            a = SYNO.API.Erros.core[b.code]
        }
        this.module.appWin.getMsgBox().alert(this.title, a)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.CMS");
Ext.define("SYNO.SDS.AdminCenter.CMS.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.callParent(arguments);
        this.panel = new SYNO.SDS.AdminCenter.CMS.FormPanel({
            module: this
        })
    },
    getPanel: function() {
        return this.panel
    },
    activate: function() {
        this.panel.loadForm();
        this.panel.getInfo()
    }
});
Ext.define("SYNO.SDS.AdminCenter.CMS.FormPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(b) {
        var a = [],
            d;
        var c = [];
        this.module = b.module;
        this.delegateStore = new Ext.data.JsonStore({
            fields: ["is_user", "userNameCache"],
            autoLoad: false
        });
        this.delegateGrid = new SYNO.ux.GridPanel({
            enableHdMenu: false,
            store: this.delegateStore,
            columns: [{
                header: _T("cms", "title_delegate_type"),
                dataIndex: "is_user",
                width: 0.2,
                renderer: function(e, f) {
                    f.css = e ? "syno-cms-policy-delegate-user" : "syno-cms-policy-delegate-group";
                    return ""
                }
            }, {
                header: _T("cms", "title_delegate_name"),
                dataIndex: "userNameCache",
                width: 0.8
            }]
        });
        a.push({
            xtype: "syno_displayfield",
            itemId: "cms_server",
            value: _T("cms", "joined")
        });
        c.push({
            xtype: "syno_displayfield",
            hideLabel: true,
            value: _T("notification", "cms_enable_desc")
        });
        c.push({
            xtype: "syno_checkbox",
            name: "cms_enable",
            boxLabel: _T("notification", "cms_enable")
        });
        c.push({
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            xtype: "syno_button",
            text: _T("notification", "cms_send_test"),
            synotype: "indent_no_label",
            id: this.CMSTestBtnId = Ext.id(),
            scope: this,
            handler: this.onClickTestMailBtn
        });
        a.push({
            xtype: "syno_displayfield",
            itemId: "cms_desc",
            value: _T("cms", "disjoint_desc")
        });
        a.push({
            xtype: "syno_button",
            itemId: "cms_leave_btn",
            disabled: this._S("demo_mode"),
            tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
            text: _T("cms", "leave_cms"),
            handler: function(e, f) {
                this.setStatusBusy({
                    mask: true
                });
                this.sendWebAPI({
                    api: "SYNO.Core.CMS",
                    version: 1,
                    method: "disjoin",
                    params: {
                        from: "SYNO.SDS.AdminCenter.Application"
                    },
                    callback: this.onDeleteServer,
                    button: e,
                    scope: this
                })
            },
            scope: this
        });
        d = {
            module: b.module,
            border: false,
            frame: false,
            autoScroll: true,
            header: false,
            useDefaultBtn: true,
            webapi: {
                api: "SYNO.Core.Notification.CMS.Conf",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_fieldset",
                title: _T("cms", "joined"),
                collapsible: false,
                items: a
            }, {
                xtype: "syno_fieldset",
                title: _T("notification", "cms_enable"),
                collapsible: false,
                items: c
            }, {
                xtype: "syno_fieldset",
                title: _T("cms", "title_tab_delegate"),
                collapsible: false,
                items: [this.delegateGrid]
            }]
        };
        this.callParent([d])
    },
    getInfo: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.CMS.Info",
            version: 1,
            method: "get",
            params: {
                additional: ["server", "delegate"]
            },
            callback: function(d, b) {
                var a = null,
                    c;
                this.clearStatusBusy();
                if (!d) {
                    return
                }
                a = this.getCMSDescComponent();
                if (Ext.isEmpty(a) || Ext.isEmpty(b.additional) || Ext.isEmpty(b.additional.server)) {
                    return
                }
                if (Ext.isEmpty(b.additional.server.host)) {
                    this.serverHost = "";
                    c = _T("cms", "disjointed")
                } else {
                    this.serverHost = b.additional.server.host || "";
                    c = _T("cms", "joined") + " : " + this.serverHost
                }
                a.setValue(c);
                a.originalValue = c;
                this.delegateStore.loadData(b.additional.delegate, false);
                this.delegateGrid.setHeight(43 + 28 * b.additional.delegate.size())
            },
            scope: this
        })
    },
    getCMSDescComponent: function() {
        if (undefined !== this.cmsDescCmp) {
            return this.cmsDescCmp
        }
        this.cmsDescCmp = null;
        this.findBy(function(a) {
            if (a.itemId === "cms_server") {
                this.cmsDescCmp = a
            }
            return
        }, this);
        return this.cmsDescCmp
    },
    onDeleteServer: function(e, c, d, a) {
        var b;
        this.clearStatusBusy();
        if (!e) {
            if (1010 === c.code) {
                this.module.appWin.getMsgBox().alert("", String.format(_T("cms", "computing_not_allow_disable"), c.errors.registered_shares))
            } else {
                this.setStatusError({
                    text: "Delete server fail[" + c.code + "]"
                })
            }
            return
        }
        if (Ext.isObject(a.button)) {
            a.button.setDisabled(true)
        }
        b = this.getCMSDescComponent();
        if (Ext.isEmpty(b)) {
            return
        }
        b.setValue(_T("cms", "disjointed"));
        b.originalValue = _T("cms", "disjointed")
    },
    onClickTestMailBtn: function() {
        this.module.appWin.delayedMask(0.1, 100);
        this.sendWebAPI({
            api: "SYNO.Core.Notification.CMS",
            method: "send_test",
            version: 1,
            scope: this,
            params: {},
            callback: function(d, b, a) {
                var c = d ? String.format(_T("notification", "cms_test_notification_sent"), this.serverHost) : _T("common", "error_system");
                this.module.appWin.getMsgBox().alert(_T("notification", "cms_send_test"), c);
                this.module.appWin.unmask()
            }
        })
    }
});
Ext.ns("SYNO.SDS.AdminCenter.SystemDatabase");
Ext.define("SYNO.SDS.AdminCenter.SystemDatabase.Main", {
    extend: "SYNO.SDS.AdminCenter.Module",
    constructor: function(a) {
        this.callParent(arguments);
        this.appWin = a.appWin;
        this.panel = new SYNO.SDS.AdminCenter.SystemDatabase.FormPanel({
            module: this
        })
    },
    getHelpParam: function() {
        return "AdminCenter/application_system_database.html"
    },
    getPanel: function() {
        return this.panel
    },
    activate: function(a) {
        this.panel.loadForm()
    },
    deactivate: function() {
        return this.panel.getForm().isDirty() ? false : true
    }
});
Ext.define("SYNO.SDS.AdminCenter.SystemDatabase.FormPanel", {
    extend: "SYNO.SDS.Utils.FormPanel",
    constructor: function(a) {
        this.module = a.module;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.mon(this, "afterlayout", this.enableCheckGroup, this, {
            single: true
        })
    },
    enableCheckGroup: function() {
        var a;
        a = new SYNO.ux.Utils.EnableRadioGroup(this.getForm(), "systemdb_manage", {
            auto: ["autoselect_location"],
            manual_overwrite: ["avaliable_shares"],
            manual_non_overwrite: ["load_systemdb_shares"]
        });
        a = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "systemdb_enable", ["systemdb_manage"])
    },
    applyForm: function() {
        var b = "set",
            a = this.getForm();
        if (false === this.onBeforeAction(a, b)) {
            return false
        }
        if (false === a.findField("systemdb_enable").getValue()) {
            this.loadDependServ();
            return
        }
        if (true === a.findField("manual_overwrite").getValue() && this.systemdb_shares !== a.findField("avaliable_shares").getValue()) {
            this.module.appWin.getMsgBox().confirm(this.title, _T("metadata", "metadata_overwrite_warning"), function(c) {
                if ("yes" === c) {
                    this.sendSetReq()
                }
            }, this)
        } else {
            this.sendSetReq()
        }
    },
    loadDependServ: function() {
        this.module.appWin.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.SystemDB",
            method: "list_depend_service",
            version: 1,
            callback: this.loadDependServCB,
            scope: this
        })
    },
    loadDependServCB: function(d, b, a) {
        this.module.appWin.clearStatusBusy();
        if (!d || b.has_fail) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(b.code));
            return
        }
        if (0 < b.depend_service.length || true === b.transferLog) {
            var c = this.getConfirmMsg(b);
            this.module.appWin.getMsgBox().confirm(this.title, c, function(e) {
                if ("yes" === e) {
                    this.sendSetReq()
                }
            }, this)
        } else {
            this.sendSetReq()
        }
    },
    getConfirmMsg: function(a) {
        var b = _T("metadata", "metadata_warning_disabled");
        if (true === a.transferLog) {
            a.depend_service.push(_T("metadata", "file_transfer_log"))
        }
        if (0 < a.depend_service.length) {
            b = b + "<br>" + a.depend_service.join(", ")
        }
        return b
    },
    sendSetReq: function() {
        var d = "set",
            b = this.getForm();
        var a = b.getValues(false, "set");
        var c = this.constructApplyParams(a);
        c = c.concat(this.getApiArray("get"));
        c = this.processParams(d, c);
        this.sendAjaxRequest(d, c)
    },
    fillConfig: function(a) {
        var b = {
            title: "pgsql",
            autoScroll: true,
            useDefaultBtn: true,
            webapi: {
                api: "SYNO.Core.SystemDB",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [this.getSystemDatabaseItems()]
        };
        Ext.apply(b, a);
        return b
    },
    getSystemDatabaseItems: function() {
        var a = [];
        a.push({
            xtype: "syno_checkbox",
            boxLabel: _T("metadata", "metadata_enabled"),
            name: "systemdb_enable"
        });
        a.push({
            xtype: "syno_radio",
            boxLabel: _T("metadata", "metadata_autoselect"),
            name: "systemdb_manage",
            inputValue: "auto",
            checked: true,
            indent: 1,
            vtype: "hostname"
        });
        a.push({
            xtype: "syno_displayfield",
            value: _T("metadata", "metadata_located_in"),
            indent: 2,
            name: "autoselect_location",
            itemId: "autoselect_location"
        });
        a.push({
            xtype: "syno_radio",
            boxLabel: _T("metadata", "metadata_desc"),
            name: "systemdb_manage",
            itemId: "manual_overwrite",
            inputValue: "manual_overwrite",
            indent: 1,
            vtype: "hostname"
        });
        a.push(this.getSharedFolderItems());
        a.push({
            xtype: "syno_radio",
            boxLabel: _T("metadata", "metadata_load_from_share"),
            name: "systemdb_manage",
            itemId: "manual_non_overwrite",
            inputValue: "manual_non_overwrite",
            indent: 1,
            vtype: "hostname"
        });
        a.push(this.getExistingDatabaseItems());
        var b = [{
            xtype: "syno_fieldset",
            title: _T("metadata", "metadata_title"),
            collapsible: false,
            items: a
        }];
        return b
    },
    getSharedFolderItems: function() {
        var a = [];
        this.store_availables = new Ext.data.JsonStore({
            fields: ["sharename", "available"],
            scope: this
        });
        a.push({
            xtype: "syno_combobox",
            name: "avaliable_shares",
            emptyText: _T("metadata", "metadata_select_one_share"),
            hideLabel: true,
            indent: 2,
            width: 250,
            displayField: "sharename",
            valueField: "sharename",
            resizable: true,
            allowBlank: false,
            store: this.store_availables
        });
        return a
    },
    getExistingDatabaseItems: function() {
        var a = [];
        this.store_dbshare = new Ext.data.JsonStore({
            fields: ["sharename", "available"],
            scope: this
        });
        a.push({
            xtype: "syno_combobox",
            hideLabel: true,
            name: "load_systemdb_shares",
            indent: 2,
            emptyText: _T("metadata", "metadata_select_one_share"),
            width: 250,
            displayField: "sharename",
            valueField: "sharename",
            resizable: true,
            allowBlank: false,
            store: this.store_dbshare
        });
        return a
    },
    PollStart: function() {
        if (this.pgsqlReadyTaskId) {
            return
        }
        this.pgsqlReadyTaskId = this.pollReg({
            interval: 1,
            immediate: true,
            scope: this,
            webapi: {
                api: "SYNO.Core.SystemDB",
                method: "get",
                version: 1
            },
            status_callback: this.updatePGSQLReady
        })
    },
    PollStop: function() {
        this.module.appWin.clearStatusBusy();
        if (this.pgsqlReadyTaskId) {
            this.pollUnreg(this.pgsqlReadyTaskId);
            this.pgsqlReadyTaskId = null
        }
    },
    updatePGSQLReady: function(d, b, c, a) {
        if (!d || !b) {
            this.module.appWin.getMsgBox().alert(this.title, SYNO.API.getErrorString(b.code));
            this.PollStop();
            return
        }
        if ("busy" === b.status) {
            return
        }
        if ("failed" === b.status) {
            this.errorHandling(b)
        }
        this.PollStop();
        this.prepareStore(b);
        this.getForm().setValues(b)
    },
    prepareStore: function(c) {
        var b = [],
            a = [];
        this.systemdb_shares = c.systemdb_shares;
        c.shares.each(function(d) {
            if (d.available) {
                b.push(d)
            }
            if (d.pgsql_exist) {
                a.push(d)
            }
        });
        this.store_availables.loadData(b, false);
        this.store_dbshare.loadData(a, false);
        if (0 >= this.store_availables.getCount()) {
            this.form.findField("systemdb_enable").setDisabled(true);
            this.form.findField("autoselect_location").setValue(String.format(_T("metadata", "metadata_located_in"), "-"));
            this.module.appWin.getMsgBox().alert(this.title, _T("volume", "volume_share_noexternal"));
            return
        } else {
            this.form.findField("systemdb_enable").setDisabled(false)
        }
        switch (c.systemdb_manage) {
            case "auto":
                this.form.findField("autoselect_location").setValue(String.format(_T("metadata", "metadata_located_in"), c.systemdb_shares));
                this.form.findField("autoselect_location").originalValue = String.format(_T("metadata", "metadata_located_in"), c.systemdb_shares);
                this.form.setValues({
                    avaliable_shares: "",
                    load_systemdb_shares: ""
                });
                break;
            case "manual_overwrite":
                this.form.setValues({
                    autoselect_location: String.format(_T("metadata", "metadata_located_in"), "-"),
                    avaliable_shares: this.systemdb_shares
                });
                break;
            case "manual_non_overwrite":
                this.form.setValues({
                    autoselect_location: String.format(_T("metadata", "metadata_located_in"), "-"),
                    load_systemdb_shares: this.systemdb_shares
                });
                break
        }
    },
    processParams: function(b, a) {
        this.module.appWin.setStatusBusy();
        a.each(function(d) {
            if ("set" === d.method) {
                var c = d.params;
                if (c.hasOwnProperty("avaliable_shares")) {
                    c.sharename = c.avaliable_shares;
                    delete c.avaliable_shares
                } else {
                    if (c.hasOwnProperty("load_systemdb_shares")) {
                        c.sharename = c.load_systemdb_shares;
                        delete c.load_systemdb_shares
                    }
                }
            }
        });
        return this.callParent(arguments)
    },
    processReturnData: function(d, c, b) {
        if (true === c.has_fail) {
            this.module.appWin.clearStatusBusy();
            this.errorHandling(c);
            return
        }
        var a = SYNO.API.Util.GetValByAPI(c, "SYNO.Core.SystemDB", "get");
        if ("busy" === a.status) {
            this.PollStart();
            return
        }
        this.callParent(arguments);
        this.prepareStore(a);
        if (a && !a.systemdb_enable) {
            this.form.findField("avaliable_shares").setDisabled(true);
            this.form.findField("manual_non_overwrite").setDisabled(true);
            this.form.findField("autoselect_location").setDisabled(true)
        }
        this.module.appWin.clearStatusBusy()
    },
    errorHandling: function(c) {
        var b = SYNO.API.Util.GetFirstError(c);
        var a = _T("common", "error_system");
        if (6304 === b.code) {
            a = _T("metadata", "metadata_err_space");
            a = String.format(a, "70")
        } else {
            if (SYNO.API.Erros.core[b.code]) {
                a = SYNO.API.Erros.core[b.code]
            }
        }
        this.module.appWin.getMsgBox().alert(this.title, a)
    }
});
Ext.define("SYNO.SDS.AdminCenter.Mode", {
    statics: {
        BASIC_VIEW_ID: "basic",
        ADVANCED_VIEW_ID: "advanced"
    }
});
Ext.define("SYNO.SDS.AdminCenter.Application", {
    extend: "SYNO.SDS.AppInstance",
    appWindowName: "SYNO.SDS.AdminCenter.MainWindow"
});
Ext.define("SYNO.SDS.AdminCenter.MainWindow", {
    extend: "SYNO.SDS.PageListAppWindow",
    DEFAULT_WIN_SIZE: {
        width: 994,
        height: 570
    },
    SIMPLE_MODE_FIX_SIZE: {
        width: 860,
        height: 570
    },
    constructor: function(a) {
        this.badges = {};
        this.appInstance = a.appInstance;
        this.callParent([this.fillConfig(a)]);
        this.mon(SYNO.SDS.StatusNotifier, "badgenumget", this.badgeNumGetHandler, this)
    },
    onGetPageList: function(a) {
        a.loaded = true;
        if (this.getPageList().getLoader().loaded === true) {
            this.callParent(arguments)
        }
    },
    fillConfig: function(a) {
        var d = "home_screen";
        var c = this.DEFAULT_WIN_SIZE;
        var b = {
            cls: "syno-app-admin-center",
            width: c.width,
            height: c.height,
            minWidth: 994,
            minHeight: 440,
            layout: "card",
            hideMode: "offsets",
            activeItem: d,
            items: [{
                xtype: "container",
                itemId: "page_list",
                layout: "border",
                hideMode: "offsets",
                items: [this.getPageList(a), this.getPageCt()]
            }, this.getHomeScreen()],
            listeners: {
                beforeshow: {
                    fn: function() {
                        this.isCmsRelay = this.IsAllowRelay();
                        this.showHideSimpleMode()
                    },
                    scope: this,
                    single: true
                }
            }
        };
        Ext.apply(b, a);
        return b
    },
    getPageListConfig: function(a) {
        var b = {
            region: "west",
            padding: "0px 16px 0 12px",
            xtype: "container",
            layout: "fit",
            itemId: "page_list_container",
            badges: {},
            dataUrl: String.format("{0}/modules/{1}", this.jsConfig.jsBaseURL, a.moduleFile),
            tbar: {
                items: [{
                    xtype: "syno_button",
                    tooltip: _T("common", "webman_home"),
                    cls: "syno-sds-ac-home",
                    width: 40,
                    scope: this,
                    handler: this.homeButtonHandler.createDelegate(this)
                }, new SYNO.SDS.AdminCenter.SearchField({
                    width: 164
                })]
            },
            listeners: {
                scope: this,
                single: true,
                load: {
                    fn: this.onLoad.createDelegate(this),
                    buffer: 50
                }
            }
        };
        if (a.dataUrl) {
            b.dataUrl = a.dataUrl
        } else {
            if (a.listItems) {
                b.listItems = a.listItems
            }
        }
        return b
    },
    getPageList: function(a) {
        if (!this.pageList) {
            var b = this.getPageListConfig(Ext.apply({
                moduleFile: "modules.json"
            }, a));
            this.pageList = new SYNO.ux.ModuleList(b)
        }
        return this.pageList
    },
    getHomeScreen: function() {
        if (this.homeScreen) {
            return this.homeScreen
        }
        this.homeScreen = new SYNO.SDS.AdminCenter.HomeScreenPanel({
            itemId: "home_screen",
            owner: this
        });
        return this.homeScreen
    },
    getSimpleMode: function() {
        if (this.simpleModePanel) {
            return this.simpleModePanel
        }
        this.simpleModePanel = new SYNO.SDS.AdminCenter.SimpleModePanel({
            itemId: "simple_mode",
            owner: this
        });
        return this.simpleModePanel
    },
    createPage: function(b) {
        var c, d, a;
        c = Ext.getClassByName(b);
        d = new c({
            appWin: this,
            jsConfig: this.jsConfig
        });
        if (d instanceof SYNO.SDS.AdminCenter.Module) {
            d.appWin = this;
            a = d.getPanel();
            this.wrapModule(a)
        } else {
            a = d
        }
        a.itemId = b;
        return a
    },
    wrapModule: function(a) {
        a.onPageActivate = a.module.activate.createDelegate(a.module);
        a.onPageDeactivate = a.module.deactivate.createDelegate(a.module);
        a.onPageConfirm = a.module.confirmCallback.createDelegate(a.module);
        a.onPageFocus = a.module.focus.createDelegate(a.module);
        a.getHelpParam = a.module.getHelpParam.createDelegate(a.module)
    },
    onLoad: function(a) {
        this.callParent(arguments);
        this.getHomeScreen().loadModuleData()
    },
    maximize: function() {
        if (this.isInSimpleMode()) {
            return
        }
        this.callParent()
    },
    onHomeScreenReady: function() {
        if (this._D("usbstation")) {
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.DirectoryService.Main", false);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.DirectoryService.Main", false);
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.SystemDatabase.Main", true);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.SystemDatabase.Main", true)
        } else {
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.DirectoryService.Main", true);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.DirectoryService.Main", true);
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.SystemDatabase.Main", false);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.SystemDatabase.Main", false)
        }
        this.sendWebAPI({
            api: "SYNO.Core.CMS.Info",
            version: 1,
            method: "get",
            callback: this.initCMSModule,
            scope: this
        });
        this.initWirelessModule();
        this.refreshBadge();
        this.initAppRivModule();
        this.initMediaIndexModule()
    },
    hideSimpleMode: function() {
        return true
    },
    showHideSimpleMode: function() {
        if (this.hideSimpleMode()) {
            this.getHomeScreen().simpleModeLink.hide();
            return
        } else {
            this.add(this.getSimpleMode())
        }
        var a = _S("AdvControlPanel") ? "home_screen" : "simple_mode";
        var b = SYNO.SDS.UserSettings.getProperty("ControlPanel", "activeItem") || a;
        if (b === "simple_mode") {
            this.switchToSimpleMode()
        }
    },
    initCMSModule: function(d, b, c, a) {
        if (Ext.isObject(b) && true === b.joined) {
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.CMS.Main", true);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.CMS.Main", true);
            this.isCMSJoined = true
        } else {
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.CMS.Main", false);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.CMS.Main", false);
            this.isCMSJoined = false
        }
    },
    initAppRivModule: function() {
        if (this._S("version") <= 4931) {
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.AppPrivileges.Main", true);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.AppPrivileges.Main", true);
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.AppRulePrivileges.Main", false);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.AppRulePrivileges.Main", false)
        } else {
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.AppPrivileges.Main", false);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.AppPrivileges.Main", false);
            this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.AppRulePrivileges.Main", true);
            this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.AppRulePrivileges.Main", true)
        }
    },
    initWirelessModule: function() {
        var a = ("yes" === this._D("support_wireless"));
        this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.Wireless.Main", a);
        this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.Wireless.Main", a)
    },
    initMediaIndexModule: function() {
        var a = (true !== SYNO.SDS.isNVR);
        this.getPageList().setModuleVisible("SYNO.SDS.AdminCenter.MediaIndex.Main", a);
        this.getHomeScreen().setModuleVisible("SYNO.SDS.AdminCenter.MediaIndex.Main", a)
    },
    homeButtonHandler: function(a) {
        if (this.canDeactivate()) {
            this.switchToHomeScreen()
        } else {
            this.confirmLostChange(function(b) {
                if (b === "yes") {
                    this.switchToHomeScreen()
                }
            }, this)
        }
    },
    canDeactivate: function() {
        var a = this.getActivePage(),
            b = true;
        if (a && Ext.isFunction(a.onPageDeactivate)) {
            b = a.onPageDeactivate()
        }
        return (b !== false)
    },
    getPageListTreeCt: function() {
        return this.getComponent("page_list").getComponent("page_list_container")
    },
    switchToPageList: function(a) {
        this.getLayout().setActiveItem("page_list")
    },
    onDeactivateSimpleMode: function(a) {
        if (!Ext.isObject(a) || !a.fn) {
            return
        }
        a.scope = a.scope || window;
        if (this.simpleModePanel.canDeactivate()) {
            a.fn.call(a.scope);
            return
        }
        this.confirmLostChange(function(b) {
            this.simpleModePanel.confirmCallback(b);
            if (b === "yes") {
                a.fn.call(a.scope)
            }
        }, this)
    },
    switchFromSimpleToHome: function(a) {
        this.onDeactivateSimpleMode({
            fn: function() {
                this.switchToHomeScreen()
            },
            scope: this
        })
    },
    disableResize: function(a) {
        this.tools.maximize.setDisplayed(!a);
        this.setResizable(!a);
        this.taskButton.setDisableMaximize(a)
    },
    switchToHomeScreen: function() {
        if (!this.hideSimpleMode()) {
            this.disableResize(false);
            this.setSize(this.homeRestoreSize ? this.homeRestoreSize : this.DEFAULT_WIN_SIZE);
            SYNO.SDS.UserSettings.setProperty("ControlPanel", "activeItem", "home_screen")
        }
        this.getLayout().setActiveItem("home_screen")
    },
    switchToSimpleMode: function() {
        if (this.hideSimpleMode()) {
            this.switchToHomeScreen();
            return
        }
        if (this.maximized) {
            this.restore()
        }
        this.disableResize(true);
        this.homeRestoreSize = this.getSize();
        this.setSize(this.SIMPLE_MODE_FIX_SIZE);
        this.getLayout().setActiveItem("simple_mode");
        SYNO.SDS.UserSettings.setProperty("ControlPanel", "activeItem", "simple_mode")
    },
    isInBasicScreen: function() {
        return this.isInHomeScreen() && this.getHomeScreen().getActiveView().itemId === SYNO.SDS.AdminCenter.Mode.BASIC_VIEW_ID
    },
    isInAdvancedScreen: function() {
        return this.isInHomeScreen() && this.getHomeScreen().getActiveView().itemId === SYNO.SDS.AdminCenter.Mode.ADVANCED_VIEW_ID
    },
    isInHomeScreen: function() {
        return this.getLayout().activeItem.itemId === "home_screen"
    },
    isInPageList: function() {
        return this.getLayout().activeItem.itemId === "page_list"
    },
    isInSimpleMode: function() {
        return this.getLayout().activeItem.itemId === "simple_mode"
    },
    onLaunchPage: function(c) {
        var a = this.getPageList().getRootNode(),
            b = true;
        if (!a || !a.childrenRendered || a.childNodes.length <= 0) {
            b = false
        }
        if (b) {
            this.launchPageOnOpen(c)
        } else {
            this.mon(this, "moduleready", function() {
                this.launchPageOnOpen(c)
            }, this, {
                single: true
            })
        }
    },
    launchPageOnOpen: function(a) {
        if (a && a.fn && (this.isInHomeScreen() || this.isInSimpleMode())) {
            this.switchToPageList()
        }
        this.callParent(arguments)
    },
    startModule: function(a, b) {
        if (!a) {
            return
        }
        if (this.isInHomeScreen()) {
            this.switchToPageList()
        }
        this.openParams = b;
        this.selectPage(a);
        this.openParams = null
    },
    getHelpParam: function() {
        if (this.isInHomeScreen()) {
            return this.help
        } else {
            if (this.isInSimpleMode()) {
                return this.getSimpleMode().getHelpParam()
            }
        }
        return this.callParent(arguments)
    },
    onClose: function() {
        if (this.isInHomeScreen()) {
            this.setSkipDeactivateCheck()
        } else {
            if (!this.isSkipDeactivateCheck() && this.isInSimpleMode()) {
                this.onDeactivateSimpleMode({
                    fn: function() {
                        this.setSkipDeactivateCheck();
                        this.close()
                    },
                    scope: this
                });
                return false
            }
        }
        return this.callParent(arguments)
    },
    badgeNumGetHandler: function() {
        this.refreshBadge()
    },
    refreshBadge: function() {
        if (this.isCmsRelay) {
            return
        }
        if (!Ext.getClassByName("SYNO.SDS.PollingTask.BadgeInfo")) {
            return
        }
        SYNO.SDS.PollingTask.BadgeInfo.eachFnOfApp("SYNO.SDS.AdminCenter.Application", this.checkBadgeHandler, this)
    },
    checkBadgeHandler: function(d, f, g) {
        var c, b, a;
        var e = this.getPageList();
        c = this.getItemElByFn(d, e);
        if (c) {
            a = e.badges[d];
            b = this.getBadgeNumByFn(d);
            if (Ext.isDefined(a)) {
                a.setNum(b);
                a.updateBadgePos()
            } else {
                if (b > 0) {
                    a = this.createBadge(c);
                    a.setNum(b);
                    e.badges[d] = a
                }
            }
        }
    },
    createBadge: function(b) {
        var a = new SYNO.SDS.Utils.Notify.Badge({
            renderTo: b,
            badgeWidth: 19,
            badgeHeight: 14,
            badgeClassName: "sds-notify-badge-num"
        });
        return a
    },
    getBadgeNumByFn: function(a) {
        return SYNO.SDS.PollingTask.BadgeInfo.getInfoOfFn("SYNO.SDS.AdminCenter.Application", a)
    },
    getItemElByFn: function(b, d) {
        var c, a;
        c = (d || this.getPageList()).getNodeById(b);
        if (!c) {
            return false
        }
        a = Ext.get(c.getUI().getEl()).child("div.x-tree-node-leaf");
        return a
    }
});
Ext.define("SYNO.SDS.AdminCenter.Notification.MailAuthDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(b) {
        var c;
        this.notificationTag = b.notificationTag;
        this.notificationTitle = b.notificationTitle;
        var a = Ext.apply(b, {
            title: _T("notification", "smtp_need_auth"),
            width: 600,
            height: 280,
            layout: "fit",
            resizable: false,
            items: [this.getAuthForm()],
            buttons: [{
                btnStyle: "blue",
                text: _T("common", "save"),
                scope: this,
                handler: this.onClickSave
            }, {
                text: _T("common", "close"),
                scope: this,
                handler: this.close
            }]
        });
        this.callParent([a]);
        this.formPanel = this.getComponent("MailAuthDialogFormPanel");
        this.mon(this, "afterlayout", function() {
            c = new SYNO.SDS.Utils.EnableCheckGroup(this.formPanel.getForm(), "smtpauth", ["smtpuser", "smtppass", "smtppass2"])
        }, this, {
            single: true
        });
        this.mon(this, "show", function() {
            this.getEl().mask(_T("common", "loading"));
            this.formPanel.loadForm();
            this.getEl().unmask()
        }, this, {
            single: true
        })
    },
    getAuthForm: function() {
        var a = new SYNO.SDS.Utils.FormPanel({
            itemId: "MailAuthDialogFormPanel",
            border: false,
            trackResetOnLoad: true,
            labelWidth: 250,
            webapi: {
                api: "SYNO.Core.Notification.Mail.Auth",
                methods: {
                    get: "get",
                    set: "set"
                },
                version: 1
            },
            items: [{
                xtype: "syno_checkbox",
                name: "smtpauth",
                boxLabel: _T("notification", "alert_smtp_need_auth")
            }, {
                xtype: "syno_textfield",
                name: "smtpuser",
                maxlength: 256,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "alert_smtp_user"),
                allowBlank: false,
                enableKeyEvents: true,
                listeners: {
                    scope: this,
                    keypress: this.cleanPasswd,
                    keydown: this.cleanPasswd
                }
            }, {
                xtype: "syno_textfield",
                textType: "password",
                name: "smtppass",
                maxlength: 256,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "alert_smtp_pass"),
                allowBlank: false
            }, {
                xtype: "syno_textfield",
                textType: "password_confirm",
                name: "smtppass2",
                confirmFor: "smtppass",
                maxlength: 256,
                indent: 1,
                width: 300,
                fieldLabel: _T("notification", "alert_smtp_pass_confirm"),
                allowBlank: false
            }],
            onApiSuccess: function(d, c, b) {
                this.processReturnData(d, c, b);
                if ("set" === d) {
                    this.ownerCt.unmask();
                    this.ownerCt.close()
                }
            },
            processReturnData: function(e, d, c) {
                d.result.each(function(f) {
                    if ("SYNO.Core.Notification.Mail.Auth" !== f.api || "get" !== f.method) {
                        return
                    }
                    f.data.smtpauth = f.data.smtp_auth.enable;
                    f.data.smtpuser = f.data.smtp_auth.user;
                    if (f.data.smtp_auth.enable) {
                        f.data.smtppass = "12345678";
                        f.data.smtppass2 = "87654321"
                    }
                    delete f.data.smtp_auth
                });
                var b = this.getForm();
                if (c && Ext.isArray(c.compound)) {
                    b.loadRecords(d.result, c.compound)
                }
            },
            processParams: function(c, b) {
                if ("set" !== c) {
                    return b
                }
                b.each(function(d) {
                    if ("set" !== d.method) {
                        return
                    }
                    if ("SYNO.Core.Notification.Mail.Auth" === d.api) {
                        Ext.apply(d.params, {
                            smtp_auth: {
                                enable: d.params.smtpauth,
                                user: d.params.smtpuser,
                                pass: d.params.smtppass
                            }
                        });
                        delete d.params.smtpauth;
                        delete d.params.smtpuser;
                        delete d.params.smtppass;
                        delete d.params.smtppass2
                    }
                    return
                });
                return b
            }
        });
        return a
    },
    cleanPasswd: function() {
        this.formPanel.form.findField("smtppass").setValue("");
        this.formPanel.form.findField("smtppass").clearInvalid();
        this.formPanel.form.findField("smtppass2").setValue("");
        this.formPanel.form.findField("smtppass2").clearInvalid()
    },
    onClose: function() {
        if (this.formPanel.form.isDirty()) {
            if (confirm(_T("common", "confirm_lostchange"))) {
                return true
            }
            return false
        }
        return true
    },
    onClickSave: function() {
        if (!this.formPanel.form.isValid()) {
            return
        }
        if (!this.formPanel.form.isDirty()) {
            this.getMsgBox().alert(_T("tree", "leaf_notification"), _T("error", "nochange_subject"));
            return
        }
        this.getEl().mask(_T("common", "saving"));
        this.formPanel.applyForm()
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Network.IPv6Tunnel");
SYNO.SDS.AdminCenter.Network.IPv6Tunnel.getWebAPI = function() {
    var a = {
        api: "SYNO.Core.Network.IPv6Tunnel",
        method: "get",
        version: 1,
        callback: function(b) {
            Ext.each(b, function(e, c, d) {
                d[c].id = "ipv6tunnel";
                d[c].type = "ipv6tunnel";
                if (e.tunnel_connected) {
                    d[c].cls = "net-ipv6tunnel-connected";
                    d[c].status = "connected"
                } else {
                    d[c].cls = "net-ipv6tunnel-disconnected";
                    d[c].status = "disconnected"
                }
            })
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.IPv6Tunnel.getTpl = function(b) {
    var a = new Ext.XTemplate("<tpl if=\"values.type=='ipv6tunnel'\">", String.format(b, _T("tunnel", "tunnel_isp"), "{tunnel_isp:this.toEmptyDash}"), String.format(b, _T("tunnel", "tunnel_globalip"), "{tunnel_ip:this.toEmptyDash}"), "</tpl>");
    return a.html
};
SYNO.SDS.AdminCenter.Network.IPv6Tunnel.getBtnConfig = function() {
    var a = {
        editBtn: {
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.IPv6Tunnel.onEdit
        },
        deleteBtn: {
            isDisabled: true,
            handler: null
        },
        connectBtn: {
            text: function() {
                if ("disconnected" === this.selectedRecord.get("status")) {
                    return _T("vpnc", "connect")
                } else {
                    return _T("vpnc", "disconnect")
                }
            },
            isDisabled: false,
            handler: SYNO.SDS.AdminCenter.Network.IPv6Tunnel.onConnect
        }
    };
    return a
};
SYNO.SDS.AdminCenter.Network.IPv6Tunnel.onConnect = function() {
    var a = {};
    if ("disconnected" === this.selectedRecord.get("status")) {
        a.tunnel_enable = true;
        a.tunnel_auth = this.selectedRecord.get("tunnel_auth");
        a.tunnel_isp = this.selectedRecord.get("tunnel_isp");
        a.is_default_gateway = this.selectedRecord.get("is_default_gateway");
        if (a.tunnel_auth) {
            a.tunnel_username = this.selectedRecord.get("tunnel_username");
            a.tunnel_password = this.selectedRecord.get("tunnel_password")
        }
    } else {
        a.tunnel_enable = false;
        a.tunnel_auth = false
    }
    this.sendWebAPI({
        api: "SYNO.Core.Network.IPv6Tunnel",
        method: "set",
        version: 1,
        params: a,
        callback: function() {
            this.module.stopPolling();
            Ext.defer(this.module.startPolling, 2000, this.module)
        },
        scope: this
    });
    this.getTopToolbar().getComponent("connectBtn").disable();
    this.getTopToolbar().getComponent("editBtn").disable()
};
SYNO.SDS.AdminCenter.Network.IPv6Tunnel.onEdit = function() {
    this.module.stopPolling();
    var a;
    a = new SYNO.SDS.AdminCenter.Network.IPv6Tunnel.EditDialog({
        module: this.module,
        owner: this.module.appWin
    });
    a.addListener("destroy", function() {
        this.module.startPolling()
    }, this);
    a.open()
};
Ext.define("SYNO.SDS.AdminCenter.Network.IPv6Tunnel.EditDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        var b = this.fillConfig(a);
        this.callParent([b]);
        this.addListener("activate", this.onActivate, this)
    },
    fillConfig: function(a) {
        this.ipv6FormPanel = new SYNO.SDS.AdminCenter.Network.IPv6Tunnel.FormPanel({
            module: a.module
        });
        var b = Ext.apply({
            title: _T("common", "alt_edit"),
            width: 480,
            height: 450,
            resizable: false,
            layout: "fit",
            items: [this.ipv6FormPanel],
            buttons: [{
                xtype: "syno_button",
                text: _T("common", "alt_apply"),
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _T("common", "alt_cancel"),
                scope: this,
                handler: this.onCancel
            }]
        }, a);
        return b
    },
    onApply: function() {
        var a = this.ipv6FormPanel.getForm();
        if (!a.isDirty()) {
            this.setStatusError({
                text: _T("error", "nochange_subject"),
                clear: true
            });
            return false
        }
        this.setStatusBusy();
        this.disable();
        var b = a.getValues();
        b.tunnel_enable = a.findField("tunnel_enable").getValue();
        b.tunnel_auth = ("yes" === a.findField("tunnel_auth").getGroupValue()) ? true : false;
        if (b.is_default_gateway) {
            b.is_default_gateway = ("true" === b.is_default_gateway) ? true : false
        }
        this.sendWebAPI({
            api: "SYNO.Core.Network.IPv6Tunnel",
            method: "set",
            version: 1,
            params: b,
            callback: this.afterApply,
            scope: this
        })
    },
    afterApply: function(a, d, c) {
        this.enable();
        this.clearStatusBusy();
        if (!a) {
            SYNO.Debug("Failed to load interface info");
            var b = _T("common", "error_system");
            if (d.error && d.error.code) {
                b = SYNO.API.getErrorString(d.error.code)
            }
            this.setStatusError({
                text: b,
                clear: true
            });
            return false
        }
        this.close()
    },
    onCancel: function() {
        this.close()
    },
    onActivate: function() {
        this.setStatusBusy();
        this.disable();
        this.sendWebAPI({
            api: "SYNO.Core.Network.IPv6Tunnel",
            method: "get",
            version: 1,
            callback: this.onLoad,
            scope: this
        })
    },
    onLoad: function(a, d, c) {
        var b = this.ipv6FormPanel;
        if (!a || !d) {
            SYNO.Debug("Failed to load interface info");
            return false
        }
        b.setData(d);
        this.enable();
        this.clearStatusBusy()
    }
});
Ext.define("SYNO.SDS.AdminCenter.Network.IPv6Tunnel.FormPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        var b = Ext.apply({
            module: a.module,
            items: [{
                xtype: "syno_displayfield",
                value: _T("tunnel", "tunnel_intr")
            }, {
                xtype: "syno_checkbox",
                boxLabel: _T("tunnel", "tunnel_check"),
                name: "tunnel_enable"
            }, {
                indent: 1,
                xtype: "syno_checkbox",
                boxLabel: _T("network", "usbmodem_set_as_default_gw"),
                name: "is_default_gateway",
                hidden: this.showOldUI,
                checked: false
            }, {
                indent: 1,
                xtype: "syno_textfield",
                fieldLabel: _T("tunnel", "tunnel_isp"),
                name: "tunnel_isp",
                vtype: "iporhostname",
                allowBlank: false
            }, {
                indent: 1,
                xtype: "syno_radio",
                boxLabel: _T("tunnel", "tunnel_noauth"),
                name: "tunnel_auth",
                inputValue: "no"
            }, {
                indent: 1,
                xtype: "syno_radio",
                boxLabel: _T("tunnel", "tunnel_auth"),
                name: "tunnel_auth",
                inputValue: "yes"
            }, {
                indent: 2,
                xtype: "syno_textfield",
                fieldLabel: _T("tunnel", "tunnel_username"),
                name: "tunnel_username",
                maxlength: 256,
                allowBlank: false
            }, {
                indent: 2,
                xtype: "syno_textfield",
                textType: "password",
                fieldLabel: _T("tunnel", "tunnel_password"),
                name: "tunnel_password",
                maxlength: 256
            }, {
                xtype: "syno_displayfield",
                value: "&nbsp;"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("tunnel", "tunnel_status"),
                name: "tunnel_connected"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _T("tunnel", "tunnel_globalip"),
                name: "tunnel_ip"
            }]
        }, a);
        this.callParent([b]);
        this.on("afterlayout", function(c, d) {
            this.checkGroupTunnel = new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "tunnel_enable", ["is_default_gateway", "tunnel_isp", "tunnel_auth"]);
            this.checkGroupTunnelAuth = new SYNO.ux.Utils.EnableRadioGroup(this.getForm(), "tunnel_auth", {
                yes: ["tunnel_username", "tunnel_password"]
            })
        }, this, {
            single: true
        })
    },
    setData: function(a) {
        a.tunnel_auth = (true === a.tunnel_auth) ? "yes" : "no";
        this.getForm().setValues(a)
    }
});
Ext.ns("SYNO.SDS.AdminCenter.Wireless");
SYNO.SDS.AdminCenter.Wireless.ScheduleSelector = function() {
    var g, f, i;
    var c, h, j = new Ext.lib.Region(0, 0, 0, 0);
    this.init = function(n) {
        g = n;
        g.on("render", m)
    };

    function k() {
        c = [];
        g.all.each(function(n) {
            c[c.length] = n.getRegion()
        });
        h = g.el.getRegion()
    }

    function d() {
        return false
    }

    function e(n) {
        return true
    }

    function l(n) {
        g.on("containerclick", d, g, {
            single: true
        });
        if (!f) {
            f = g.el.createChild({
                cls: "x-view-selector"
            });
            f.setDisplayed(false)
        } else {
            if (f.dom.parentNode !== g.el.dom) {
                g.el.dom.appendChild(f.dom)
            }
        }
        k();
        g.clearSelections()
    }

    function b(t) {
        var u = i.startXY;
        var B = i.getXY();
        var z = Math.min(u[0], B[0]);
        var v = Math.min(u[1], B[1]);
        var A = Math.abs(u[0] - B[0]);
        var q = Math.abs(u[1] - B[1]);
        j.left = z;
        j.top = v;
        j.right = z + A;
        j.bottom = v + q;
        j.constrainTo(h);
        f.setRegion(j);
        for (var p = 0, s = c.length; p < s; p++) {
            var n = c[p],
                o = j.intersect(n);
            if (o && !n.selected) {
                n.selected = true;
                g.select(p, true)
            } else {
                if (!o && n.selected) {
                    n.selected = false;
                    g.deselect(p)
                }
            }
        }
    }

    function a(n) {
        if (!Ext.isIE) {
            g.un("containerclick", d, g)
        }
        if (f) {
            f.setDisplayed(false)
        }
        if (g.ownerCt && g.ownerCt.selectRecords) {
            g.ownerCt.selectRecords(g, c)
        }
    }

    function m(n) {
        i = new Ext.dd.DragTracker({
            onBeforeStart: e,
            onStart: l,
            onDrag: b,
            onEnd: a
        });
        i.initEl(n.el)
    }
};
Ext.ns("SYNO.SDS.AdminCenter.FileService.Util");
SYNO.SDS.AdminCenter.FileService.Util.getFailRespCompoundParam = function(b, d) {
    if (false === d.has_fail) {
        return null
    }
    if (!(d.result instanceof Array)) {
        return null
    }
    for (var c = 0; c < d.result.length; c++) {
        var a = d.result[c];
        if (b != a.api) {
            continue
        }
        if (false === a.success) {
            return a.error
        }
    }
    return null
};
Ext.namespace("SYNO.SDS.AdminCenter.FileService.AFP");
Ext.define("SYNO.SDS.AdminCenter.FileService.AFP.AdvancedSettingDialog", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.module = a.module;
        this.panel = this.configForm();
        var b = Ext.apply({
            title: _T("common", "adv_setting"),
            autoDestroy: true,
            width: 450,
            autoHeight: true,
            layout: "fit",
            border: false,
            items: [this.panel],
            buttons: [{
                btnStyle: "blue",
                disabled: this._S("demo_mode"),
                tooltip: this._S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : "",
                text: _T("common", "commit"),
                scope: this,
                handler: this.apply
            }, {
                btnStyle: "grey",
                text: _T("common", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b]);
        this.mon(this, "show", this.load, this)
    },
    load: function() {
        this.setStatusBusy({
            text: _T("common", "loading")
        });
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.AFP",
            method: "get",
            version: 1,
            scope: this,
            callback: function(c, b, a) {
                this.clearStatusBusy();
                if (c) {
                    this.panel.getForm().setValues(b)
                }
            }
        })
    },
    configForm: function() {
        var a = {
            border: false,
            trackResetOnLoad: true,
            height: 75,
            width: 250,
            labelWidth: 250,
            items: [{
                xtype: "syno_checkbox",
                name: "enable_umask",
                itemId: "enable_umask",
                boxLabel: _T("common", "apply_default_umask")
            }, {
                xtype: "syno_checkbox",
                name: "enable_afp",
                hidden: true
            }]
        };
        if (this._S("version") >= 5545) {
            a.items.push({
                xtype: "syno_checkbox",
                name: "enable_disconnect_quick",
                itemId: "enable_disconnect_quick",
                boxLabel: _T("network", "apple_quick_disconnect")
            })
        }
        SYNO.LayoutConfig.fill(a);
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    apply: function() {
        var a = this.panel.getForm();
        var b = a.getValues();
        if (!a.isValid()) {
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            });
            return false
        }
        if (!a.isDirty()) {
            this.close();
            return false
        }
        if (true === b.enable_afp) {
            this.confirmSubmit(b)
        } else {
            this.submit(b)
        }
        return true
    },
    confirmSubmit: function(a) {
        this.getMsgBox().confirm(_T("tree", "leaf_winmacnfs"), _T("network", "service_restart_warning") + " " + _T("common", "ask_cont"), function(d, c, b) {
            if ("yes" == d) {
                this.submit(a)
            }
        }, this)
    },
    submit: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.Core.FileServ.AFP",
            method: "set",
            version: 1,
            scope: this,
            params: a,
            callback: function(d, c, b) {
                this.clearStatusBusy();
                if (d) {
                    this.close();
                    return true
                } else {
                    this.setStatusError()
                }
            }
        })
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl");
SYNO.SDS.AdminCenter.HardwareControl.LedBrightnessScheduleDialog = Ext.extend(SYNO.SDS.ModalWindow, {
    constructor: function(b) {
        this.module = b.module;
        this.owner = b.owner;
        var a = {
            resizable: false,
            title: _T("led_brightness", "set_schedule"),
            items: [this.dialogPanel = this.createPanel()],
            width: 680,
            height: 400,
            buttons: [{
                text: _T("common", "alt_apply"),
                itemId: "apply",
                scope: this,
                btnStyle: "blue",
                handler: this.onApply
            }, {
                text: _T("common", "alt_cancel"),
                scope: this,
                btnStyle: "gray",
                handler: this.close
            }]
        };
        Ext.apply(a, b);
        SYNO.SDS.AdminCenter.HardwareControl.LedBrightnessScheduleDialog.superclass.constructor.call(this, a)
    },
    createPanel: function() {
        return new Ext.form.FormPanel({
            trackResetOnLoad: true,
            border: false,
            items: [{
                xtype: "syno_displayfield",
                value: _T("led_brightness", "schedule_tip_desc")
            }, this.ledSchedule = new SYNO.ux.ScheduleTable({
                name: "schedule_table",
                buttons: [{
                    label: _T("led_brightness", "schedule_led_default")
                }, {
                    label: _T("led_brightness", "schedule_led_adjust")
                }]
            })]
        })
    },
    onOpen: function() {
        SYNO.SDS.AdminCenter.HardwareControl.LedBrightnessScheduleDialog.superclass.onOpen.call(this)
    },
    onApply: function() {
        this.isApply = true;
        this.close()
    },
    getSchedule: function() {
        return this.ledSchedule.getSchedule()
    },
    setSchedule: function(a) {
        this.ledSchedule.setSchedule(a)
    }
});
Ext.namespace("SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm");
SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.LedBrightnessForm = Ext.extend(SYNO.ux.FieldSet, {
    formType: "ledBrightness",
    webapi: {
        api: "SYNO.Core.Hardware.Led.Brightness",
        methods: {
            get: "get",
            set: "set"
        },
        version: 1
    },
    constructor: function(b) {
        var a;
        this.module = b.module;
        a = Ext.apply({
            title: _T("led_brightness", "led_brightness_desc"),
            items: this.getItemList()
        }, b);
        SYNO.LayoutConfig.fill(a);
        SYNO.SDS.AdminCenter.HardwareControl.GeneralSettingForm.LedBrightnessForm.superclass.constructor.call(this, a);
        this.sendWebAPI({
            api: "SYNO.Core.Hardware.Led.Brightness",
            method: "get_static_data",
            version: 1,
            scope: this,
            callback: this.onSliderStaticDataRecieve
        })
    },
    getItemList: function() {
        return [{
            xtype: "syno_displayfield",
            value: _T("led_brightness", "adjust_tip_desc")
        }, {
            xtype: "syno_compositefield",
            hideLabel: true,
            height: 24,
            hidden: true,
            hideMode: "visibility",
            id: this.compositeFieldId = Ext.id(),
            items: [{
                xtype: "syno_displayfield",
                hideLabel: true,
                width: 24,
                height: 24,
                cls: "led-slider-icon-head"
            }, {
                xtype: "syno_sliderfield",
                name: "led_brightness",
                width: 295,
                increment: 1,
                minValue: 0,
                maxValue: 7,
                useTips: false,
                hideLabel: true,
                hasCalibration: true,
                id: this.sliderFieldId = Ext.id(),
                listeners: {
                    scope: this,
                    valuechange: this.onLedSliderValuechange,
                    destroy: this.updateLedBrightness,
                    render: function(a) {
                        this.addListener("expand", function() {
                            var b = a.slider.innerEl.child(".x-slider-thumb");
                            a.slider.halfThumb = (a.slider.vertical ? b.getHeight() : b.getWidth()) / 2;
                            a.slider.afterRender();
                            var c = a.slider.el.child(".syno-ux-slider-progress");
                            var d = a.slider.translateValue(a.slider.getValue() || 0) + a.slider.halfThumb;
                            c.setWidth(d, false)
                        })
                    },
                    afterrender: function(a) {
                        a.ledOffTip = new Ext.Tip({
                            html: _T("led_brightness", "slider_led_off")
                        });
                        a.ledOnTip = new Ext.Tip({
                            html: _T("led_brightness", "slider_led_default")
                        });
                        a.mon(a.slider.getEl(), {
                            mouseenter: function() {
                                a.isMouseInsideSlider = true;
                                a.updateTip()
                            },
                            mouseleave: function() {
                                a.isMouseInsideSlider = false;
                                a.updateTip()
                            }
                        });
                        a.slider.addListener("dragstart", function() {
                            a.isSliderDraging = true;
                            a.updateTip()
                        });
                        a.slider.addListener("dragend", function() {
                            a.isSliderDraging = false;
                            a.updateTip()
                        });
                        a.slider.removeListener("change", a.onSliderValueChanged, a);
                        a.slider.addListener("change", function() {
                            var b = a.slider.el.child(".syno-ux-slider-progress");
                            var c = a.slider.translateValue(a.slider.getValue() || 0) + a.slider.halfThumb;
                            if (a.isSliderDraging || a.slider.thumbs[0].dragging) {
                                b.setWidth(c, false)
                            } else {
                                b.setWidth(c, true)
                            }
                        });
                        new Ext.dd.DragTracker({
                            onStart: function(d) {
                                var c = false;
                                for (var b = 0; b < a.slider.thumbs.length; b++) {
                                    c = c || d.target == a.slider.thumbs[b].el.dom
                                }
                                if (false === c) {
                                    this.isDrag = true;
                                    a.slider.fireEvent("dragstart", a.slider, d, a.slider)
                                }
                            },
                            onDrag: function(d) {
                                if (this.isDrag) {
                                    var b = a.slider.thumbs[0].index;
                                    var f = a.slider.innerEl.translatePoints(this.getXY());
                                    var c = Ext.util.Format.round(a.slider.reverseValue(f.left), a.slider.decimalPrecision);
                                    a.slider.setValue(b, c, false);
                                    a.slider.fireEvent("drag", a.slider, d, a.slider)
                                }
                            },
                            onEnd: function(b) {
                                if (this.isDrag) {
                                    this.isDrag = false;
                                    a.slider.fireEvent("dragend", a.slider, b, a.slider)
                                }
                            },
                            tolerance: 3,
                            autoStart: 300
                        }).initEl(a.slider.getEl());
                        a.slider.thumbs[0].tracker.onDrag = function(h) {
                            var c = a.slider.thumbs[0];
                            var f = c.slider,
                                d = c.index,
                                g = c.getNewValue();
                            if (c.constrain) {
                                var b = c.slider.thumbs[d + 1];
                                var i = c.slider.thumbs[d - 1];
                                if (i !== undefined && g <= i.value) {
                                    g = i.value
                                }
                                if (b !== undefined && g >= b.value) {
                                    g = b.value
                                }
                            }
                            a.slider.setValue(d, g, false);
                            f.fireEvent("drag", f, h, c)
                        };
                        this.ownerCt.addListener("deactivate", this.updateLedBrightness)
                    }
                },
                updateTip: function() {
                    if (this.isSliderDraging || this.isMouseInsideSlider) {
                        if (this.slider.minValue === this.getValue()) {
                            this.ledOffTip.show();
                            this.ledOnTip.hide()
                        } else {
                            if (this.slider.maxValue === this.value) {
                                this.ledOffTip.hide();
                                this.ledOnTip.show()
                            } else {
                                this.ledOffTip.hide();
                                this.ledOnTip.hide()
                            }
                        }
                    } else {
                        this.ledOffTip.hide();
                        this.ledOnTip.hide()
                    }
                    if (this.ledOffTip.isVisible()) {
                        this.ledOffTip.setPosition([this.getPosition()[0] + 8 - (this.ledOffTip.getWidth() / 2), this.getPosition()[1] - 25])
                    }
                    if (this.ledOnTip.isVisible()) {
                        this.ledOnTip.setPosition([this.getPosition()[0] + this.getWidth() - 7 - (this.ledOnTip.getWidth() / 2), this.getPosition()[1] - 25])
                    }
                }
            }, {
                xtype: "syno_displayfield",
                hideLabel: true,
                width: 24,
                height: 24,
                cls: "led-slider-icon-tail"
            }]
        }, {
            xtype: "syno_displayfield",
            hideLabel: true,
            width: 400,
            height: 16,
            id: this.sliderScaleId = Ext.id()
        }, {
            xtype: "hidden",
            name: "schedule",
            id: this.ledScheduleFieldId = Ext.id()
        }, {
            xtype: "syno_button",
            text: _T("led_brightness", "set_schedule"),
            listeners: {
                scope: this,
                click: this.onLedBrightnessScheduleButtonClick
            }
        }]
    },
    onLedBrightnessScheduleButtonClick: function() {
        this.ledBrightnessScheduleDialog = new SYNO.SDS.AdminCenter.HardwareControl.LedBrightnessScheduleDialog({
            owner: this.module.appWin,
            module: this
        });
        this.ledBrightnessScheduleDialog.setSchedule(Ext.getCmp(this.ledScheduleFieldId).getValue());
        this.ledBrightnessScheduleDialog.on("close", this.onScheduleDialogClose, this);
        this.ledBrightnessScheduleDialog.open()
    },
    onScheduleDialogClose: function(a) {
        if (true === a.isApply) {
            Ext.getCmp(this.ledScheduleFieldId).setValue(a.getSchedule())
        }
    },
    onLedSliderValuechange: function(a, b) {
        this.sendWebAPI({
            api: "SYNO.Core.Hardware.Led.Brightness",
            method: "set_current_brightness",
            params: {
                led_brightness: b
            },
            version: 1
        });
        a.updateTip()
    },
    updateLedBrightness: function() {
        if (null !== this.originalBrightness) {
            this.sendWebAPI({
                api: "SYNO.Core.Hardware.Led.Brightness",
                method: "update",
                version: 1
            })
        }
    },
    onSliderStaticDataRecieve: function(g, e, d) {
        if (false === g) {
            return
        }
        var c;
        var f;
        switch (e.max - e.min + 1) {
            case 4:
                c = 195;
                f = "led-slider-scale-4";
                break;
            case 8:
                c = 295;
                f = "led-slider-scale-8";
                break;
            default:
                this.module.appWin.getMsgBox().alert("error", "LED brightness scale isn't defined", null, this);
                return
        }
        var a = Ext.getCmp(this.sliderFieldId);
        a.slider.setMinValue(e.min);
        a.slider.setMaxValue(e.max);
        a.setWidth(c);
        a.width = c;
        a.ownerCt.doLayout();
        var b = Ext.getCmp(this.sliderScaleId);
        b.getEl().addClass(f);
        Ext.getCmp(this.compositeFieldId).show()
    }
});